var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ums;
(function (ums) {
    ums.UMS = angular.module('UMS', [
        'ngRoute',
        'ngAnimate',
        'ui.bootstrap',
        'ui.router',
        'oc.lazyLoad',
        'LocalStorageModule',
        'ngCookies',
        'ngSanitize',
        'scrollable-table',
        'ui.sortable',
        'ngHandsontableApp',
        "dirPaginationApp",
        'ui.select',
        'ngMessages',
        'smart-table',
        'ngDeviceDetectorApp',
        'jqWidgetsApp',
        'toggle-switch',
        'ngTextTruncate',
        'angular.filter',
        'ui.grid',
        'ui.grid.selection',
        'ui.grid.exporter',
        'ngSanitize'
    ]).run(function (ExpireToken) {
    });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Constants = (function () {
        function Constants() {
        }
        Constants.Default = function () {
            return {
                Empty: "",
                initDept: [{ id: '', name: 'Select Dept./School' }],
                initProgram: [{ id: '', longName: 'Select a Program' }],
                initSemester: [{ id: '', name: 'Select a Semester' }],
                initSyllabus: [{ id: '', semester_name: 'Select a ', program_name: 'Syllabus' }],
                semesterStatus: [
                    { id: '', name: 'Select Semester Status' },
                    { id: '0', name: 'Inactive' },
                    { id: '1', name: 'Active' },
                    { id: '2', name: 'Newly Created' }
                ],
                courseType: [
                    { id: '', name: 'Select Course Type' },
                    { id: '1', name: 'Theory' },
                    { id: '2', name: 'Sessional' },
                    { id: '3', name: 'Thesis/Project' }
                ],
                paymentMode: [
                    { id: 0, name: 'Select Payment Mode' },
                    { id: 1, name: 'Cash' },
                    { id: 2, name: 'Demand note' },
                    { id: 3, name: 'Pay order' }
                ],
                courseCategory: [
                    { id: '', name: 'Select Course Category' },
                    { id: '1', name: 'Mandatory' },
                    { id: '2', name: 'Optional' }
                ],
                additionalRoleListCons: [
                    { id: 1, name: "Department Head" },
                    { id: 2, name: "Routine Committee" }
                ],
                academicYear: [
                    { id: '', name: 'Select Year' },
                    { id: '1', name: '1st Year' },
                    { id: '2', name: '2nd Year' },
                    { id: '3', name: '3rd Year' },
                    { id: '4', name: '4th Year' },
                    { id: '5', name: '5th Year' }
                ],
                academicSemester: [
                    { id: '', name: 'Select Semester' },
                    { id: '1', name: '1st Semester' },
                    { id: '2', name: '2nd Semester' }
                ],
                semesterType: [
                    { id: '', name: 'Select Semester' },
                    { id: '01', name: 'Spring' },
                    { id: '02', name: 'Fall' }
                ],
                gender: [
                    { id: '', name: 'Select Gender' },
                    { id: 'M', name: 'Male' },
                    { id: 'F', name: 'Female' }
                ],
                transcriptType: [
                    { id: '1', name: 'PROVISIONAL' },
                    { id: '2', name: 'MAIN' }
                ],
                programType: [
                    { id: '11', name: 'Undergraduate' },
                    { id: '22', name: 'Postgraduate' }
                ],
                deptShort: [
                    { id: '', name: 'Select Dept./School' },
                    { id: '01', name: 'ARC' },
                    { id: '02', name: 'BBA' },
                    { id: '03', name: 'CE' },
                    { id: '04', name: 'CSE' },
                    { id: '05', name: 'EEE' },
                    { id: '06', name: 'TE' },
                    { id: '07', name: 'MPE' },
                    { id: '15', name: 'AS' }
                ],
                deptLong: {
                    '01': 'Department of Architecture',
                    '02': 'School of Business',
                    '03': 'Department of Civil Engineering',
                    '04': 'Department of Computer Science and Engineering',
                    '05': 'Department of Electrical and Electronic Engineering',
                    '06': 'Department of Textile Engineering',
                    '07': 'Department of Mechanical & Production Engineering'
                },
                dept4JqGridSelectBox: ':None;07:MPE;06:TE;03:CE;05:EEE;04:CSE;02:SoB;01:ARC;73:CoE;72:RO;71:TO;75:PO;76:AoSW;74:KFRL;81:BoT;15:AS;70:OVC;77:UE;82:DoEF;83:IUMS;',
                days: ':None;1:Saturday;2:Sunday;3:Monday;4:Tuesday;5:Wednesday;6:Thursday;7:Friday',
                weekday: [
                    { id: "1", name: 'Saturday' },
                    { id: "2", name: 'Sunday' },
                    { id: "3", name: 'Monday' },
                    { id: "4", name: 'Tuesday' },
                    { id: "5", name: 'Wednesday' },
                    { id: "6", name: 'Thursday' },
                    { id: "7", name: 'Friday' }
                ],
                officeShort: {
                    '80': 'RO',
                    '81': 'CO',
                    '82': 'TO',
                    '83': 'EO',
                    '76': 'AoSW',
                    '85': 'PO',
                    '84': 'ICT'
                },
                officeLong: {
                    '80': 'Office of the Registrar',
                    '81': 'Office of the Controller of Examinations',
                    '82': 'Office of the Treasurer',
                    '83': 'Engineering Office',
                    '72': "Office of the Advisor of Student''s Welfare",
                    '85': 'Proctor Office',
                    '84': 'ICT'
                },
                status: {
                    '0': 'Inactive',
                    '1': 'Active'
                },
                examTime: [
                    { id: '9:30 a.m. to 12:30 p.m', name: '9:30 a.m. to 12:30 p.m' }
                ],
                bloodGroup: [
                    { id: '', name: 'Select Blood Group' },
                    { id: 'O+', name: 'O+' },
                    { id: 'O–', name: 'O-' },
                    { id: 'A+', name: 'A+' },
                    { id: 'A–	', name: 'A-' },
                    { id: 'B+', name: 'B+' },
                    { id: 'B–', name: 'B-' },
                    { id: 'AB+', name: 'AB+' },
                    { id: 'AB–', name: 'AB-' }
                ],
                ugDept: [
                    { id: '', name: 'Select Dept./School' },
                    { id: '01', name: 'ARC' },
                    { id: '02', name: 'BBA' },
                    { id: '03', name: 'CE' },
                    { id: '04', name: 'CSE' },
                    { id: '05', name: 'EEE' },
                    { id: '06', name: 'TE' },
                    { id: '07', name: 'MPE' }
                ],
                pgDept: [
                    { id: '', name: 'Select Dept./School' },
                    { id: '01', name: 'ARC' },
                    { id: '02', name: 'BBA' },
                    { id: '05', name: 'EEE' }
                ],
                timeChecker: [
                    {
                        id: '',
                        val: 'Select time'
                    },
                    {
                        id: '08:00 AM',
                        val: '08:00 AM'
                    },
                    {
                        id: '08:50 AM',
                        val: '08:50 AM'
                    },
                    {
                        id: '09:40 AM',
                        val: '09:40 AM'
                    },
                    {
                        id: '10:30 AM',
                        val: '10:30 AM'
                    },
                    {
                        id: '11:20 AM',
                        val: '11:20 AM'
                    },
                    {
                        id: '12:10 PM',
                        val: '12:10 PM'
                    },
                    {
                        id: '01:00 PM',
                        val: '01:00 PM'
                    },
                    {
                        id: '01:50 PM',
                        val: '01:50 PM'
                    },
                    {
                        id: '02:40 PM',
                        val: '02:40 PM'
                    },
                    {
                        id: '03:30 PM',
                        val: '03:30 PM'
                    },
                    {
                        id: '04:20 PM',
                        val: '04:20 PM'
                    },
                    {
                        id: '05:10 PM',
                        val: '05:10 PM'
                    },
                    {
                        id: '06:00 PM',
                        val: '06:00 PM'
                    }
                ],
                routineTime: [
                    {
                        counter: '1',
                        id: '08.00 AM'
                    },
                    {
                        counter: '2',
                        id: '08.50 AM'
                    },
                    {
                        counter: '3',
                        id: '09.40 AM'
                    },
                    {
                        counter: '4',
                        id: '10.30 AM'
                    },
                    {
                        counter: '5',
                        id: '11.20 AM'
                    },
                    {
                        counter: '6',
                        id: '12.10 PM'
                    },
                    {
                        counter: '7',
                        id: '01.00 PM'
                    },
                    {
                        counter: '8',
                        id: '01.50 PM'
                    },
                    {
                        counter: '9',
                        id: '02.40 PM'
                    },
                    {
                        counter: '10',
                        id: '03.30 PM'
                    },
                    {
                        counter: '11',
                        id: '04.20 PM'
                    },
                    {
                        counter: '12',
                        id: '05.10 PM'
                    },
                    {
                        counter: '13',
                        id: '06.00 PM'
                    }
                ],
                weekDays: [
                    {
                        id: '1',
                        name: 'Saturday'
                    },
                    {
                        id: '2',
                        name: 'Sunday'
                    },
                    {
                        id: '3',
                        name: 'Monday'
                    },
                    {
                        id: '4',
                        name: 'Tuesday'
                    },
                    {
                        id: '5',
                        name: 'Wednesday'
                    },
                    {
                        id: '6',
                        name: 'Thursday'
                    },
                    {
                        id: '7',
                        name: 'Friday'
                    }
                ],
                ugPrograms: [
                    {
                        deptId: '01',
                        programs: [
                            {
                                id: "110100",
                                shortName: "BSC in ARC",
                                /*longName: "Bachelor in Arch. Engineering"*/
                                longName: "Bachelor of Architecture"
                            }
                        ]
                    },
                    {
                        deptId: '02',
                        programs: [
                            {
                                id: "110200",
                                shortName: "BBA",
                                longName: "Bachelor in Business Administration"
                            }
                        ]
                    },
                    {
                        deptId: "03",
                        programs: [
                            {
                                id: "110300",
                                shortName: "BSC in CE",
                                longName: "Bachelor in Civil Engineering"
                            }
                        ]
                    },
                    {
                        deptId: "04",
                        programs: [
                            {
                                id: "110400",
                                shortName: "BSC in CSE",
                                longName: "Bachelor in Computer Science and Engineering"
                            }
                        ]
                    },
                    {
                        deptId: "05",
                        programs: [
                            {
                                id: "110500",
                                shortName: "BSC in EEE",
                                longName: "Bachelor in Electrical and Electronic Engineering"
                            }
                        ]
                    },
                    {
                        deptId: "06",
                        programs: [
                            {
                                id: "110600",
                                shortName: "BSC in TE",
                                longName: "Bachelor in Textile Engineering"
                            }
                        ]
                    },
                    {
                        deptId: "07",
                        programs: [
                            {
                                id: "110707",
                                shortName: "BSC in IPE",
                                longName: "Bachelor in Industrial and Production Engineering"
                            },
                            {
                                id: "110708",
                                shortName: "BSC in ME",
                                longName: "Bachelor in Mechanical Engineering"
                            }
                        ]
                    },
                    {
                        deptId: "07-ForExamRoutine",
                        programs: [
                            {
                                id: "110708",
                                shortName: "BSC in ME",
                                longName: "Bachelor in Mechanical Engineering"
                            }
                        ]
                    }
                ],
                pgPrograms: [],
                ugProgramMap: {
                    '110100': ['BSC in ARC'],
                    '110200': ['BBA'],
                    '110300': ['BSc in CE'],
                    '110400': ['BSc in CSE'],
                    '110500': ['BSc in EEE'],
                    '110600': ['BSc in TE'],
                    '110707': ['BSc in IPE'],
                    '110708': ['BSc in ME']
                },
                programs: [
                    { id: 0, name: 'Select Program' },
                    { id: 110100, name: 'Bsc in ARC' },
                    { id: 110200, name: 'BBA' },
                    { id: 110300, name: 'Bsc in CE' },
                    { id: 110400, name: 'Bsc in CSE' },
                    { id: 110500, name: 'Bsc in EEE' },
                    { id: 110600, name: 'Bsc in TE' },
                    { id: 110707, name: 'Bsc in IPE' },
                    { id: 110708, name: 'Bsc in ME' }
                ],
                optionalCourseYearSemester: {
                    '110200': [{ 'year': '4', 'semester': '1' }, { 'year': '4', 'semester': '2' }],
                    '110400': [{ 'year': '4', 'semester': '2' }],
                    '110500': [{ 'year': '4', 'semester': '1' }, { 'year': '4', 'semester': '2' }],
                    '110600': [{ 'year': '4', 'semester': '1' }, { 'year': '4', 'semester': '2' }],
                    '110707': [{ 'year': '4', 'semester': '1' }, { 'year': '4', 'semester': '2' }],
                    '110708': [{ 'year': '4', 'semester': '1' }, { 'year': '4', 'semester': '2' }]
                },
                theorySectionsGrid: ":None;A:A;B:B;C:C;D:D",
                theorySections: [
                    { id: "A", name: "A" },
                    { id: "B", name: "B" },
                    { id: "C", name: "C" },
                    { id: "D", name: "D" }
                ],
                sessionalSectionsGrid: ":NONE;A1:A1;B1:B1;C1:C1;D1:D2;A2:A2;B2:B2;C2:C2;D2:D2",
                sessionalSectionsGrid2: ";A1:A1;B1:B1;C1:C1;D1:D2;A2:A2;B2:B2;C2:C2;D2:D2",
                sessionalSections: [
                    { id: "A1", name: "A1" },
                    { id: "B1", name: "B1" },
                    { id: "C1", name: "C1" },
                    { id: "D1", name: "D1" },
                    { id: "A2", name: "A2" },
                    { id: "B2", name: "B2" },
                    { id: "C2", name: "C2" },
                    { id: "D2", name: "D2" }
                ],
                sessionalSectionsA: [
                    { id: "A", name: "A" },
                    { id: 'A1', name: 'A1' },
                    { id: 'A2', name: 'A2' },
                    { id: "A1/A2", name: "A1/A2" }
                ],
                sessionalSectionsB: [
                    { id: "B", name: "B" },
                    { id: 'B1', name: 'B1' },
                    { id: 'B2', name: 'B2' },
                    { id: "B1/B2", name: "B1/B2" }
                ], sessionalSectionsC: [
                    { id: "C", name: "C" },
                    { id: 'C1', name: 'C1' },
                    { id: 'C2', name: 'C2' },
                    { id: "C1/C2", name: "C1/C2" }
                ], sessionalSectionsD: [
                    { id: "D", name: "D" },
                    { id: 'D1', name: 'D1' },
                    { id: 'D2', name: 'D2' },
                    { id: "D1/D2", name: "D1/D2" }
                ],
                sectionTypes: [
                    { id: 0, name: "Select Section Type" },
                    { id: 1, name: "Theory" },
                    { id: 2, name: "Sessional" }
                ],
                mimeTypeJson: 'application/json',
                mimeTypePdf: 'application/pdf',
                semesterEnrollmentTypes: [
                    { id: "", name: "Select Enrollment Type" },
                    { id: "0", name: "Temporary" },
                    { id: "1", name: "Permanent" }
                ],
                meritListTypes: [
                    { id: "1", name: "GL" },
                    { id: "2", name: "FF" },
                    { id: "3", name: "RA" },
                    { id: "4", name: "GCE" }
                ],
                quotaTypes: [
                    { id: "1", name: "General " },
                    { id: "2", name: "Freedom Fighter " },
                    { id: "3", name: "Remote Area " },
                    { id: "4", name: "English Medium " }
                ],
                genericMeritType: [
                    { id: 1, name: "General" },
                    { id: 2, name: "Quota" }
                ],
                applicationTypes: [
                    { id: "", name: "Select Application Type" },
                    { id: "0", name: "Academic" },
                    { id: "1", name: "Semester Withdraw" },
                    { id: "2", name: "Optional Course Selection" }
                ],
                absentPresentStatus: [
                    { id: 1, name: "Absent" },
                    { id: 2, name: "Late Coming" }
                ], absPreRemarks: [
                    { id: 1, name: "Did not inform" },
                    { id: 2, name: "Inform" }
                ], amPmType: [
                    { id: 1, name: "AM" },
                    { id: 2, name: "PM" }
                ],
                actors: [
                    { id: "0", name: "Student" },
                    { id: "1", name: "Head" },
                    { id: "2", name: "Deputy Registrar" },
                    { id: "3", name: "Registrar" },
                    { id: "4", name: "Assistant Admin Officer" },
                    { id: "5", name: "Vice Chancellor" }
                ],
                applicationStatus: [
                    { id: "0", name: "Saved" },
                    { id: "1", name: "Submitted" },
                    { id: "2", name: "Approved" },
                    { id: "3", name: "Rejected" }
                ],
                coeReportType: [
                    { id: 2, name: "Clearance" },
                    { id: 3, name: "Carry" },
                    { id: 4, name: "Special Carry" },
                    { id: 5, name: "Improvement" },
                    { id: 6, name: "Readmission" }
                ],
                regType: [
                    { id: 1, name: "Regular" },
                    { id: 2, name: "Clearance" },
                    { id: 3, name: "Carry" },
                    { id: 4, name: "Special Carry" },
                    { id: 5, name: "Improvement" }
                ], examType: [
                    { id: 1, name: "Regular" },
                    { id: 2, name: "Carry/Clearance/Improvement" }
                ],
                verifiedRegisteredStudentStatus: [
                    { id: "All", name: "All" },
                    { id: "R", name: "Regular" },
                    { id: "RA", name: "Readmitted" },
                    { id: "CR", name: "Carry Registration" }
                ],
                cciStatus: [
                    { id: "2", name: "Waiting for head's approval" },
                    { id: "3", name: "Approved by the head" },
                    { id: "4", name: "Rejected by head" },
                    { id: "7", name: "Waiting for payment" },
                    { id: "8", name: "Payment Completed" }
                ],
                productCategory: [
                    { id: "1", name: "Stationary" },
                    { id: "2", name: "Furniture and Machine" },
                    { id: "3", name: "Computer and Multi Media projector" }
                ],
                defaulterTypes: [
                    { id: 1, name: "Semester Adjustment" },
                    { id: 2, name: "Drop Adjustment" },
                    { id: 3, name: "Defaulter" },
                    { id: 4, name: "Adjustment" }
                ],
                responseTypes: {
                    'ERROR': 'ERROR',
                    'SUCCESS': 'SUCCESS',
                    'INFO': 'INFO',
                    'WARN': 'WARN'
                },
                gradeLetters: [
                    { id: "A+", name: "A+" },
                    { id: "A", name: "A" },
                    { id: "A-", name: "A-" },
                    { id: "B+", name: "B+" },
                    { id: "B", name: "B" },
                    { id: "B-", name: "B-" },
                    { id: "C+", name: "C+" },
                    { id: "C", name: "C" },
                    { id: "D", name: "D" },
                    { id: "F", name: "F" }
                ],
                marksSubmissionStatus: [
                    { id: "-1", name: "All" },
                    { id: "0", name: "Not Submitted" },
                    { id: "1", name: "Waiting for Scrutiny" },
                    { id: "2", name: "Requested for recheck by Scrutinizer" },
                    { id: "3", name: "Waiting for Head's Approval" },
                    { id: "4", name: "Requested for recheck by Head" },
                    { id: "5", name: "Waiting for CoE's Approval" },
                    { id: "6", name: "Requested for recheck by CoE" },
                    { id: "7", name: "Accepted by CoE" },
                    { id: "8", name: "Waiting for recheck request approval" }
                ],
                marksSubmissionStatusEnum: {
                    NOT_SUBMITTED: 0,
                    WAITING_FOR_SCRUTINY: 1,
                    REQUESTED_FOR_RECHECK_BY_SCRUTINIZER: 2,
                    WAITING_FOR_HEAD_APPROVAL: 3,
                    REQUESTED_FOR_RECHECK_BY_HEAD: 4,
                    WAITING_FOR_COE_APPROVAL: 5,
                    REQUESTED_FOR_RECHECK_BY_COE: 6,
                    ACCEPTED_BY_COE: 7,
                    WAITING_FOR_RECHECK_REQUEST_APPROVAL: 8
                },
                marksStatusEnum: {
                    NONE: 0,
                    SUBMIT: 1,
                    SUBMITTED: 2,
                    SCRUTINIY: 3,
                    SCRUTINIZED: 4,
                    APPROVE: 5,
                    APPROVED: 6,
                    ACCEPT: 7,
                    ACCEPTED: 8
                },
                courseRegType: {
                    REGULAR: 1,
                    CLEARANCE: 2,
                    CARRY: 3,
                    SPECIAL_CARRY: 4,
                    IMPROVEMENT: 5,
                    SPECIAL_IMPROVEMENT: 6
                },
                regColorCode: {
                    CLEARANCE: "#BBFFFF",
                    CARRY: "#CCCCFF",
                    SPECIAL_CARRY: "#00FF00",
                    IMPROVEMENT: "#FFF68F"
                },
                programTypeEnum: {
                    UG: 11,
                    PG: 22
                },
                mstParameterAdditionalRole: {
                    TEACHING_EVALUATION_DATELINE: 2,
                    OPTIONAL_COURSE_DATELINE: 3
                },
                ugProgramEnum: {
                    ARC: 110100,
                    BBA: 110200,
                    CE: 110300,
                    CSE: 110400,
                    EEE: 110500,
                    TE: 110600,
                    IPE: 110707,
                    ME: 110708
                },
                yearSemester: [
                    { id: "0", name: "Select Year-Semester" },
                    { id: "11", name: "1-1" },
                    { id: "12", name: "1-2" },
                    { id: "21", name: "2-1" },
                    { id: "22", name: "2-2" },
                    { id: "31", name: "3-1" },
                    { id: "32", name: "3-2" },
                    { id: "41", name: "4-1" },
                    { id: "42", name: "4-2" },
                    { id: "51", name: "5-1" },
                    { id: "52", name: "5-2" }
                ],
                opYearSemester: [
                    { id: "41", name: "4-1" },
                    { id: "42", name: "4-2" }
                ],
                semester: [
                    { id: 1, name: "1st Semester" },
                    { id: 2, name: "2nd Semester" }
                ],
                year: [
                    { id: 1, name: "1st Year" },
                    { id: 2, name: "2nd Year" },
                    { id: 3, name: "3rd Year" },
                    { id: 4, name: "4th Year" },
                    { id: 5, name: "5th Year" }
                ],
                leaveApprovalStatus: [
                    { id: 1, name: "Waiting for head's approval" },
                    { id: 2, name: "Waiting For Registrar's Approval" },
                    { id: 3, name: "Rejected By Head" },
                    { id: 4, name: "Waiting For VC's Approval" },
                    { id: 5, name: "Rejected By Registrar" },
                    { id: 6, name: "Rejected by VC" },
                    { id: 7, name: "Application Approved" },
                    { id: 8, name: "All" }
                ],
                carryApprovalStatus: [
                    { id: 1, name: "Waiting for head's approval" },
                    { id: 2, name: "Approved By Head" },
                    { id: 3, name: "Rejected By Head" },
                    { id: 4, name: "Payment Completed" }
                ],
                feeList: [
                    { id: 34, name: "PASSWORD_RESET" }
                ],
                courseTypeTES: [
                    { id: 1, name: "Theory" }
                ], observationTypeTes: [
                    { id: 1, name: "Class Room Observation" },
                    { id: 2, name: "Non-Class Room Observation" },
                    { id: 3, name: "Non Teaching Observation" }
                ], deptForTes: [
                    { id: '01', name: 'ARC' },
                    { id: '02', name: 'BBA' },
                    { id: '03', name: 'CE' },
                    { id: '04', name: 'CSE' },
                    { id: '05', name: 'EEE' },
                    { id: '06', name: 'TE' },
                    { id: '07', name: 'MPE' },
                    { id: '15', name: 'ARS' },
                    { id: '08', name: 'All Department Teacher Evaluation List' },
                    { id: '09', name: 'Maximum Score Holder of All Dept' },
                    { id: '10', name: 'Minimum Score Holder of All Dept' },
                    { id: '11', name: 'Faculty of Engineering' }
                ], progShortName: [
                    { id: '110100', name: 'ARC' },
                    { id: '110200', name: 'BBA' },
                    { id: '110300', name: 'CE' },
                    { id: '110400', name: 'CSE' },
                    { id: '110500', name: 'EEE' },
                    { id: '110600', name: 'TE' },
                    { id: '110707', name: 'IPE' },
                    { id: '110708', name: 'ME' }
                ], facultyEngineering: [
                    { id: '03', name: 'CE' },
                    { id: '04', name: 'CSE' },
                    { id: '05', name: 'EEE' },
                    { id: '06', name: 'TE' },
                    { id: '07', name: 'MPE' }
                ], facultyBusinessAndSocial: [
                    { id: '02', name: 'BBA' },
                    { id: '15', name: 'ARS' }
                ], facultyArchitecture: [
                    { id: '01', name: 'ARC' }
                ],
                departmentOffice: [
                    { id: '01', name: 'Department of Architecture' },
                    { id: '02', name: 'School of Business' },
                    { id: '03', name: 'Department of Civil Engineering' },
                    { id: '04', name: 'Department of Computer Science and Engineering' },
                    { id: '05', name: 'Department of Electrical and Electronic Engineering' },
                    { id: '06', name: 'Department of Textile Engineering' },
                    { id: '07', name: 'Department of Mechanical & Production Engineering' },
                    { id: '15', name: 'Department of Arts and Sciences' },
                    { id: '70', name: 'Office of VC' },
                    { id: '71', name: 'Office of the Treasurer' },
                    { id: '72', name: 'Office of the Registrar' },
                    { id: '73', name: 'Office of the Controller of Examinations' },
                    { id: '74', name: 'Kazi Fazlur Rahman Library' },
                    { id: '75', name: 'Office of the Proctor' },
                    { id: '76', name: "Office of the Advisor of Student's Welfare" },
                    { id: '77', name: "Office of the University Engineer" },
                    { id: '82', name: "Office of the Dean of Engineering Faculty" },
                    { id: '83', name: "Project for Integrated University Management System" },
                    { id: '84', name: "ICT Center" }
                ],
                certificateStatus: [
                    { id: 1, name: 'Applied' },
                    { id: 2, name: 'Processed' },
                    { id: 3, name: 'Delivered' },
                    { id: 4, name: "Waiting for Head's Approval" },
                    { id: 5, name: "Forwarded by Head" }
                ],
                employeeTypes: [
                    { id: 1, name: "Teacher" },
                    { id: 2, name: "Officer" },
                    { id: 3, name: "Staff" }
                ],
                academicEmployeeTypes: [
                    { id: 1, name: "Teacher" },
                    { id: 2, name: "Officer" },
                    { id: 3, name: "Staff" }
                ],
                officialEmployeeTypes: [
                    { id: 2, name: "Officer" },
                    { id: 3, name: "Staff" }
                ],
                feeGroup: [
                    { id: 1, name: 'UG New Admission' },
                    { id: 2, name: 'UG Semester Fee' },
                    { id: 3, name: 'UG Semester Fee (1st Installment)' },
                    { id: 4, name: 'UG Semester Fee (2nd Installment' },
                    { id: 5, name: 'UG Re-admission Fee' },
                    { id: 6, name: 'UG Re-admission Fee (1st Installment)' },
                    { id: 7, name: 'UG Re-admission Fee (2nd Installment)' },
                    { id: 8, name: 'Carry Registration' },
                    { id: 9, name: 'Dues' },
                    { id: 10, name: 'Grade Sheet' },
                    { id: 11, name: 'Carry Application' },
                    { id: 12, name: 'Proctor Punishment Fee' },
                    { id: 13, name: 'Improvement Application' },
                    { id: 14, name: 'Clearance Application' },
                    { id: 15, name: 'Password Reset Fee' },
                    { id: 16, name: 'Admission Application Fee' },
                    { id: 17, name: 'Convocation Fee' }
                ],
                MARKS_SUBMISSION_STATUS: {
                    NOT_SUBMITTED: 0,
                    WAITING_FOR_SCRUTINY: 1,
                    REQUESTED_FOR_RECHECK_BY_SCRUTINIZER: 2,
                    WAITING_FOR_HEAD_APPROVAL: 3,
                    REQUESTED_FOR_RECHECK_BY_HEAD: 4,
                    WAITING_FOR_COE_APPROVAL: 5,
                    REQUESTED_FOR_RECHECK_BY_COE: 6,
                    ACCEPTED_BY_COE: 7,
                    WAITING_FOR_RECHECK_REQUEST_APPROVAL: 8
                },
                TASK_STATUS: {
                    INPROGRESS: "INPROGRESS",
                    COMPLETED: "COMPLETED",
                    NONE: "NONE"
                },
                RESULT_PROCESS_STATUS: {
                    NONE: {
                        id: 0,
                        label: "None"
                    },
                    IN_PROGRESS: {
                        id: 1,
                        label: "Process in progress"
                    },
                    PROCESSED_ON: {
                        id: 2,
                        label: "Processed on"
                    },
                    UNPROCESSED: {
                        id: 3,
                        label: "Unprocessed"
                    },
                    READY_TO_BE_PROCESSED: {
                        id: 4,
                        label: "Ready to be processed"
                    },
                    STATUS_UNDEFINED: {
                        id: 5,
                        label: "Status undefined"
                    },
                    RESULT_PUBLISH_INPROGRESS: {
                        id: 6,
                        label: "Result publish in progress"
                    },
                    RESULT_PUBLISHED: {
                        id: 7,
                        label: "Result published"
                    },
                    PARTIALLY_PROCESSED: {
                        id: 8,
                        label: "Result partially processed"
                    },
                    PROCESSED: {
                        id: 9,
                        label: "Result processed"
                    },
                    PARTIALLY_PUBLISHED: {
                        id: 10,
                        label: "Result partially published"
                    }
                },
                deptAll: {
                    id: '-1',
                    label: 'All'
                },
                programAll: {
                    id: -1,
                    label: 'All'
                },
                offenceCategory: [
                    { id: 1, name: "Major" },
                    { id: 2, name: "Minor" }
                ],
                punishmentType: [
                    { id: 0, name: "None" },
                    { id: 1, name: "Warning" },
                    { id: 2, name: "Semester" },
                    { id: 3, name: "Money" },
                    { id: 4, name: "Semester & Money" },
                    { id: 5, name: "For Good or Studentship Cancel" }
                ]
            };
        };
        Constants.LeaveConstants = function () {
            return {
                leaveApprovalStatus: [
                    { id: 1, name: "Waiting for head's approval" },
                    { id: 2, name: "Waiting For Registrar's Approval" },
                    { id: 3, name: "Rejected by Head" },
                    { id: 4, name: "Waiting for VC's approval" },
                    { id: 5, name: "Rejected By Registrar" },
                    { id: 6, name: "Rejected by VC" },
                    { id: 7, name: "Application Approved" }
                ]
            };
        };
        Constants.AccountConstant = function () {
            return {
                groupTypes: [
                    { id: "1", name: "Assets" },
                    { id: "2", name: "Fund & Liabilities" },
                    { id: "3", name: "Income" },
                    { id: "4", name: "Expenses" },
                    { id: "5", name: "Bank Accounts" },
                    { id: "6", name: "Cash in hand" },
                    { id: "7", name: "Sundry Debtor" },
                    { id: "8", name: "Sundry Creditor" },
                    { id: "9", name: "Current Liabilities" },
                    { id: "10", name: "Tution Fees & Other Student Fees" }
                ],
                accountTypes: [
                    { id: 1, name: "Engineering Program Account" },
                    { id: 2, name: "Business Program Account" },
                    { id: 3, name: "Convocation Program Account" },
                    { id: 4, name: "Provident Fund Account" },
                    { id: 5, name: "Student Welfare Fund Account" },
                    { id: 6, name: "Yearly Registration/Enrollment Fees" },
                    { id: 7, name: "Tuition/Course Fees" },
                    { id: 8, name: "Various Activities Fees" },
                    { id: 9, name: "Laboratory Fees" },
                    { id: 10, name: "Transcript or Certificate Fees" },
                    { id: 11, name: "Surplus From Joint Program" },
                    { id: 12, name: "Late Fine" },
                    { id: 13, name: "Convocation Fees" },
                    { id: 14, name: "Hand Book and Academic Material Sales" },
                    { id: 15, name: "Other Income" },
                    { id: 16, name: "Admission Fee" },
                    { id: 17, name: "Transportation Fee" },
                    { id: 18, name: "Admission Applicant" }
                ],
                financialYearCloseTransferType: [
                    { id: 1, name: 'All accounts closing' },
                    { id: 2, name: 'Bank & Cash Closing' },
                    { id: 3, name: 'Transfer without closing' }
                ]
            };
        };
        Constants.LibConstant = function () {
            return {
                languages: [
                    { id: 101101, name: 'Select a Language' },
                    { id: 1, name: 'English' },
                    { id: 2, name: 'Bengali' },
                    { id: 3, name: 'French' },
                    { id: 4, name: 'Chinese' },
                    { id: 5, name: 'Russian' },
                    { id: 6, name: 'Spanish' },
                    { id: 7, name: 'German' },
                    { id: 8, name: 'Japanese' },
                    { id: 9, name: 'Hindi' },
                    { id: 10, name: 'Urdu' },
                    { id: 11, name: 'Arabic' },
                    { id: 12, name: 'Sanskrit' }
                ],
                bindingTypes: [
                    { id: 101101, name: 'Select Binding Type' },
                    { id: 1, name: 'Hard Bound' },
                    { id: 2, name: 'Soft Cover' },
                    { id: 3, name: 'Paperback' },
                    { id: 4, name: 'Clip Binding' },
                    { id: 5, name: 'Gum Paste Binding' },
                    { id: 6, name: 'Cloth Binding' }
                ],
                acquisitionTypes: [
                    { id: 101101, name: 'Select Acquisition Type' },
                    { id: 1, name: 'Purchase' },
                    { id: 2, name: 'Donation' }
                ],
                libContributorRoles: [
                    { id: 101101, name: 'Select a Role' },
                    { id: 1, name: 'Author' },
                    { id: 2, name: 'Co-Author' },
                    { id: 3, name: 'Editor' },
                    { id: 4, name: 'Compiler' },
                    { id: 5, name: 'Translator' },
                    { id: 6, name: 'Composer' },
                    { id: 7, name: 'Illustrator' },
                    { id: 8, name: 'Cartographer' },
                    { id: 9, name: 'Corporate Author' }
                ],
                recordStatus: [
                    { id: 101101, name: 'Select Status' },
                    { id: 0, name: 'Entry Mode' },
                    { id: 2, name: 'Available' }
                ],
                itemStatus: [
                    { id: 101101, name: 'Select a Status' },
                    { id: 2, name: 'Available' },
                    { id: 3, name: 'On Hold' }
                ],
                materialTypes: [
                    { id: 101101, name: 'Select Material Type' },
                    { id: 1, name: 'Book' },
                    { id: 2, name: 'Journal' },
                    { id: 3, name: 'Thesis/Project' }
                ],
                journalFrequency: [
                    { id: 101101, name: 'Select Frequency' },
                    { id: 1, name: 'Weekly' },
                    { id: 15, name: 'Bi-Weekly' },
                    { id: 30, name: 'Monthly ' },
                    { id: 360, name: 'Yearly' }
                ],
                gmdOptions: [
                    { id: 101101, name: "Select Category" },
                    { id: 1, name: "GMD" },
                    { id: 2, name: "SMD" }
                ],
                currencyTypes: [
                    { id: 1, name: 'BDT' },
                    { id: 2, name: 'INR' },
                    { id: 3, name: 'USD' },
                    { id: 4, name: 'EUR' },
                    { id: 5, name: 'GBP' }
                ]
            };
        };
        Constants.RegistrarConstant = function () {
            return {
                genderTypes: [
                    { id: 'M', name: 'Male' },
                    { id: 'F', name: 'Female' }
                ],
                socialLinkType: [
                    { id: 1, name: 'Facebook' },
                    { id: 2, name: 'Linkedin' },
                    { id: 3, name: 'Twitter' },
                    { id: 4, name: 'Other' }
                ],
                religionTypes: [
                    { id: 1, name: "Islam" },
                    { id: 2, name: "Buddhism" },
                    { id: 3, name: "Hinduism" },
                    { id: 4, name: "Jainism" },
                    { id: 5, name: "Judaism" },
                    { id: 6, name: "Sikhism" },
                    { id: 7, name: "Christian" },
                    { id: 99, name: "Others" }
                ],
                nationalityTypes: [
                    { id: 1, name: "Bangladeshi" },
                    { id: 99, name: "Others" }
                ],
                bloodGroupTypes: [
                    { id: 1, name: "A+" },
                    { id: 2, name: "A-" },
                    { id: 3, name: "B+" },
                    { id: 4, name: "B-" },
                    { id: 5, name: "AB+" },
                    { id: 6, name: "AB-" },
                    { id: 7, name: "O+" },
                    { id: 8, name: "O-" }
                ],
                publicationTypes: [
                    { id: 1, name: "Conference Proceedings" },
                    { id: 2, name: "Journal Article" },
                    { id: 3, name: "Book" },
                    { id: 4, name: "Others" }
                ],
                maritalStatuses: [
                    { id: 1, name: "Single" },
                    { id: 2, name: "Married" }
                ],
                degreeLevel: [
                    { id: 10, name: "PSC/5 Pass" },
                    { id: 20, name: "JSC/JDC/8 Pass" },
                    { id: 110, name: "Secondary" },
                    { id: 120, name: "Higher Secondary" },
                    { id: 1010, name: "Diploma" },
                    { id: 1110, name: "Bachelor/Honors" },
                    { id: 10010, name: "Masters" },
                    { id: 100010, name: "PhD (Doctor of Philosophy)" }
                ],
                relationTypes: [
                    { id: 1, name: "Spouse" },
                    { id: 2, name: "Aunt" },
                    { id: 3, name: "Brother" },
                    { id: 4, name: "Brother-in-law" },
                    { id: 5, name: "Colleague" },
                    { id: 6, name: "Cousin" },
                    { id: 7, name: "Daughter" },
                    { id: 8, name: "Daughter-in-law" },
                    { id: 9, name: "Employee" },
                    { id: 10, name: "Father" },
                    { id: 11, name: "Father-in-law" },
                    { id: 12, name: "Friend" },
                    { id: 13, name: "Grand Father" },
                    { id: 14, name: "Grand Mother" },
                    { id: 15, name: "Grand Son" },
                    { id: 16, name: "Mother" },
                    { id: 17, name: "Mother-in-law" },
                    { id: 18, name: "Nephew" },
                    { id: 19, name: "Niece" },
                    { id: 20, name: "Sister" },
                    { id: 21, name: "Sister-in-law" },
                    { id: 22, name: "Son" },
                    { id: 23, name: "Son-in-law" },
                    { id: 99, name: "Others" }
                ],
                employmentTypes: [
                    { id: 1, name: "Regular" },
                    { id: 2, name: "Contract" },
                    { id: 4, name: "Part-Time(PT)" },
                    { id: 5, name: "Part-Time Full Load(PTFL)" }
                ],
                servicePeriods: [
                    { id: 1, name: "Contractual" },
                    { id: 2, name: "Probation" },
                    { id: 3, name: "Permanent" },
                    { id: 4, name: "Contract" },
                    { id: 5, name: "Add-Hoc" }
                ],
                trainingCategories: [
                    { id: 10, name: "Local" },
                    { id: 20, name: "Foreign" }
                ],
                experienceCategories: [
                    { id: 10, name: "Job" },
                    { id: 20, name: "Research" }
                ],
                empStatus: [
                    { id: 0, name: "Inactive" },
                    { id: 1, name: "Active" },
                    { id: 2, name: "On Leave" }
                ],
                empCreateStatus: [
                    { id: 0, name: "Pending" },
                    { id: 1, name: "Approved" },
                    { id: 2, name: "Declined" }
                ],
                iumsAccountCreationType: [
                    { id: 1, name: "Create Account and Send Email" },
                    { id: 2, name: "Create Account but Do Not Send Email" },
                    { id: 3, name: "Do Not Create Account" }
                ],
                salutationTypes: [
                    { id: 1, name: "Mr." },
                    { id: 2, name: "Ms." },
                    { id: 3, name: "Dr." },
                    { id: 4, name: "Prof. Dr." }
                ],
                committeeTypes: [
                    { id: 1, name: "By Act & AUST Statutory" },
                    { id: 2, name: "By Authorities" }
                ],
                committeeMemberStatus: [
                    { id: 1, name: "Active" },
                    { id: 2, name: "Inactive" }
                ],
                committeeMemberDesignation: [
                    { id: 1, name: "President" },
                    { id: 2, name: "Members" },
                    { id: 3, name: "Secretary" },
                    { id: 4, name: "Member-Secretary" }
                ],
                invitedMemberTypes: [
                    { id: 1, name: "Regular" },
                    { id: 2, name: "Additional" }
                ],
                attendanceStatus: [
                    { id: 0, name: "none" },
                    { id: 1, name: "Present" },
                    { id: 2, name: "Absent" }
                ],
                categories: [
                    { id: 1, name: "Department" },
                    { id: 2, name: "Office" }
                ],
                joiningIntervals: [
                    { id: 1, name: "Forenoon" },
                    { id: 2, name: "Afternoon" }
                ],
                serviceEndIntervals: [
                    { id: 0, name: "Not Applicable" },
                    { id: 1, name: "Forenoon" },
                    { id: 2, name: "Afternoon" }
                ],
                serviceEndTypes: [
                    { id: 0, name: "Service not ended" },
                    { id: 1, name: "Resign" },
                    { id: 2, name: "Termination" },
                    { id: 3, name: "Death" },
                    { id: 4, name: "Retirement" },
                    { id: 5, name: "Release" },
                    { id: 9, name: "Others" }
                ],
                committeeOrganizerStatus: [
                    { id: 1, name: "Active" },
                    { id: 0, name: "Inactive" }
                ],
                agendaResolutionStatus: [
                    { id: 1, name: "No Action" },
                    { id: 2, name: "Hold" },
                    { id: 3, name: "Unhold" }
                ],
                invitationType: [
                    { id: 1, name: "Non Guest" },
                    { id: 2, name: "Guest" }
                ]
            };
        };
        return Constants;
    }());
    ums.Constants = Constants;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Utils = (function () {
        function Utils() {
        }
        Utils.findIndex = function (source_arr, element_value) {
            var targetIndex = -1;
            for (var i = 0; i < source_arr.length; i++) {
                if (source_arr[i].id == element_value) {
                    targetIndex = i;
                    break;
                }
            }
            return targetIndex;
        };
        /*
         This is how you should use this function.
         var index = findIndexByKeyValue(studentsArray, "name", "tanmay");
         alert(index);
         */
        Utils.findIndexByProperty = function (arrayToSearch, property, valueToSearch) {
            for (var i = 0; i < arrayToSearch.length; i++) {
                if (arrayToSearch[i][property] == valueToSearch) {
                    return i;
                }
            }
            return null;
        };
        Utils.arrayMaxIndex = function (array) {
            var val = 0;
            if (array.length != 0)
                val = Math.max.apply(Math, array.map(function (o) {
                    return o.index;
                })) + 1;
            return val;
        };
        Utils.getSessionalSection = function (theorySectionName) {
            if (theorySectionName == this.THEORY_SECTION_A) {
                return ums.Constants.Default().sessionalSectionsA;
            }
            else if (theorySectionName == this.THEORY_SECTION_B) {
                return ums.Constants.Default().sessionalSectionsB;
            }
            else if (theorySectionName == this.THEORY_SECTION_C) {
                return ums.Constants.Default().sessionalSectionsC;
            }
            else {
                return ums.Constants.Default().sessionalSectionsD;
            }
        };
        Utils.expandRightDiv = function () {
            $("#leftDiv").hide(100);
            $("#arrowDiv").show(50);
        };
        Utils.setValidationOptions = function (formClass) {
            $("." + formClass).validate({
                errorPlacement: function (error, element) {
                    error.insertAfter(element);
                },
                unhighlight: function (element, errorClass) {
                    var $element = $(element);
                    $element.siblings(".error_status").removeClass("check");
                },
                success: function (label, element) {
                    label.parent().removeClass('state-error');
                    label.remove();
                }
            });
        };
        /**
         * Get Id from location Header URL
         */
        Utils.getIdFromUrl = function (url) {
            var resourceUrl = url;
            var startIndex = url.lastIndexOf('/') + 1;
            var lastIndex = resourceUrl.length;
            return url.substring(startIndex, lastIndex);
        };
        /**
         * Set Select2 Value from parentElement and Search Term
         */
        Utils.setSelect2Value = function (parentElementId, targetElementId, searchTerm) {
            $('#' + parentElementId).find('.select2-input').each(function (index) {
                var inputElement = $(this)[0];
                var inputElementId = inputElement.id;
                $("#" + targetElementId).select2("search", searchTerm);
                var e = jQuery.Event("keydown");
                e.which = 13;
                $("#" + inputElementId).trigger(e);
            });
        };
        /*
             *
             * stringToDate("17/9/2014","dd/MM/yyyy","/");
             stringToDate("9/17/2014","mm/dd/yyyy","/")
             stringToDate("9-17-2014","mm-dd-yyyy","-")
        */
        Utils.stringToDate = function (_date, _format, _delimiter) {
            var formatLowerCase = _format.toLowerCase();
            var formatItems = formatLowerCase.split(_delimiter);
            var dateItems = _date.split(_delimiter);
            var monthIndex = formatItems.indexOf("mm");
            var dayIndex = formatItems.indexOf("dd");
            var yearIndex = formatItems.indexOf("yyyy");
            var month = parseInt(dateItems[monthIndex]);
            month -= 1;
            var formatedDate = new Date(dateItems[yearIndex], month, dateItems[dayIndex]);
            return formatedDate;
        };
        Utils.getDateObject = function (dateString) {
            var dateArray = dateString.split("-" || "/");
            var newDate = dateArray[1] + "/" + dateArray[0] + "/" + dateArray[2];
            return new Date(newDate);
        };
        Utils.convertFromJacksonDate = function (dateString) {
            var dateArray = dateString.split("-" || "/");
            var newDate = dateArray[2] + "-" + dateArray[1] + "-" + dateArray[0];
            return newDate;
        };
        Utils.getYearRange = function () {
            var yearArray = [];
            var startingYear = 1900;
            var currentYear = new Date().getFullYear();
            for (var i = startingYear; i <= currentYear; i++) {
                yearArray.push(i);
            }
            return yearArray;
        };
        Utils.getDateDiffInDays = function (fromDate, toDate, bias) {
            var b = moment(fromDate, 'DD/MM/YYYY'), a = moment(toDate, 'DD/MM/YYYY'), intervals = ['years', 'months', 'days'], out = [];
            a.add(bias, 'days');
            return a.diff(b, 'days');
        };
        Utils.getFormattedDateDiff = function (fromDate, toDate, bias) {
            var b = moment(fromDate, 'DD/MM/YYYY'), a = moment(toDate, 'DD/MM/YYYY'), intervals = ['years', 'months', 'days'], out = [];
            a.add(bias, 'days');
            for (var i = 0; i < intervals.length; i++) {
                var diff = a.diff(b, intervals[i]);
                b.add(diff, intervals[i]);
                out.push(diff + ' ' + intervals[i]);
            }
            return out.join(' ');
        };
        Utils.validateDateInput = function (fromDate, toDate, bias) {
            var b = moment(fromDate, 'DD/MM/YYYY'), a = moment(toDate, 'DD/MM/YYYY');
            return a.add(bias, 'days').isAfter(b);
        };
        Utils.getFormattedCurrentDate = function () {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var modifiedDD = "";
            var modifiedMM = "";
            var modifiedDate = "";
            var yyyy = today.getFullYear();
            if (dd < 10) {
                modifiedDD = '0' + dd;
            }
            else {
                modifiedDD = dd.toString();
            }
            if (mm < 10) {
                modifiedMM = '0' + mm;
            }
            else {
                modifiedMM = mm.toString();
            }
            modifiedDate = modifiedDD + '/' + modifiedMM + '/' + yyyy;
            return modifiedDate;
        };
        Utils.isNullOrUndefined = function (value) {
            return (value == null || value === null || typeof value === 'undefined');
        };
        Utils.disableButton = function (buttonId) {
            $("#" + buttonId).addClass("disabled");
            $("#" + buttonId).attr("disabled", true);
        };
        Utils.enableButton = function (buttonId) {
            $("#" + buttonId).removeClass("disabled");
            $("#" + buttonId).attr("disabled", false);
        };
        Utils.changeColor = function (elementId, type) {
            if (type == "S")
                $("#" + elementId).css("background-color", "#FADBD8");
            else
                $("#" + elementId).css("background-color", "");
        };
        Utils.isEmptyObject = function (value) {
            return Object.keys(value).length === 0;
        };
        Utils.APPROVED = "#FFFFCC";
        Utils.APPLICATION = "#CCFFCC";
        Utils.APPROVED_APPLICATION = "#E0FFFF";
        Utils.NONE = "none";
        Utils.UG = 11;
        Utils.PG = 22;
        Utils.DEFAULT_SEMESTER_COUNT = 10;
        Utils.USER_ADMIN = "sadmin";
        Utils.TRANSACTION_TYPE_SINGLE = 1;
        Utils.TRANSACTION_TYPE_SPLITTED = 2;
        Utils.SHORT_MONTH_ARR = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
        /*
         *Status code for Optional Course Status Fields
         * Database Table: Optional_Course_Application
         * Field: Status
         */
        Utils.SCODE_APPLIED = 0;
        Utils.SCODE_APPROVED = 1;
        Utils.SCODE_REJECTED = 2;
        Utils.SCODE_REJECTED_AND_SHIFTED = 3;
        /**
         * Exam Type
         * Regular 1
         * CCI 2
         */
        Utils.EXAM_TYPE_REGULAR = 1;
        Utils.EXAM_TYPE_CCI = 2;
        /**
         * Exam Method
         * Online 1
         * Offline 2
         */
        Utils.EXAM_METHOD_ONLINE = 1;
        Utils.EXAM_METHOD_OFFLINE = 2;
        /*
        * Application Type
        * */
        Utils.APPLICATION_TYPE_REGULAR = 1;
        Utils.APPLICATION_TYPE_CLEARANCE = 2;
        Utils.APPLICATION_TYPE_CARRY = 3;
        Utils.APPLICATION_TYPE_SPECIAL_CARRY = 4;
        Utils.APPLICATION_TYPE_IMPROVEMENT = 5;
        Utils.APPLICATION_TYPE_LEAVE = 6;
        /*
         * Course Type*/
        Utils.COURSE_TYPE_THEORY = 1;
        Utils.COURSE_TYPE_SESSIONAL = 2;
        /**
         * Semester Status
         */
        Utils.SEMESTER_STATUS_INACTIVE = 0;
        Utils.SEMESTER_STATUS_ACTIVE = 1;
        Utils.SEMESTER_STATUS_NEWLY_CREATED = 2;
        Utils.SEMESTER_FETCH_ALL = 3;
        Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED = 4;
        Utils.SEMESTER_FETCH_ALL_WITH_UPCOMING = 5;
        /*
         * Leave Application Status
         * */
        Utils.LEAVE_APPLICATION_SAVED = 1;
        Utils.LEAVE_APPLICATION_ACCEPTED = 3;
        Utils.LEAVE_APPLICATION_PENDING = 2;
        Utils.LEAVE_APPLICATION_REJECTED = 4;
        /*
         * Leave Application Approval Status
         * */
        Utils.LEAVE_APPLICATION_WAITING_FOR_HEADS_APPROVAL = 1;
        Utils.LEAVE_APPLICATION_WAITING_FOR_REGISTRARS_APPROVAL = 2;
        Utils.LEAVE_APPLICATION_REJECTED_BY_HEAD = 3;
        Utils.LEAVE_APPLICATION_WAITING_FOR_VC_APPROVAL = 4;
        Utils.LEAVE_APPLICATION_REJECTED_BY_REGISTRAR = 5;
        Utils.LEAVE_APPLICATION_REJECTED_BY_VC = 6;
        Utils.LEAVE_APPLICATION_APPROVED = 7;
        Utils.LEAVE_APPLICATION_ALL = 8;
        /*
         * Role Types
         * */
        Utils.REGISTRAR = 7201;
        Utils.STUDENT = 1011;
        Utils.S_ADMIN = 9999;
        Utils.COE = 7301;
        Utils.IUMS_SECRETARY = 9011;
        Utils.TEACHER = 1021;
        Utils.ASSISTANT_ADMINISTRATIVE_OFFICER = 1041;
        Utils.ASSISTANT_ADMINISTRATIVE_OFFICER_COE = 7303;
        Utils.ASSISTANT_ADMINISTRATIVE_OFFICER_REG = 7204;
        Utils.ASSISTANT_ADMINISTRATIVE_OFFICER_LIB = 7403;
        Utils.ASSISTANT_ADMINISTRATIVE_OFFICER_SW = 7602;
        Utils.DP_REGISTRAR = 1022;
        Utils.DEPT_HEAD = 1022;
        Utils.VC = 7001;
        Utils.DP_COE = 7302;
        Utils.UG_ADMISSION_CHAIRMAN = 9961;
        Utils.DEAN = 1023;
        Utils.PROCTOR = 7401;
        Utils.TREASURER = 7101;
        Utils.UNIVERSITY_ENGINEER = 7801;
        Utils.LIBRARIAN = 7701;
        Utils.ICT_DIRECTOR = 8888;
        Utils.SYSTEM_ENGINEER = 9971;
        /*
         * Department Offices
         * */
        Utils.DEPT_MPE = '07';
        Utils.DEPT_TE = '06';
        Utils.DEPT_CE = '03';
        Utils.DEPT_EEE = '05';
        Utils.DEPT_CSE = '04';
        Utils.DEPT_BBA = '02';
        Utils.DEPT_ARC = '01';
        Utils.DEPT_COE = '73';
        Utils.DEPT_RO = '72';
        Utils.DEPT_TO = '82';
        Utils.DEPT_EO = '83';
        Utils.DEPT_AOSW = '84';
        Utils.DEPT_PO = '85';
        Utils.DEPT_AS = 'AS';
        Utils.DEPT_OVC = '99';
        Utils.DEPT_ALL = '9999';
        /*
         * Programs
         * */
        Utils.UG_ARCH = 110100;
        Utils.UG_CE = 110300;
        Utils.UG_CSE = 110400;
        Utils.UG_EEE = 110500;
        Utils.UG_BBA = 110200;
        /*
         * Present status during department selection
         *
         * */
        Utils.ABSENT = 0;
        Utils.PRESENT = 1;
        /*
         * Department selection type
         * */
        Utils.MERIT_PROGRAM_SELECTED = 1;
        Utils.MERIT_WAITING_PROGRAMS_SELECTED = 2;
        Utils.WAITING_PROGRAM_SELECTED = 3;
        /*
         * Migration status*/
        Utils.NOT_MIGRATED = 1;
        Utils.MIGRATION_ABLE = 2;
        Utils.MIGRATED = 3;
        /*
        * Employee Type
        * */
        Utils.TEACHER_TYPE = 1;
        Utils.OFFICER_TYPE = 2;
        Utils.STAFF_TYPE = 3;
        Utils.TOP_MANAGEMENT_TYPE = 9;
        /*
         * Quota type for admission*/
        Utils.GENERAL = 1;
        Utils.FREEDOM_FIGHTER = 2;
        Utils.REMOTE_AREA = 3;
        Utils.ENGLISH_MEDIUM = 4;
        /*
         *Payment Types
         * */
        Utils.ADMISSION_FEE = 1;
        Utils.MIGRATION_FEE = 2;
        /*
         * Payment Modes*/
        Utils.CASH = 1;
        Utils.DEMAND_NOTE = 2;
        Utils.PAY_ORDER = 3;
        /*Fee Type*/
        Utils.SEMESTER_FEE = 1;
        Utils.CERTIFICATE_FEE = 2;
        Utils.DUES = 3;
        Utils.PENALTY = 4;
        Utils.OTHER_FEE = 0;
        Utils.DEPT_CERTIFICATE_FEE = 5;
        Utils.REG_CERTIFICATE_FEE = 6;
        Utils.PROC_CERTIFICATE_FEE = 7;
        /**
         * Student Id block colors (Advisor Assignment from Admin Officer Account)
         */
        Utils.DEFAULT_COLOR = "#DEF";
        Utils.SELECTED_COLOR = "#FADBD8";
        /**
         * Grade Submission Yellow Error Row Color
         */
        Utils.ERROR_ROW = "#FCDC3B";
        Utils.SEARCH_ROW = "#A2D9CE";
        /**
         * Dropdown(SelectBox) Default Selected Value
         */
        Utils.NUMBER_SELECT = 101101;
        Utils.STRING_SELECT = "";
        /**
         * Theory Sections
         */
        Utils.THEORY_SECTION_A = "A";
        Utils.THEORY_SECTION_B = "B";
        Utils.THEORY_SECTION_C = "C";
        Utils.THEORY_SECTION_D = "D";
        Utils.SUCCESS = "Success";
        Utils.ERROR = "Error";
        /**
         * Attachment Type
         */
        Utils.ATTACHMENT_TYPE_FOR_COMMITTEE_MODULE = '1';
        Utils.ATTACHMENT_TYPE_FOR_MEETING_MODULE = '2';
        Utils.ATTACHMENT_TYPE_FOR_PROCTOR_MODULE = '3';
        return Utils;
    }());
    ums.Utils = Utils;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var BaseUri = (function () {
        function BaseUri(servicePath) {
            this.servicePath = servicePath;
            this.baseURI = new URI().pathname(this.getServicePath()).username(null).password(null).search(null).fragment(null);
        }
        BaseUri.prototype.toRelative = function (url) {
            if (!url) {
                return null;
            }
            var uri = new URI(url);
            if (!uri.is('relative')) {
                uri = uri.username(null).password(null).relativeTo(this.baseURI);
            }
            return uri.toString();
        };
        BaseUri.prototype.toAbsolute = function (url) {
            if (!url) {
                return null;
            }
            var uri = new URI(url);
            if (!uri.is('absolute')) {
                uri = uri.username(null).password(null).absoluteTo(this.baseURI);
            }
            return uri.toString();
        };
        BaseUri.prototype.getBaseURI = function () {
            return this.baseURI;
        };
        BaseUri.prototype.getServicePath = function () {
            return this.servicePath;
        };
        return BaseUri;
    }());
    ums.BaseUri = BaseUri;
    var BaseUriProvider = (function () {
        function BaseUriProvider() {
            this.servicePath = "/";
        }
        BaseUriProvider.prototype.setServicePath = function (path) {
            this.servicePath = path;
        };
        BaseUriProvider.prototype.$get = function () {
            return new BaseUri(this.servicePath);
        };
        return BaseUriProvider;
    }());
    ums.BaseUriProvider = BaseUriProvider;
    ums.UMS.provider('BaseUri', BaseUriProvider);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Notify = (function () {
        function Notify() {
            $.notify.defaults({
                position: 'top center'
            });
        }
        Notify.prototype.show = function (message) {
            $.notify(message.message, message.responseType.toLowerCase());
        };
        Notify.prototype.success = function (pMessage, autoHide) {
            $.notify(pMessage, 'success');
        };
        Notify.prototype.error = function (pMessage, autoHide) {
            if (!autoHide) {
                $.notify(pMessage, {
                    className: 'error',
                    autoHide: autoHide
                });
            }
            else {
                $.notify(pMessage, 'error');
            }
        };
        Notify.prototype.info = function (pMessage, autoHide) {
            $.notify(pMessage, 'info');
        };
        Notify.prototype.warn = function (pMessage, autoHide) {
            $.notify(pMessage, 'warn');
        };
        return Notify;
    }());
    ums.Notify = Notify;
    ums.UMS.service('notify', Notify);
})(ums || (ums = {}));
/// <reference path='BaseUri.ts' />
var ums;
(function (ums) {
    var HttpClient = (function () {
        function HttpClient($http, baseURI, $window) {
            this.$http = $http;
            this.baseURI = baseURI;
            this.$window = $window;
            this.resetAuthenticationHeader();
            this.getCurrentLocation();
        }
        HttpClient.prototype.getCurrentLocation = function () {
            var _this = this;
            navigator.geolocation.getCurrentPosition(function (position) {
                var currentPosition = 'latitude:' + position.coords.latitude + ', longitude:' + position.coords.longitude;
                _this.location = currentPosition;
            });
        };
        HttpClient.prototype.get = function (url, contentType, success, error, responseType) {
            var config = {
                headers: {
                    'Accept': contentType,
                    'Location': this.location
                }
            };
            if (responseType) {
                config.responseType = responseType;
            }
            var promise = this.$http.get(this.baseURI.toAbsolute(url), config);
            promise.then(function (response) {
                success(response.data, response.headers('Etag'), response.headers);
            }, error);
        };
        HttpClient.prototype.post = function (url, data, contentType, fileName, responseType) {
            var config = {
                headers: {
                    'Location': this.location,
                    'Content-Type': contentType
                }
            };
            if (fileName) {
                config.headers['X-ums-media-filename'] = fileName;
            }
            if (responseType) {
                config.responseType = responseType;
            }
            return this.$http.post(this.baseURI.toAbsolute(url), data, config);
        };
        HttpClient.prototype.put = function (url, stream, contentType, etag) {
            return this.$http.put(this.baseURI.toAbsolute(url), stream, {
                headers: {
                    'Content-Type': contentType,
                    'If-Match': etag == null ? "*" : etag,
                    'Location': this.location
                }
            });
        };
        HttpClient.prototype.doDelete = function (url) {
            return this.$http['delete'](this.baseURI.toAbsolute(url));
        };
        HttpClient.prototype.options = function (url) {
            return this.$http({
                method: 'OPTIONS',
                url: this.baseURI.toAbsolute(url)
            });
        };
        HttpClient.offline = function (status) {
            return status == 0 || (status >= 502 && status <= 504);
        };
        HttpClient.prototype.poll = function (url, contentType, success, error, responseType) {
            var token = this.$http.defaults.headers.common['Authorization'];
            $.ajax(this.baseURI.toAbsolute(url), {
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("Authorization", token);
                    xhr.setRequestHeader("Accept", contentType);
                },
                error: function (response) {
                    if (error) {
                        error(response);
                    }
                },
                success: function (data) {
                    success(data, "");
                },
                type: 'GET'
            });
        };
        HttpClient.prototype.resetAuthenticationHeader = function () {
            console.log('TOKEN_KEY :' + this.$window.sessionStorage.getItem(ums.TOKEN_KEY));
            if (this.$window.sessionStorage.getItem(ums.TOKEN_KEY) === undefined || this.$window.sessionStorage.getItem(ums.TOKEN_KEY) == null || this.$window.sessionStorage.getItem(ums.TOKEN_KEY) == "" ||
                this.$window.sessionStorage.getItem(ums.TOKEN_KEY) == 'undefined') {
                this.credentials = null;
            }
            else {
                this.credentials = JSON.parse(this.$window.sessionStorage.getItem(ums.TOKEN_KEY));
            }
            if (this.credentials != null) {
                this.$http.defaults.headers.common['Authorization'] = this.credentials.access_token;
            }
        };
        HttpClient.MIME_TYPE_JSON = 'application/json';
        HttpClient.MIME_TYPE_PDF = 'application/pdf';
        HttpClient.MIME_TYPE_TEXT = 'text/html';
        HttpClient.$inject = [
            '$http',
            'BaseUri',
            '$window'
        ];
        return HttpClient;
    }());
    ums.HttpClient = HttpClient;
    ums.UMS.service('HttpClient', HttpClient);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var FileUpload = (function () {
        function FileUpload(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        FileUpload.prototype.uploadFile = function (file, contentType, fileName, uploadUri) {
            this.httpClient.post(uploadUri, file, contentType, fileName)
                .success(function () {
            })
                .error(function () {
            });
        };
        FileUpload.prototype.uploadPhoto = function (formData) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "profilePicture/upload";
            this.httpClient.post(url, formData, undefined)
                .success(function (response) {
                _this.notify.success("Uploaded Successfully");
                defer.resolve(response);
            }).error(function (data) {
                _this.notify.error("Upload Failed.");
                defer.resolve(data);
            });
            return defer.promise;
        };
        FileUpload.prototype.uploadAttachment = function (divId, id, attachmentType, additionalPath) {
            var _this = this;
            var specifiedPath = additionalPath ? additionalPath : "";
            var content = $("#" + divId).contents();
            var files = content.prevObject[0].files;
            if (files.length > 0) {
                this.getFormData(files).then(function (formData) {
                    _this.upload(formData, id, attachmentType, specifiedPath);
                });
            }
        };
        /*
      * @author: evana
      * @dated: 21-04-2022
      * @File Upload based on agenda and resolution
      * */
        FileUpload.prototype.uploadSpecificAttachment = function (divId, id, fileContext, attachmentType, additionalPath) {
            var _this = this;
            var specifiedPath = additionalPath ? additionalPath : "";
            var content = $("#" + divId).contents();
            var files = content.prevObject[0].files;
            if (files.length > 0) {
                this.getFormData(files).then(function (formData) {
                    _this.contextWiseUpload(formData, id, attachmentType, fileContext, specifiedPath);
                });
            }
        };
        FileUpload.prototype.getFormData = function (files) {
            var formData = new FormData();
            for (var i = 0; i < files.length; i++) {
                formData.append(files[i].name, files[i], files[i].name);
            }
            var defer = this.$q.defer();
            defer.resolve(formData);
            return defer.promise;
        };
        FileUpload.prototype.upload = function (formData, entityId, attachmentTypeId, additionalPath) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "attachment";
            this.httpClient.post(url + "?attachmentTypeId=" + attachmentTypeId + "&appId=" + entityId + "&additionalPath=" + additionalPath, formData, undefined)
                .success(function (response) {
                _this.notify.success("Attachment uploaded successfully");
                console.log(response);
                defer.resolve(response);
            }).error(function (data) {
                _this.notify.error("Attachment upload failed.");
                defer.resolve(data);
            });
            return defer.promise;
        };
        /*
       * @author: evana
       * @coded: 21-04-22
       * @description: Upload context wise file uploading of MMS
       * */
        FileUpload.prototype.contextWiseUpload = function (formData, entityId, attachmentTypeId, fileContext, additionalPath) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "attachment/contextBaseUpload";
            this.httpClient.post(url + "?attachmentTypeId=" + attachmentTypeId + "&appId=" + entityId + "&fileContext=" + fileContext + "&additionalPath=" + additionalPath, formData, undefined)
                .success(function (response) {
                _this.notify.success("Attachment uploaded successfully");
                console.log(response);
                defer.resolve(response);
            }).error(function (data) {
                _this.notify.error("Attachment upload failed.");
                defer.resolve(data);
            });
            return defer.promise;
        };
        /*
       * @author: evana
       * @coded: 16-05-22
       * @description: Delete file from MMS
       * */
        /*
        public deleteFileById(attachmentId: string, fileType: string, fileName: string): void {
            // let fileName = attachment.fileName;
            // let contentType: string = 'application/pdf';
            let contentType: string = fileType;
            this.httpClient.delete("attachment/delete/attachmentId/" + attachmentId,
                contentType, (data: any, etag: string) => {
                   // UmsUtil.writeFileContent(data, contentType, fileName);
                    this.notify.success("Attachment deleted successfully");
                },
                (response: ng.IHttpPromiseCallbackArg<any>) => {
                    console.error(response);
                }, 'arraybuffer');
        }

         */
        FileUpload.prototype.fetch = function (moduleId, entityId) {
            var defer = this.$q.defer();
            var url = "attachment/module/" + moduleId + "/entityId/" + entityId;
            this.httpClient.get(url, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        FileUpload.prototype.getAttachment = function (attachmentId) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "attachment/" + attachmentId;
            this.httpClient.get(url, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in fetching attachment information");
            });
            return defer.promise;
        };
        FileUpload.prototype.downloadFile = function (attachment) {
            var fileName = attachment.fileName;
            var contentType = attachment.fileType;
            this.httpClient.get("attachment/download/attachmentId/" + attachment.id, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        FileUpload.prototype.downloadFileById = function (attachmentId, fileType, fileName) {
            // let fileName = attachment.fileName;
            // let contentType: string = 'application/pdf';
            var contentType = fileType;
            this.httpClient.get("attachment/download/attachmentId/" + attachmentId, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        FileUpload.$inject = ['HttpClient', '$q', 'notify'];
        return FileUpload;
    }());
    ums.FileUpload = FileUpload;
    ums.UMS.service("FileUpload", FileUpload);
})(ums || (ums = {}));
/**
 * Created by Monjur-E-Morshed on 17-Dec-16.
 */
var ums;
(function (ums) {
    var AdmissionStudentService = (function () {
        function AdmissionStudentService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        AdmissionStudentService.prototype.fetchTaletalkData = function (semesterId, programType) {
            console.log("in the service");
            console.log(programType);
            var url = "academic/admission/taletalkData/semester/" + semesterId + "/programType/" + programType;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudents = json.entries;
                defer.resolve(admissionStudents);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.fetchMigrationData = function (semesterId, quotaType) {
            var url = "academic/admission/migrationList/semester/" + semesterId + "/quota/" + quotaType;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudents = json.entries;
                defer.resolve(admissionStudents);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.fetchCancellationData = function (semesterId) {
            var url = "academic/admission/cancel-list/semester-id/" + semesterId;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.fetchAdmissionStudentByReceiptId = function (semesterId, programType, receiptId, quota) {
            var url = "academic/admission/semester/" + semesterId + "/programType/" + programType + "/receiptId/" + receiptId + "/quota/" + quota;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudent = json.entries;
                console.log(admissionStudent);
                defer.resolve(admissionStudent[0]);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.fetchAdmissionStudentBySerialNo = function (receiptId) {
            var url = "academic/admission/receiptId/" + receiptId;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudent = json.entries;
                console.log(admissionStudent);
                defer.resolve(admissionStudent[0]);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.fetchAdmissionStudentByStudentId = function (studentId) {
            var url = "academic/admission/student-id/" + studentId;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                defer.resolve(json.entries[0]);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.fetchAdmissionStudentByMeritSerialNo = function (semesterId, quotaType, meritSerialNo) {
            var url = "academic/admission/semester/" + semesterId + "/quota/" + quotaType + "/meritSerialNo/" + meritSerialNo;
            var defer = this.$q.defer();
            if (meritSerialNo != 0) {
                this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                    var admissionStudent = json.entries;
                    console.log(admissionStudent);
                    defer.resolve(admissionStudent[0]);
                }, function (response) {
                    console.error(response);
                });
            }
            return defer.promise;
        };
        AdmissionStudentService.prototype.fetchTaletalkDataWithMeritType = function (semesterId, programType, meritTypeId, unit) {
            var url = "academic/admission/taletalkData/semester/" + semesterId + "/programType/" + programType + "/unit/" + unit + "/meritType/" + meritTypeId;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudents = json.entries;
                defer.resolve(admissionStudents);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.fetchStudentsByMeritRange = function (semesterId, quotaType, fromMeritSerialNumber, toMeritSerialNumber) {
            var url = "academic/admission/semester/" + semesterId + "/quota/" + quotaType + "/fromMeritSerialNumber/" + fromMeritSerialNumber + "/toMeritSerialNumber/" + toMeritSerialNumber;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudents = json.entries;
                defer.resolve(admissionStudents);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.fetchMeritList = function (semesterId, programType, meritTypeId, unit) {
            var url = "academic/admission/meritList/semester/" + semesterId + "/programType/" + programType + "/unit/" + unit + "/meritType/" + meritTypeId;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudents = json.entries;
                defer.resolve(admissionStudents);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.fetchStatistics = function (semesterId, programType, meritTypeId, unit) {
            var url = "academic/admission/statistics/semester/" + semesterId + "/programType/" + programType + "/unit/" + unit + "/meritType/" + meritTypeId;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudents = json.entries;
                defer.resolve(admissionStudents);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.getAdmissionStudent = function (semesterId, merit, status, allocatedProgram) {
            var url = "academic/admission/semester/" + semesterId + "/quota/" + merit + "/status/" + status + "/allocatedProgram/" + allocatedProgram;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudents = json.entries;
                defer.resolve(admissionStudents);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.getAdmissionStudentStatistics = function (semesterId, programType, quotaType) {
            var url = "academic/admission/semester/" + semesterId + "/programType/" + programType + "/quotaType/" + quotaType;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudents = json.entries;
                defer.resolve(admissionStudents);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.downloadTaletalkDataExcelFile = function (semesterId) {
            var fileName = "Taletalk_data_" + semesterId;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "admission/xlx/taletalkData/semester/" + semesterId;
            this.httpClient.get(url, contentType, function (data, etag) {
                console.log(data);
                console.log(contentType);
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                console.log("got the file");
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        AdmissionStudentService.prototype.downloadMeritListExcelFile = function (semesterId) {
            var fileName = "merit_list_data";
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "admission/xlx/meritList/semester/" + semesterId;
            this.httpClient.get(url, contentType, function (data, etag) {
                console.log(data);
                console.log(contentType);
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                console.log("got the file");
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        AdmissionStudentService.prototype.downloadMigrationListXlsFile = function () {
            var fileName = "migration_list";
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "admission/xlx/migrationList";
            this.httpClient.get(url, contentType, function (data, etag) {
                console.log(data);
                console.log(contentType);
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        AdmissionStudentService.prototype.downloadAdmissionReportExcelFile = function (semesterId, semesterName, quota, status) {
            var defer = this.$q.defer();
            var fileName = "Admission_Report_" + semesterName;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "admission/xlx/admission/report/semester/" + semesterId + "/quota/" + quota + "/status/" + status;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                defer.resolve("success");
            }, function (response) {
                console.error(response);
                defer.reject("error");
            }, 'arraybuffer');
            return defer.promise;
        };
        AdmissionStudentService.prototype.downloadAdmissionReportExcelFileByMeritSerial = function (semesterId, semesterName, status) {
            var defer = this.$q.defer();
            var fileName = "Admission_Report_" + semesterName;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "admission/xlx/admission/report/semester/" + semesterId + "/status/" + status;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                defer.resolve("success");
            }, function (response) {
                console.error(response);
                defer.reject("error");
            }, 'arraybuffer');
            return defer.promise;
        };
        AdmissionStudentService.prototype.saveTaletalkData = function (json, semesterId, programType) {
            var defer = this.$q.defer();
            var url = "academic/admission/taletalkData/semester/" + semesterId + "/programType/" + programType;
            this.httpClient.post(url, json, 'application/json')
                .success(function () {
                defer.resolve("success");
            }).error(function (data) {
                defer.resolve("error");
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.saveMigrationData = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "academic/admission/migrationList";
            console.log("Found json");
            console.log(json);
            this.httpClient.put(url, json, 'application/json')
                .success(function () {
                defer.resolve("success");
                _this.notify.success("Data Successfully Saved");
            }).error(function (data) {
                defer.resolve("error");
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.cancelAdmission = function (studentId) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "academic/admission/cancellation/student-id/" + studentId;
            this.httpClient.put(url, null, 'application/json')
                .success(function () {
                defer.resolve("success");
                _this.notify.success("Admission Cancellation Success");
            }).error(function (data) {
                defer.resolve("error");
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.saveMeritList = function (json, quota) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "academic/admission/meritListUpload/quota/" + quota;
            this.httpClient.put(url, json, 'application/json')
                .success(function () {
                defer.resolve("success");
                _this.notify.success("Successfully Saved!");
            }).error(function (data) {
                defer.resolve("error");
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.saveAndFetchNextStudentForDepartmentSelection = function (departmentSelectionStatus, json) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "academic/admission/departmentSelectionStatus/" + departmentSelectionStatus;
            this.httpClient.put(url, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                console.log(data);
                defer.resolve(data.entries);
            }).error(function (data) {
            });
            return defer.promise;
        };
        AdmissionStudentService.prototype.getQuotaType = function (quotaType) {
            var quotaStr = "";
            if (quotaType == 1) {
                quotaStr = 'GL';
            }
            else if (quotaType == 2) {
                quotaStr = 'FF';
            }
            else if (quotaType == 3) {
                quotaStr = 'RA';
            }
            else {
                quotaStr = 'GCE';
            }
            return quotaStr;
        };
        AdmissionStudentService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return AdmissionStudentService;
    }());
    ums.AdmissionStudentService = AdmissionStudentService;
    ums.UMS.service("admissionStudentService", AdmissionStudentService);
})(ums || (ums = {}));
/**
 * Created by Monjur-E-Morshed on 29-May-17.
 */
var ums;
(function (ums) {
    var AdditionalRolePermissionsService = (function () {
        function AdditionalRolePermissionsService(appConstants, httpClient, $q, notify) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        AdditionalRolePermissionsService.prototype.fetchLoggedUserAdditionalRolePermissions = function () {
            var _this = this;
            var url = "additionalRolePermissions/loggedUser";
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var additionalRoles = {};
                additionalRoles = json.entries;
                console.log("Json ");
                console.log(json);
                console.log("Entries value");
                console.log(additionalRoles);
                defer.resolve(additionalRoles);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting additional roles");
            });
            /*  this.httpClient.get(url, this.appConstants.mimeTypeJson,
             (json: any, etag: string) => {
      
             var additonalPermissions: any = {};
             additonalPermissions = json.entries;
             defer.resolve(additonalPermissions);
             },
             (response: ng.IHttpPromiseCallbackArg<any>) => {
             this.notify.error("Error in getting additional role permissions");
             console.error(response);
             });*/
            return defer.promise;
        };
        AdditionalRolePermissionsService.prototype.update = function (json, id) {
            var defer = this.$q.defer();
            this.httpClient.put('additionalRolePermissions/' + id, json, 'application/json')
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            }).error(function (data) {
                defer.resolve(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AdditionalRolePermissionsService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post('additionalRolePermissions/insert', json, 'application/json')
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            }).error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AdditionalRolePermissionsService.prototype.delete = function (id) {
            var defer = this.$q.defer();
            this.httpClient.doDelete('additionalRolePermissions/' + id)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            }).error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AdditionalRolePermissionsService.$inject = ['appConstants', 'HttpClient', '$q', 'notify'];
        return AdditionalRolePermissionsService;
    }());
    ums.AdditionalRolePermissionsService = AdditionalRolePermissionsService;
    ums.UMS.service("additionalRolePermissionsService", AdditionalRolePermissionsService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SemesterService = (function () {
        function SemesterService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        SemesterService.prototype.fetchSemesters = function (programType, limit, status) {
            if (!limit) {
                limit = ums.Utils.DEFAULT_SEMESTER_COUNT;
            }
            if (!status) {
                status = ums.Utils.SEMESTER_FETCH_ALL;
            }
            var url = "academic/semester/program-type/" + programType + "/limit/" + limit + "/status/" + status;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var semesters = json.entries;
                defer.resolve(semesters);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SemesterService.prototype.fetchAttendedSemesters = function () {
            var url = "academic/semester/all/attended-semesters";
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var semesters = json.entries;
                defer.resolve(semesters);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SemesterService.prototype.getPrevSemester = function (programType) {
            var url = "academic/semester/program-type/" + programType;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var semesters = json.entries;
                console.log("Prev Semester");
                console.log(semesters);
                defer.resolve(semesters);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SemesterService.prototype.getPrevSemesterById = function (programType, semesterId) {
            var url = "academic/semester/program-type/" + programType + "/semester-id/" + semesterId;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var semesters = json.entries;
                console.log("Prev Semester");
                console.log(semesters);
                defer.resolve(semesters);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SemesterService.prototype.getActiveSemester = function (programType) {
            var url = "academic/semester/ug/active";
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var semesters = json;
                defer.resolve(semesters);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SemesterService.prototype.getSemesterById = function (id) {
            console.log('id--->' + id);
            var url = "academic/semester/" + id;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                console.log('json');
                console.log(json);
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SemesterService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return SemesterService;
    }());
    ums.SemesterService = SemesterService;
    ums.UMS.service("semesterService", SemesterService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var RoleService = (function () {
        function RoleService(httpClient, $q, Notify, $sce, $window) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.Notify = Notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        RoleService.prototype.getAll = function () {
            var url = "role/all";
            var defer = this.$q.defer();
            this.httpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        RoleService.prototype.getAllAdditional = function () {
            var url = "role/allAdditional";
            var defer = this.$q.defer();
            this.httpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        RoleService.prototype.getbyRoleId = function (roleID) {
            var url = "additionalRolePermissions/roleId/" + roleID;
            var defer = this.$q.defer();
            this.httpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        RoleService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return RoleService;
    }());
    ums.RoleService = RoleService;
    ums.UMS.service("RoleService", RoleService);
})(ums || (ums = {}));
/**
 * Created by My Pc on 29-May-17.
 */
var ums;
(function (ums) {
    var UserService = (function () {
        function UserService(httpClient, $q, notify, $sce, $window) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.isNotificationShown = false;
        }
        UserService.prototype.hasAuthority = function (role) {
            var _this = this;
            if (this.userRole == undefined) {
                this.fetchUserRole().then(function (response) {
                    return _this.findUserRole(role);
                });
            }
            else {
                return this.findUserRole(role);
            }
        };
        UserService.prototype.findUserRole = function (role) {
            var roleArr = role.split(",");
            var foundRole = false;
            for (var i = 0; i < roleArr.length; i++) {
                if (roleArr[i] == this.userRole) {
                    foundRole = true;
                    break;
                }
            }
            return foundRole;
        };
        UserService.prototype.fetchUserRole = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("userHome", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.userRole = response.userRole;
                defer.resolve(_this.userRole);
            });
            return defer.promise;
        };
        UserService.prototype.fetchCurrentUserInfo = function () {
            var _this = this;
            var url = "users/current";
            var defer = this.$q.defer();
            this.httpClient.get(url, 'application/json', function (json, etag) {
                var user = json;
                defer.resolve(user);
            }, function (response) {
                _this.notify.error("Error in getting user data");
            });
            return defer.promise;
        };
        UserService.prototype.get = function (id) {
            var _this = this;
            var url = "users/id/";
            var defer = this.$q.defer();
            this.httpClient.get(url + id, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in getting user data");
            });
            return defer.promise;
        };
        UserService.prototype.getAccessToken = function (userId) {
            var _this = this;
            var defer = this.$q.defer();
            if (location.hostname === 'localhost') {
                this.httpClient.get("users/access-token-dev-machine/user-id/" + userId, 'application/json', function (response, etag) {
                    defer.resolve(response);
                }, function (error) {
                    if (error.data.reason === 'No Data Found') {
                        _this.notify.error("No Access Rule Found");
                    }
                    defer.resolve(undefined);
                });
            }
            else {
                this.httpClient.get("users/access-token/user-id/" + userId, 'application/json', function (response, etag) {
                    defer.resolve(response);
                }, function (error) {
                    if (error.data.reason === 'No Data Found') {
                        _this.notify.error("No Access Rule Found");
                    }
                    defer.resolve(undefined);
                });
            }
            return defer.promise;
        };
        UserService.prototype.getAccessTokenForDevMachine = function (userId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("users/access-token-dev-machine/user-id/" + userId, 'application/json', function (response, etag) {
                defer.resolve(response);
            }, function (error) {
                if (error.data.reason === 'No Data Found') {
                    _this.notify.error("No Access Rule Found");
                }
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        UserService.prototype.getUser = function (id) {
            var defer = this.$q.defer();
            if (id == undefined || id == null || id == "") {
                defer.reject("Patron id is empty");
            }
            else if (id.length == 9 || id.length == 6) {
                var url = "user/view/id/" + id;
                this.httpClient.get(url, 'application/json', function (json, etag) {
                    defer.resolve(json.entries);
                }, function (response) {
                    console.log(response);
                    defer.reject("");
                });
            }
            else {
                defer.reject("Patron id too short or too long");
            }
            return defer.promise;
        };
        UserService.prototype.submitLoggedDeviceInformation = function (userDeviceType) {
            var defer = this.$q.defer();
            this.httpClient.post("users/userDeviceType", userDeviceType, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve("success"); })
                .error(function (response) { return defer.resolve(undefined); });
            return defer.promise;
        };
        Object.defineProperty(UserService.prototype, "isDesktop", {
            get: function () {
                if (sessionStorage.getItem("isDesktop")) {
                    return sessionStorage.getItem("isDesktop") === 'true';
                }
                else {
                    return this.isDesktopDevice;
                }
            },
            set: function (type) {
                this.isDesktopDevice = type;
                sessionStorage.setItem('isDesktop', type + "");
            },
            enumerable: true,
            configurable: true
        });
        UserService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return UserService;
    }());
    ums.UserService = UserService;
    ums.UMS.service("userService", UserService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CookieService = (function () {
        function CookieService($log, $cookies, $cookieStore) {
            this.$log = $log;
            this.$cookies = $cookies;
            this.$cookieStore = $cookieStore;
        }
        CookieService.prototype.getUserCredential = function () {
            return this.$cookies[CookieService.CREDENTIAL_KEY];
        };
        CookieService.prototype.getCookieByKey = function (key) {
            console.debug("%o", this.$cookieStore.get(key));
            return this.$cookieStore.get(key);
        };
        CookieService.prototype.getCookieAsJson = function (key) {
            return this.$cookieStore.get(key);
        };
        CookieService.prototype.removeAllCookies = function () {
            var date = new Date();
            date.setTime(date.getTime() + (-1 * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toUTCString();
            angular.forEach(this.$cookies, function (cookie, key) {
                document.cookie = key + "=" + "" + expires + "; path=/";
            });
        };
        CookieService.prototype.removeCookie = function (pKey) {
            var date = new Date();
            date.setTime(date.getTime() + (-1 * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toUTCString();
            angular.forEach(this.$cookies, function (cookie, key) {
                if (pKey == key) {
                    document.cookie = key + "=" + "" + expires + "; path=/";
                }
            });
        };
        CookieService.CREDENTIAL_KEY = 'ums.credentials';
        CookieService.$inject = ['$log', '$cookies', '$cookieStore'];
        return CookieService;
    }());
    ums.CookieService = CookieService;
    ums.UMS.service('CookieService', CookieService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Settings = (function () {
        function Settings(httpClient, $q) {
            this.httpClient = httpClient;
            this.$q = $q;
            this._settings = {};
        }
        Settings.prototype.getSettings = function () {
            var _this = this;
            if (ums.UmsUtil.isEmpty(this._settings)) {
                var defer = this.$q.defer();
                this.httpClient.get("settings", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                    _this._settings = response;
                    defer.resolve(_this._settings);
                });
                return defer.promise;
            }
            else {
                return this.$q.when(this._settings);
            }
        };
        Settings.$inject = ['HttpClient', '$q'];
        return Settings;
    }());
    ums.Settings = Settings;
    ums.UMS.service("Settings", Settings);
})(ums || (ums = {}));
var ums;
(function (ums) {
    ums.TOKEN_KEY = 'ums.token';
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExpireToken = (function () {
        function ExpireToken($window, $interval, httpClient) {
            var _this = this;
            this.$window = $window;
            this.httpClient = httpClient;
            $interval(function () {
                var token = $window.sessionStorage.getItem(ums.TOKEN_KEY) ?
                    JSON.parse($window.sessionStorage.getItem(ums.TOKEN_KEY)) : null;
                token.expires_in = token.expires_in - (ExpireToken.PERIOD * 2);
                if (token.expires_in <= 0) {
                    _this.refreshToken();
                }
                else {
                    $window.sessionStorage.setItem(ums.TOKEN_KEY, JSON.stringify(token));
                }
            }, ExpireToken.PERIOD * 1000, 0, false);
        }
        ExpireToken.prototype.refreshToken = function () {
            var _this = this;
            this.httpClient.get('refreshToken', ums.HttpClient.MIME_TYPE_JSON, function (newToken) {
                _this.$window.sessionStorage.setItem(ums.TOKEN_KEY, JSON.stringify(newToken));
                _this.httpClient.resetAuthenticationHeader();
            });
        };
        ExpireToken.$inject = ['$window', '$interval', 'HttpClient'];
        ExpireToken.PERIOD = 30;
        return ExpireToken;
    }());
    ums.ExpireToken = ExpireToken;
    ums.UMS.service('ExpireToken', ExpireToken);
})(ums || (ums = {}));
/**
 * Created by My Pc on 09-May-17.
 */
var ums;
(function (ums) {
    var LeaveApplicationService = (function () {
        function LeaveApplicationService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        LeaveApplicationService.prototype.fetchRemainingLeaves = function () {
            var _this = this;
            var url = "lmsApplication/remainingLeaves";
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var lmsTypes = {};
                lmsTypes = json.entries;
                defer.resolve(lmsTypes);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting remaining leaves");
            });
            return defer.promise;
        };
        LeaveApplicationService.prototype.fetchRemainingLeavesByEmployeeId = function (employeeId) {
            var _this = this;
            var url = "lmsApplication/remainingLeaves/employeeId/" + employeeId;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var lmsTypes = {};
                lmsTypes = json.entries;
                defer.resolve(lmsTypes);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting remaining leaves");
            });
            return defer.promise;
        };
        LeaveApplicationService.prototype.fetchPendingLeaves = function () {
            var _this = this;
            var url = "lmsApplication/pendingLeaves";
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var leaves = {};
                leaves = json.entries;
                console.log("pending leaves from service");
                console.log(json.entries);
                defer.resolve(leaves);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting pending  leaves");
            });
            return defer.promise;
        };
        LeaveApplicationService.prototype.fetchApprovedLeavesWithDateRange = function (startDate, endDate) {
            var _this = this;
            var url = "lmsApplication/approvedApplications";
            var defer = this.$q.defer();
            this.httpClient.get(url + "/startDate/" + startDate + "/endDate/" + endDate, this.appConstants.mimeTypeJson, function (json, etag) {
                var leaves = {};
                leaves = json.entries;
                defer.resolve(leaves);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting leave applications");
            });
            return defer.promise;
        };
        LeaveApplicationService.prototype.saveLeaveApplication = function (json) {
            var _this = this;
            console.log("json");
            console.log(json);
            var defer = this.$q.defer();
            var url = "lmsApplication/save";
            console.log("Found json");
            console.log(json);
            this.httpClient.post(url, json, 'application/json')
                .success(function (response) {
                var message = response.entries;
                console.log("In the service");
                console.log(message[0].message);
                if (message[0].message == "")
                    _this.notify.success("Success");
                else
                    _this.notify.error(message[0].message);
                defer.resolve(response.entries);
                //this.notify.success("Success");
            }).error(function (data) {
                defer.resolve("error");
            });
            return defer.promise;
        };
        LeaveApplicationService.prototype.uploadFile = function (formData) {
            var defer = this.$q.defer();
            var url = "lmsApplication/upload";
            this.httpClient.post(url, formData, undefined)
                .success(function (response) {
                defer.resolve(response);
            }).error(function (data) {
                console.error(data);
            });
            return defer.promise;
        };
        LeaveApplicationService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return LeaveApplicationService;
    }());
    ums.LeaveApplicationService = LeaveApplicationService;
    ums.UMS.service("leaveApplicationService", LeaveApplicationService);
})(ums || (ums = {}));
/**
 * Created by My Pc on 09-May-17.
 */
var ums;
(function (ums) {
    var LeaveApplicationStatusService = (function () {
        function LeaveApplicationStatusService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        LeaveApplicationStatusService.prototype.fetchApplicationStatus = function (appId) {
            var _this = this;
            var url = "lmsAppStatus/appId/" + appId;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var lmsAppStatusList = {};
                lmsAppStatusList = json.entries;
                defer.resolve(lmsAppStatusList);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting leave application status");
            });
            return defer.promise;
        };
        LeaveApplicationStatusService.prototype.fetchPendingLeaves = function (employeeId) {
            var _this = this;
            var url = "lmsAppStatus/pendingLeaves/employee/" + employeeId;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var lmsAppStatusList = {};
                lmsAppStatusList = json.entries;
                defer.resolve(lmsAppStatusList);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting pending leaves");
            });
            return defer.promise;
        };
        LeaveApplicationStatusService.prototype.fetchLeaveApplicationsWithPagination = function (leaveApprovalStatus, pageNumber, pageSize) {
            var _this = this;
            var url = "lmsAppStatus/leaveApplications/status/" + leaveApprovalStatus + "/pageNumber/" + pageNumber + "/pageSize/" + pageSize;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var lmsAppStatus = {};
                lmsAppStatus.statusList = json.entries;
                lmsAppStatus.totalSize = json.totalSize;
                defer.resolve(lmsAppStatus);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting leave applications");
            });
            return defer.promise;
        };
        LeaveApplicationStatusService.prototype.fetchLeaveApplicationsActiveOnTheDay = function (deptId, leaveType, pageNumber, pageSize) {
            var _this = this;
            var url = "lmsAppStatus/activeLeave/deptId/" + deptId + "/type/" + leaveType + "/pageNumber/" + pageNumber + "/pageSize/" + pageSize;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var lmsAppStatus = {};
                lmsAppStatus.statusList = json.entries;
                lmsAppStatus.totalSize = json.totalSize;
                defer.resolve(lmsAppStatus);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting leave applications");
            });
            return defer.promise;
        };
        LeaveApplicationStatusService.prototype.fetchAllLeaveApplicationsOfEmployeeWithPagination = function (employeeId, status, pageNumber, pageSize) {
            var _this = this;
            var url = "lmsAppStatus/leaveApplications/employee/" + employeeId + "/status/" + status + "/pageNumber/" + pageNumber + "/pageSize/" + pageSize;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var lmsAppStatus = {};
                lmsAppStatus.statusList = json.entries;
                lmsAppStatus.totalSize = json.totalSize;
                defer.resolve(lmsAppStatus);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting leave applications");
            });
            return defer.promise;
        };
        LeaveApplicationStatusService.prototype.fetchLeaveApplicationsWithOutPagination = function (leaveApprovalStatus) {
            var _this = this;
            var url = "lmsAppStatus/leaveApplications/status/" + leaveApprovalStatus;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var lmsAppStatusList = {};
                lmsAppStatusList = json.entries;
                defer.resolve(lmsAppStatusList);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting leave applications");
            });
            return defer.promise;
        };
        LeaveApplicationStatusService.prototype.saveLeaveApplicationStatus = function (json) {
            var _this = this;
            console.log("Json");
            console.log(json);
            var defer = this.$q.defer();
            var url = "lmsAppStatus/save";
            this.httpClient.post(url, json, 'application/json')
                .success(function () {
                defer.resolve("success");
                _this.notify.success("Success");
            }).error(function (data) {
                defer.resolve("error");
            });
            return defer.promise;
        };
        LeaveApplicationStatusService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return LeaveApplicationStatusService;
    }());
    ums.LeaveApplicationStatusService = LeaveApplicationStatusService;
    ums.UMS.service("leaveApplicationStatusService", LeaveApplicationStatusService);
})(ums || (ums = {}));
/**
 * Created by Monjur-E-Morshed on 09-May-17.
 */
var ums;
(function (ums) {
    var LeaveTypeService = (function () {
        function LeaveTypeService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        LeaveTypeService.prototype.fetchLeaveTypes = function () {
            var _this = this;
            var url = "lmsType/all";
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var lmsTypes = {};
                lmsTypes = json.entries;
                defer.resolve(lmsTypes);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting Leave Types");
            });
            return defer.promise;
        };
        LeaveTypeService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return LeaveTypeService;
    }());
    ums.LeaveTypeService = LeaveTypeService;
    ums.UMS.service("leaveTypeService", LeaveTypeService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SadminAccessRuleService = (function () {
        function SadminAccessRuleService(httpClient, $q, notify, $sce, $window) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.url = '/ums-webservice-academic/sadmin/access-rules';
        }
        SadminAccessRuleService.prototype.getValidEmployees = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.url + "/valid-employees", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            }, function (error) {
                _this.notify.error("No valid access rules found for you.");
                defer.resolve(null);
            });
            return defer.promise;
        };
        SadminAccessRuleService.prototype.getValidStudents = function () {
            var defer = this.$q.defer();
            this.httpClient.get(this.url + "/valid-students", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        SadminAccessRuleService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return SadminAccessRuleService;
    }());
    ums.SadminAccessRuleService = SadminAccessRuleService;
    ums.UMS.service("sadminAccessRuleService", SadminAccessRuleService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var HolidayTypeService = (function () {
        function HolidayTypeService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        HolidayTypeService.prototype.fetchAllHolidayTypes = function () {
            var _this = this;
            var url = "holidayType/all";
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var holidayTypes = {};
                holidayTypes = json.entries;
                defer.resolve(holidayTypes);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting holiday types");
            });
            return defer.promise;
        };
        HolidayTypeService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return HolidayTypeService;
    }());
    ums.HolidayTypeService = HolidayTypeService;
    ums.UMS.service("holidayTypeService", HolidayTypeService);
})(ums || (ums = {}));
/**
 * Created by My Pc on 17-Jun-17.
 */
var ums;
(function (ums) {
    var HolidaysService = (function () {
        function HolidaysService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        HolidaysService.prototype.fetchHolidaysByYear = function (year) {
            var _this = this;
            var url = "holidays/year/" + year;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var holidays = {};
                holidays = json.entries;
                defer.resolve(holidays);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting holidays");
            });
            return defer.promise;
        };
        HolidaysService.prototype.saveOrUpdateHolidays = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "holidays/save";
            this.httpClient.post(url, json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve("success");
            }).error(function (data) {
                console.log("error in saving data");
                console.error(data);
                _this.notify.error("Error in saving data");
            });
            return defer.promise;
        };
        HolidaysService.prototype.saveHolidays = function (json) {
            var _this = this;
            console.log("Json");
            console.log(json);
            var defer = this.$q.defer();
            var url = "holidays/save";
            this.httpClient.post('holidays/save', json, 'application/json')
                .success(function () {
                defer.resolve("success");
                _this.notify.success("Success");
            }).error(function (data) {
                defer.resolve("error");
            });
            return defer.promise;
        };
        HolidaysService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return HolidaysService;
    }());
    ums.HolidaysService = HolidaysService;
    ums.UMS.service("holidaysService", HolidaysService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DefaulterStudentService = (function () {
        function DefaulterStudentService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        DefaulterStudentService.prototype.getDefaulterPay = function () {
            var defer = this.$q.defer();
            this.httpClient.get("defaulter-student/fee", this.appConstants.mimeTypeJson, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DefaulterStudentService.prototype.getDefaulterPayBySemesterId = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("defaulter-student/fee/semester-id/" + semesterId, this.appConstants.mimeTypeJson, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        /*
        public createCustomPayments(data:any): ng.IPromise<string>{
            let defer:ng.IDeferred<any> = this.$q.defer();
            this.httpClient.post(`/ums-webservice-academic/defaulter-student/custom-payment`, data, HttpClient.MIME_TYPE_JSON)
                .success((response: string) => {
                    this.notify.success("Saved successfully.");
                    defer.resolve(response);
                })
                .error((data: string) => {
                    this.notify.error("Error in saving data");
                    defer.resolve(undefined);
                });
            return defer.promise;
        }

         */
        DefaulterStudentService.prototype.createCustomPayments = function (data) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("/ums-webservice-academic/defaulter-student/custom-payment", data, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                _this.notify.success("Saved successfully.");
                defer.resolve(response);
            })
                .error(function (data) {
                _this.notify.error("Error in saving data");
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        DefaulterStudentService.prototype.payFee = function (data) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("student-payment/defaulterPay", data, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (data) {
                _this.notify.error(data);
                defer.resolve(null);
            });
            return defer.promise;
        };
        DefaulterStudentService.prototype.payFeeBySemester = function (semesterId, data) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("student-payment/defaulterPay/semester-id/" + semesterId, data, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (data) {
                _this.notify.error(data);
                defer.resolve(null);
            });
            return defer.promise;
        };
        DefaulterStudentService.prototype.getDefaulterPaymentStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get("defaulter-student/fee", this.appConstants.mimeTypeJson, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DefaulterStudentService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return DefaulterStudentService;
    }());
    ums.DefaulterStudentService = DefaulterStudentService;
    ums.UMS.service("defaulterStudentService", DefaulterStudentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DegreeAwardService = (function () {
        function DegreeAwardService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.url = 'academic/degree-award';
        }
        DegreeAwardService.prototype.fetchDegreeAwards = function (semesterId, programType) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.url + "/all/semester-id/" + semesterId + "/program-type/" + programType, this.appConstants.mimeTypeJson, function (degreeAward, etag) {
                defer.resolve(degreeAward);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching data");
            });
            return defer.promise;
        };
        DegreeAwardService.prototype.updateDegreeAward = function (degreeAward) {
            var defer = this.$q.defer();
            this.httpClient.put(this.url + "/update", degreeAward, 'application/json')
                .success(function (degreeAwards) {
                defer.resolve(degreeAwards);
            });
            return defer.promise;
        };
        DegreeAwardService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return DegreeAwardService;
    }());
    ums.DegreeAwardService = DegreeAwardService;
    ums.UMS.service("degreeAwardService", DegreeAwardService);
})(ums || (ums = {}));
/**
 * Created by My Pc on 01-Oct-16.
 */
var ums;
(function (ums) {
    var EmployeeService = (function () {
        function EmployeeService(httpClient, $q, notify, $sce, $window) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.url = "academic/employee";
        }
        EmployeeService.prototype.getActiveTeacherByDept = function () {
            var _this = this;
            var defer = this.$q.defer();
            var teachers = {};
            this.httpClient.get(this.url + "/getActiveTeachersByDept", 'application/json', function (json, etag) {
                teachers = json.entries;
                defer.resolve(teachers);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching teacher data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getActiveTeacherByDeptId = function (deptId) {
            var _this = this;
            var defer = this.$q.defer();
            var teachers = {};
            this.httpClient.get(this.url + "/getActiveTeachersByDept/department/" + deptId, 'application/json', function (json, etag) {
                teachers = json.entries;
                defer.resolve(teachers);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching teacher data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getActiveTeachers = function () {
            var _this = this;
            var defer = this.$q.defer();
            var teachers = {};
            this.httpClient.get(this.url + "/getActiveTeachers", 'application/json', function (json, etag) {
                teachers = json.entries;
                defer.resolve(teachers);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching teacher data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getLoggedEmployeeInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            var employees = {};
            this.httpClient.get(this.url + "/loggedInEmployee", 'application/json', function (json, etag) {
                employees = json.entries;
                defer.resolve(employees[0]);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching employee data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getTotalEmployeeByDesignation = function (pEmploymentTypeId, pGrade) {
            var _this = this;
            var defer = this.$q.defer();
            var employees = {};
            this.httpClient.get(this.url + "/designationWiseEmployeeCount/employmentType/" + pEmploymentTypeId + "/grade/" + pGrade, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching employee data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getTotalEmployeeByDesignationCount = function (pDeptId, pEmploymentTypeId, pGrade) {
            var _this = this;
            var defer = this.$q.defer();
            var employees = {};
            this.httpClient.get(this.url + "/employeeCount/department/" + pDeptId + "/employmentType/" + pEmploymentTypeId + "/grade/" + pGrade, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching employee data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getEmployees = function (departmentId) {
            var _this = this;
            var defer = this.$q.defer();
            var employees = {};
            this.httpClient.get(this.url + "/department/" + departmentId, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
                defer.reject(response);
                _this.notify.error("Error in fetching employee data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getAll = function () {
            var _this = this;
            var defer = this.$q.defer();
            var employees = {};
            this.httpClient.get(this.url + "/all", 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching employee data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getAllWithLessResource = function () {
            var _this = this;
            var defer = this.$q.defer();
            var employees = {};
            this.httpClient.get(this.url + "/all/withLessResource", 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching employee data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getEmployee = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            var employees = {};
            this.httpClient.get(this.url + "/" + employeeId, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching employee data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getEmployeeByLikelySearch = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("id: " + employeeId);
            var employees = {};
            this.httpClient.get(this.url + "/similarEmployees/" + employeeId, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching employee data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.getEmployeeByName = function (employeeName) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Name: " + employeeName);
            var employees = {};
            this.httpClient.get(this.url + "/similarEmployees/name/" + employeeName, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching employee data");
            });
            return defer.promise;
        };
        EmployeeService.prototype.update = function (employeeId, json) {
            var defer = this.$q.defer();
            this.httpClient.put(this.url + "/" + employeeId, json, 'application/json')
                .success(function () {
                defer.resolve("Success");
            })
                .error(function (data) {
                console.log(data);
                defer.reject();
            });
            return defer.promise;
        };
        EmployeeService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return EmployeeService;
    }());
    ums.EmployeeService = EmployeeService;
    ums.UMS.service("employeeService", EmployeeService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CountryService = (function () {
        function CountryService(HttpClient, $q, notify, $sce, $window) {
            this.HttpClient = HttpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        CountryService.prototype.getAll = function () {
            var _this = this;
            var url = "country/all";
            var defer = this.$q.defer();
            this.HttpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Can not load country information. Please inform to IUMS");
                console.error(response);
            });
            return defer.promise;
        };
        CountryService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return CountryService;
    }());
    ums.CountryService = CountryService;
    ums.UMS.service("countryService", CountryService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DivisionService = (function () {
        function DivisionService(HttpClient, $q, Notify, $sce, $window) {
            this.HttpClient = HttpClient;
            this.$q = $q;
            this.Notify = Notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        DivisionService.prototype.getAll = function () {
            var url = "division/all";
            var defer = this.$q.defer();
            this.HttpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DivisionService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return DivisionService;
    }());
    ums.DivisionService = DivisionService;
    ums.UMS.service("divisionService", DivisionService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DistrictService = (function () {
        function DistrictService(HttpClient, $q, Notify, $sce, $window) {
            this.HttpClient = HttpClient;
            this.$q = $q;
            this.Notify = Notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        DistrictService.prototype.getAll = function () {
            var url = "district/all";
            var defer = this.$q.defer();
            this.HttpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DistrictService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return DistrictService;
    }());
    ums.DistrictService = DistrictService;
    ums.UMS.service("districtService", DistrictService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ThanaService = (function () {
        function ThanaService(HttpClient, $q, Notify, $sce, $window) {
            this.HttpClient = HttpClient;
            this.$q = $q;
            this.Notify = Notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        ThanaService.prototype.getAll = function () {
            var url = "thana/all";
            var defer = this.$q.defer();
            this.HttpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ThanaService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return ThanaService;
    }());
    ums.ThanaService = ThanaService;
    ums.UMS.service("thanaService", ThanaService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DesignationService = (function () {
        function DesignationService(httpClient, $q, Notify, $sce, $window) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.Notify = Notify;
            this.$sce = $sce;
            this.$window = $window;
            this.url = "designation";
        }
        DesignationService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post(this.url, json, 'application/json')
                .success(function (data) {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        DesignationService.prototype.getAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get(this.url + '/all', 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
                defer.reject(response);
            });
            return defer.promise;
        };
        DesignationService.prototype.update = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put(this.url, json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.resolve(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        DesignationService.prototype.exists = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get(this.url + '/id/' + id, 'application/json', function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
                defer.reject(response);
            });
            return defer.promise;
        };
        DesignationService.prototype.downloadPdf = function (deptId, employmentTypeId, gradeId) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "List of Designations";
            this.httpClient.get(this.url + "/report/deptId/" + deptId + "/employmentType/" + employmentTypeId + "/grade/" + gradeId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        DesignationService.$inject = [
            'HttpClient',
            '$q',
            'notify',
            '$sce',
            '$window'
        ];
        return DesignationService;
    }());
    ums.DesignationService = DesignationService;
    ums.UMS.service("designationService", DesignationService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DepartmentService = (function () {
        function DepartmentService(httpClient, $q, Notify, $sce, $window) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.Notify = Notify;
            this.$sce = $sce;
            this.$window = $window;
            this.url = "academic/department";
        }
        DepartmentService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post(this.url, json, 'application/json')
                .success(function (data) {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        DepartmentService.prototype.getAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get(this.url + '/all', 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
                defer.reject(response);
            });
            return defer.promise;
        };
        DepartmentService.prototype.update = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put(this.url, json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.resolve(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        DepartmentService.prototype.exists = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get(this.url + '/id/' + id, 'application/json', function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
                defer.reject(response);
            });
            return defer.promise;
        };
        DepartmentService.prototype.downloadPdf = function (type) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "List of Departments/Offices";
            this.httpClient.get(this.url + "/report/type/" + type, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        DepartmentService.$inject = [
            'HttpClient',
            '$q',
            'notify',
            '$sce',
            '$window'
        ];
        return DepartmentService;
    }());
    ums.DepartmentService = DepartmentService;
    ums.UMS.service("departmentService", DepartmentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AreaOfInterestService = (function () {
        function AreaOfInterestService(HttpClient, $q, Notify, $sce, $window) {
            this.HttpClient = HttpClient;
            this.$q = $q;
            this.Notify = Notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        AreaOfInterestService.prototype.getAll = function () {
            var url = "areaOfInterest/all";
            var defer = this.$q.defer();
            this.HttpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AreaOfInterestService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return AreaOfInterestService;
    }());
    ums.AreaOfInterestService = AreaOfInterestService;
    ums.UMS.service("areaOfInterestService", AreaOfInterestService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AcademicDegreeService = (function () {
        function AcademicDegreeService(HttpClient, $q, Notify, $sce, $window) {
            this.HttpClient = HttpClient;
            this.$q = $q;
            this.Notify = Notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        AcademicDegreeService.prototype.getAcademicDegreeList = function () {
            var url = "degreeTitles";
            var defer = this.$q.defer();
            this.HttpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AcademicDegreeService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return AcademicDegreeService;
    }());
    ums.AcademicDegreeService = AcademicDegreeService;
    ums.UMS.service("academicDegreeService", AcademicDegreeService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CommonBankService = (function () {
        function CommonBankService(HttpClient, $q, Notify) {
            this.HttpClient = HttpClient;
            this.$q = $q;
            this.Notify = Notify;
        }
        CommonBankService.prototype.getBankList = function () {
            var url = "common/bank/all-active";
            var defer = this.$q.defer();
            this.HttpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        CommonBankService.prototype.getBranchList = function (bankId) {
            var url = "common/branch/bank/" + bankId;
            var defer = this.$q.defer();
            this.HttpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        CommonBankService.prototype.getBranchListByDistrict = function (bankId, districtId) {
            var url = "common/branch/bank/" + bankId + "/district/" + districtId;
            var defer = this.$q.defer();
            this.HttpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        CommonBankService.prototype.getBranchUsers = function (branchId) {
            var url = "common/branch/branch-user/" + branchId + "/all";
            var defer = this.$q.defer();
            this.HttpClient.get(url, 'application/json', function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        CommonBankService.$inject = ['HttpClient', '$q', 'notify'];
        return CommonBankService;
    }());
    ums.CommonBankService = CommonBankService;
    ums.UMS.service("commonBankService", CommonBankService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DepartmentDesignationRoleMapService = (function () {
        function DepartmentDesignationRoleMapService(httpClient, $q, notify, $sce, $window) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.url = "departmentDesignationRoleMap";
        }
        DepartmentDesignationRoleMapService.prototype.getDepartmentDesignationRoleMapByDepartmentAndEmployeeType = function (pDepartmentId, pEmployeeTypeId) {
            var defer = this.$q.defer();
            this.httpClient.get(this.url + "/department/" + pDepartmentId + "/employeeType/" + pEmployeeTypeId, 'application/json', function (result, etag) {
                defer.resolve(result.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DepartmentDesignationRoleMapService.prototype.getDepartmentDesignationRoleMapByDepartment = function (pDepartmentId) {
            var defer = this.$q.defer();
            this.httpClient.get(this.url + "/department/" + pDepartmentId, 'application/json', function (result, etag) {
                defer.resolve(result.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DepartmentDesignationRoleMapService.$inject = ['HttpClient', '$q', 'notify', '$sce', '$window'];
        return DepartmentDesignationRoleMapService;
    }());
    ums.DepartmentDesignationRoleMapService = DepartmentDesignationRoleMapService;
    ums.UMS.service("departmentDesignationRoleMapService", DepartmentDesignationRoleMapService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AmsAttendanceInfo = (function () {
        function AmsAttendanceInfo(appConstants, httpClient, $q, notify, employeeService, amsAttendanceInfoService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.employeeService = employeeService;
            this.amsAttendanceInfoService = amsAttendanceInfoService;
            this.pagination = {};
            this.chartData = [];
            this.resultsPerPage = "10";
            this.itemsPerPage = +this.resultsPerPage;
            this.pagination.currentPage = 1;
            this.pageNumber = 1;
            this.itemPerPageChecker = false;
            this.datePickerInitialization();
            this.getEmployeeInfo().then(function (data) {
                _this.fetchInitialAttendance();
            });
        }
        AmsAttendanceInfo.prototype.setResultsPerPage = function (resultsPerPage) {
            if (resultsPerPage > 0) {
                this.itemPerPageChecker = false;
                this.itemsPerPage = resultsPerPage;
                this.fetchInfo(this.fromDate, this.toDate);
            }
            else {
                this.itemPerPageChecker = true;
            }
        };
        AmsAttendanceInfo.prototype.pageChanged = function (pageNumber) {
            this.setCurrent(pageNumber);
        };
        AmsAttendanceInfo.prototype.setCurrent = function (currentPage) {
            if (this.itemsPerPage > 0) {
                this.pagination.currentPage = currentPage;
                this.fetchInfo(this.fromDate, this.toDate);
            }
            else {
                console.log("Null Values !!!!");
            }
        };
        AmsAttendanceInfo.prototype.fetchInitialAttendance = function () {
            var from, initialFromDate, initialToDate;
            var dt = new Date();
            var day = dt.getDate() - dt.getDay();
            var month = dt.getMonth() + 1;
            initialFromDate = (day < 10 ? '0' + day : '' + day) + "-" + (month < 10 ? '0' + month : '' + month) + "-" + dt.getFullYear();
            from = new Date();
            day = from.getDate();
            month = from.getMonth() + 1;
            initialToDate = (day < 10 ? '0' + day : '' + day) + "-" + (month < 10 ? '0' + month : '' + month) + "-" + from.getFullYear();
            this.fromDate = initialFromDate;
            this.toDate = initialToDate;
            this.fetchInfo(this.fromDate, this.toDate);
        };
        AmsAttendanceInfo.prototype.fetchInfoByDate = function (day, date) {
            var _this = this;
            this.day = day;
            this.amsAttendanceInfoService.fetchIndividualRecords(this.employeeId, date).then(function (data) {
                _this.individualAttendanceDetails = data.entries;
            });
        };
        AmsAttendanceInfo.prototype.fetchInfo = function (from, to) {
            var _this = this;
            this.amsAttendanceInfoService.fetchAttendanceRecords(this.employeeId, from, to, this.pagination.currentPage, this.itemsPerPage).then(function (data) {
                _this.attendanceLog = data.entries;
                _this.totalItems = Number(data.appSize);
                _this.totalDuration = data.totalHours;
                _this.workingDays = data.totalWorkingDays;
                _this.holidays = data.totalHolidays;
                _this.holidaysWithoutWeekends = data.holidaysWithoutWeekends;
                _this.requiredHours = data.requiredMinHour;
                _this.extraHours = data.extraHours;
                _this.subtractedHours = data.subtractedHours;
                _this.totalDays = data.totalDays;
                _this.totalWeekendDays = data.totalWeekends;
            }).then(function (d) {
                // this.initChart();
            });
        };
        AmsAttendanceInfo.prototype.datePickerInitialization = function () {
            this.fromDate = moment(new Date()).format("DD-MM-YYYY");
            this.toDate = moment(new Date()).format("DD-MM-YYYY");
            $('.datetimepicker').datetimepicker({
                format: 'DD-MM-YYYY'
            });
        };
        AmsAttendanceInfo.prototype.getEmployeeInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.employeeService.getLoggedEmployeeInfo().then(function (data) {
                _this.employeeId = data.id;
                _this.teacherName = data.employeeName;
                _this.department = data.department.shortName;
                _this.designation = data.designation.name;
                defer.resolve(data);
            });
            return defer.promise;
        };
        AmsAttendanceInfo.prototype.getRecords = function () {
            this.fromDate = $("#fromDate").val();
            this.toDate = $("#toDate").val();
            this.fetchInfo(this.fromDate, this.toDate);
        };
        AmsAttendanceInfo.$inject = ['appConstants', 'HttpClient', '$q', 'notify', 'employeeService', 'amsAttendanceInfoService'];
        return AmsAttendanceInfo;
    }());
    ums.AmsAttendanceInfo = AmsAttendanceInfo;
    ums.UMS.controller("AmsAttendanceInfo", AmsAttendanceInfo);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var BiometricAttendanceReport = (function () {
        function BiometricAttendanceReport(appConstants, httpClient, $q, notify, employeeService, amsAttendanceInfoService, userService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.employeeService = employeeService;
            this.amsAttendanceInfoService = amsAttendanceInfoService;
            this.userService = userService;
            this.pagination = {};
            console.log("==============");
            this.employeeId = "";
            this.searchBy = 0;
            this.showSummary = false;
            this.employeeDesignation = "";
            this.minHourPerDay = 0;
            this.minHourPerWeek = 0;
            this.deptList = [];
            this.deptList = this.appConstants.departmentOffice;
            this.resultsPerPage = "10";
            this.itemsPerPage = +this.resultsPerPage;
            this.pagination.currentPage = 1;
            this.pageNumber = 1;
            this.itemPerPageChecker = false;
            this.selectedDepartmentId = "";
            this.isTeacher = true;
            this.userService.fetchCurrentUserInfo().then(function (d) {
                _this.roleId = d.roleId;
                if (_this.roleId == 1021) {
                    _this.isTeacher = true;
                }
                else {
                    _this.isTeacher = false;
                }
            });
            this.datePickerInitialization();
            this.initializeKeyUpDelay();
            //this.searchName();
            this.fetchInitialAttendance();
        }
        BiometricAttendanceReport.prototype.setResultsPerPage = function (resultsPerPage) {
            if (resultsPerPage > 0) {
                this.itemPerPageChecker = false;
                this.itemsPerPage = resultsPerPage;
                this.fetchInfo(this.fromDate, this.toDate);
            }
            else {
                this.itemPerPageChecker = true;
            }
        };
        BiometricAttendanceReport.prototype.pageChanged = function (pageNumber) {
            this.setCurrent(pageNumber);
        };
        BiometricAttendanceReport.prototype.setCurrent = function (currentPage) {
            if (this.itemsPerPage > 0) {
                this.pagination.currentPage = currentPage;
                this.fetchInfo(this.fromDate, this.toDate);
            }
            else {
                console.log("Null Values !!!!");
            }
        };
        BiometricAttendanceReport.prototype.initializeKeyUpDelay = function () {
            var tmp = this;
            function delay(callback, ms) {
                var timer = 0;
                return function () {
                    var context = this, args = arguments;
                    clearTimeout(timer);
                    timer = setTimeout(function () {
                        callback.apply(context, args);
                    }, ms || 0);
                };
            }
            $('#input').keyup(delay(function (e) {
                tmp.showSummary = false;
                tmp.getEmployees(this.value);
            }, 500));
        };
        BiometricAttendanceReport.prototype.deptChanged = function (deptId) {
            this.isDeptSelected = true;
            try {
                this.selectedDepartmentId = deptId.id;
                this.departmentName = deptId.name;
                this.getEmployees(this.employeeId);
            }
            catch (e) {
                this.selectedDepartmentId = "";
            }
            console.log("Dept: " + this.selectedDepartmentId);
        };
        BiometricAttendanceReport.prototype.getEmployees = function (employeeId) {
            var _this = this;
            this.employeeId = employeeId;
            if (this.employeeId.length > 2) {
                console.log('[#####]Requesting Id:' + this.employeeId);
                this.employeeList = [];
                this.selectedEmployeeName = null;
                if (this.searchBy == 0) {
                    this.employeeService.getEmployeeByLikelySearch(this.employeeId).then(function (data) {
                        _this.employeeList = data;
                        console.log(_this.employeeList);
                        _this.setInfo();
                    });
                }
                else {
                    this.fullName = "";
                    this.employeeService.getEmployeeByName(this.employeeId).then(function (data) {
                        _this.employeeList = data;
                        _this.setInfo();
                    });
                }
            }
        };
        BiometricAttendanceReport.prototype.setInfo = function () {
            var _this = this;
            if (this.selectedDepartmentId != "") {
                this.employeeList = this.employeeList.filter(function (f) { return f.department.id === _this.selectedDepartmentId; });
            }
            if (this.employeeList.length > 0) {
                for (var i = 0; i < this.employeeList.length; i++) {
                    this.employeeList[i].employeeName = this.employeeList[i].employeeName + " (" + this.employeeList[i].department.shortName + ")";
                }
                this.selectedEmployeeName = this.employeeList[0];
                this.selectedEmployeeId = this.selectedEmployeeName.id;
                this.fullName = this.selectedEmployeeName.employeeName;
                this.employeeDesignation = this.selectedEmployeeName.designation.name;
                this.employmentType = this.selectedEmployeeName.employmentType.id;
            }
        };
        BiometricAttendanceReport.prototype.employeeChanged = function (val) {
            this.showSummary = false;
            this.fullName = val.employeeName;
            this.selectedEmployeeId = val.id;
            this.employeeDesignation = val.designation.name;
            this.employmentType = val.employmentType.id;
        };
        BiometricAttendanceReport.prototype.fetchInitialAttendance = function () {
            var from, initialFromDate, initialToDate;
            var dt = new Date();
            var day = dt.getDate() - dt.getDay();
            var month = dt.getMonth() + 1;
            initialFromDate = (day < 10 ? '0' + day : '' + day) + "-" + (month < 10 ? '0' + month : '' + month) + "-" + dt.getFullYear();
            from = new Date();
            day = from.getDate();
            month = from.getMonth() + 1;
            initialToDate = (day < 10 ? '0' + day : '' + day) + "-" + (month < 10 ? '0' + month : '' + month) + "-" + from.getFullYear();
            this.fromDate = initialFromDate;
            this.toDate = initialToDate;
        };
        BiometricAttendanceReport.prototype.fetchInfoByDate = function (day, date) {
            var _this = this;
            this.day = day;
            this.amsAttendanceInfoService.fetchIndividualRecords(this.selectedEmployeeId, date).then(function (data) {
                _this.individualAttendanceDetails = data.entries;
            });
        };
        BiometricAttendanceReport.prototype.fetchInfo = function (from, to) {
            var _this = this;
            if (!(this.selectedEmployeeId.length < 1)) {
                this.amsAttendanceInfoService.fetchAttendanceRecords(this.selectedEmployeeId, from, to, this.pagination.currentPage, this.itemsPerPage).then(function (data) {
                    _this.attendanceLog = data.entries;
                    _this.totalItems = Number(data.appSize);
                    _this.totalDuration = data.totalHours;
                    _this.workingDays = data.totalWorkingDays;
                    _this.holidays = data.totalHolidays;
                    _this.holidaysWithoutWeekends = data.holidaysWithoutWeekends;
                    _this.requiredHours = data.requiredMinHour;
                    _this.extraHours = data.extraHours;
                    _this.subtractedHours = data.subtractedHours;
                    _this.minHourPerWeek = data.minHourPerWeek;
                    _this.minHourPerDay = data.minHourPerDay;
                    _this.totalDays = data.totalDays;
                    _this.totalWeekendDays = data.totalWeekends;
                });
            }
            else {
                this.notify.error("No Employee Id/Name Selected");
            }
        };
        BiometricAttendanceReport.prototype.datePickerInitialization = function () {
            this.fromDate = moment(new Date()).format("DD-MM-YYYY");
            this.toDate = moment(new Date()).format("DD-MM-YYYY");
            $('.datetimepicker').datetimepicker({
                format: 'DD-MM-YYYY'
            });
        };
        BiometricAttendanceReport.prototype.getRecords = function () {
            this.fromDate = $("#fromDate").val();
            this.toDate = $("#toDate").val();
            console.log("From: " + this.fromDate + "\nTo: " + this.toDate);
            if (this.selectedEmployeeId.length > 1) {
                this.showSummary = true;
                this.fetchInfo(this.fromDate, this.toDate);
            }
            else {
                this.notify.error("Select employee to search results");
            }
        };
        BiometricAttendanceReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', 'employeeService', 'amsAttendanceInfoService', 'userService'];
        return BiometricAttendanceReport;
    }());
    ums.BiometricAttendanceReport = BiometricAttendanceReport;
    ums.UMS.controller("BiometricAttendanceReport", BiometricAttendanceReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DayWiseReport = (function () {
        function DayWiseReport(appConstants, httpClient, $q, notify, employeeService, amsAttendanceInfoService, userService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.employeeService = employeeService;
            this.amsAttendanceInfoService = amsAttendanceInfoService;
            this.userService = userService;
            this.pagination = {};
            this.employeeTypeList = [];
            this.employeeTypeList = this.appConstants.employeeTypes;
            this.employeeType = this.employeeTypeList[0];
            this.employeeTypeId = this.employeeType.id;
            this.employeeTypeName = this.employeeType.name;
            this.employeeId = "";
            this.searchBy = 0;
            this.showSummary = false;
            this.minHourPerDay = 0;
            this.minHourPerWeek = 0;
            this.isDateSame = false;
            this.deptList = [];
            this.deptList = this.appConstants.departmentOffice;
            this.resultsPerPage = "10";
            this.itemsPerPage = +this.resultsPerPage;
            this.pagination.currentPage = 1;
            this.pageNumber = 1;
            this.itemPerPageChecker = false;
            this.selectedDepartmentId = "";
            this.isTeacher = true;
            this.userService.fetchCurrentUserInfo().then(function (d) {
                _this.roleId = d.roleId;
                if (_this.roleId == 1021) {
                    _this.isTeacher = true;
                    _this.selectedDepartmentId = d.departmentId;
                }
                else {
                    _this.isTeacher = false;
                }
            });
            this.datePickerInitialization();
            this.fetchInitialAttendance();
        }
        DayWiseReport.prototype.setResultsPerPage = function (resultsPerPage) {
            if (resultsPerPage > 0) {
                this.itemPerPageChecker = false;
                this.itemsPerPage = resultsPerPage;
                this.getRecords();
            }
            else {
                this.itemPerPageChecker = true;
            }
        };
        DayWiseReport.prototype.pageChanged = function (pageNumber) {
            this.setCurrent(pageNumber);
        };
        DayWiseReport.prototype.setCurrent = function (currentPage) {
            if (this.itemsPerPage > 0) {
                this.pagination.currentPage = currentPage;
                this.getRecords();
            }
            else {
                console.log("Null Values !!!!");
            }
        };
        DayWiseReport.prototype.fetchInitialAttendance = function () {
            var from, initialFromDate, initialToDate;
            var dt = new Date();
            var day = dt.getDate() - dt.getDay();
            var month = dt.getMonth() + 1;
            initialFromDate = (day < 10 ? '0' + day : '' + day) + "-" + (month < 10 ? '0' + month : '' + month) + "-" + dt.getFullYear();
            from = new Date();
            day = from.getDate();
            month = from.getMonth() + 1;
            initialToDate = (day < 10 ? '0' + day : '' + day) + "-" + (month < 10 ? '0' + month : '' + month) + "-" + from.getFullYear();
            this.fromDate = initialFromDate;
            this.toDate = initialToDate;
        };
        DayWiseReport.prototype.datePickerInitialization = function () {
            this.fromDate = moment(new Date()).format("DD-MM-YYYY");
            this.toDate = moment(new Date()).format("DD-MM-YYYY");
            $('.datetimepicker').datetimepicker({
                format: 'DD-MM-YYYY'
            });
        };
        DayWiseReport.prototype.changeEmployeeType = function (value) {
            this.showSummary = false;
            this.employeeTypeId = value.id;
            this.employeeTypeName = value.name;
        };
        DayWiseReport.prototype.deptChanged = function (deptId) {
            this.isDeptSelected = true;
            this.showSummary = false;
            try {
                this.selectedDepartmentId = deptId.id;
                this.departmentName = deptId.name;
            }
            catch (e) {
                this.selectedDepartmentId = "";
            }
            console.log("Dept: " + this.selectedDepartmentId);
        };
        DayWiseReport.prototype.getRecords = function () {
            var _this = this;
            if (this.selectedDepartmentId != "") {
                this.showSummary = true;
                this.fromDate = $("#fromDate").val();
                this.toDate = $("#toDate").val();
                this.amsAttendanceInfoService.fetchDayWiseRecords(this.selectedDepartmentId, this.employeeTypeId, this.fromDate, this.toDate, this.pagination.currentPage, this.itemsPerPage).then(function (data) {
                    _this.attendanceLog = data.entries;
                    _this.totalItems = Number(data.appSize);
                    _this.totalDuration = data.totalHours;
                    _this.workingDays = data.totalWorkingDays;
                    _this.holidays = data.totalHolidays;
                    _this.holidaysWithoutWeekends = data.holidaysWithoutWeekends;
                    _this.requiredHours = data.requiredMinHour;
                    _this.extraHours = data.extraHours;
                    _this.subtractedHours = data.subtractedHours;
                    _this.minHourPerWeek = data.minHourPerWeek;
                    _this.minHourPerDay = data.minHourPerDay;
                    _this.totalDays = data.totalDays;
                    _this.totalWeekendDays = data.totalWeekends;
                    _this.isDateSame = data.isDateSame;
                    console.log(_this.attendanceLog);
                });
            }
            else {
                this.notify.error("Select department");
            }
        };
        DayWiseReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', 'employeeService', 'amsAttendanceInfoService', 'userService'];
        return DayWiseReport;
    }());
    ums.DayWiseReport = DayWiseReport;
    ums.UMS.controller("DayWiseReport", DayWiseReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AmsAttendanceInfoService = (function () {
        function AmsAttendanceInfoService(appConstants, httpClient, $q, notify) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        AmsAttendanceInfoService.prototype.fetchAttendanceRecords = function (employeeId, startDate, endDate, currentPage, itemsPerPage) {
            var defer = this.$q.defer();
            this.httpClient.get('employeeAttendance/employeeId/' + employeeId + '/startDate/' + startDate + '/endDate/' + endDate + '/currentPage/' + currentPage + '/itemPerPage/' + itemsPerPage, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        AmsAttendanceInfoService.prototype.fetchDayWiseRecords = function (departmentId, employeeTypeId, startDate, endDate, currentPage, itemsPerPage) {
            console.log("....Hello world.....##" + itemsPerPage);
            var defer = this.$q.defer();
            this.httpClient.get('employeeAttendance/departmentId/' + departmentId + '/employeeTypeId/' + employeeTypeId + '/startDate/' + startDate + '/endDate/' + endDate + '/currentPage/' + currentPage + '/itemPerPage/' + itemsPerPage, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        AmsAttendanceInfoService.prototype.fetchIndividualRecords = function (employeeId, date) {
            var defer = this.$q.defer();
            this.httpClient.get('employeeAttendance/employeeId/' + employeeId + '/date/' + date, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        AmsAttendanceInfoService.$inject = ['appConstants', 'HttpClient', '$q', 'notify'];
        return AmsAttendanceInfoService;
    }());
    ums.AmsAttendanceInfoService = AmsAttendanceInfoService;
    ums.UMS.service("amsAttendanceInfoService", AmsAttendanceInfoService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AppController = (function () {
        function AppController($scope, $rootScope, $window, $http, $templateCache, httpClient, $transition) {
            var _this = this;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$window = $window;
            this.$http = $http;
            this.$templateCache = $templateCache;
            this.httpClient = httpClient;
            this.$transition = $transition;
            this.transition = $transition;
            $scope.downloadUserGuide = this.downloadUserGuide.bind(this);
            this.$rootScope.style = 'style1';
            this.$rootScope.theme = 'orange-blue';
            this.$scope.data = {};
            this.$scope.effect = '';
            this.$scope.header = {
                form: false,
                chat: false,
                theme: false,
                footer: true,
                history: false,
                animation: '',
                boxed: '',
                layout_menu: '',
                theme_style: 'style1',
                //header_topbar: 'header-fixed',   //static or header-fixed // changed by ifti
                menu_style: 'sidebar-colors',
                menu_collapse: '',
                menu_style_restore: 'sidebar-colors',
                layout_horizontal_menu: '',
                toggle: function (k) {
                    switch (k) {
                        case 'chat':
                            this.$scope.header.chat = !$scope.header.chat;
                            break;
                        case 'form':
                            this.$scope.header.form = !$scope.header.form;
                            break;
                        case 'sitebar':
                            this.$scope.header.menu_style = this.$scope.header.menu_style ? '' : (($scope.header.layout_menu === '') ? 'sidebar-collapsed' : 'right-side-collapsed');
                            break;
                        case 'theme':
                            this.$scope.header.theme = !$scope.header.theme;
                            break;
                        case 'history':
                            this.$scope.header.history = !$scope.header.history;
                            this.$scope.header.menu_style = this.$scope.header.history ? 'sidebar-collapsed' : 'sidebar-default';
                            break;
                    }
                },
                collapse: function (c) {
                    if (c === 'change') {
                        _this.$scope.header.menu_collapse = '';
                    }
                    else {
                        if ($scope.header.menu_style) {
                            _this.$scope.header.menu_style = '';
                            _this.$scope.header.menu_collapse = _this.$scope.header.menu_collapse ? '' : 'sidebar-collapsed';
                        }
                        else {
                            _this.$scope.header.menu_collapse = _this.$scope.header.menu_collapse ? '' : 'sidebar-collapsed';
                            _this.$scope.header.menu_style = _this.$scope.header.menu_style_restore;
                        }
                    }
                }
            };
            this.transition.onSuccess({}, function ($transition$) {
                /*
                //Commented by Ifti
                this.$scope.header.animation = 'fadeInUp';
        
                setTimeout( () => {
                  this.$scope.header.animation = '';
                }, 100);
                */
                var breadcrumb = "";
                if ($transition$.promise.$$state.value["url"] == "/gradeSheetSelectionTeacher/:1")
                    breadcrumb = "/gradeSheetSelectionTeacher/T";
                else
                    breadcrumb = $transition$.promise.$$state.value["url"];
                _this.$scope.data = $.fn.Data.get(breadcrumb);
                $('.sidebar-collapse').removeClass('in').addClass('collapse');
                if (-1 == $.inArray($transition$.promise.$$state.value["url"], ['/extra-500', '/extra-404', '/extra-lock-screen', '/extra-signup', '/extra-signin'])) {
                    $('body').removeClass('bounceInLeft');
                    $("body>.default-page").show();
                    $("body>.extra-page").hide();
                }
                else {
                    window.scrollTo(0, 0);
                }
                _this.$scope.header.boxed = '';
                _this.$scope.header.footer = true;
                _this.$rootScope.style = 'style1';
                _this.$rootScope.theme = 'orange-blue';
            });
            this.$scope.style_change = function () {
                _this.$rootScope.style = _this.$scope.header.theme_style;
            };
            this.$scope.theme_change = function (t) {
                _this.$rootScope.theme = t;
            };
            $(window).scroll(function () {
                if ($(_this).scrollTop() > 0) {
                    $('.quick-sidebar').css('top', '0');
                }
                else {
                    $('.quick-sidebar').css('top', '50px');
                }
            });
            /*    $('.quick-sidebar > .header-quick-sidebar').slimScroll({
             "height": $(window).height() - 50,
             'width': '280px',
             "wheelStep": 30
             });*/
            $('#news-ticker-close').click(function (e) {
                $('.news-ticker').remove();
            });
            $scope.user = JSON.parse($window.sessionStorage.getItem('ums.user'));
        }
        AppController.prototype.downloadUserGuide = function (navigationId, manualTitle, manualType) {
            var _this = this;
            if (manualType == "html") {
                this.httpClient.get("userGuide/html/" + navigationId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                    console.log(response);
                    _this.$scope.data.htmlUserGuide = response.htmlContent;
                });
            }
            else if (manualType == "pdf") {
                var fileName = manualTitle + ".pdf";
                var contentType = ums.UmsUtil.getFileContentType("pdf");
                this.httpClient.get("userGuide/pdf/" + navigationId, contentType, function (data, etag) {
                    ums.UmsUtil.writeFileContent(data, contentType, fileName);
                }, function (response) {
                    console.error(response);
                }, 'arraybuffer');
            }
        };
        AppController.$inject = ['$scope', '$rootScope', '$window', '$http', '$templateCache', 'HttpClient', '$transitions'];
        return AppController;
    }());
    ums.AppController = AppController;
    ums.UMS.controller('AppController', AppController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MainController = (function () {
        function MainController($scope, httpClient, deviceDetector, userService, $q, $location) {
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.deviceDetector = deviceDetector;
            this.userService = userService;
            this.$q = $q;
            this.$location = $location;
            this.collectDeviceInformation();
            /*
            setTimeout(function () {
              $('.todo-list').slimScroll({
                "width": '100%',
                "height": '250px',
                "wheelStep": 30
              });
              $(".sortable").sortable();
              $(".sortable").disableSelection();
              //BEGIN COUNTER FOR SUMMARY BOX
              //counterNum($(".profit h4 span:first-child"), 189, 112, 1, 30);
              //counterNum($(".income h4 span:first-child"), 636, 812, 1, 50);
              //counterNum($(".task h4 span:first-child"), 103, 155, 1, 100);
              //counterNum($(".visit h4 span:first-child"), 310, 376, 1, 500);
              function counterNum(obj, start, end, step, duration) {
                $(obj).html(start);
                var interval = setInterval(function () {
                  var val = Number($(obj).html());
                  if (val < end) {
                    $(obj).html(val + step);
                  } else {
                    clearInterval(interval);
                  }
                }, duration);
              }

            }, 50);
      */
            $(document).key('ctrl+shift+a', function () {
                var secret = prompt("Tell us your secret", "Hello");
                if (secret != null) {
                    httpClient.post('flushCache?secret=' + secret, {}, 'application/json')
                        .success(function (data) {
                    }).error(function (data) {
                        console.error(data);
                    });
                }
            });
            this.collectUserInformation();
        }
        MainController.prototype.collectUserInformation = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("userHome", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.$scope.userHome = response.infoList;
                _this.$scope.semesterExtensionStatus = response.extensionStatus;
                _this.$scope.userRole = response.userRole;
                if (response.userRole == "student") {
                    $("#noticeModal").modal({
                        backdrop: false,
                        focus: true
                    });
                    if (_this.filterValue(response.extensionStatus, "key", "SemesterExtension")['value'] == 1) {
                        _this.$scope.passedSemesterCount = _this.filterValue(response.extensionStatus, "key", "PassedSemester")['value'];
                        _this.$scope.minumunSemesterRequiredToGraduate = _this.filterValue(response.extensionStatus, "key", "minimumSemesterRequired")['value'];
                        _this.$scope.department = _this.filterValue(response.infoList, "key", "Dept./School")['value'];
                        _this.$scope.studentId = _this.filterValue(response.infoList, "key", "StudentId")['value'];
                        $("#extensionModal").modal({
                            backdrop: false,
                            focus: true
                        });
                    }
                }
                localStorage["userFullName"] = _this.filterValue(response.infoList, "key", "Name")['value'];
                if (response.userRole == "student") {
                    localStorage["userDesignation"] = "Student";
                    $("#profileAnchor").attr("href", "#/studentProfile");
                    // if(this.userService.isNotificationShown==null || this.userService.isNotificationShown==false)
                    //     this.$location.path("noticeForStudents");
                }
                else {
                    localStorage["userDesignation"] = _this.filterValue(response.infoList, "key", "Designation")['value'];
                    $("#profileAnchor").attr("href", "#/employeeProfile/personal");
                }
                $("#userDesignation").html(localStorage.getItem("userDesignation"));
                $("#userName").html(localStorage.getItem("userFullName"));
                defer.resolve(response);
            });
            return defer.promise;
        };
        MainController.prototype.filterValue = function (obj, key, value) {
            return obj.find(function (v) {
                return v[key] === value;
            });
        };
        MainController.prototype.collectDeviceInformation = function () {
            var defer = this.$q.defer();
            var deviceType = {};
            deviceType.browser = this.deviceDetector.browser;
            deviceType.browserVersion = this.deviceDetector.browser_version;
            deviceType.desktop = this.deviceDetector.isDesktop();
            this.userService.isDesktop = deviceType.desktop;
            deviceType.mobile = this.deviceDetector.isMobile();
            deviceType.tablet = this.deviceDetector.isTablet();
            deviceType.device = this.deviceDetector.device;
            deviceType.os = this.deviceDetector.os;
            deviceType.osVersion = this.deviceDetector.os_version;
            this.userService.submitLoggedDeviceInformation(deviceType);
            defer.resolve(deviceType);
            return defer.promise;
        };
        MainController.$inject = ['$scope', 'HttpClient', 'deviceDetector', 'userService', '$q', '$location'];
        return MainController;
    }());
    ums.MainController = MainController;
    ums.UMS.controller('MainController', MainController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentNoticeController = (function () {
        function StudentNoticeController($scope, httpClient, userService, $q, $location) {
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.userService = userService;
            this.$q = $q;
            this.$location = $location;
            this.userService.isNotificationShown = true;
        }
        StudentNoticeController.prototype.back = function () {
            window.history.back();
        };
        StudentNoticeController.$inject = ['$scope', 'HttpClient', 'userService', '$q', '$location'];
        return StudentNoticeController;
    }());
    ums.StudentNoticeController = StudentNoticeController;
    ums.UMS.controller("StudentNotice", StudentNoticeController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var FaqController = (function () {
        function FaqController($scope, httpClient, userService, $q, $sce, $location) {
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.userService = userService;
            this.$q = $q;
            this.$sce = $sce;
            this.$location = $location;
            this.userService.isNotificationShown = true;
            $scope.demoBoolean = true;
            $scope.initialization = this.initialization.bind(this);
            $scope.getLoggedInUserRole = this.getLoggedInUserRole.bind(this);
            $scope.getActiveFaqs = this.getActiveFaqs.bind(this);
            $scope.trustAsHtml = this.trustAsHtml.bind(this);
            this.initialization();
        }
        FaqController.prototype.initialization = function () {
            console.log("demoBoolean:::", this.$scope.demoBoolean);
            this.getLoggedInUserRole();
            this.getActiveFaqs();
        };
        FaqController.prototype.getLoggedInUserRole = function () {
            var _this = this;
            var defer = this.$q.defer();
            // var loggedInUser: Array<User> = [];
            var loggedInUser = [];
            this.httpClient.get('faq/get/roleId', 'application/json', function (json, etag) {
                loggedInUser = json.entries;
                // console.log("json.entries loggedInUser::::", json.entries);
                // console.log("loggedInUser::::", loggedInUser[1]);
                _this.$scope.loggedInUserRoleId = loggedInUser[1];
                // console.log("loggedInUser this.$scope.loggedInUserRoleId:::", this.$scope.loggedInUserRoleId)
            }, function (response) {
                console.log("error:::::", response);
                console.error(response);
            });
            return defer.promise;
        };
        //getLoggedInUserRole
        FaqController.prototype.getActiveFaqs = function () {
            var _this = this;
            var defer = this.$q.defer();
            var activeFaqs = [];
            var activeFaqsOfLoggedInUser = [];
            // var roleId = this.$scope.loggedInUserRoleId;
            //   console.log("getActiveFaqs  this.$scope.loggedInUserRoleId::", this.$scope.loggedInUserRoleId);
            this.httpClient.get('faq/activeFAQs', 'application/json', function (json, etag) {
                activeFaqs = json.entries;
                for (var i = 0; i < activeFaqs.length; i++) {
                    // if (activeFaqs[i].roleId == 1011){
                    if (activeFaqs[i].roleId == _this.$scope.loggedInUserRoleId) {
                        activeFaqsOfLoggedInUser.push(activeFaqs[i]);
                    }
                }
                // console.log("activeFaqsOfLoggedInUser::::::::::" ,activeFaqsOfLoggedInUser);
                // this.$scope.Activefaqs = activeFaqs;
                _this.$scope.Activefaqs = activeFaqsOfLoggedInUser;
                // console.log("activeFaqs::::", activeFaqs);
            }, function (response) {
                console.log("error:::::", response);
                console.error(response);
            });
            return defer.promise;
        };
        FaqController.prototype.trustAsHtml = function (string) {
            return this.$sce.trustAsHtml(string);
        };
        ;
        FaqController.prototype.back = function () {
            window.history.back();
        };
        FaqController.$inject = ['$scope', 'HttpClient', 'userService', '$q', '$sce', '$location'];
        return FaqController;
    }());
    ums.FaqController = FaqController;
    ums.UMS.controller("FaqController", FaqController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ChangePassword = (function () {
        function ChangePassword($scope, httpClient, $window, $state, notify) {
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.$window = $window;
            this.$state = $state;
            this.notify = notify;
            $scope.submit = this.submit.bind(this);
            $scope.match = this.match.bind(this);
            $scope.togglePasswordView = this.togglePasswordView.bind(this);
            $scope.errorMessage = "";
            $scope.inputType1 = "password";
            $scope.inputType2 = "password";
            $scope.showPasswordIcon1 = true;
            $scope.showPasswordIcon2 = true;
            $scope.hasServerResponse = false;
            this.$scope.state = $state;
            console.debug('%o', this.$scope.user);
        }
        ChangePassword.prototype.clear = function () {
            this.$scope.password = {};
        };
        ChangePassword.prototype.togglePasswordView = function (type) {
            if (type == "new") {
                if (this.$scope.inputType1 == "password") {
                    this.$scope.inputType1 = "text";
                    this.$scope.showPasswordIcon1 = false;
                }
                else {
                    this.$scope.inputType1 = "password";
                    this.$scope.showPasswordIcon1 = true;
                }
            }
            else if (type == "confirm") {
                if (this.$scope.inputType2 == "password") {
                    this.$scope.inputType2 = "text";
                    this.$scope.showPasswordIcon2 = false;
                }
                else {
                    this.$scope.inputType2 = "password";
                    this.$scope.showPasswordIcon2 = true;
                }
            }
        };
        ChangePassword.prototype.match = function (form) {
            this.$scope.errorMessage = "";
            if (this.$scope.password.newPassword && this.$scope.password.confirmNewPassword) {
                if (this.$scope.password.newPassword === this.$scope.password.confirmNewPassword) {
                    form.$invalid = false;
                    this.$scope.errorMessage = "";
                }
                else {
                    form.$invalid = true;
                    this.$scope.errorMessage = "Password does not match";
                }
            }
        };
        ChangePassword.prototype.submit = function () {
            var _this = this;
            this.$scope.hasServerResponse = false;
            this.$scope.response = { status: true, text: "" };
            this.httpClient.put('changePassword', this.$scope.password, 'application/json')
                .success(function (response) {
                _this.$scope.response = {
                    status: true,
                    text: "Password changed successfully"
                };
                _this.$scope.hasServerResponse = true;
                _this.clear();
                _this.resetAuthentication(response);
                if (localStorage.getItem("userDesignation") == "Student") {
                    _this.notify.info("Fill up your Student Profile");
                    _this.$scope.state.go('studentProfile');
                }
            }).error(function (data) {
                _this.$scope.hasServerResponse = true;
                _this.$scope.response = {
                    status: false,
                    text: data.message
                };
            });
        };
        ChangePassword.prototype.resetAuthentication = function (token) {
            this.$window.sessionStorage.setItem(ums.TOKEN_KEY, JSON.stringify(token));
            this.httpClient.resetAuthenticationHeader();
        };
        ChangePassword.$inject = ['$scope', 'HttpClient', '$window', '$state', 'notify'];
        return ChangePassword;
    }());
    ums.ChangePassword = ChangePassword;
    ums.UMS.controller("ChangePassword", ChangePassword);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Logout = (function () {
        function Logout($window, httpClient) {
            var _this = this;
            this.$window = $window;
            this.httpClient = httpClient;
            this.httpClient.get('logout', ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.logout();
            }, function (error) {
                _this.logout();
            });
        }
        Logout.prototype.logout = function () {
            this.$window.sessionStorage.clear();
            /*
            localStorage.removeItem("modalflag1");
             */
            window.location.href = ums.UrlUtil.getBaseAppUrl() + 'login';
        };
        Logout.$inject = ['$window', 'HttpClient'];
        return Logout;
    }());
    ums.Logout = Logout;
    ums.UMS.controller('Logout', Logout);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var UserGuide = (function () {
        function UserGuide($scope, $stateParams, appConstants, httpClient, $q) {
            this.$scope = $scope;
            this.$stateParams = $stateParams;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.httpClient.get("userGuide", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                console.log(response.entries);
                $scope.guideList = response.entries;
            });
        }
        UserGuide.$inject = ['$scope', '$stateParams', 'appConstants', 'HttpClient', '$q'];
        return UserGuide;
    }());
    ums.UserGuide = UserGuide;
    ums.UMS.controller("UserGuide", UserGuide);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MailInbox = (function () {
        function MailInbox($scope, $stateParams, appConstants, httpClient, $q) {
            this.$scope = $scope;
            this.$stateParams = $stateParams;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            console.log("Main Inbox");
        }
        MailInbox.$inject = ['$scope', '$stateParams', 'appConstants', 'HttpClient', '$q'];
        return MailInbox;
    }());
    ums.MailInbox = MailInbox;
    ums.UMS.controller("MailInbox", MailInbox);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MailCompose = (function () {
        function MailCompose($scope, $stateParams, appConstants, httpClient, $q) {
            this.$scope = $scope;
            this.$stateParams = $stateParams;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            console.log("Main MailCompose");
            $('.wysihtml5').wysihtml5();
        }
        MailCompose.$inject = ['$scope', '$stateParams', 'appConstants', 'HttpClient', '$q'];
        return MailCompose;
    }());
    ums.MailCompose = MailCompose;
    ums.UMS.controller("MailCompose", MailCompose);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MailView = (function () {
        function MailView($scope, $stateParams, appConstants, httpClient, $q) {
            this.$scope = $scope;
            this.$stateParams = $stateParams;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            console.log("MailView");
        }
        MailView.$inject = ['$scope', '$stateParams', 'appConstants', 'HttpClient', '$q'];
        return MailView;
    }());
    ums.MailView = MailView;
    ums.UMS.controller("MailView", MailView);
})(ums || (ums = {}));
/**
 * Created by Monjur-E-Morshed on 09-May-17.
 */
var ums;
(function (ums) {
    var LeaveApplicationManagement = (function () {
        function LeaveApplicationManagement(appConstants, $scope, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, $timeout, leaveTypeService, leaveApplicationService, leaveApplicationStatusService, userService, attachmentService) {
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.$timeout = $timeout;
            this.leaveTypeService = leaveTypeService;
            this.leaveApplicationService = leaveApplicationService;
            this.leaveApplicationStatusService = leaveApplicationStatusService;
            this.userService = userService;
            this.attachmentService = attachmentService;
            this.fileAttachments = [];
            this.files = {};
            this.filesCopy = {};
            this.appId = "";
            this.leaveApplication = {};
            this.showStatusSection = false;
            this.showHistorySection = false;
            this.fromHistorySection = false;
            this.fromPendingApplicationSection = true;
            this.showApplicationSection = true;
            this.data = {};
            this.data.totalLeaveDurationInDays = 0;
            this.pageNumber = 1;
            this.pagination = {};
            this.pagination.currentPage = 1;
            this.itemsPerPage = 50;
            $scope.fileInserted = this.fileInserted.bind(this);
            this.initializeDatePickers();
            this.getLeaveTypes();
            this.getRemainingLeaves();
            this.getPendingApplications();
            $("#leaveType").focus();
        }
        LeaveApplicationManagement.prototype.removeFile = function (file) {
            console.log("In the remove file");
            console.log("The parameter");
            console.log(file);
            for (var i = 0; i < this.files.length; i++) {
                if (this.files[i].name === file.name) {
                    console.log("Found an occurance");
                    console.log(this.files[i]);
                    this.files[i].splice(i, 1);
                }
                break;
            }
            console.log(this.files);
        };
        LeaveApplicationManagement.prototype.fileInserted = function (event) {
            console.log("In the file insertion");
            console.log(event);
        };
        LeaveApplicationManagement.prototype.saveAttachments = function (id) {
            var _this = this;
            for (var i = 0; i < this.files.length; i++) {
                this.getFormData(this.files[i], id).then(function (formData) {
                    _this.leaveApplicationService.uploadFile(formData);
                });
            }
            this.files = {};
        };
        LeaveApplicationManagement.prototype.showHistory = function () {
            console.log("Showing file");
            console.log(this.files);
            this.leaveApprovalStatusList = this.appConstants.leaveApprovalStatus;
            this.leaveApprovalStatus = this.leaveApprovalStatusList[ums.Utils.LEAVE_APPLICATION_ALL - 1];
            console.log(this.leaveApprovalStatusList[8 - 1]);
            console.log("leave approval status: " + this.leaveApprovalStatus);
            this.pageNumber = 1;
            this.itemsPerPage = 10;
            this.getAllLeaveApplicationsForHistory();
            this.showHistorySection = true;
            this.showApplicationSection = false;
            this.fromHistorySection = true;
            this.fromPendingApplicationSection = false;
        };
        LeaveApplicationManagement.prototype.getAllLeaveApplicationsForHistory = function () {
            var _this = this;
            this.pendingApplications = [];
            this.leaveApplicationStatusService.fetchAllLeaveApplicationsOfEmployeeWithPagination(this.leaveApplicationService.user.employeeId, this.leaveApprovalStatus.id, this.pageNumber, this.itemsPerPage).then(function (leaveApplications) {
                _this.pendingApplications = leaveApplications.statusList;
                _this.totalItems = leaveApplications.totalSize;
                console.log(_this.pendingApplications);
            });
        };
        LeaveApplicationManagement.prototype.closeHistory = function () {
            this.showHistorySection = false;
            this.pageNumber = 1;
            this.itemsPerPage = 50;
            this.showApplicationSection = true;
            this.fromHistorySection = false;
            this.fromPendingApplicationSection = true;
            this.getPendingApplications();
        };
        LeaveApplicationManagement.prototype.setResultsPerPage = function (itemPerPage) {
            if (itemPerPage > 0 && itemPerPage != null) {
                this.itemsPerPage = itemPerPage;
                this.getAllLeaveApplicationsForHistory();
            }
        };
        LeaveApplicationManagement.prototype.statusChanged = function (leaveApplicationStatus) {
            this.leaveApprovalStatus = leaveApplicationStatus;
            this.getAllLeaveApplicationsForHistory();
        };
        LeaveApplicationManagement.prototype.initializeDatePickers = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 200);
        };
        LeaveApplicationManagement.prototype.getLeaveTypes = function () {
            var _this = this;
            this.leaveTypes = [];
            this.leaveType = {};
            this.leaveTypeService.fetchLeaveTypes().then(function (leaveTypes) {
                _this.leaveTypes = leaveTypes;
                _this.leaveType = _this.leaveTypes[0];
                console.log("Leave types");
                console.log(_this.leaveTypes);
            });
        };
        LeaveApplicationManagement.prototype.dateChanged = function () {
            console.log("In the date changed");
            console.log(this.leaveApplication.fromDate);
            console.log(this.leaveApplication.toDate);
            var thisScope = this;
            this.leaveApplication.fromDate = moment(this.leaveApplication.fromDate).format("dd-mm-yyyy");
            this.leaveApplication.toDate = moment(this.leaveApplication.toDate).format("dd-mm-yyyy");
            setTimeout(function () {
                thisScope.getTotalDuration();
            }, 200);
        };
        LeaveApplicationManagement.prototype.downloadAttachment = function (file) {
            this.attachmentService.downloadFile(file.id, file.fileName);
        };
        LeaveApplicationManagement.prototype.setStatusModalContent = function (lmsApplicationStatus) {
            this.statusModal = lmsApplicationStatus;
        };
        LeaveApplicationManagement.prototype.updateLeaveType = function (lmsType) {
            this.leaveType = lmsType;
        };
        LeaveApplicationManagement.prototype.getTotalDuration = function () {
            if (this.leaveApplication.toDate != null && this.leaveApplication.fromDate != null) {
                var fromDateParts = this.leaveApplication.fromDate.split('-');
                var fromDate = new Date(fromDateParts[2], fromDateParts[1], fromDateParts[0]);
                var toDateParts = this.leaveApplication.toDate.split('-');
                var toDate = new Date(toDateParts[2], toDateParts[1], toDateParts[0]);
                var timeDiff = Math.abs(toDate.getTime() - fromDate.getTime());
                var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                this.leaveApplication.duration = diffDays + 1;
                if (this.remainingLeavesMap[this.leaveType.id].daysLeftNumber < this.leaveApplication.duration) {
                    this.notify.error("Please select proper duration, you don't have " + this.leaveApplication.duration + " days left for the leave type");
                }
                this.$scope.$apply();
            }
        };
        LeaveApplicationManagement.prototype.getPendingApplications = function () {
            var _this = this;
            this.pendingApplications = [];
            this.leaveApplicationStatusService.fetchPendingLeaves(this.leaveApplicationService.employeeId).then(function (pendingLeaves) {
                _this.pendingApplications = pendingLeaves;
                console.log("Pending leaves...");
                console.log(pendingLeaves);
                _this.totalItems = pendingLeaves.length;
                //this.leaveApplicationService.employeeId = angular.copy(this.pendingApplications[0].applicantsId);
            });
        };
        LeaveApplicationManagement.prototype.getRemainingLeaves = function () {
            var _this = this;
            this.remainingLeaves = [];
            this.remainingLeavesMap = {};
            this.leaveApplicationService.fetchRemainingLeaves().then(function (leaves) {
                for (var i = 0; i < leaves.length; i++) {
                    _this.remainingLeaves.push(leaves[i]);
                    _this.remainingLeavesMap[leaves[i].leaveTypeId] = _this.remainingLeaves[i];
                }
                console.log("remaining leave map");
                console.log(leaves);
                console.log(_this.remainingLeavesMap);
            });
        };
        LeaveApplicationManagement.prototype.save = function () {
            var _this = this;
            this.convertToJson(ums.Utils.LEAVE_APPLICATION_SAVED).then(function (json) {
                _this.leaveApplicationService.saveLeaveApplication(json).then(function (message) {
                    if (message.message == null) {
                        _this.leaveApplication = {};
                        _this.leaveType = _this.leaveTypes[0];
                        _this.data.totalLeaveDurationInDays = 0;
                    }
                });
            });
        };
        LeaveApplicationManagement.prototype.closeStatusSection = function () {
            this.showStatusSection = false;
            if (this.fromHistorySection)
                this.showHistorySection = true;
            else
                this.showApplicationSection = true;
        };
        LeaveApplicationManagement.prototype.applyLeave = function () {
            var _this = this;
            console.log("**************");
            console.log("In apply leave method");
            var foundOccurance = false;
            this.findIfThereIsAnyOvalapping(foundOccurance).then(function (occuranceStatus) {
                foundOccurance = occuranceStatus;
                if (_this.leaveApplication.fromDate == null || _this.leaveApplication.toDate == null || _this.leaveApplication.reason == null) {
                    _this.notify.error("Please fill up all the fields");
                }
                else if (_this.remainingLeavesMap[_this.leaveType.id].daysLeftNumber < _this.leaveApplication.duration) {
                    _this.notify.error("Please select proper duration, you don't have " + _this.leaveApplication.duration + " days of the leave type");
                }
                else if (foundOccurance) {
                    _this.notify.error("Date overlapping is not allowed! Please check your approved applications in  pending leaves or histories.");
                }
                else {
                    _this.convertToJson(ums.Utils.LEAVE_APPLICATION_PENDING).then(function (json) {
                        _this.leaveApplicationService.saveLeaveApplication(json).then(function (message) {
                            console.log("********");
                            console.log(message);
                            if (message[0].message == "") {
                                _this.appId = message[0].id;
                                _this.saveAttachments(message[0].id);
                                _this.leaveApplication = {};
                                _this.leaveType = _this.leaveTypes[0];
                                _this.getPendingApplications();
                            }
                            else {
                                _this.leaveApplication = {};
                            }
                        });
                    });
                }
            });
        };
        LeaveApplicationManagement.prototype.findIfThereIsAnyOvalapping = function (foundOccurance) {
            var defer = this.$q.defer();
            this.leaveApplicationService.fetchApprovedLeavesWithDateRange(this.leaveApplication.fromDate, this.leaveApplication.toDate).then(function (applications) {
                if (applications.length > 0)
                    foundOccurance = true;
                else
                    foundOccurance = false;
                defer.resolve(foundOccurance);
            });
            return defer.promise;
        };
        LeaveApplicationManagement.prototype.fetchApplicationStatus = function (pendingApplication, currentPage) {
            var _this = this;
            this.pagination.currentPage = currentPage;
            this.showStatusSection = true;
            this.showHistorySection = false;
            this.showApplicationSection = false;
            this.pendingApplication = pendingApplication;
            this.applicationStatusList = [];
            this.attachmentService.fetchAttachments(ums.Utils.APPLICATION_TYPE_LEAVE.toString(), pendingApplication.appId).then(function (attachments) {
                _this.fileAttachments = [];
                _this.fileAttachments = attachments;
            });
            this.leaveApplicationStatusService.fetchApplicationStatus(pendingApplication.appId).then(function (statusList) {
                _this.applicationStatusList = statusList;
            });
        };
        LeaveApplicationManagement.prototype.pageChanged = function (currentPage) {
            console.log("current page: " + currentPage);
            this.pagination.currentPage = currentPage;
            this.pageNumber = currentPage;
            if (this.showHistorySection) {
                this.getAllLeaveApplicationsForHistory();
            }
            else {
                this.getRemainingLeaves();
            }
        };
        /*private convertToBinary():ng.IPromise<any>{
         var binaryFiles: Array<any>=[];
         let defer = this.$q.defer();
         if (this.files.length > 0) {
         for (var i = 0; i < this.files.length; i++) {
    
    
         let binaryValue: any = {};
         let reader = new FileReader();
         reader.readAsDataURL(this.files[i]);
    
         reader.onload = () => {
         var dataUrl = reader.result;
         binaryValue = dataUrl;
    
         console.log(dataUrl);
         };
    
    
         }
         }
         }*/
        LeaveApplicationManagement.prototype.getFormData = function (file, id) {
            var formData = new FormData();
            formData.append('files', file);
            console.log(this.files[0].name);
            formData.append('name', file.name);
            formData.append("id", id);
            console.log(formData);
            var defer = this.$q.defer();
            defer.resolve(formData);
            return defer.promise;
        };
        LeaveApplicationManagement.prototype.convertToJson = function (appType) {
            var application = this.leaveApplication;
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            console.log("Lms application");
            console.log(this.leaveApplicationService.employeeId);
            var item = {};
            item['id'] = application.id;
            item['employeeId'] = application.employeeId;
            item['typeId'] = this.leaveType.id;
            item['fromDate'] = application.fromDate;
            item['toDate'] = application.toDate;
            item['reason'] = application.reason;
            item['appStatus'] = appType;
            item['employeeId'] = this.leaveApplicationService.employeeId;
            jsonObject.push(item);
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        LeaveApplicationManagement.$inject = ['appConstants', '$scope', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'userService', 'attachmentService'];
        return LeaveApplicationManagement;
    }());
    ums.UMS.controller("LeaveApplicationManagement", LeaveApplicationManagement);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var LeaveApplicationController = (function () {
        function LeaveApplicationController(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, $timeout, leaveTypeService, leaveApplicationService, leaveApplicationStatusService, userService, attachmentService, $state) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.$timeout = $timeout;
            this.leaveTypeService = leaveTypeService;
            this.leaveApplicationService = leaveApplicationService;
            this.leaveApplicationStatusService = leaveApplicationStatusService;
            this.userService = userService;
            this.attachmentService = attachmentService;
            this.$state = $state;
            this.init();
        }
        LeaveApplicationController.prototype.init = function () {
            this.showLeaveApplicationSection = true;
            this.getUsersInformation();
        };
        LeaveApplicationController.prototype.getUsersInformation = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (user) {
                console.log("User--->");
                console.log(user);
                _this.leaveApplicationService.user = user;
                _this.leaveApplicationService.employeeId = _this.leaveApplicationService.user.employeeId;
            });
        };
        LeaveApplicationController.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'userService', 'attachmentService', '$state'];
        return LeaveApplicationController;
    }());
    ums.LeaveApplicationController = LeaveApplicationController;
    ums.UMS.controller("LeaveApplicationController", LeaveApplicationController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var EmployeeLeaveApplicationController = (function () {
        function EmployeeLeaveApplicationController(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, $timeout, leaveTypeService, leaveApplicationService, leaveApplicationStatusService, userService, attachmentService, $state, employeeService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.$timeout = $timeout;
            this.leaveTypeService = leaveTypeService;
            this.leaveApplicationService = leaveApplicationService;
            this.leaveApplicationStatusService = leaveApplicationStatusService;
            this.userService = userService;
            this.attachmentService = attachmentService;
            this.$state = $state;
            this.employeeService = employeeService;
            this.showLoader = false;
            this.init();
        }
        EmployeeLeaveApplicationController.prototype.init = function () {
            this.showApplicationSection = false;
            this.fetchDeptEmployeeList();
        };
        EmployeeLeaveApplicationController.prototype.employeeSelected = function () {
            var _this = this;
            this.showApplicationSection = false;
            this.leaveApplicationService.employeeId = this.selectedEmployee.id;
            this.userService.getUser(this.selectedEmployee.id).then(function (user) {
                console.log("Fetched user");
                console.log(user);
                _this.leaveApplicationService.user = user;
                _this.leaveApplicationService.user.employeeId = _this.selectedEmployee.id;
                _this.showApplicationSection = true;
            });
        };
        EmployeeLeaveApplicationController.prototype.fetchDeptEmployeeList = function () {
            var _this = this;
            this.showLoader = true;
            this.userService.fetchCurrentUserInfo().then(function (user) {
                _this.employeeService.getEmployees(user.departmentId).then(function (employeeList) {
                    _this.employeeList = [];
                    employeeList.forEach(function (e) {
                        if (e.status.id === 1) {
                            e.employeeName = e.employeeName + "(" + e.department.shortName + ")";
                            var minifiedEmployee = {};
                            minifiedEmployee.id = e.id;
                            minifiedEmployee.employeeName = e.employeeName;
                            _this.employeeList.push(minifiedEmployee);
                        }
                    });
                    _this.showLoader = false;
                });
            });
        };
        EmployeeLeaveApplicationController.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'userService', 'attachmentService', '$state', 'employeeService'];
        return EmployeeLeaveApplicationController;
    }());
    ums.EmployeeLeaveApplicationController = EmployeeLeaveApplicationController;
    ums.UMS.controller("employeeLeaveApplicationController", EmployeeLeaveApplicationController);
})(ums || (ums = {}));
/**
 * Created by My Pc on 22-May-17.
 */
var ums;
(function (ums) {
    var LeaveApplicationApproval = (function () {
        function LeaveApplicationApproval(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, $timeout, leaveTypeService, leaveApplicationService, leaveApplicationStatusService, employeeService, additionalRolePermissionsService, userService, commonservice, attachmentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.$timeout = $timeout;
            this.leaveTypeService = leaveTypeService;
            this.leaveApplicationService = leaveApplicationService;
            this.leaveApplicationStatusService = leaveApplicationStatusService;
            this.employeeService = employeeService;
            this.additionalRolePermissionsService = additionalRolePermissionsService;
            this.userService = userService;
            this.commonservice = commonservice;
            this.attachmentService = attachmentService;
            this.fileAttachments = [];
            this.pagination = {};
            this.resultsPerPage = "15";
            this.showApprovalSection = true;
            this.backgroundColor = "white";
            this.showHistorySection = false;
            this.showStatusSection = false;
            this.activeLeaveSection = false;
            this.fromActiveLeaveSection = false;
            this.fromHistory = false;
            this.pagination.currentPage = 1;
            this.itemsPerPage = +this.resultsPerPage;
            this.disableApproveAndRejectButton = true;
            this.approveOrRejectionComment = "";
            this.data = {};
            this.pageNumber = 1;
            this.leaveApprovalStatusList = [];
            this.leaveApprovalStatusList = this.appConstants.leaveApprovalStatus;
            this.leaveApprovalStatus = this.leaveApprovalStatusList[0];
            this.showRemainingLeaves = false;
            this.initializeDepartmentOffice = this.initializeDepartmentOffice.bind(this);
            //this.getLeaveApplications();
            this.getUsersInformation();
            this.getAdditionaPermissions();
            this.getLeaveTypes();
        }
        LeaveApplicationApproval.prototype.getLeaveTypes = function () {
            var _this = this;
            console.log("*********");
            this.leaveTypes = [];
            this.leaveType = {};
            this.leaveTypeService.fetchLeaveTypes().then(function (leaveTypes) {
                _this.leaveTypes = leaveTypes;
                _this.leaveType = _this.leaveTypes[0];
            });
        };
        LeaveApplicationApproval.prototype.getStatusLabel = function (lmsAppStatus) {
            if (lmsAppStatus.actionStatus == 1)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-default\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else if (lmsAppStatus.actionStatus == 2)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-primary\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else if (lmsAppStatus.actionStatus == 3)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-danger\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else if (lmsAppStatus.actionStatus == 4)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-info\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else if (lmsAppStatus.actionStatus == 5)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-danger\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else if (lmsAppStatus.actionStatus = 6)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-danger\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i> <span class=\"label label-success\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
        };
        LeaveApplicationApproval.prototype.showActiveLeaveSection = function () {
            var _this = this;
            this.activeLeaveSection = true;
            this.showHistorySection = false;
            this.showStatusSection = false;
            this.showApprovalSection = false;
            this.itemsPerPage = 10;
            this.initializeDepartmentOffice().then(function (deptOffice) {
                _this.fetchActiveLeaves(deptOffice);
            });
        };
        LeaveApplicationApproval.prototype.updateLeaveType = function (leaveType) {
            this.leaveType = leaveType;
            this.fetchActiveLeaves(this.deptOffice);
        };
        LeaveApplicationApproval.prototype.fetchActiveLeaves = function (deptOffice) {
            var _this = this;
            if (this.leaveType != null) {
                this.pagination.currentPage = 1;
                this.pendingApplications = [];
                console.log("Want to see leave type");
                console.log(this.leaveType);
                this.leaveApplicationStatusService.fetchLeaveApplicationsActiveOnTheDay(deptOffice.id, +this.leaveType.id, this.pagination.currentPage, this.itemsPerPage).then(function (apps) {
                    _this.pendingApplications = apps.statusList;
                    _this.totalItems = apps.totalSize;
                    console.log("active leaves");
                    console.log(apps);
                });
            }
        };
        LeaveApplicationApproval.prototype.closeActiveLeaveSection = function () {
            this.activeLeaveSection = false;
            this.showHistorySection = false;
            this.showStatusSection = false;
            this.showApprovalSection = true;
            this.getLeaveApplications();
        };
        LeaveApplicationApproval.prototype.downloadAttachment = function (file) {
            this.attachmentService.downloadFile(file.id, file.fileName);
        };
        LeaveApplicationApproval.prototype.initializeDepartmentOffice = function (deptOffice) {
            var defer = this.$q.defer();
            this.deptOffices = [];
            this.deptOffices = this.appConstants.departmentOffice;
            if (deptOffice != null) {
                this.deptOffice = deptOffice;
                console.log("Dept office");
                console.log(this.deptOffice);
                this.fetchActiveLeaves(this.deptOffice);
            }
            else {
                for (var i = 0; i < this.deptOffices.length; i++) {
                    if (this.deptOffices[i].id == ums.Utils.DEPT_ALL)
                        this.deptOffice = this.deptOffices[i];
                }
            }
            defer.resolve(this.deptOffice);
            return defer.promise;
        };
        LeaveApplicationApproval.prototype.showHistory = function () {
            this.leaveApprovalStatusList = this.appConstants.leaveApprovalStatus;
            this.leaveApprovalStatus = this.leaveApprovalStatusList[ums.Utils.LEAVE_APPLICATION_ALL - 1];
            this.pageNumber = 1;
            this.itemsPerPage = 10;
            this.getAllLeaveApplicationsForHistory();
            this.showHistorySection = true;
            this.showStatusSection = false;
            this.showApprovalSection = false;
            this.backgroundColor = "#FAFAD2";
        };
        LeaveApplicationApproval.prototype.closeHistory = function () {
            this.showHistorySection = false;
            this.showStatusSection = true;
            this.showApprovalSection = false;
            this.getUsersInformation();
            this.backgroundColor = "white";
        };
        LeaveApplicationApproval.prototype.getAllLeaveApplicationsForHistory = function () {
            var _this = this;
            this.pendingApplications = [];
            if (this.pagination.currentPage == null)
                this.pagination.currentPage = 1;
            console.log(this.pagination.currentPage);
            this.leaveApplicationStatusService.fetchAllLeaveApplicationsOfEmployeeWithPagination(this.applicantsId, this.leaveApprovalStatus.id, this.pagination.currentPage, this.itemsPerPage).then(function (leaveApplications) {
                _this.pendingApplications = leaveApplications.statusList;
                _this.totalItems = leaveApplications.totalSize;
                console.log("Histories...");
                console.log(_this.pendingApplications);
            });
        };
        LeaveApplicationApproval.prototype.approve = function () {
            this.approveButtonClicked = true;
        };
        LeaveApplicationApproval.prototype.reject = function () {
            this.rejectButtonClicked = true;
        };
        LeaveApplicationApproval.prototype.getAdditionaPermissions = function () {
            var _this = this;
            this.additionalRolePermissionsService.fetchLoggedUserAdditionalRolePermissions().then(function (additionalRolePermissions) {
                _this.additionalRoles = [];
                _this.additionalRoles = additionalRolePermissions;
                console.log("permissions");
                console.log(additionalRolePermissions);
            });
        };
        LeaveApplicationApproval.prototype.saveAction = function () {
            var _this = this;
            this.showRemainingLeaves = false;
            this.convertToJson().then(function (json) {
                _this.leaveApplicationStatusService.saveLeaveApplicationStatus(json).then(function (message) {
                    _this.disableApproveAndRejectButton = true;
                    _this.fetchApplicationStatus(_this.pendingApplication, _this.pagination.currentPage);
                });
            });
        };
        LeaveApplicationApproval.prototype.getUsersInformation = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.userService.fetchCurrentUserInfo().then(function (user) {
                _this.user = user;
                if (_this.user.roleId == ums.Utils.VC)
                    _this.leaveApprovalStatus = _this.leaveApprovalStatusList[ums.Utils.LEAVE_APPLICATION_WAITING_FOR_VC_APPROVAL - 1];
                else if (_this.user.roleId == ums.Utils.REGISTRAR)
                    _this.leaveApprovalStatus = _this.leaveApprovalStatusList[ums.Utils.LEAVE_APPLICATION_WAITING_FOR_REGISTRARS_APPROVAL - 1];
                else
                    _this.leaveApprovalStatus = _this.leaveApprovalStatusList[ums.Utils.LEAVE_APPLICATION_WAITING_FOR_HEADS_APPROVAL - 1];
                _this.fetchLeaveApplications();
                defer.resolve(_this.leaveApprovalStatus);
            });
            return defer.promise;
        };
        LeaveApplicationApproval.prototype.pageChanged = function (pageNumber) {
            this.setCurrent(pageNumber);
        };
        LeaveApplicationApproval.prototype.initialization = function () {
            console.log("Leave constants");
            console.log(this.appConstants.leaveApprovalStatus);
        };
        LeaveApplicationApproval.prototype.setStatusModalContent = function (lmsApplicationStatus) {
            this.statusModal = lmsApplicationStatus;
        };
        LeaveApplicationApproval.prototype.statusChanged = function (leaveApplicationStatus) {
            console.log("In the status change section");
            this.leaveApprovalStatus = leaveApplicationStatus;
            if (this.showHistorySection) {
                this.getAllLeaveApplicationsForHistory();
            }
            else {
                this.getLeaveApplications();
            }
        };
        LeaveApplicationApproval.prototype.closeStatusSection = function () {
            this.showStatusSection = false;
            if (this.fromHistory == true && this.showHistorySection == true) {
                this.showHistory();
            }
            else if (this.fromActiveLeaveSection == true) {
                this.showActiveLeaveSection();
            }
            else {
                this.showApprovalSection = true;
                this.showHistorySection = false;
                this.getLeaveApplications();
            }
        };
        LeaveApplicationApproval.prototype.setResultsPerPage = function (resultsPerPage) {
            console.log("Results per page");
            console.log(resultsPerPage);
            if (isNaN(resultsPerPage) && resultsPerPage >= 1) {
                this.itemsPerPage = resultsPerPage;
                if (this.showHistorySection) {
                    this.getAllLeaveApplicationsForHistory();
                    console.log("In the history section");
                }
                else if (this.activeLeaveSection) {
                    this.fetchActiveLeaves(this.deptOffice);
                    console.log("In the active leave section");
                }
                else
                    this.getLeaveApplications();
            }
        };
        LeaveApplicationApproval.prototype.getRemainingLeaves = function (employeeId) {
            var _this = this;
            this.remainingLeaves = [];
            this.leaveApplicationService.fetchRemainingLeavesByEmployeeId(employeeId).then(function (remainingLeaves) {
                _this.showRemainingLeaves = true;
                _this.remainingLeaves = remainingLeaves;
            });
        };
        LeaveApplicationApproval.prototype.getLeaveApplications = function () {
            this.fetchLeaveApplications();
        };
        LeaveApplicationApproval.prototype.fetchLeaveApplications = function () {
            var _this = this;
            if (this.pagination.currentPage == null)
                this.pagination.currentPage = 1;
            this.pendingApplications = [];
            this.leaveApplicationStatusService.fetchLeaveApplicationsWithPagination(this.leaveApprovalStatus.id, this.pagination.currentPage, this.itemsPerPage).then(function (apps) {
                _this.pendingApplications = apps.statusList;
                _this.totalItems = _this.pendingApplications.length > 0 ? apps.totalSize : 0;
            });
        };
        LeaveApplicationApproval.prototype.setCurrent = function (currentPage) {
            var _this = this;
            console.log("In set current");
            this.pagination.currentPage = currentPage;
            this.pendingApplications = [];
            if (this.showHistorySection) {
                this.getAllLeaveApplicationsForHistory();
            }
            else {
                this.leaveApplicationStatusService.fetchLeaveApplicationsWithPagination(this.leaveApprovalStatus.id, currentPage, this.itemsPerPage).then(function (apps) {
                    _this.pendingApplications = apps.statusList;
                    _this.totalItems = apps.totalSize;
                });
            }
        };
        LeaveApplicationApproval.prototype.fetchApplicationStatus = function (pendingApplication, currentPage) {
            var _this = this;
            console.log("Fetching application status");
            console.log(pendingApplication);
            this.leaveApplicationService.employeeId = pendingApplication.applicantsId;
            if (this.showHistorySection == true) {
                this.fromHistory = true;
            }
            else {
                this.fromHistory = false;
            }
            if (this.activeLeaveSection == true) {
                this.fromActiveLeaveSection = true;
            }
            else {
                this.fromActiveLeaveSection = false;
            }
            this.applicantsId = angular.copy(pendingApplication.applicantsId);
            this.pagination.currentPage = currentPage;
            this.showStatusSection = true;
            this.showApprovalSection = false;
            this.showHistorySection = false;
            this.activeLeaveSection = false;
            this.pendingApplication = pendingApplication;
            this.applicationStatusList = [];
            this.approveButtonClicked = false;
            this.rejectButtonClicked = false;
            if (pendingApplication != undefined)
                this.getRemainingLeaves(pendingApplication.applicantsId);
            // this.attachmentService.fetchAttachments(Utils.APPLICATION_TYPE_LEAVE.toString(), pendingApplication.appId).then((attachments) => {
            //   this.fileAttachments = [];
            //   this.fileAttachments = attachments;
            // });
            console.log("disableApproveAndRejectButton:" + this.disableApproveAndRejectButton);
            this.leaveApplicationStatusService.fetchApplicationStatus(pendingApplication.appId).then(function (statusList) {
                _this.applicationStatusList = statusList;
                _this.decideWhetherToEnableOrDisableActionButtons(_this.applicationStatusList[_this.applicationStatusList.length - 1]);
            });
        };
        LeaveApplicationApproval.prototype.decideWhetherToEnableOrDisableActionButtons = function (pendingApplication) {
            if (pendingApplication.actionStatus == ums.Utils.LEAVE_APPLICATION_WAITING_FOR_HEADS_APPROVAL) {
                for (var i = 0; i < this.additionalRoles.length; i++) {
                    if (this.additionalRoles[i].roleId == ums.Utils.DEPT_HEAD || this.user.roleId == ums.Utils.LIBRARIAN || this.user.roleId == ums.Utils.COE) {
                        this.disableApproveAndRejectButton = false;
                        break;
                    }
                }
            }
            else if (pendingApplication.actionStatus == ums.Utils.LEAVE_APPLICATION_WAITING_FOR_REGISTRARS_APPROVAL) {
                if (this.user.roleId === ums.Utils.REGISTRAR) {
                    this.disableApproveAndRejectButton = false;
                }
            }
            else if (pendingApplication.actionStatus === ums.Utils.LEAVE_APPLICATION_WAITING_FOR_VC_APPROVAL) {
                if (this.user.roleId === ums.Utils.VC) {
                    this.disableApproveAndRejectButton = false;
                }
            }
            else {
                //Do nothing.
            }
        };
        LeaveApplicationApproval.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            var item = {};
            item['appId'] = this.pendingApplication.appId;
            item['comments'] = this.data.comment;
            console.log("approved button clicked or not ***");
            console.log(this.approveButtonClicked);
            if (this.approveButtonClicked) {
                item['leaveApprovalStatus'] = ums.Utils.LEAVE_APPLICATION_ACCEPTED;
                item['comments'] = this.data.comment == null ? "Approved" : this.data.comment;
            }
            else {
                item['leaveApprovalStatus'] = ums.Utils.LEAVE_APPLICATION_REJECTED;
                item['comments'] = this.data.comment == null ? "Rejected" : this.data.comment;
            }
            jsonObject.push(item);
            completeJson['entries'] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        LeaveApplicationApproval.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'employeeService', 'additionalRolePermissionsService', 'userService', 'commonService', 'attachmentService'];
        return LeaveApplicationApproval;
    }());
    ums.UMS.controller("LeaveApplicationApproval", LeaveApplicationApproval);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DegreeAwardController = (function () {
        function DegreeAwardController(appConstants, degreeAwardService, semesterService, programService, programTypeService) {
            this.appConstants = appConstants;
            this.degreeAwardService = degreeAwardService;
            this.semesterService = semesterService;
            this.programService = programService;
            this.programTypeService = programTypeService;
            this.isRightDivAvailable = false;
            this.programTypes = appConstants.programType;
            this.selectedProgramType = this.programTypes[0];
            this.getSemesters();
        }
        DegreeAwardController.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.selectedProgramType.id, 6).then(function (semesters) {
                _this.semesters = [];
                semesters.forEach(function (s) {
                    if (s.status !== 1 && !_this.selectedSemester) {
                        _this.selectedSemester = s;
                    }
                    if (s.status !== 1) {
                        _this.semesters.push(s);
                    }
                });
            });
        };
        DegreeAwardController.prototype.search = function () {
            var _this = this;
            this.isRightDivAvailable = true;
            ums.Utils.expandRightDiv();
            this.degreeAwardService.fetchDegreeAwards(this.selectedSemester.id, +this.selectedProgramType.id).then(function (res) {
                _this.degreeAwards = res;
            });
        };
        DegreeAwardController.prototype.updateDegreeAward = function (degreeAward) {
            this.selectedDegreeAward = degreeAward;
            this.confirmation = false;
        };
        DegreeAwardController.prototype.awardDegree = function () {
            var _this = this;
            this.selectedDegreeAward.awarded = true;
            this.degreeAwardService.updateDegreeAward(this.selectedDegreeAward).then(function (res) {
                _this.degreeAwards = res;
            });
        };
        DegreeAwardController.$inject = ['appConstants', 'degreeAwardService', 'semesterService', 'programService', 'ProgramTypeService'];
        return DegreeAwardController;
    }());
    ums.DegreeAwardController = DegreeAwardController;
    ums.UMS.controller("DegreeAwardController", DegreeAwardController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PublicHolidays = (function () {
        function PublicHolidays(appConstants, httpClient, $q, notify, $sce, $window, $timeout, holidaysService, holidayTypeService, userService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.$timeout = $timeout;
            this.holidaysService = holidaysService;
            this.holidayTypeService = holidayTypeService;
            this.userService = userService;
            var number = 0;
            var date = new Date;
            this.enableEdit = false;
            this.enableButton = false;
            this.showLoader = false;
            var year = date.getFullYear();
            this.year = year;
            this.data = {
                year: year
            };
            this.getLoggedUsersInfo();
        }
        PublicHolidays.prototype.enableOptionClicked = function () {
            this.enableButton = true;
        };
        PublicHolidays.prototype.dateChanged = function () {
            var _this = this;
            this.enableButton = true;
            this.$timeout(function () {
                for (var i = 0; i < _this.holidays.length; i++) {
                    if (_this.holidays[i].fromDate != "" && _this.holidays[i].toDate != "") {
                        var fromDateParts = _this.holidays[i].fromDate.split('-');
                        var fromDate = new Date(fromDateParts[2], fromDateParts[1], fromDateParts[0]);
                        var toDateParts = _this.holidays[i].toDate.split('-');
                        var toDate = new Date(toDateParts[2], toDateParts[1], toDateParts[0]);
                        var timeDiff = Math.abs(toDate.getTime() - fromDate.getTime());
                        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                        _this.holidays[i].duration = diffDays + 1;
                    }
                }
            }, 200);
        };
        PublicHolidays.prototype.getLoggedUsersInfo = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (user) {
                console.log("user info");
                console.log(user);
                _this.user = user;
                if (_this.user.roleId == ums.Utils.REGISTRAR)
                    _this.enableEdit = true;
                _this.getHolidays();
            });
        };
        PublicHolidays.prototype.getHolidays = function () {
            var _this = this;
            this.holidays = [];
            this.showLoader = true;
            this.holidaysService.fetchHolidaysByYear(this.year).then(function (holidays) {
                console.log("Holidays");
                console.log(holidays);
                if (holidays.length == 0)
                    _this.getHolidayTypes();
                else {
                    _this.holidays = holidays;
                    if (_this.enableEdit)
                        _this.holidays = holidays;
                    else
                        _this.holidays = holidays.filter(function (h) { return h.enable == true; });
                }
                _this.showLoader = false;
            });
        };
        PublicHolidays.prototype.save = function () {
            var _this = this;
            var emptyDateFieldFound = this.findEmptyDates();
            if (emptyDateFieldFound)
                this.notify.error("Please fill up all the fields");
            else
                this.convertToJson().then(function (json) {
                    _this.holidaysService.saveHolidays(json);
                    _this.enableButton = false;
                    //this.getHolidays();
                });
        };
        PublicHolidays.prototype.findEmptyDates = function () {
            var found = false;
            for (var i = 0; i < this.holidays.length; i++) {
                if (this.holidays[i].fromDate == '' || this.holidays[i].toDate == '') {
                    found = true;
                    break;
                }
            }
            return found;
        };
        PublicHolidays.prototype.getHolidayTypes = function () {
            var _this = this;
            this.holidayTypes = [];
            this.holidayTypeService.fetchAllHolidayTypes().then(function (holidayTypes) {
                for (var i = 0; i < holidayTypes.length; i++) {
                    var holidays = {};
                    holidays.holidayTypeId = holidayTypes[i].id;
                    holidays.holidayTypeName = holidayTypes[i].name;
                    holidays.moonDependency = holidayTypes[i].moonDependency;
                    holidays.year = _this.year;
                    holidays.fromDate = "";
                    holidays.toDate = "";
                    holidays.duration = 0;
                    _this.holidays.push(holidays);
                }
            });
        };
        PublicHolidays.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            for (var i = 0; i < this.holidays.length; i++) {
                var item = {};
                item['id'] = this.holidays[i].id;
                item['holidayTypeId'] = this.holidays[i].holidayTypeId.toString();
                item['year'] = this.holidays[i].year;
                item['fromDate'] = this.holidays[i].fromDate;
                item['toDate'] = this.holidays[i].toDate;
                if (this.holidays[i].enable)
                    item['enable'] = 1;
                else
                    item['enable'] = 0;
                jsonObject.push(item);
            }
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        PublicHolidays.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', '$timeout', 'holidaysService', 'holidayTypeService', 'userService'];
        return PublicHolidays;
    }());
    ums.UMS.controller("PublicHolidays", PublicHolidays);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var FlushCache = (function () {
        function FlushCache(httpClient) {
            var _this = this;
            this.httpClient = httpClient;
            this.restrict = 'A';
            this.link = function ($scope, element, attributes) {
                element.click(function () {
                    _this.httpClient.post('flushCache', {}, 'application/json')
                        .success(function (data) {
                    }).error(function (data) {
                        console.error(data);
                    });
                });
            };
        }
        return FlushCache;
    }());
    ums.FlushCache = FlushCache;
    ums.UMS.directive("flushCache", ['HttpClient', function (httpClient) {
            return new FlushCache(httpClient);
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var LeftMenu = (function () {
        function LeftMenu(httpClient, $compile, $timeout) {
            var _this = this;
            this.httpClient = httpClient;
            this.$compile = $compile;
            this.$timeout = $timeout;
            this.restrict = 'AE';
            this.link = function ($scope, element, attributes) {
                $scope._menu = { status: [], collapse: {}, hover: [] };
                $scope._menu.mouseleave = function () {
                    for (var j = 0; j < $scope._menu.hover.length; j++) {
                        $scope._menu.hover[j] = '';
                    }
                };
                $scope._menu.mouseover = function (i) {
                    for (var j = 0; j < $scope._menu.hover.length; j++) {
                        $scope._menu.hover[j] = '';
                    }
                    $scope._menu.hover[i] = 'nav-hover';
                };
                $scope._menu.collapse = function (i) {
                    $scope._menu.status[i] = !$scope._menu.status[i];
                    var current = $(element).find('a[index=' + i + ']');
                    current.parent('li').addClass('active').siblings().removeClass('active').children('ul').each(function () {
                        $scope._menu.status[$(this).attr('index')] = true;
                    });
                    if (current.hasClass('btn-fullscreen')) {
                        if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
                            if (document.documentElement.requestFullscreen) {
                                document.documentElement.requestFullscreen();
                            }
                            else if (document.documentElement.msRequestFullscreen) {
                                document.documentElement.msRequestFullscreen();
                            }
                            else if (document.documentElement.mozRequestFullScreen) {
                                document.documentElement.mozRequestFullScreen();
                            }
                            else if (document.documentElement.webkitRequestFullscreen) {
                                document.documentElement.webkitRequestFullscreen(CustomElement.ALLOW_KEYBOARD_INPUT);
                            }
                        }
                        else {
                            if (document.exitFullscreen) {
                                document.exitFullscreen();
                            }
                            else if (document.msExitFullscreen) {
                                document.msExitFullscreen();
                            }
                            else if (document.mozCancelFullScreen) {
                                document.mozCancelFullScreen();
                            }
                            else if (document.webkitExitFullscreen) {
                                document.webkitExitFullscreen();
                            }
                        }
                    }
                };
                var firstLevel = 0;
                $scope.firstLevel = function () {
                    return firstLevel++;
                };
                $scope.secondLevel = function () {
                    return firstLevel++;
                };
                $scope.thirdLevel = function () {
                    return firstLevel++;
                };
                $scope.isMenuLoading = true;
                _this.httpClient.get("mainNavigation", ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                    $scope.isMenuLoading = false;
                    $scope.menuEntries = data.entries;
                    $scope.env = data.e;
                });
                $scope.devIndicator = {
                    "background": "linear-gradient(to right, rgb(255, 255, 255), rgb(109 250 159 / 27%), rgba(41, 185, 162, 0.67))"
                };
            };
            this.templateUrl = "./views/common/navigation.html";
        }
        return LeftMenu;
    }());
    ums.LeftMenu = LeftMenu;
    ums.UMS.directive("ngMenu", ['HttpClient', '$compile', '$timeout', function (httpClient, $compile, $timeout) { return new LeftMenu(httpClient, $compile, $timeout); }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DisableOperation = (function () {
        function DisableOperation() {
            var _this = this;
            this.restrict = 'A';
            this.scope = false;
            this.defaultDisabledOperations = "cut copy paste";
            this.link = function ($scope, element, attributes) {
                if (attributes.disableOperation != '') {
                    _this.defaultDisabledOperations = attributes.disableOperation;
                }
                $(element).bind(_this.defaultDisabledOperations, function (e) {
                    e.preventDefault();
                });
            };
        }
        return DisableOperation;
    }());
    ums.DisableOperation = DisableOperation;
    ums.UMS.directive('disableOperation', function () { return new DisableOperation(); });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Validate = (function () {
        function Validate() {
            this.restrict = 'A';
            this.scope = {
                onvalidate: "="
            };
            this.link = function ($scope, element, attributes) {
                $(element).validate({
                    highlight: function (element, errorClass) {
                        var $element = $(element);
                        // Add the red outline.
                        $element.parent().addClass(errorClass);
                        // Add the red cross.
                        $element.siblings(".error_status").addClass("check");
                    },
                    unhighlight: function (element, errorClass) {
                        var $element = $(element);
                        // Remove the red cross.
                        $element.siblings(".error_status").removeClass("check");
                        // Remove the red outline.
                        $element.parent().removeClass(errorClass);
                    },
                    errorClass: 'state-error',
                    validClass: 'state-success'
                });
                $(element).on('click', 'button.btn-success', function () {
                    if ($(element).valid()) {
                        $scope.onvalidate();
                    }
                });
            };
        }
        return Validate;
    }());
    ums.Validate = Validate;
    ums.UMS.directive("validate", function () { return new Validate(); });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ProgramSelector = (function () {
        function ProgramSelector() {
            this.restrict = "A";
            this.scope = {
                model: "="
            };
            this.link = function (scope, element, attributes) {
            };
            this.templateUrl = "./views/directive/program-selector.html";
        }
        return ProgramSelector;
    }());
    ums.ProgramSelector = ProgramSelector;
    ums.UMS.directive("programSelector", function () { return new ProgramSelector(); });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var FileModel = (function () {
        function FileModel($parse) {
            var _this = this;
            this.$parse = $parse;
            this.restrict = 'A';
            this.link = function ($scope, element, attrs) {
                var model = _this.$parse(attrs.fileModel);
                var modelSetter = model.assign;
                element.bind('change', function () {
                    $scope.$apply(function () {
                        modelSetter($scope, element[0].files[0]);
                    });
                });
            };
        }
        return FileModel;
    }());
    ums.FileModel = FileModel;
    ums.UMS.directive('fileModel', ['$parse', function ($parse) { return new FileModel($parse); }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Image = (function () {
        function Image(httpClient, $q) {
            var _this = this;
            this.httpClient = httpClient;
            this.$q = $q;
            this.restrict = 'A';
            this.scope = {
                userId: "=image"
            };
            this.link = function (scope, element, attributes) {
                var fetchImage = function (id) {
                    _this.httpClient.get("academic/userImage/" + id, '', function (data, etag) {
                        var arr = new Uint8Array(data);
                        var raw = '';
                        var i, j, subArray, chunk = 5000;
                        for (i = 0, j = arr.length; i < j; i += chunk) {
                            subArray = arr.subarray(i, i + chunk);
                            raw += String.fromCharCode.apply(null, subArray);
                        }
                        var b64 = btoa(raw);
                        var dataURL = "data:image/jpeg;base64," + b64;
                        $(element).attr('src', dataURL);
                    }, function (response) {
                        console.error(response);
                    }, 'arraybuffer');
                };
                scope.$watch(function () { return scope.userId; }, function (newVal, oldVal) {
                    if (newVal !== oldVal) {
                        fetchImage(ums.Utils.isNullOrUndefined(newVal) ? "0" : newVal);
                    }
                });
                fetchImage(ums.Utils.isNullOrUndefined(scope.userId) ? "0" : scope.userId);
            };
        }
        return Image;
    }());
    ums.Image = Image;
    ums.UMS.directive("image", ['HttpClient', '$q', function (httpClient, $q) {
            return new Image(httpClient, $q);
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var UITab = (function () {
        function UITab() {
            this.restrict = "A";
            this.link = function ($scope, element, attr) {
                $("a", element).click(function (e) {
                    e.preventDefault();
                });
            };
        }
        return UITab;
    }());
    ums.UITab = UITab;
    ums.UMS.directive("uiTab", function () { return new UITab(); });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MainNavigation = (function () {
        function MainNavigation(httpClient, $templateCache) {
            var _this = this;
            this.httpClient = httpClient;
            this.$templateCache = $templateCache;
            this.restrict = "A";
            this.scope = true;
            this.link = function (scope, element, attr) {
                //Load main navigation (left side menu)
                _this.httpClient.get("mainNavigation", ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                    console.debug("data: %o", data.entries);
                    scope.menuItems = data;
                });
            };
            this.template = this.$templateCache.get(MainNavigation.TEMPLATE_URL);
        }
        MainNavigation.TEMPLATE_URL = "./views/common/navigation.html";
        return MainNavigation;
    }());
    ums.MainNavigation = MainNavigation;
    ums.UMS.directive("mainNavigation", ['HttpClient', '$templateCache', function (httpClient, $templateCache) {
            return new MainNavigation(httpClient, $templateCache);
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var BindHtml = (function () {
        function BindHtml($compile) {
            var _this = this;
            this.$compile = $compile;
            this.restrict = "A";
            this.link = function ($scope, element, attributes) {
                $(element).replaceWith(_this.$compile(attributes['umsBindHtml'])($scope));
            };
        }
        return BindHtml;
    }());
    ums.BindHtml = BindHtml;
    ums.UMS.directive("umsBindHtml", ['$compile', function ($compile) { return new BindHtml($compile); }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    /**
     * This directive works as a wrapper  for a table with pagination.
     * The main target of this directive is to keep the table data and pagination scope centralize.
     * So that who ever uses pagination need not think about the detail implementation, they will
     * only implement the basic data fetch method.  And other implementation detail will be part of this wrapper directive.
     */
    var TablePaginatorWrapper = (function () {
        function TablePaginatorWrapper() {
            this.restrict = "E";
            this.scope = {
                tableprefix: "@",
                ipp: "@",
                dataservice: "&",
                datanotify: "&",
                datalist: "&",
                collectionlist: "="
            };
            this.transclude = 'element';
            this.replace = false;
            this.compile = function (tElement, tAttrs) {
                var parentElement = tElement.parent();
                return function (scope, element, attrs, ctrl, transclude) {
                    transclude(scope.$new(), function (clone, scope) {
                        parentElement.append(clone);
                        scope.pagination = {};
                        scope.pagination.currentPage = 1;
                        scope.filterlist = new Array();
                        scope.data = {
                            readOnlyMode: Boolean,
                            showList: Boolean,
                            showDelete: Boolean,
                            showSave: Boolean,
                            select2Show: Boolean
                        };
                        scope.data.showList = false;
                        scope.data.showDelete = false;
                        scope.data.showSave = false;
                        scope.data.select2Show = false;
                        //Sort function which will be called when  a user tries to sort record by pressing column header.
                        scope.sort = function (field) {
                            return function (order) {
                                scope.orderBy = "Order by " + field + " " + order;
                                //As soon as the user sort a column we will fetch data for the first page
                                //and show him the first page.
                                scope.pageChanged(scope.pagination.currentPage);
                                // scope.pagination.currentPage = 1;
                            };
                        };
                        /**
                         * pageChanged will be called from two different source.
                         * When users  sort a column
                         * When user click on a page number from footer pagination.
                         */
                        scope.pageChanged = function (pageNumber) {
                            scope.fetchData(pageNumber);
                        };
                        /**
                         * Show the action Panel  ( Panel contains view, edit icon in each row )
                         */
                        scope.showActionPanel = function (prefix, index) {
                            $("#" + prefix + index).show();
                        };
                        /**
                         * Hide the action Panel  ( Panel contains view, edit icon in each row )
                         */
                        scope.hideActionPanel = function (prefix, index) {
                            $("#" + prefix + index).hide();
                        };
                        /**
                         * Clicking on the view icon of  a row wil open the editor in no edit mode in the record editor.
                         */
                        scope.viewRecord = function (recordId) {
                            scope.getRecord(recordId, true);
                            scope.data.showList = true;
                            scope.data.showDelete = true;
                        };
                        /**
                         * Show Record Entry Panel (Will be trigger when user click on the (+) icon
                         * From panel header icon group
                         */
                        scope.showRecordPanelForNewEntry = function () {
                            scope.data.showDelete = false;
                            scope.data.showList = false;
                            scope.data.showSave = true;
                            scope.data.select2Show = true;
                            scope.showRecordPanel(false);
                        };
                        /**
                         *Clicking on the edit icon of  a row wil open the editor in edit mode in the record editor.
                         */
                        scope.editRecord = function (recordId) {
                            scope.getRecord(recordId, false);
                            scope.data.showList = true;
                            scope.data.showDelete = true;
                            scope.data.showSave = true;
                        };
                        scope.getRecord = function (recordId, readOnlyMode) {
                            this.dataservice().getRecord(recordId).then(function successCallback(record) {
                                scope.showRecordPanel(readOnlyMode);
                                scope.data.select2Show = false;
                                scope.record = record;
                                setTimeout(function () {
                                    scope.data.select2Show = true;
                                }, 100);
                            }, function errorCallback(response) {
                            });
                        };
                        /**
                         * Search record when the user click ont he search button from the search panel.
                         * And  the search action will show the for first page.
                         */
                        scope.search = function () {
                            scope.showResultPanel();
                            scope.fetchData(1);
                            scope.pagination.currentPage = 1;
                        };
                        /**
                         * Show search result panel
                         */
                        scope.showResultPanel = function () {
                            $("#searchPanel_" + scope.tableprefix).hide('slide', { direction: 'left' }, 400);
                            $("#listPanel_" + scope.tableprefix).show('slide', { direction: 'right' }, 400);
                            $("#entryPanel_" + scope.tableprefix).hide('slide', { direction: 'right' });
                            scope.data.showDelete = false;
                            scope.data.showList = false;
                        };
                        /**
                         * Show Search Panel
                         */
                        scope.showSearchPanel = function () {
                            $("#searchPanel_" + scope.tableprefix).show('slide', { direction: 'left' }, 400);
                            $("#listPanel_" + scope.tableprefix).hide('slide', { direction: 'right' }, 400);
                            $("#entryPanel_" + scope.tableprefix).hide('slide', { direction: 'right' }, 400);
                            $("#pageTitle_" + scope.tableprefix).html("Search " + scope.tableprefix);
                        };
                        /**
                         * Show Record Panel
                         */
                        scope.showRecordPanel = function (readOnlyMode) {
                            $("#searchPanel_" + scope.tableprefix).hide('slide', { direction: 'left' }, 400);
                            $("#listPanel_" + scope.tableprefix).hide('slide', { direction: 'right' }, 400);
                            $("#entryPanel_" + scope.tableprefix).show('slide', { direction: 'right' }, 400);
                            $("#pageTitle_" + scope.tableprefix).html("New " + scope.tableprefix);
                            scope.data.readOnlyMode = readOnlyMode;
                            scope.record = {};
                        };
                        /**
                         * Responsible for fetch data from database with the help of service's
                         * fetchDataForPaginationTable method.
                         */
                        scope.fetchData = function (pageNumber) {
                            this.dataservice().fetchDataForPaginationTable()(pageNumber, scope.orderBy, scope.ipp, scope.filterlist).then(function (resultData) {
                                scope.records = resultData.entries;
                                scope.total = resultData.total;
                            });
                        };
                        /**
                         * Save Record.
                         */
                        scope.saveRecord = function () {
                            if (scope.record.id === undefined) {
                                scope.createNewRecord();
                            }
                            else {
                                scope.updateRecord();
                            }
                        };
                        /**
                         * Create a new record
                         */
                        scope.createNewRecord = function () {
                            var self = this;
                            this.dataservice().createNewRecord(scope.record).then(function successCallback(response) {
                                scope.datanotify().show(response);
                                if (response.responseType != "error")
                                    scope.record = {};
                            }, function errorCallback(response) {
                                scope.datanotify().error(response);
                            });
                        };
                        /**
                         * Update an existing record
                         */
                        scope.updateRecord = function () {
                            this.dataservice().updateRecord(scope.record).then(function (response) {
                                scope.datanotify().show(response);
                            }, function (response) {
                                scope.datanotify().error(response);
                                console.error(response);
                            });
                        };
                        /**
                         * Delete the currently selected record
                         */
                        scope.deleteRecord = function () {
                            var deleteConfirmation = confirm("Are you sure, you want to delete selected record ?");
                            if (deleteConfirmation == true) {
                                this.dataservice().deleteRecord(scope.record.id).then(function (response) {
                                    scope.fetchData(scope.pagination.currentPage);
                                    scope.showResultPanel();
                                    scope.datanotify().show(response);
                                }, function (response) {
                                    scope.datanotify().error(response);
                                    console.error(response);
                                });
                            }
                        };
                    });
                };
            };
        }
        return TablePaginatorWrapper;
    }());
    ums.TablePaginatorWrapper = TablePaginatorWrapper;
    ums.UMS.directive("tablePaginatorWrapper", function () { return new TablePaginatorWrapper(); });
})(ums || (ums = {}));
//asdfadssadasdfasdfdsaf sfsadfsd
/**
 * Created by My Pc on 05-Oct-16.
 */
var ums;
(function (ums) {
    var AutoComplete = (function () {
        function AutoComplete($timeout) {
            var _this = this;
            this.$timeout = $timeout;
            this.restrict = "A";
            this.scope = {
                autoSuggestionList: '=suggestionList',
                addedStudents: '=x',
                firstSelected: '=firstSelected',
                secondSelected: '=secondSelected',
                showOneInputArea: '=showOneInputArea',
                addFirstSelectedValue: '&addFirst',
                addSecondSelectedValue: '&addSecond',
                addOneStudent: '&addOne',
                addRangeStudent: '&addRange'
            };
            this.link = function ($scope, element, attributes) {
                console.log("Hello there");
                console.log($scope);
                $scope.selected = {};
                var currentScope = _this;
                $scope.$watch('showOneInputArea', function (value, oldValue) {
                    console.log("Showing the input area");
                    console.log($scope.showOneInputArea);
                    if ($scope.showOneInputArea == true) {
                        $("#showTwo").hide();
                    }
                    else {
                        $("#showOne").hide();
                        console.log("Hiding");
                    }
                });
                var firstSelectable = {
                    source: $scope.autoSuggestionList,
                    minLength: 2,
                    maxLength: 10,
                    autoFocus: true,
                    select: function (event, ui) {
                        var id = ui.item.value;
                        console.log(event);
                        $scope.addFirstSelectedValue({ id: ui.item.value });
                    }
                };
                console.log("value changed");
                $("#tags").autocomplete(firstSelectable);
                var secondSelectable = {
                    source: $scope.autoSuggestionList,
                    select: function (event, ui) {
                        var id = ui.item.value;
                        console.log($scope);
                        console.log(ui.item.value);
                        $scope.addSecondSelectedValue({ id: ui.item.value });
                    }
                };
                $("#tags2").autocomplete(secondSelectable);
                var oneSelectable = {
                    source: $scope.autoSuggestionList,
                    select: function (event, ui) {
                        var id = ui.item.value;
                        console.log(event);
                        $scope.addFirstSelectedValue({ id: ui.item.value });
                    }
                };
                $("#tags3").autocomplete(oneSelectable);
                //$scope.$watch('addedStudents',(value)=>{
                currentScope.$timeout(function () {
                    $("#addOneBtn").click(function () {
                        console.log("in the click event");
                        $scope.addOneStudent();
                    });
                    $("#addSrcBtn").click(function () {
                        console.log("in the click event");
                        $scope.addOneStudent();
                    });
                    $("#addRangeBtn").click(function () {
                        console.log("in the click event");
                        $scope.addRangeStudent();
                    });
                });
                //});
            };
            this.templateUrl = "./views/directive/auto-completion.html";
        }
        AutoComplete.$inject = ['$timeout'];
        return AutoComplete;
    }());
    ums.UMS.directive("autoComplete", ['$timeout', function ($timeout) { return new AutoComplete($timeout); }]);
})(ums || (ums = {}));
/**
 * Created by My Pc on 17-Jul-17.
 */
var ums;
(function (ums) {
    var FileInput = (function () {
        function FileInput($parse) {
            var _this = this;
            this.$parse = $parse;
            this.restrict = "A";
            this.link = function ($scope, element, attributes) {
                element.bind('change', function () {
                    _this.$parse(attributes.fileInput)
                        .assign($scope, element[0].files);
                    $scope.$apply();
                });
            };
        }
        FileInput.$inject = ['$parse'];
        return FileInput;
    }());
    ums.UMS.directive("fileInput", ['$parse', function ($parse) { return new FileInput($parse); }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var EmployeeSearchController = (function () {
        function EmployeeSearchController($scope, employeeService, departmentService, $q) {
            this.$scope = $scope;
            this.employeeService = employeeService;
            this.departmentService = departmentService;
            this.$q = $q;
            $scope.initialize = this.initialize.bind(this);
        }
        EmployeeSearchController.prototype.initialize = function () {
            var _this = this;
            console.log("In the initializations");
            this.employees = [];
            this.employeesTmp = [];
            this.employeeService.getAll().then(function (employees) {
                _this.employees = employees;
                _this.employeesTmp = angular.copy(_this.employees);
                _this.gridOptions.data = _this.employees;
            });
        };
        EmployeeSearchController.$inject = ['$scope', 'employeeService', 'departmentService', '$q'];
        return EmployeeSearchController;
    }());
    var EmployeeSearchDir = (function () {
        function EmployeeSearchDir() {
            this.restrict = 'EA';
            this.scope = {};
            this.controller = EmployeeSearchController;
            this.controllerAs = 'vm';
            this.link = function (scope, element, attributes) {
                scope.initialize();
            };
            this.templateUrl = './views/directive/employee-search-directive/employee-search-dir.html';
        }
        return EmployeeSearchDir;
    }());
    ums.UMS.directive("employeeSearchDir", [function () {
            return new EmployeeSearchDir();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DatePicker = (function () {
        function DatePicker($timeout) {
            var _this = this;
            this.$timeout = $timeout;
            this.restrict = "EA";
            this.scope = {
                model: '=dateModel',
                format: '@dateFormat',
                disable: '@disable',
                dateChanged: '&dateChanged'
            };
            this.link = function ($scope, element, attribute) {
                console.log("disable: " + $scope.disable);
                console.log($scope.model);
                var dateFormat = $scope.format;
                if ($scope.disable == true) {
                    $('.datepicker-default').enableSelection();
                }
                else {
                    $('.datepicker-default').enableSelection();
                }
                _this.$timeout(function () {
                    $('.datepicker-default').datepicker({
                        dateFormat: $scope.dateFormat
                    });
                    $('.datepicker-default').on('change', function () {
                        $('.datepicker').hide();
                    });
                    console.log("------");
                });
            };
            this.templateUrl = "./views/directive/date-picker.html";
        }
        DatePicker.$inject = ['$timeout'];
        return DatePicker;
    }());
    ums.UMS.directive('datePicker', ['$timeout', function ($timeout) { return new DatePicker($timeout); }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DateTimePicker = (function () {
        function DateTimePicker() {
            this.restrict = "EA";
            this.scope = {
                ngModel: '=ngModel',
                format: '@modelFormat'
            };
            this.link = function (scope, element, attributes) {
                //var parent = $(element).parent();
                /*element.datetimepicker({
                    autoclose: true,
                    onClose: function(dateText,datePickerInstance) {
                        console.log(dateText);
                        $(element).change();
                    }});*/
                console.log(scope);
                element.datetimepicker({
                    format: scope.format,
                    autoclose: true
                });
                element.on('change.dp', function (e) {
                    scope.ngModel = moment(e.date).format(scope.format).toString();
                    console.log(scope.ngModel);
                    scope.$apply();
                });
            };
        }
        DateTimePicker.$inject = ['$setViewValue'];
        return DateTimePicker;
    }());
    ums.DateTimePicker = DateTimePicker;
    ums.UMS.directive('dateTimePicker', [function () { return new DateTimePicker(); }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var UIDatePickerController = (function () {
        function UIDatePickerController($scope) {
            this.$scope = $scope;
            $scope.dateSelected = this.dateSelected.bind(this);
            console.log("YOOOO");
        }
        UIDatePickerController.prototype.dateSelected = function () {
            console.log("Date from directive");
            console.log(this.$scope.date);
            var date = this.$scope.date;
            this.$scope.model = moment(date).format("dd-mm-yyyy");
            console.log("Model");
            console.log(this.$scope.model);
            this.$scope.dateChanged();
        };
        UIDatePickerController.$inject = ['$scope'];
        return UIDatePickerController;
    }());
    ums.UIDatePickerController = UIDatePickerController;
    var DatePicker = (function () {
        function DatePicker($timeout) {
            this.$timeout = $timeout;
            this.restrict = "EA";
            this.scope = {
                model: '=dateModel',
                format: '@dateFormat',
                disable: '@disable',
                dateChanged: '&dateChanged',
                dateModelChanged: '&dateModelChanged',
                dateOptions: '=dateOptions'
            };
            this.controller = UIDatePickerController;
            this.link = function ($scope, element, attribute) {
                $scope.dateOptions = {
                    dateDisabled: false,
                    formatYear: 'dd-mm-yyyy',
                    maxDate: new Date(2099, 5, 22),
                    minDate: new Date(),
                    startingDay: 1
                };
                if ($scope.disable == undefined || $scope.disable == null)
                    $scope.disable = false;
            };
            this.templateUrl = "./views/directive/ui-date-picker.html";
        }
        DatePicker.$inject = ['$timeout'];
        return DatePicker;
    }());
    ums.UMS.directive('uiDatePicker', ['$timeout', function ($timeout) { return new DatePicker($timeout); }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var GeneralTab = (function () {
        function GeneralTab() {
            this.restrict = 'A';
            this.link = function ($scope, element) {
                element.click(function (e) {
                    e.preventDefault();
                });
            };
        }
        return GeneralTab;
    }());
    ums.GeneralTab = GeneralTab;
    ums.UMS.directive("generaltab", [function () {
            return new GeneralTab();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var BankHttpService = (function () {
        function BankHttpService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        BankHttpService.prototype.getResource = function (resource, conveter) {
            var defer = this.$q.defer();
            this.httpClient.get(resource.getUri(), ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(conveter.deserialize(response)); });
            return defer.promise;
        };
        BankHttpService.prototype.postResource = function (resource, converter) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(resource.getUri(), converter.serialize(resource.getData()), ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(converter.deserialize(response)); })
                .error(function (response) {
                _this.notify.error("Error while creating");
                return defer.resolve(null);
            });
            return defer.promise;
        };
        BankHttpService.prototype.putResource = function (resource, converter) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put(resource.getUri(), converter.serialize(resource.getData()), ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                defer.resolve(converter.deserialize(response));
            })
                .error(function (response) {
                _this.notify.error("Error while updating");
                return defer.resolve(null);
            });
            return defer.promise;
        };
        BankHttpService.prototype.deleteResource = function (resource) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.doDelete(resource.getUri())
                .success(function (response) {
                defer.resolve(true);
            })
                .error(function (response) {
                _this.notify.error("Error while deleting");
                return defer.resolve(false);
            });
            return defer.promise;
        };
        BankHttpService.$inject = ['$q', 'HttpClient', 'notify'];
        return BankHttpService;
    }());
    ums.BankHttpService = BankHttpService;
    ums.UMS.service('BankHttpService', BankHttpService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var BankResource = (function () {
        function BankResource(uri, data, headers) {
            this._uri = uri;
            this._data = data;
            this._headers = headers;
        }
        BankResource.prototype.getUri = function () {
            return this._uri;
        };
        BankResource.prototype.getData = function () {
            return this._data;
        };
        BankResource.prototype.getHeaders = function () {
            return this._headers;
        };
        return BankResource;
    }());
    ums.BankResource = BankResource;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var BankService = (function () {
        function BankService(bankHttpService) {
            this.bankHttpService = bankHttpService;
        }
        BankService.prototype.getBanks = function () {
            var bankResource = new ums.BankResource('bank/all-active');
            var bankConverter = new ums.IdentityConverter();
            return this.bankHttpService.getResource(bankResource, bankConverter);
        };
        BankService.prototype.getBankOfTheUser = function () {
            var bankResource = new ums.BankResource('bank/user');
            var bankConverter = new ums.IdentityConverter();
            return this.bankHttpService.getResource(bankResource, bankConverter);
        };
        BankService.prototype.updateBank = function (bank) {
            var bankResource = new ums.BankResource("bank/" + bank.id, bank);
            var bankConverter = new ums.IdentityConverter();
            return this.bankHttpService.putResource(bankResource, bankConverter);
        };
        BankService.prototype.getBank = function (bankId) {
            var bankResource = new ums.BankResource("bank/" + bankId);
            var bankConverter = new ums.IdentityConverter();
            return this.bankHttpService.getResource(bankResource, bankConverter);
        };
        BankService.prototype.getDesignations = function () {
            var designationResource = new ums.BankResource('bank/designation/all');
            var designationConverter = new ums.IdentityConverter();
            return this.bankHttpService.getResource(designationResource, designationConverter);
        };
        BankService.prototype.getDesignation = function (id) {
            var designationResource = new ums.BankResource("bank/designation/" + id);
            var designationConverter = new ums.IdentityConverter();
            return this.bankHttpService.getResource(designationResource, designationConverter);
        };
        BankService.prototype.createDesignation = function (bankDesignation) {
            var designationResource = new ums.BankResource("bank/designation", bankDesignation);
            var designationConverter = new ums.IdentityConverter();
            return this.bankHttpService.postResource(designationResource, designationConverter);
        };
        BankService.prototype.updateDesignation = function (bankDesignation) {
            var designationResource = new ums.BankResource("bank/designation/" + bankDesignation.id, bankDesignation);
            var designationConverter = new ums.IdentityConverter();
            return this.bankHttpService.putResource(designationResource, designationConverter);
        };
        BankService.prototype.deleteDesignation = function (bankDesignation) {
            var designationResource = new ums.BankResource("bank/designation/" + bankDesignation.id);
            return this.bankHttpService.deleteResource(designationResource);
        };
        BankService.prototype.getBranches = function (bankId) {
            var branchResource = new ums.BankResource("bank/branch/" + bankId + "/all");
            var branchConverter = new ums.IdentityConverter();
            return this.bankHttpService.getResource(branchResource, branchConverter);
        };
        BankService.prototype.getBranch = function (branchId) {
            var branchResource = new ums.BankResource("bank/branch/" + branchId);
            var branchConverter = new ums.IdentityConverter();
            return this.bankHttpService.getResource(branchResource, branchConverter);
        };
        BankService.prototype.getBranchOfTheUser = function () {
            var branchResource = new ums.BankResource("bank/branch/branchOfTheUser");
            var branchConverter = new ums.IdentityConverter();
            return this.bankHttpService.getResource(branchResource, branchConverter);
        };
        BankService.prototype.createBranch = function (branch) {
            var branchResource = new ums.BankResource("bank/branch", branch);
            var branchConverter = new ums.IdentityConverter();
            return this.bankHttpService.postResource(branchResource, branchConverter);
        };
        BankService.prototype.updateBranch = function (branch) {
            var branchResource = new ums.BankResource("bank/branch/" + branch.id, branch);
            var branchConverter = new ums.IdentityConverter();
            return this.bankHttpService.putResource(branchResource, branchConverter);
        };
        BankService.prototype.deleteBranch = function (branch) {
            var branchResource = new ums.BankResource("bank/branch/disableOrEnable/" + branch.id);
            return this.bankHttpService.deleteResource(branchResource);
        };
        BankService.prototype.getUsers = function (branchId) {
            var userResource = new ums.BankResource("bank/branch/user/" + branchId + "/all");
            var userConverter = new ums.IdentityConverter();
            return this.bankHttpService.getResource(userResource, userConverter);
        };
        BankService.prototype.createUser = function (user) {
            var userResource = new ums.BankResource("bank/branch/user", user);
            var userConverter = new ums.IdentityConverter();
            return this.bankHttpService.postResource(userResource, userConverter);
        };
        BankService.prototype.updateUser = function (user) {
            var userResource = new ums.BankResource("bank/branch/user/" + user.id, user);
            var userConverter = new ums.IdentityConverter();
            return this.bankHttpService.putResource(userResource, userConverter);
        };
        BankService.prototype.deleteUser = function (user) {
            var userResource = new ums.BankResource("bank/branch/user/disableOrEnableUser/" + user.id);
            return this.bankHttpService.deleteResource(userResource);
        };
        BankService.$inject = ['BankHttpService'];
        return BankService;
    }());
    ums.BankService = BankService;
    ums.UMS.service('BankService', BankService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var IdentityConverter = (function () {
        function IdentityConverter() {
        }
        IdentityConverter.prototype.serialize = function (obj) {
            return obj;
        };
        IdentityConverter.prototype.deserialize = function (obj) {
            return obj;
        };
        return IdentityConverter;
    }());
    ums.IdentityConverter = IdentityConverter;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ChangeRequestService = (function () {
        function ChangeRequestService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        ChangeRequestService.prototype.getChangeRequest = function () {
            var _this = this;
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/changeRequest/activerequest", 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
                //alert(cresult);
            }, function (response) {
                _this.notify.error("Error in getting active request data");
            });
            return defer.promise;
        };
        ChangeRequestService.prototype.getChangeRequestHistory = function () {
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/requestDetail/requestHistory", 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
            });
            return defer.promise;
        };
        ChangeRequestService.prototype.getRequestList = function (studentId) {
            var _this = this;
            console.log("Logged Student Id=", studentId);
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/requestDetail/student_request", 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting request panel data");
            });
            return defer.promise;
        };
        /***
         * Request Status for of all users
         * */
        ChangeRequestService.prototype.getRequestStatus = function () {
            var _this = this;
            //console.log("Logged Student Id=", studentId);
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/requestDetail/all_request_request", 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting request status");
            });
            return defer.promise;
        };
        /***
         * Request Status for registrar office only
         * */
        ChangeRequestService.prototype.getRegistrarRequestStatus = function () {
            var _this = this;
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/requestDetail/all_request_request", 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting request status");
            });
            return defer.promise;
        };
        /****
         * Get previous request status of a student
         * */
        ChangeRequestService.prototype.getLastRequestStatus = function (requestId) {
            var _this = this;
            console.log("Logged Request Id=", requestId);
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/requestDetail/lastRequestStatus/" + requestId, 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting Last request Data ");
            });
            return defer.promise;
        };
        /****
         * Get previous request status of a student
         * */
        ChangeRequestService.prototype.getLastRequestDetailStatus = function (requestDetailId) {
            var _this = this;
            console.log("Logged Request Id=", requestDetailId);
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/requestDetail/lastRequestDetailStatus/" + requestDetailId, 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting Last request Data ");
            });
            return defer.promise;
        };
        /****
         * Get All request status of a student
         * */
        ChangeRequestService.prototype.getStudentRequestStatus = function (studentId) {
            var _this = this;
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/requestDetail/all_applied_request", 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting All request Data ");
            });
            return defer.promise;
        };
        /****
         * Get pending request status of a student
         * */
        ChangeRequestService.prototype.getPendingRequestStatus = function (requestSubmissionId) {
            var _this = this;
            console.log("Logged Request Id=", requestSubmissionId);
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/requestDetail/pendingRequestStatus/" + requestSubmissionId, 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting pending request data");
            });
            return defer.promise;
        };
        /*
        * @title: Cancel student's application
        * @author: evana
        * */
        ChangeRequestService.prototype.CancelApplication = function (jsonobj) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("/ums-webservice-academic/academic/requestDetail/cancelApplication", jsonobj, 'application/json')
                .success(function () {
                _this.notify.info("Your Application is canceled successfully.");
            })
                .error(function (data) {
                _this.notify.error("Your Application can not be canceled.");
                console.log(data);
            });
            return defer.promise;
        };
        /****
         * Get request Detail of a selected request
         * */
        ChangeRequestService.prototype.getRequestDetail = function (requestId) {
            var _this = this;
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/requestDetail/RequestDetail/" + requestId, 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting request detail data");
            });
            return defer.promise;
        };
        /****
         * Apply for the Name correction Fee
         * */
        ChangeRequestService.prototype.apply = function (requestDId, categoryId, requestSubmissionId) {
            var _this = this;
            var resourceUrl = "correction-fee/apply/request/" + requestDId + "/category/" + categoryId + "/submission/" + requestSubmissionId;
            var defer = this.$q.defer();
            this.httpClient.post(resourceUrl, {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                _this.notify.success("Successfully Applied.");
                $("#currButton").prop("disabled", true);
                defer.resolve(true);
            })
                .error(function () {
                _this.notify.error("Error in applying");
                defer.resolve(false);
            });
            return defer.promise;
        };
        /****
         * Log insert for generic functionality
         * */
        ChangeRequestService.prototype.LogInsert = function (jsonobj) {
            var defer = this.$q.defer();
            this.httpClient.post("/ums-webservice-academic/academic/changeRequestLog/createLog", jsonobj, 'application/json')
                .success(function () {
            })
                .error(function (data) {
                console.log(data);
            });
            return defer.promise;
        };
        ChangeRequestService.prototype.getCorrectionStatus = function (requestSubmissionId) {
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("correction-fee/correction-status/" + requestSubmissionId, 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                //this.notify.error("Error in getting correction status data");
            });
            return defer.promise;
        };
        ChangeRequestService.prototype.getCorrectionPaymentStatus = function (requestSubmissionId) {
            var _this = this;
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("/ums-webservice-academic/academic/requestDetail/payment_status/" + requestSubmissionId, 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting payment status data");
            });
            return defer.promise;
        };
        ChangeRequestService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return ChangeRequestService;
    }());
    ums.ChangeRequestService = ChangeRequestService;
    ums.UMS.service("changeRequestService", ChangeRequestService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ProfileChangeRequest = (function () {
        function ProfileChangeRequest(appConstants, $scope, httpClient, $q, notify, $sce, $window, userService, studentService, changeRequestService, paymentService, feeReportService, feeCategoryService, detailedStudentPaymentService, $stateParams, $state, $location) {
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.userService = userService;
            this.studentService = studentService;
            this.changeRequestService = changeRequestService;
            this.paymentService = paymentService;
            this.feeReportService = feeReportService;
            this.feeCategoryService = feeCategoryService;
            this.detailedStudentPaymentService = detailedStudentPaymentService;
            this.$stateParams = $stateParams;
            this.$state = $state;
            this.$location = $location;
            this.fjsonObject = {};
            this.correctionStatus = [];
            if (this.$location.search().request_no) {
                var encdata = this.$location.search().request_no;
                var urlData = this.getDecodedData(encdata);
                var myArray = urlData.split("@");
                this.requestId = myArray[0];
                this.requestStatus = myArray[1];
                this.requestDetailId = myArray[2];
                this.currDate = new Date();
                this.transactionValid = 0;
                this.paymentStatus = 0;
                this.$scope.uniqueFileName = "";
                this.deadlineFlag = 0;
            }
            this.flag = false;
            this.initializeDatePickers();
            this.fetchLoggedinUser();
            this.getLastRequestStatus();
            this.getProfileInfo();
            this.getCorrectionFeePaymentStatus();
        }
        ProfileChangeRequest.prototype.windowRefresh = function () {
            window.location.reload(false);
        };
        /*
        * @request panel populating for student's request submission
        * */
        ProfileChangeRequest.prototype.fetchLoggedinUser = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (d) {
                _this.roleId = d.roleId;
                _this.studentId = d.id;
                _this.studentFullname = d.name;
                _this.disableApply = false;
            });
        };
        /*
        * Retrieve student profile
        * ****/
        ProfileChangeRequest.prototype.getProfileInfo = function () {
            var _this = this;
            this.httpClient.get('academic/student/profile', ums.HttpClient.MIME_TYPE_JSON, function (response, etag) {
                _this.$scope.student = response;
                _this.studentEmail = _this.$scope.student.email;
                _this.studentMobile = _this.$scope.student.mobileNo;
                _this.studentYear = _this.$scope.student.year;
                _this.studentSemester = _this.$scope.student.semester;
                _this.studentFullname = _this.$scope.student.fullName;
                _this.fatherPreviousName = _this.$scope.student.fatherName;
                _this.motherPreviousName = _this.$scope.student.motherName;
                _this.previousDob = _this.$scope.student.dateOfBirth;
                console.log("Student Information=", _this.$scope.student);
                console.log("Student Email=", _this.studentEmail);
                _this.$scope.etag = etag;
            });
        };
        /***
         * Retrieve Previous Request Status
         * */
        ProfileChangeRequest.prototype.getLastRequestStatus = function () {
            var _this = this;
            this.$scope.requestStatus = [];
            var encodedid = "";
            this.changeRequestService.getLastRequestDetailStatus(this.requestDetailId).then(function (record) {
                _this.$scope.requestStatus = record.entries;
                console.log("Last Request data=" + _this.$scope.requestStatus);
                _this.lastRequestStatus = _this.$scope.requestStatus[0].requestInitiatedStatus;
                _this.lastRequestDate = _this.$scope.requestStatus[0].requestCreatedOn;
                _this.extendedRequestDate = _this.$scope.requestStatus[0].requestSubmissionDeadline;
                _this.selectedReasonType = _this.$scope.requestStatus[0].reasonType;
                _this.requestDetailId = _this.$scope.requestStatus[0].id;
                _this.requestSubmissionId = _this.$scope.requestStatus[0].requestSubmissionId;
                _this.requesteReason = _this.$scope.requestStatus[0].requestDescription;
                _this.registrarRemarks = _this.$scope.requestStatus[0].remarks;
                _this.rejectReason = _this.$scope.requestStatus[0].rejectReason;
                _this.students_documents = _this.$scope.requestStatus[0].supportedDocuments;
                _this.effidevitFile = _this.$scope.requestStatus[0].effidevitFile;
                if (_this.extendedRequestDate != '' || _this.extendedRequestDate != 'null') {
                    var extentedDeadline = new Date(_this.extendedRequestDate);
                    if (_this.currDate > extentedDeadline) {
                        _this.deadlineFlag = 0;
                    }
                    else {
                        _this.deadlineFlag = 1;
                    }
                }
                _this.getCorrectionStatus(_this.requestSubmissionId);
                console.log("getLastRequestStatus=", _this.$scope.requestStatus);
            });
        };
        ProfileChangeRequest.prototype.updateStudentProfile = function () {
            var firstName = "";
            var lastName = "";
            var fullName = "";
            var studentId = "";
            var request_reason = "";
            firstName = $("#firstName").val();
            lastName = $("#lastName").val();
            request_reason = $("#request_reason").val();
            if (firstName === "" || firstName === null) {
                $("#firstName").css({ "background-color": "#f7fff7" });
                $("#firstName").focus();
                $("#firstName").attr('placeholder', 'Please Enter First Name!');
                return false;
            }
            else {
                firstName = firstName.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
            }
            if (lastName != null || lastName !== "") {
                lastName = lastName.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
            }
            if ($.trim($('#request_reason').val()) == '') {
                $("#request_reason").css({ "background-color": "#f7fff7" });
                $("#request_reason").focus();
                $("#request_reason").attr('placeholder', 'Please write your reason of correction!');
                return false;
            }
            else {
                request_reason = request_reason.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
            }
            studentId = this.studentId;
            fullName = firstName + " " + lastName;
            var jsonobj = {};
            jsonobj["studentId"] = studentId;
            jsonobj["firstName"] = firstName;
            jsonobj["lastName"] = lastName;
            jsonobj["fullName"] = fullName;
            jsonobj["request_reason"] = request_reason;
            this.studentService.updateStudentProfile(jsonobj).then(function (success) {
            });
        };
        ProfileChangeRequest.prototype.fieldValidation = function (fieldName) {
            var edited_field;
            edited_field = fieldName.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
            return edited_field;
        };
        /*
        * @dated: 10/01/2023
        * @Desc: Student's application cancellation
        * */
        ProfileChangeRequest.prototype.cancelApplication = function (requdId) {
            //alert("Cancel my Application"+requdId);
            var jsonobj = {};
            jsonobj["reqId"] = requdId;
            jsonobj["requestInitiatedStatus"] = 7;
            this.changeRequestService.CancelApplication(jsonobj).then(function (record) {
                //this.cancelPayment(this.requestDetailId,this.requestSubmissionId);
            });
        };
        ProfileChangeRequest.prototype.documentUpload = function () {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            event.preventDefault();
            if ($('#supported_file').val() == "" || $('#supported_file').val() == null) {
                this.notify.error("Please select your file first to upload.");
                defer.resolve('failure');
            }
            else {
                var file_data = $('#supported_file').prop('files')[0];
                var fileName = $("#supported_file")[0].files[0].name; //get file name
                var file_extension = file_data.type;
                var fileExtension = fileName.split('.').pop();
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                this.$scope.uniqueFileName = new Date().getTime() + "." + fileExtension;
                if (!re.exec(this.$scope.uniqueFileName)) {
                    $("#supported_file").val(null);
                    this.notify.error("File type does not support. Please upload jpg/png file.");
                    //defer.resolve('failure');
                    this.$scope.uniqueFileName = "";
                    defer.resolve('failure');
                }
                else {
                    var studentId = this.studentId;
                    var encoded_img = "";
                    if (this.students_documents == "" || this.students_documents == 'undefined') {
                        this.students_documents = "";
                    }
                    else {
                        this.students_documents += "," + this.students_documents + fileName;
                    }
                    var jsonobj_1 = {};
                    jsonobj_1["file_name"] = this.$scope.uniqueFileName;
                    jsonobj_1["file_type"] = file_extension;
                    jsonobj_1["StudentId"] = studentId;
                    jsonobj_1["uploaded_documents"] = this.students_documents;
                    jsonobj_1["effidevit_document"] = this.effidevitDocument;
                    this.fjsonObject["request_reason"] = this.requesteReason;
                    if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                        if ($('#affidevit_file').val() == "" || $('#affidevit_file').val() == null) {
                            this.notify.error("Please select your Affidavit file first to upload.");
                            defer.resolve('failure');
                        }
                        else {
                            var efile_data = $('#affidevit_file').prop('files')[0];
                            var efileName_1 = $("#affidevit_file")[0].files[0].name; //get file name
                            var file_extension_1 = efile_data.type;
                            var fileExtension = efileName_1.split('.').pop();
                            var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                            if (!re.exec(efileName_1)) {
                                $("#supported_file").val(null);
                                this.notify.error("File type does not support. Please upload jpg/png file.");
                                defer.resolve('failure');
                            }
                            else {
                                var reader_1 = new FileReader();
                                var image_data = void 0;
                                reader_1.readAsDataURL(efile_data);
                                reader_1.onloadend = function () {
                                    $('#affidevit_file').val = "";
                                    jsonobj_1["otherFile"] = reader_1.result;
                                    jsonobj_1["eFileName"] = efileName_1;
                                };
                            }
                        }
                    }
                    else {
                        jsonobj_1["otherFile"] = 'No';
                        jsonobj_1["eFileName"] = '';
                    }
                    //======Affidavit file upload end here---
                    var reader_2 = new FileReader();
                    reader_2.readAsDataURL(file_data);
                    reader_2.onloadend = function () {
                        // @ts-ignore
                        document.getElementById("imgTest").innerHTML = reader_2.result;
                        $('#supported_file').val = "";
                        jsonobj_1["uploadFile"] = reader_2.result;
                        jsonobj_1["basePath"] = window.location.origin;
                        _this.studentService.uploadStudentDocument(jsonobj_1).then(function (success) {
                            _this.flag = true;
                        });
                    };
                }
            }
        };
        ProfileChangeRequest.prototype.PdocumentUpload = function () {
            var _this = this;
            this.uploadStatus = 0;
            var defer = this.$q.defer();
            var that = this;
            event.preventDefault();
            if ($('#psupported_file').val() == "" || $('#psupported_file').val() == null) {
                this.notify.error("Please select your file first to upload.");
                defer.resolve('failure');
            }
            else {
                var file_data = $('#psupported_file').prop('files')[0];
                var fileName = $("#psupported_file")[0].files[0].name; //get file name
                var file_extension = file_data.type;
                var fileExtension = fileName.split('.').pop();
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                this.$scope.uniqueFileName = new Date().getTime() + "." + fileExtension;
                if (!re.exec(this.$scope.uniqueFileName)) {
                    $("#psupported_file").val(null);
                    this.notify.error("File type does not support. Please upload jpg/png file.");
                    defer.resolve('failure');
                    this.$scope.uniqueFileName = "";
                }
                else {
                    var studentId = this.studentId;
                    var encoded_img = "";
                    if (this.students_documents == "" || this.students_documents == 'undefined') {
                        this.students_documents = "";
                    }
                    else {
                        this.students_documents += "," + this.students_documents + fileName;
                    }
                    var jsonobj_2 = {};
                    jsonobj_2["file_name"] = this.$scope.uniqueFileName;
                    jsonobj_2["file_type"] = file_extension;
                    jsonobj_2["StudentId"] = studentId;
                    jsonobj_2["uploaded_documents"] = this.students_documents;
                    jsonobj_2["effidevit_document"] = this.effidevitFile;
                    this.fjsonObject["request_reason"] = this.requesteReason;
                    if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                        if ($('#paffidavit_file').val() == "" || $('#paffidavit_file').val() == null) {
                            //alert("Please select your file first to upload.");
                            this.notify.error("Please select your Affidavit file first to upload.");
                            defer.resolve('failure');
                        }
                        else {
                            var efile_data = $('#paffidavit_file').prop('files')[0];
                            var efileName_2 = efile_data.name;
                            var file_extension_2 = efile_data.type;
                            var fileExtension = efileName_2.split('.').pop();
                            var re = /(\.jpg|\.jpeg|\.bmp|\.gif|\.png)$/i;
                            if (!re.exec(efileName_2)) {
                                $("#psupported_file").val(null);
                                this.notify.error("File type does not support. Please upload jpg/png file.");
                                defer.resolve('failure');
                            }
                            else {
                                var reader_3 = new FileReader();
                                var image_data = void 0;
                                reader_3.readAsDataURL(efile_data);
                                reader_3.onloadend = function () {
                                    $('#paffidavit_file').val = "";
                                    jsonobj_2["otherFile"] = reader_3.result;
                                    jsonobj_2["eFileName"] = efileName_2;
                                };
                            }
                        }
                    }
                    else {
                        jsonobj_2["otherFile"] = 'No';
                        jsonobj_2["eFileName"] = '';
                    }
                    //====== Affidavit file upload end here. ======
                    var reader_4 = new FileReader();
                    reader_4.readAsDataURL(file_data);
                    reader_4.onloadend = function () {
                        // @ts-ignore
                        document.getElementById("pimgTest").innerHTML = reader_4.result;
                        $('#psupported_file').val = "";
                        jsonobj_2["uploadFile"] = reader_4.result;
                        jsonobj_2["basePath"] = window.location.origin;
                        _this.studentService.uploadStudentDocument(jsonobj_2).then(function (success) {
                            _this.flag = true;
                        });
                    };
                }
            }
        };
        /***
         * DOB FIle upload
         ***/
        ProfileChangeRequest.prototype.DdocumentUpload = function () {
            var _this = this;
            this.uploadStatus = 0;
            var defer = this.$q.defer();
            var that = this;
            event.preventDefault();
            if ($('#dsupported_file').val() == "" || $('#dsupported_file').val() == null) {
                this.notify.error("Please select your file first to upload.");
                defer.resolve('failure');
            }
            else {
                var file_data = $('#dsupported_file').prop('files')[0];
                var fileName = $("#dsupported_file")[0].files[0].name; //get file name
                var file_extension = file_data.type;
                var fileExtension = fileName.split('.').pop();
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                this.$scope.uniqueFileName = new Date().getTime() + "." + fileExtension;
                if (!re.exec(this.$scope.uniqueFileName)) {
                    $("#dsupported_file").val(null);
                    this.notify.error("File type does not support. Please upload jpg/png file.");
                    this.$scope.uniqueFileName = "";
                    defer.resolve('failure');
                }
                else {
                    var studentId = this.studentId;
                    var encoded_img = "";
                    if (this.students_documents == "" || this.students_documents == 'undefined') {
                        this.students_documents = "";
                    }
                    else {
                        this.students_documents += "," + this.students_documents + fileName;
                    }
                    var jsonobj_3 = {};
                    jsonobj_3["file_name"] = this.$scope.uniqueFileName;
                    jsonobj_3["file_type"] = file_extension;
                    jsonobj_3["StudentId"] = studentId;
                    jsonobj_3["uploaded_documents"] = this.students_documents;
                    jsonobj_3["effidevit_document"] = this.effidevitFile;
                    this.fjsonObject["request_reason"] = this.students_documents;
                    if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                        if ($('#daffidavit_file').val() == "" || $('#daffidavit_file').val() == null) {
                            this.notify.error("Please select your Affidavit file first to upload.");
                            defer.resolve('failure');
                        }
                        else {
                            var efile_data = $('#daffidavit_file').prop('files')[0];
                            var efileName_3 = $("#daffidavit_file")[0].files[0].name; //get file name
                            var file_extension_3 = efile_data.type;
                            var fileExtension = efileName_3.split('.').pop();
                            var re = /(\.jpg|\.jpeg|\.bmp|\.gif|\.png)$/i;
                            if (!re.exec(efileName_3)) {
                                $("#daffidavit_file").val(null);
                                this.notify.error("File type does not support. Please upload jpg/png file.");
                                defer.resolve('failure');
                            }
                            else {
                                var reader_5 = new FileReader();
                                var image_data = void 0;
                                reader_5.readAsDataURL(efile_data);
                                reader_5.onloadend = function () {
                                    $('#daffidavit_file').val = "";
                                    jsonobj_3["otherFile"] = reader_5.result;
                                    jsonobj_3["eFileName"] = efileName_3;
                                };
                            }
                        }
                    }
                    else {
                        jsonobj_3["otherFile"] = 'No';
                        jsonobj_3["eFileName"] = '';
                    }
                    //======Affidavit file upload end here---
                    var reader_6 = new FileReader();
                    reader_6.readAsDataURL(file_data);
                    reader_6.onloadend = function () {
                        // @ts-ignore
                        document.getElementById("dimgTest").innerHTML = reader_6.result;
                        $('#dsupported_file').val = "";
                        jsonobj_3["uploadFile"] = reader_6.result;
                        jsonobj_3["basePath"] = window.location.origin;
                        _this.studentService.uploadStudentDocument(jsonobj_3).then(function (success) {
                            _this.flag = true;
                        });
                    };
                }
            }
        };
        /*check file extension..*/
        ProfileChangeRequest.prototype.checkFile = function (file) {
            var extension = file.substr((file.lastIndexOf('.') + 1));
            if (!/(pdf|zip|doc)$/ig.test(extension)) {
                // alert("Invalid file type: "+extension+".  Please use DOC, PDF or Zip.");
                $("#file").val("");
            }
        };
        /**
         * Validation for student's Name Correction
         * */
        ProfileChangeRequest.prototype.validate = function () {
            console.log("doc validate" + this.$scope.uniqueFileName);
            this.supportedDocument = 0;
            this.effidevitDocument = 0;
            this.requestedFullname = $("#firstName").val();
            this.supportedDocument = $("#supported_file")[0].files.length;
            this.requesteReason = $.trim($('#request_reason').val());
            this.reasonType = $("#requestReasonType option:selected").val();
            this.activeMobile = $("#smobileNo").val();
            var vidFileLength = $("#supported_file")[0].files.length;
            if (this.supportedDocument > 0) {
                var doc_type = "supported";
                var file_data = $('#supported_file').prop('files')[0];
                this.getImageData(file_data, doc_type);
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                if (!re.exec(file_data.name)) {
                    $("#supported_file").val(null);
                    this.requestedFullname = $("#firstName").val(null);
                    return 0;
                }
            }
            if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                $("#special_doc").show();
            }
            else {
                $("#special_doc").hide();
            }
            if (this.activeMobile != this.studentMobile && this.activeMobile != '') {
                $("#mobile_warning").show();
                return 0;
            }
            else {
                $("#mobile_warning").hide();
            }
            if (this.requestedFullname === '' || this.requestedFullname === null) {
                return 0;
            }
            else if (this.activeMobile === '') {
                return 0;
            }
            else if (this.reasonType === '') {
                return 0;
            }
            else if (this.requesteReason === '') {
                return 0;
            }
            else if (this.supportedDocument === 0) {
                return 0;
            }
            else if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                this.effidevitDocument = $("#affidevit_file")[0].files.length;
                if (this.effidevitDocument === 0) {
                    return 0;
                }
                else {
                    var doc_type = "affidavit";
                    var file_data = $('#affidevit_file').prop('files')[0];
                    this.getImageData(file_data, doc_type);
                    return 1;
                }
            }
            else {
                return 1;
            }
        };
        /***
         * Preview Student's Documents for Name Correction before saving
         * **
         * */
        ProfileChangeRequest.prototype.previewStudentProfile = function () {
            var firstName = "";
            var lastName = "";
            var request_reason = "";
            var effidevitFile = "";
            firstName = $("#firstName").val();
            lastName = $("#lastName").val();
            request_reason = $("#request_reason").val();
            var vidFileLength = $("#affidevit_file")[0].files.length;
            var fileName = $("#supported_file")[0].files[0].name;
            if (vidFileLength > 0) {
                effidevitFile = $("#affidevit_file")[0].files[0].name;
            }
            else {
                effidevitFile = "";
            }
            if (firstName === "" || firstName === null) {
                $("#firstName").css({ "background-color": "#f7fff7" });
                $("#firstName").focus();
                $("#firstName").attr('placeholder', 'Please Enter First Name!');
            }
            else {
                firstName = firstName.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
                this.requestedFname = firstName;
            }
            if (lastName != null || lastName !== "") {
                lastName = lastName.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
                this.requestedLname = lastName;
            }
            this.requestedFullname = this.requestedFname + " " + this.requestedLname;
            if ($.trim($('#request_reason').val()) == '') {
                $("#request_reason").css({ "background-color": "#f7fff7" });
                $("#request_reason").focus();
                $("#request_reason").attr('placeholder', 'Please write your reason of correction!');
            }
            else {
                request_reason = request_reason.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
                this.requesteReason = request_reason;
            }
            if (fileName === "" && this.students_documents === 'undefined') {
                $('#supported_file').css({ "background-color": "#f7fff7" });
                $("#supported_file").focus();
                $("#supported_file").attr('placeholder', 'Please upload your documents!');
            }
            else {
                this.students_documents = fileName;
            }
            if (effidevitFile === "") {
                $('#affidevit_file').css({ "background-color": "#f7fff7" });
                $("#affidevit_file").focus();
                $("#affidevit_file").attr('placeholder', 'Please upload your documents!');
            }
            else {
                this.effidevitFile = effidevitFile;
            }
            this.fjsonObject["requestId"] = this.requestId;
            this.fjsonObject["requestInitiator"] = this.studentId;
            this.fjsonObject["firstName"] = firstName;
            this.fjsonObject["lastName"] = lastName;
            this.fjsonObject["fullName"] = firstName + " " + lastName;
            this.fjsonObject["changeString"] = firstName + "," + lastName;
            this.fjsonObject["requestDescription"] = request_reason;
            this.fjsonObject["supportedDocuments"] = this.students_documents;
            this.fjsonObject["studentEmail"] = this.studentEmail;
            this.fjsonObject["mobileNo"] = this.activeMobile;
            this.fjsonObject["reasonType"] = this.reasonType;
            this.fjsonObject["previousName"] = this.studentFullname;
            this.fjsonObject["effidevitFile"] = this.effidevitFile;
            this.selectedReasonType = this.reasonType;
            this.fjsonObject["requestInitiatedStatus"] = 6; //Departmental Head Approval
        };
        /**
         * Validation for student's Parent's Name Correction
         * */
        ProfileChangeRequest.prototype.pvalidate = function () {
            this.supportedDocument = 0;
            this.effidevitDocument = 0;
            this.reasonType = "";
            this.activeMobile = "";
            this.requesteReason = "";
            var pParentType;
            this.requestedFatherName = $("#fatherName").val();
            this.requestedMotherName = $("#motherName").val();
            this.supportedDocument = $("#psupported_file")[0].files.length;
            this.requesteReason = $.trim($('#prequest_reason').val());
            this.reasonType = $("#pReasonType option:selected").val();
            this.$scope.pParentType = $("#pParentType option:selected").val();
            this.activeMobile = $("#pMobileNo").val();
            var vidFileLength = $("#psupported_file")[0].files.length;
            if (this.supportedDocument > 0) {
                var doc_type = "supported";
                var file_data = $('#psupported_file').prop('files')[0];
                this.getImageData(file_data, doc_type);
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                if (!re.exec(file_data.name)) {
                    $("#psupported_file").val(null);
                    this.requestedFatherName = $("#fatherName").val(null);
                    this.requestedMotherName = $("#motherName").val(null);
                    return 0;
                }
            }
            if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                $("#pspecial_doc").show();
            }
            else {
                $("#pspecial_doc").hide();
            }
            if (this.$scope.pParentType === 'Mother') {
                $("#motherPanel").show();
                $("#fatherPanel").hide();
                this.requestedFatherName === '';
            }
            else if (this.$scope.pParentType === 'Father') {
                $("#fatherPanel").show();
                $("#motherPanel").hide();
                this.requestedMotherName === '';
            }
            else if (this.$scope.pParentType === 'Both') {
                $("#motherPanel").show();
                $("#fatherPanel").show();
            }
            if (this.activeMobile != this.studentMobile && this.activeMobile != '') {
                $("#pmobile_warning").show();
                return 0;
            }
            else {
                $("#pmobile_warning").hide();
            }
            if ((this.requestedFatherName === '' || this.requestedFatherName === null) && (this.$scope.pParentType === 'Father')) {
                this.requestedMotherName === '';
                return 0;
            }
            else if ((this.requestedMotherName === '' || this.requestedMotherName === null) && (this.$scope.pParentType === 'Mother')) {
                this.requestedFatherName === '';
                return 0;
            }
            else if (this.$scope.pParentType === 'Both') {
                if (this.requestedFatherName === '' || this.requestedMotherName === '') {
                    return 0;
                }
                else {
                    return 1;
                }
            }
            else if (this.activeMobile === '') {
                return 0;
            }
            else if (this.reasonType === '') {
                return 0;
            }
            else if (this.requesteReason === '') {
                return 0;
            }
            else if (this.supportedDocument === 0) {
                return 0;
            }
            else if (this.$scope.pParentType === 'Both') {
                if (this.requestedFatherName === '' || this.requestedMotherName === '') {
                    return 0;
                }
                else {
                    return 1;
                }
            }
            else if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                this.effidevitDocument = $("#paffidavit_file")[0].files.length;
                if (this.effidevitDocument === 0) {
                    return 0;
                }
                else {
                    var doc_type = "affidavit";
                    var file_data = $('#paffidavit_file').prop('files')[0];
                    this.getImageData(file_data, doc_type);
                    return 1;
                }
            }
            else if (this.requesteReason === '' || this.requesteReason === null) {
                return 0;
            }
            else {
                return 1;
            }
        };
        /***
         * Preview Student's Parent's Documents for Name Correction before saving
         * **
         * */
        ProfileChangeRequest.prototype.previewParentProfile = function () {
            var fatherName = "";
            var motherName = "";
            var request_reason = "";
            var affidavitFile = "";
            var docFileName = "";
            fatherName = $("#fatherName").val();
            motherName = $("#motherName").val();
            request_reason = $("#prequest_reason").val();
            docFileName = $("#psupported_file")[0].files[0].name;
            if ($("#paffidavit_file")[0].files.length > 0) {
                affidavitFile = $("#paffidavit_file")[0].files[0].name;
                this.effidevitFile = affidavitFile;
            }
            else {
                affidavitFile = "";
                this.effidevitFile = "";
            }
            if (fatherName === "" || fatherName === null) {
                $("#fatherName").css({ "background-color": "#f7fff7" });
                $("#fatherName").focus();
                $("#fatherName").attr('placeholder', 'Please Enter First Name!');
            }
            else {
                fatherName = fatherName.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
                this.requestedFatherName = fatherName;
            }
            if (motherName != null || motherName !== "") {
                motherName = motherName.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
                this.requestedMotherName = motherName;
            }
            if ($.trim($('#prequest_reason').val()) == '') {
                $("#prequest_reason").css({ "background-color": "#f7fff7" });
                $("#prequest_reason").focus();
                $("#prequest_reason").attr('placeholder', 'Please write your reason of correction!');
            }
            else {
                request_reason = $('#prequest_reason').val();
                request_reason = request_reason.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
                this.requesteReason = request_reason;
            }
            if (docFileName === "" && this.students_documents === 'undefined') {
                $('#psupported_file').css({ "background-color": "#f7fff7" });
                $("#psupported_file").focus();
                $("#psupported_file").attr('placeholder', 'Please upload your document!');
            }
            else {
                this.students_documents = docFileName;
            }
            this.fjsonObject = {};
            this.fjsonObject["requestId"] = this.requestId;
            this.fjsonObject["requestInitiator"] = this.studentId;
            this.fjsonObject["studentFullName"] = this.studentFullname;
            this.fjsonObject["fatherName"] = this.requestedFatherName;
            this.fjsonObject["motherName"] = this.requestedMotherName;
            this.fjsonObject["changeString"] = this.requestedFatherName + "," + this.requestedMotherName;
            this.fjsonObject["requestDescription"] = this.requesteReason;
            this.fjsonObject["supportedDocuments"] = this.students_documents;
            this.fjsonObject["studentEmail"] = this.studentEmail;
            this.fjsonObject["mobileNo"] = this.activeMobile;
            this.fjsonObject["reasonType"] = this.reasonType;
            this.fjsonObject["previousFatherName"] = this.fatherPreviousName;
            this.fjsonObject["previousMotherName"] = this.motherPreviousName;
            this.fjsonObject["previousName"] = this.fatherPreviousName + "," + this.motherPreviousName;
            this.fjsonObject["effidevitFile"] = this.effidevitFile;
            this.selectedReasonType = this.reasonType;
            this.fjsonObject["requestInitiatedStatus"] = 1;
            console.log("Parents JSON :", JSON.stringify(this.fjsonObject));
        };
        /**
         * Validation for student's DOB's Name Correction
         * */
        ProfileChangeRequest.prototype.dvalidate = function () {
            this.supportedDocument = 0;
            this.effidevitDocument = 0;
            this.reasonType = "";
            this.activeMobile = "";
            this.requesteReason = "";
            this.requestedDob = $("#requestedDob").val();
            this.supportedDocument = $("#dsupported_file")[0].files.length;
            this.requesteReason = $.trim($('#drequest_reason').val());
            this.reasonType = $("#dReasonType option:selected").val();
            this.activeMobile = $("#dmobileNo").val();
            var vidFileLength = $("#dsupported_file")[0].files.length;
            if (this.supportedDocument > 0) {
                var doc_type = "supported";
                var file_data = $('#dsupported_file').prop('files')[0];
                this.getImageData(file_data, doc_type);
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                if (!re.exec(file_data.name)) {
                    $("#dsupported_file").val(null);
                    this.requestedDob = $("#requestedDob").val(null);
                    return 0;
                }
            }
            if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                $("#dspecial_doc").show();
            }
            else {
                $("#dspecial_doc").hide();
            }
            if (this.activeMobile != this.studentMobile && this.activeMobile != '') {
                $("#dmobile_warning").show();
                return 0;
            }
            else {
                $("#dmobile_warning").hide();
            }
            if (this.requestedDob === '' || this.requestedDob === null) {
                return 0;
            }
            else if (this.activeMobile === '') {
                return 0;
            }
            else if (this.reasonType === '') {
                return 0;
            }
            else if (this.requesteReason === '') {
                return 0;
            }
            else if (this.supportedDocument === 0) {
                return 0;
            }
            else if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                this.effidevitDocument = $("#daffidavit_file")[0].files.length;
                if (this.effidevitDocument === 0) {
                    return 0;
                }
                else {
                    var doc_type = "affidavit";
                    var file_data = $('#daffidavit_file').prop('files')[0];
                    this.getImageData(file_data, doc_type);
                    return 1;
                }
            }
            else {
                return 1;
            }
        };
        /***
         * Preview Student's Preview for DOB Correction before saving
         * **
         * */
        ProfileChangeRequest.prototype.previewStudentDOb = function () {
            var dob;
            var request_reason;
            var affidavitFile;
            var docFileName;
            dob = $("#requestedDob").val();
            request_reason = $("#drequest_reason").val();
            docFileName = $("#dsupported_file")[0].files[0].name;
            if ($("#daffidavit_file")[0].files.length > 0) {
                affidavitFile = $("#daffidavit_file")[0].files[0].name;
                this.effidevitFile = affidavitFile;
            }
            else {
                affidavitFile = "";
                this.effidevitFile = "";
            }
            if (dob === "" || dob === null) {
                $("#requestedDob").css({ "background-color": "#f7fff7" });
                $("#requestedDob").focus();
                $("#requestedDob").attr('placeholder', 'Please Enter DOB!');
            }
            else {
                this.requestedDob = dob;
            }
            if ($.trim($('#drequest_reason').val()) == '') {
                $("#drequest_reason").css({ "background-color": "#f7fff7" });
                $("#drequest_reason").focus();
                $("#drequest_reason").attr('placeholder', 'Please write your reason of correction!');
            }
            else {
                request_reason = $('#drequest_reason').val();
                request_reason = request_reason.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
                this.requesteReason = request_reason;
            }
            if (docFileName === "" && this.students_documents === 'undefined') {
                $('#dsupported_file').css({ "background-color": "#f7fff7" });
                $("#dsupported_file").focus();
                $("#dsupported_file").attr('placeholder', 'Please upload your documents!');
            }
            else {
                this.students_documents = docFileName;
            }
            this.fjsonObject = {};
            this.fjsonObject["requestId"] = this.requestId;
            this.fjsonObject["requestInitiator"] = this.studentId;
            this.fjsonObject["studentFullName"] = this.studentFullname;
            this.fjsonObject["dob"] = this.requestedDob;
            this.fjsonObject["changeString"] = this.requestedDob;
            this.fjsonObject["requestDescription"] = this.requesteReason;
            this.fjsonObject["supportedDocuments"] = this.students_documents;
            this.fjsonObject["studentEmail"] = this.studentEmail;
            this.fjsonObject["mobileNo"] = this.activeMobile;
            this.fjsonObject["reasonType"] = this.reasonType;
            this.fjsonObject["previousName"] = this.previousDob;
            this.fjsonObject["effidevitFile"] = this.effidevitFile;
            this.selectedReasonType = this.reasonType;
            if (this.reasonType === 'Mistake of Student') {
                this.fjsonObject["requestInitiatedStatus"] = 0;
            }
            else {
                this.fjsonObject["requestInitiatedStatus"] = 1;
            }
            console.log("Parents JSON :", JSON.stringify(this.fjsonObject));
        };
        ProfileChangeRequest.prototype.initializeDatePickers = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker({
                    todayHighlight: true,
                    multidate: false,
                    autoclose: true
                });
                $('.datepicker-default').on('change', function () {
                });
            }, 200);
        };
        /***
         * Submit the Name correction application with full information
         ***/
        ProfileChangeRequest.prototype.submitRequest = function () {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            if (this.flag === true) {
                this.notify.error("You have already submitted your request.");
            }
            else {
                if (this.requestId == 1) {
                    this.documentUpload();
                }
                else if (this.requestId == 2) {
                    this.PdocumentUpload();
                }
                else if (this.requestId == 3) {
                    this.DdocumentUpload();
                }
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                if (!re.exec(this.$scope.uniqueFileName)) {
                    this.$scope.uniqueFileName = "";
                    this.notify.error("File type does not support. Please upload jpg/png/pdf file.");
                }
                else {
                    this.fjsonObject["supportedDocuments"] = this.$scope.uniqueFileName;
                    this.studentService.submitStudentApplication(this.fjsonObject).then(function (success) {
                        $('form[name="name-change"]')[0].reset();
                        $(".apply-form").hide();
                        $(".application_rules").hide();
                        _this.getLastRequestStatus();
                        $("#application_confirmation").show();
                        _this.flag = true;
                        _this.ChangeRequestLogSave();
                    });
                }
            }
            console.log("Application Parameter=", this.fjsonObject);
        };
        /***
         * Update the Name correction application with full information
         ***/
        ProfileChangeRequest.prototype.updateRequest = function () {
            var _this = this;
            this.fjsonObject["id"] = this.requestDetailId;
            this.fjsonObject["reasonType"] = this.reasonType;
            var defer = this.$q.defer();
            var that = this;
            if (this.flag === true) {
                this.notify.error("You have already submitted your request.");
            }
            else {
                if (this.requestId == 1) {
                    this.documentUpload();
                }
                else if (this.requestId == 2) {
                    this.PdocumentUpload();
                }
                else if (this.requestId == 3) {
                    this.DdocumentUpload();
                }
                //alert(this.uploadStatus);
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                if (!re.exec(this.$scope.uniqueFileName)) {
                    this.$scope.uniqueFileName = "";
                    this.notify.error("File type does not support. Please upload jpg/png/pdf file.");
                }
                else {
                    this.fjsonObject["supportedDocuments"] = this.$scope.uniqueFileName;
                    this.studentService.updateStudentApplication(this.fjsonObject).then(function (success) {
                        $('form[name="name-change"]')[0].reset();
                        $(".apply-form").hide();
                        $(".application_rules").hide();
                        _this.getLastRequestStatus();
                        $("#application_confirmation").show();
                        _this.flag = true;
                        var jsonobj = {};
                        jsonobj["actionName"] = _this.fjsonObject["changeString"];
                        jsonobj["actionModule"] = "Name & Other Correction Request";
                        jsonobj["requestDetailId"] = _this.requestDetailId;
                        jsonobj["actionUser"] = _this.studentId;
                        jsonobj["actionComment"] = "Re-submission of existing application.";
                        _this.onBackKeyDown();
                    });
                }
            }
            console.log("Application Parameter=", this.fjsonObject);
        };
        /***
         * @desc: Save Log information here.
         * @Dated: 16-02-2022
         *
         ***/
        ProfileChangeRequest.prototype.ChangeRequestLogSave = function () {
            var defer = this.$q.defer();
            var jsonobj = {};
            jsonobj["actionName"] = this.fjsonObject["changeString"];
            jsonobj["actionModule"] = "Student Name Correction Request";
            jsonobj["requestDetailId"] = this.requestId;
            jsonobj["actionUser"] = this.studentId;
            jsonobj["actionComment"] = "Student's first application for correction request";
            this.httpClient.post("/ums-webservice-academic/academic/changeRequestLog/createLog", jsonobj, 'application/json')
                .success(function () {
            })
                .error(function (data) {
                console.log(data);
            });
        };
        /*
        * Generate Payment slip for name correction specially for Student's Mistake
        * */
        ProfileChangeRequest.prototype.generatePaymentSlip = function (requestSubmissionId) {
            var _this = this;
            var request_string;
            var jsonobj = {};
            jsonobj["actionName"] = this.fjsonObject["changeString"];
            jsonobj["actionModule"] = "Student Name Correction Payment";
            jsonobj["requestDetailId"] = this.requestId;
            jsonobj["actionUser"] = this.studentId;
            jsonobj["actionComment"] = "Student's name correcction payment";
            this.changeRequestService.LogInsert(jsonobj);
            this.$scope.requestStatus = [];
            this.changeRequestService.getPendingRequestStatus(requestSubmissionId).then(function (record) {
                _this.$scope.requestStatus = record.entries;
                _this.lastRequestStatus = _this.$scope.requestStatus[0].requestInitiatedStatus;
                _this.lastRequestDate = _this.$scope.requestStatus[0].requestCreatedOn;
                _this.requestDetailId = _this.$scope.requestStatus[0].id;
                _this.requestSubmissionId = _this.$scope.requestStatus[0].requestSubmissionId;
                var feeId = 59;
                _this.applyPayment(_this.requestDetailId, feeId, _this.requestSubmissionId);
                console.log("json object=", _this.$scope.requestStatus);
            });
        };
        ProfileChangeRequest.prototype.applyPayment = function (requestDetaild, feeId, requestSubmissionId) {
            var _this = this;
            this.loader = true;
            this.changeRequestService.apply(requestDetaild, feeId, requestSubmissionId).then(function (success) {
                if (success) {
                    $("#currButton").prop("disabled", false);
                    _this.disableApply = true;
                    _this.getCorrectionFeePaymentStatus();
                    _this.getCorrectionStatus(requestSubmissionId);
                }
                _this.loader = false;
            });
        };
        ProfileChangeRequest.prototype.getCorrectionFeePaymentStatus = function () {
            var _this = this;
            var mnth;
            var validDate;
            var curDate;
            this.paymentService.getCorrectionFeePaymentStatus().then(function (payments) {
                if (payments && payments.length > 0) {
                    _this.payments = payments;
                    var mon = _this.currDate.getMonth();
                    if (mon.toString().length < 3) {
                        mnth = '0' + mon;
                    }
                    else {
                        mnth = mon.toString();
                    }
                    curDate = _this.currDate.getDate() + '/' + mnth + '/' + _this.currDate.getFullYear();
                    validDate = _this.payments[0].transactionValidTill;
                    if (curDate <= validDate) {
                        _this.transactionValid = 1;
                    }
                    else {
                        _this.transactionValid = 0;
                    }
                    console.log("Payments", _this.payments);
                    _this.fetchDetailedStudentPayment();
                }
            });
        };
        ProfileChangeRequest.prototype.fetchDetailedStudentPayment = function () {
            var _this = this;
            this.transactionIdMapWithDetailedStudentPayment = {};
            var transactionIdList = [];
            this.payments.forEach(function (p) { return transactionIdList.push(p.transactionId); });
            this.detailedStudentPaymentService.getDetailedStudentPaymentByTransactionIdList(transactionIdList).then(function (detailedStudentPaymentList) {
                detailedStudentPaymentList.forEach(function (d) {
                    _this.transactionIdMapWithDetailedStudentPayment[d.transactionId] = d;
                });
            });
        };
        ProfileChangeRequest.prototype.getCorrectionStatus = function (requestSubmissionId) {
            var _this = this;
            this.paymentStatus = 0;
            this.changeRequestService.getCorrectionStatus(requestSubmissionId).then(function (record) {
                _this.correctionStatus = record.entries;
                console.log("Correction Status=", JSON.stringify(_this.correctionStatus));
                if (_this.correctionStatus.length > 0) {
                    _this.paymentStatus = _this.correctionStatus[0].paymentStatus;
                    _this.modifiedOn = _this.correctionStatus[0].modifiedOn;
                }
                else {
                    _this.paymentStatus = 0;
                }
            });
        };
        ProfileChangeRequest.prototype.receipt = function (transactionId) {
            this.feeReportService.receipt(transactionId);
        };
        ProfileChangeRequest.prototype.onBackKeyDown = function () {
            window.open('https://' + location.hostname + '/ums-web/iums/#/changeRequestPanel', '_self');
            window.location.reload(false);
        };
        ProfileChangeRequest.prototype.getDecodedData = function (decodedId) {
            var decodedStringBtoA = atob(decodedId);
            return decodedStringBtoA;
        };
        ProfileChangeRequest.prototype.getImageData = function (imagefile, filtType) {
            var _this = this;
            var reader = new FileReader();
            reader.readAsDataURL(imagefile);
            reader.onloadend = function () {
                if (filtType === 'supported') {
                    _this.image_data = reader.result;
                }
                else {
                    _this.affidavit_data = reader.result;
                }
            };
        };
        ProfileChangeRequest.$inject = ['appConstants', '$scope', 'HttpClient', '$q', 'notify', '$sce', '$window', 'userService', 'studentService', 'changeRequestService', 'PaymentService', 'FeeReportService', 'FeeCategoryService', 'DetailedStudentPaymentService', '$stateParams', '$state', '$location'];
        return ProfileChangeRequest;
    }());
    ums.ProfileChangeRequest = ProfileChangeRequest;
    ums.UMS.controller("ProfileChangeRequest", ProfileChangeRequest);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ChangeRequestPanel = (function () {
        function ChangeRequestPanel(appConstants, $scope, httpClient, $q, notify, $sce, $window, studentService, userService, changeRequestService, $stateParams, $state) {
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.studentService = studentService;
            this.userService = userService;
            this.changeRequestService = changeRequestService;
            this.$stateParams = $stateParams;
            this.$state = $state;
            this.fetchLoggedinUser();
            this.fetchRequestPanel();
            this.getRequestedData();
            $scope.fetchSelectedRequest = this.fetchSelectedRequest.bind(this);
            this.itemPerPage = 20;
            this.currentPageNumber = 1;
            this.itemPerPage2 = 20;
            this.currentPageNumber2 = 1;
        }
        ChangeRequestPanel.prototype.decodeString = function (obj) {
        };
        ChangeRequestPanel.prototype.fetchLoggedinUser = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (d) {
                _this.studentId = d.id;
                console.log("Student Id=", _this.studentId);
            });
        };
        /* Dynamic request panel */
        ChangeRequestPanel.prototype.fetchRequestPanel = function () {
            var _this = this;
            this.$scope.requestPanel = [];
            var encodedid = "";
            this.changeRequestService.getChangeRequest().then(function (record) {
                _this.$scope.requestPanel = record.entries;
                for (var i = 0; i < _this.$scope.requestPanel.length; i++) {
                    _this.$scope.requestPanel[i].request_no = _this.getEncodedData(_this.$scope.requestPanel[i].id);
                }
                console.log("json object=", _this.$scope.requestPanel);
            });
        };
        ChangeRequestPanel.prototype.getCheckval = function (rqvalue) {
            var myvalue = rqvalue.value;
            var myarray = myvalue.split("+");
        };
        /*** Student's Information Modal view ***/
        ChangeRequestPanel.prototype.fetchSelectedRequest = function (obj) {
            console.log(obj);
            this.$scope.changeString = obj.changeString;
            var myString = this.$scope.changeString.split(',');
            if (obj.requestId == 1) {
                this.$scope.requestedFname = myString[0];
                this.$scope.requestedLname = myString[1];
                this.$scope.requestedFullname = myString[0] + " " + myString[1];
            }
            else if (obj.requestId == 2) {
                this.$scope.requestedFathername = myString[0];
                this.$scope.requestedMothername = myString[1];
                this.$scope.requestedFullname = myString[0] + " " + myString[1];
            }
            else if (obj.requestId == 3) {
                this.$scope.requestedDOB = this.$scope.changeString;
            }
            this.$scope.requestedReason = obj.requestDescription;
            this.$scope.students_documents = obj.supportedDocuments;
            this.$scope.requestInitiator = obj.requestInitiator;
            this.$scope.previousName = obj.previousName;
            this.$scope.studentMobileNumber = obj.mobileNo;
            this.$scope.requestRemarks = obj.remarks;
            this.$scope.rejectReason = obj.rejectReason;
            this.$scope.requestType = obj.requestType;
            this.$scope.reasonType = obj.reasonType;
            this.$scope.requestInitiatedStatus = obj.requestInitiatedStatus;
            this.$scope.changeString = obj.changeString;
            this.$scope.requestId = obj.requestId;
            this.$scope.requestSubmissionId = obj.requestSubmissionId;
            setTimeout(function () {
                var jq = $.noConflict();
                jq('#studentApplicationview').modal('show');
            }, 2000);
            var dir = "D:/IUMS-Documents/Students/";
            var filePath = dir + this.$scope.requestInitiator + "/" + this.$scope.students_documents;
        };
        /*Requested Lists of students*/
        ChangeRequestPanel.prototype.getRequestedData = function () {
            var _this = this;
            this.$scope.requestList = [];
            this.changeRequestService.getRequestList(this.studentId).then(function (record) {
                _this.$scope.requestList = record.entries;
                _this.totalRecord2 = _this.$scope.requestList.length;
                console.log("Request Detail json object=", _this.$scope.requestList);
            });
        };
        ChangeRequestPanel.prototype.getEncodedData = function (encodedId) {
            var encodedStringBtoA = btoa(encodedId);
            return encodedStringBtoA;
        };
        ChangeRequestPanel.prototype.getDecodedData = function (decodedId) {
            var decodedStringBtoA = atob(decodedId);
            return decodedStringBtoA;
        };
        ChangeRequestPanel.prototype.applicationCancel = function (requestSubmissionId, requestdetailId) {
            alert(requestSubmissionId + "," + requestdetailId);
            var cnf = prompt("Do You really want to cancen your application?", "Yes");
            alert(cnf);
        };
        ChangeRequestPanel.$inject = ['appConstants', '$scope', 'HttpClient', '$q', 'notify', '$sce', '$window', 'studentService', 'userService', 'changeRequestService', '$stateParams', '$state'];
        return ChangeRequestPanel;
    }());
    ums.ChangeRequestPanel = ChangeRequestPanel;
    ums.UMS.controller("ChangeRequestPanel", ChangeRequestPanel);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MultipleChangeRequest = (function () {
        function MultipleChangeRequest(appConstants, $scope, httpClient, $q, notify, $sce, $window, userService, studentService, changeRequestService, $stateParams, $state, $location) {
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.userService = userService;
            this.studentService = studentService;
            this.changeRequestService = changeRequestService;
            this.$stateParams = $stateParams;
            this.$state = $state;
            this.$location = $location;
            this.fjsonObject = {};
            this.correctionStatus = [];
            if (this.$location.search().requestNo) {
                var encdata = this.$location.search().requestNo;
                this.requestString = this.getDecodedData(encdata);
                this.requestArray = [];
                this.requestArray = this.requestString.split(",");
                this.requestedId = this.requestString.split(",");
                console.log("Request Array=", this.requestArray);
                this.requestDetailId = 0;
                this.currDate = new Date();
                this.transactionValid = 0;
                this.paymentStatus = 0;
                this.$scope.uniqueFileName = "";
                this.$scope.puniqueFileName = "";
                this.$scope.duniqueFileName = "";
                this.request_submission_id = Date.now().toString();
            }
            this.flag = false;
            this.submissionFlag = false;
            this.initializeDatePickers();
            this.fetchLoggedinUser();
            this.getAllRequestStatus();
            this.getProfileInfo();
        }
        /*
        * @request panel populating for student's request submission
        * */
        MultipleChangeRequest.prototype.fetchLoggedinUser = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (d) {
                _this.roleId = d.roleId;
                _this.studentId = d.id;
                _this.studentFullname = d.name;
                _this.disableApply = false;
            });
        };
        /*
        * Retrieve student profile
        */
        MultipleChangeRequest.prototype.getProfileInfo = function () {
            var _this = this;
            this.httpClient.get('academic/student/profile', ums.HttpClient.MIME_TYPE_JSON, function (response, etag) {
                _this.$scope.student = response;
                _this.studentEmail = _this.$scope.student.email;
                _this.studentMobile = _this.$scope.student.mobileNo;
                _this.studentYear = _this.$scope.student.year;
                _this.studentSemester = _this.$scope.student.semester;
                _this.studentFullname = _this.$scope.student.fullName;
                _this.fatherPreviousName = _this.$scope.student.fatherName;
                _this.motherPreviousName = _this.$scope.student.motherName;
                _this.previousDob = _this.$scope.student.dateOfBirth;
                console.log("Student Information=", _this.$scope.student);
                console.log("Student Email=", _this.studentEmail);
                _this.$scope.etag = etag;
            });
        };
        /***
         * Get Student's overall request for preventing duplicate request submission
         ***/
        MultipleChangeRequest.prototype.getAllRequestStatus = function () {
            var _this = this;
            this.$scope.requestList = [];
            this.$scope.modifiedrequestList = [];
            var encodedid = "";
            var requestedId;
            this.changeRequestService.getStudentRequestStatus(this.studentId).then(function (record) {
                _this.$scope.requestList = record.entries;
                console.log("Applied Request List=", _this.$scope.requestList);
                var requestsList = _this.requestString.split(",");
                requestsList = requestsList.filter(function (item) { return item; });
                console.log("further requestsList=", requestsList);
                for (var i = 0; i < _this.$scope.requestList.length; i++) {
                    _this.$scope.requestedId = _this.$scope.requestList[i].requestId;
                    console.log("request Id=", _this.$scope.requestedId);
                    if (requestsList.indexOf("" + _this.$scope.requestedId + "") >= 0) {
                        console.log("found");
                        var index = requestsList.indexOf("" + _this.$scope.requestedId + "");
                        if (index == (requestsList.length - 1)) {
                            console.log("Last Item found=", _this.$scope.requestedId);
                            _this.requestedId.length = 0;
                        }
                        else {
                            _this.requestedId.splice(index, 1);
                        }
                        console.log("After deletion requests id:", _this.requestedId);
                    }
                    else {
                        console.log("not found");
                    }
                }
                _this.requestArray = _this.requestedId;
                console.log("After deletion this.requestArray:", _this.requestArray);
                _this.getCorrectionStatus(_this.requestSubmissionId);
                console.log("getLastRequestStatus=", _this.$scope.requestStatus);
            });
        };
        MultipleChangeRequest.prototype.updateStudentProfile = function () {
            var firstName = "";
            var lastName = "";
            var fullName = "";
            var studentId = "";
            var request_reason = "";
            firstName = $("#firstName").val();
            lastName = $("#lastName").val();
            request_reason = $("#request_reason").val();
            if (firstName === "" || firstName === null) {
                $("#firstName").css({ "background-color": "#f7fff7" });
                $("#firstName").focus();
                $("#firstName").attr('placeholder', 'Please Enter First Name!');
                return false;
            }
            else {
                firstName = firstName.replace(/[0-9`~!@#$%^&*()_|+\=?;:'",<>\{\}\[\]\\\/]/gi, '');
            }
            if (lastName != null || lastName !== "") {
                lastName = lastName.replace(/[0-9`~!@#$%^&*()_|+\=?;:'",<>\{\}\[\]\\\/]/gi, '');
            }
            if ($.trim($('#request_reason').val()) == '') {
                $("#request_reason").css({ "background-color": "#f7fff7" });
                $("#request_reason").focus();
                $("#request_reason").attr('placeholder', 'Please write your reason of correction!');
                return false;
            }
            else {
                request_reason = request_reason.replace(/[0-9`~!@#$%^&*()_|+\-=?;:",<>\{\}\[\]\\\/]/gi, '');
            }
            studentId = this.studentId;
            fullName = firstName + " " + lastName;
            var jsonobj = {};
            jsonobj["studentId"] = studentId;
            jsonobj["firstName"] = firstName;
            jsonobj["lastName"] = lastName;
            jsonobj["fullName"] = fullName;
            jsonobj["request_reason"] = request_reason;
        };
        MultipleChangeRequest.prototype.fieldValidation = function (fieldName) {
            var edited_field;
            edited_field = fieldName.replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",<>\{\}\[\]\\\/]/gi, '');
            return edited_field;
        };
        MultipleChangeRequest.prototype.documentUpload = function () {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            event.preventDefault();
            if ($('#supported_file').val() == "" || $('#supported_file').val() == null) {
                this.notify.error("Please select your file first to upload.");
                defer.resolve('failure');
            }
            else {
                var file_data = $('#supported_file').prop('files')[0];
                var fileName = $("#supported_file")[0].files[0].name; //get file name
                var file_extension = file_data.type;
                var fileExtension = fileName.split('.').pop();
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                this.$scope.uniqueFileName = new Date().getTime() + "." + fileExtension;
                if (!re.exec(fileName)) {
                    $("#supported_file").val(null);
                    this.notify.error("File type does not support. Please upload jpg/png file.");
                    defer.resolve('failure');
                    this.$scope.uniqueFileName = "";
                }
                else {
                    var studentId = this.studentId;
                    var encoded_img = "";
                    if (this.students_documents == "" || this.students_documents == 'undefined') {
                        this.students_documents = "";
                    }
                    else {
                        this.students_documents += "," + this.students_documents + fileName;
                    }
                    var jsonobj_4 = {};
                    jsonobj_4["file_name"] = this.$scope.uniqueFileName;
                    jsonobj_4["file_type"] = file_extension;
                    jsonobj_4["StudentId"] = studentId;
                    jsonobj_4["uploaded_documents"] = this.students_documents;
                    this.fjsonObject["request_reason"] = this.requesteReason;
                    if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                        if ($('#affidevit_file').val() == "" || $('#affidevit_file').val() == null) {
                            this.notify.error("Please select your Affidavit file first to upload.");
                            defer.resolve('failure');
                        }
                        else {
                            var efile_data = $('#affidevit_file').prop('files')[0];
                            var efileName_4 = $("#affidevit_file")[0].files[0].name; //get file name
                            var file_extension_4 = efile_data.type;
                            var fileExtension = efileName_4.split('.').pop();
                            var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                            if (!re.exec(efileName_4)) {
                                $("#supported_file").val(null);
                                this.notify.error("File type does not support. Please upload jpg/png file.");
                                defer.resolve('failure');
                            }
                            else {
                                var reader_7 = new FileReader();
                                var image_data = void 0;
                                reader_7.readAsDataURL(efile_data);
                                reader_7.onloadend = function () {
                                    $('#affidevit_file').val = "";
                                    jsonobj_4["otherFile"] = reader_7.result;
                                    jsonobj_4["eFileName"] = efileName_4;
                                };
                            }
                        }
                    }
                    else {
                        jsonobj_4["otherFile"] = 'No';
                        jsonobj_4["eFileName"] = '';
                    }
                    //======Affidavit file upload end here---
                    var reader_8 = new FileReader();
                    reader_8.readAsDataURL(file_data);
                    reader_8.onloadend = function () {
                        // @ts-ignore
                        document.getElementById("imgTest").innerHTML = reader_8.result;
                        $('#supported_file').val = "";
                        jsonobj_4["uploadFile"] = reader_8.result;
                        jsonobj_4["basePath"] = window.location.origin;
                        _this.studentService.uploadStudentDocument(jsonobj_4).then(function (success) {
                            _this.flag = true;
                        });
                    };
                }
            }
        };
        MultipleChangeRequest.prototype.PdocumentUpload = function () {
            var _this = this;
            this.uploadStatus = 0;
            var defer = this.$q.defer();
            var that = this;
            event.preventDefault();
            var PuniqueFileName = new Date().getTime() + "." + fileExtension;
            if ($('#psupported_file').val() == "" || $('#psupported_file').val() == null) {
                this.notify.error("Please select your file first to upload.");
                defer.resolve('failure');
            }
            else {
                var file_data = $('#psupported_file').prop('files')[0];
                var fileName = $("#psupported_file")[0].files[0].name; //get file name
                var file_extension = file_data.type;
                var fileExtension = fileName.split('.').pop();
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                this.$scope.puniqueFileName = new Date().getTime() + "." + fileExtension;
                if (!re.exec(fileName)) {
                    $("#psupported_file").val(null);
                    this.notify.error("File type does not support. Please upload jpg/png file.");
                    defer.resolve('failure');
                    this.$scope.puniqueFileName = "";
                }
                else {
                    var studentId = this.studentId;
                    var encoded_img = "";
                    if (this.pDocument == "" || this.pDocument == 'undefined') {
                        this.pDocument = "";
                    }
                    else {
                        this.pDocument += "," + this.pDocument + fileName;
                    }
                    var jsonobj_5 = {};
                    jsonobj_5["file_name"] = this.$scope.puniqueFileName;
                    jsonobj_5["file_type"] = file_extension;
                    jsonobj_5["StudentId"] = studentId;
                    jsonobj_5["uploaded_documents"] = this.pDocument;
                    jsonobj_5["effidevit_document"] = this.pAffidavitFile;
                    this.fjsonObject["request_reason"] = this.pRequestReason;
                    if (this.pReasonType === 'Mistake in SSC/HSC Certificate') {
                        if ($('#paffidavit_file').val() == "" || $('#paffidavit_file').val() == null) {
                            this.notify.error("Please select your Affidavit file first to upload.");
                            defer.resolve('failure');
                        }
                        else {
                            var efile_data = $('#paffidavit_file').prop('files')[0];
                            var efileName = efile_data.name;
                            var file_extension_5 = efile_data.type;
                            var fileExtension = efileName.split('.').pop();
                            var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                            if (!re.exec(efileName)) {
                                $("#psupported_file").val(null);
                                this.notify.error("File type does not support. Please upload jpg/png file.");
                                defer.resolve('failure');
                            }
                            else {
                                this.$scope.puAffidavitFile = "A" + new Date().getTime() + "." + fileExtension;
                                this.fjsonObject["effidevitFile"] = this.$scope.puAffidavitFile;
                                var reader_9 = new FileReader();
                                var image_data = void 0;
                                reader_9.readAsDataURL(efile_data);
                                reader_9.onloadend = function () {
                                    $('#paffidavit_file').val = "";
                                    jsonobj_5["otherFile"] = reader_9.result;
                                    jsonobj_5["eFileName"] = _this.$scope.puAffidavitFile;
                                };
                            }
                        }
                    }
                    else {
                        jsonobj_5["otherFile"] = 'No';
                        jsonobj_5["eFileName"] = '';
                    }
                    //======Affidavit file upload end here---
                    var reader_10 = new FileReader();
                    reader_10.readAsDataURL(file_data);
                    reader_10.onloadend = function () {
                        // @ts-ignore
                        document.getElementById("pimgTest").innerHTML = reader_10.result;
                        $('#psupported_file').val = "";
                        jsonobj_5["uploadFile"] = reader_10.result;
                        jsonobj_5["basePath"] = window.location.origin;
                        _this.studentService.uploadStudentDocument(jsonobj_5).then(function (success) {
                            _this.flag = true;
                        });
                    };
                }
            }
        };
        /***
         * DOB FIle upload
         ***/
        MultipleChangeRequest.prototype.DdocumentUpload = function () {
            var _this = this;
            this.uploadStatus = 0;
            var defer = this.$q.defer();
            var that = this;
            event.preventDefault();
            if ($('#dsupported_file').val() == "" || $('#dsupported_file').val() == null) {
                this.notify.error("Please select your file first to upload.");
                defer.resolve('failure');
            }
            else {
                var file_data = $('#dsupported_file').prop('files')[0];
                var fileName = $("#dsupported_file")[0].files[0].name; //get file name
                var file_extension = file_data.type;
                var fileExtension = fileName.split('.').pop();
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                this.$scope.duniqueFileName = new Date().getTime() + "." + fileExtension;
                if (!re.exec(fileName)) {
                    $("#dsupported_file").val(null);
                    this.notify.error("File type does not support. Please upload jpg/png file.");
                    defer.resolve('failure');
                    this.$scope.duniqueFileName = "";
                }
                else {
                    var studentId = this.studentId;
                    var encoded_img = "";
                    if (this.dDocument == "" || this.dDocument == 'undefined') {
                        this.dDocument = "";
                    }
                    else {
                        this.dDocument += "," + this.dDocument + fileName;
                    }
                    var jsonobj_6 = {};
                    jsonobj_6["file_name"] = this.$scope.duniqueFileName;
                    jsonobj_6["file_type"] = file_extension;
                    jsonobj_6["StudentId"] = studentId;
                    jsonobj_6["uploaded_documents"] = this.dDocument;
                    jsonobj_6["effidevit_document"] = this.dAffidavitFile;
                    this.fjsonObject["request_reason"] = this.dRequestReason;
                    if (this.dReasonType === 'Mistake in SSC/HSC Certificate') {
                        if ($('#daffidavit_file').val() == "" || $('#daffidavit_file').val() == null) {
                            //alert("Please select your file first to upload.");
                            this.notify.error("Please select your Affidavit file first to upload.");
                            defer.resolve('failure');
                        }
                        else {
                            var efile_data = $('#daffidavit_file').prop('files')[0];
                            var efileName_5 = $("#daffidavit_file")[0].files[0].name; //get file name
                            var file_extension_6 = efile_data.type;
                            var fileExtension = efileName_5.split('.').pop();
                            var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                            if (!re.exec(efileName_5)) {
                                $("#daffidavit_file").val(null);
                                this.notify.error("File type does not support. Please upload jpg/png file.");
                                defer.resolve('failure');
                            }
                            else {
                                var reader_11 = new FileReader();
                                var image_data = void 0;
                                reader_11.readAsDataURL(efile_data);
                                reader_11.onloadend = function () {
                                    $('#daffidavit_file').val = "";
                                    jsonobj_6["otherFile"] = reader_11.result;
                                    _this.Daffidavit_data = reader_11.result;
                                    jsonobj_6["eFileName"] = efileName_5;
                                };
                            }
                        }
                    }
                    else {
                        jsonobj_6["otherFile"] = 'No';
                        jsonobj_6["eFileName"] = '';
                    }
                    //======Affidavit file upload end here---
                    var reader_12 = new FileReader();
                    reader_12.readAsDataURL(file_data);
                    reader_12.onloadend = function () {
                        // @ts-ignore
                        document.getElementById("dimgTest").innerHTML = reader_12.result;
                        $('#dsupported_file').val = "";
                        jsonobj_6["uploadFile"] = reader_12.result;
                        jsonobj_6["basePath"] = window.location.origin;
                        _this.studentService.uploadStudentDocument(jsonobj_6).then(function (success) {
                            _this.flag = true;
                        });
                    };
                }
            }
        };
        MultipleChangeRequest.prototype.getCorrectionStatus = function (requestSubmissionId) {
            var _this = this;
            this.paymentStatus = 0;
            this.changeRequestService.getCorrectionStatus(requestSubmissionId).then(function (record) {
                _this.correctionStatus = record.entries;
                console.log("Correction Status=", JSON.stringify(_this.correctionStatus));
                if (_this.correctionStatus.length > 0) {
                    _this.paymentStatus = _this.correctionStatus[0].paymentStatus;
                    _this.modifiedOn = _this.correctionStatus[0].modifiedOn;
                }
                else {
                    _this.paymentStatus = 0;
                }
            });
        };
        /*check file extension..*/
        MultipleChangeRequest.prototype.checkFile = function (file) {
            var extension = file.substr((file.lastIndexOf('.') + 1));
            if (!/(pdf|zip|doc)$/ig.test(extension)) {
                alert("Invalid file type: " + extension + ".  Please use DOC, PDF or Zip.");
                $("#file").val("");
            }
        };
        /**
         * Validation for student's Name Correction
         * */
        MultipleChangeRequest.prototype.validate = function () {
            var request_type = "Student";
            this.supportedDocument = 0;
            this.effidevitDocument = 0;
            this.requestedFullname = $("#firstName").val() + " " + $("#lastName").val();
            this.supportedDocument = $("#supported_file")[0].files.length;
            this.requesteReason = $.trim($('#request_reason').val());
            this.reasonType = $("#requestReasonType option:selected").val();
            this.activeMobile = $("#smobileNo").val();
            var vidFileLength = $("#supported_file")[0].files.length;
            if (this.supportedDocument > 0) {
                var doc_type = "supported";
                var file_data = $('#supported_file').prop('files')[0];
                this.getImageData(file_data, doc_type, request_type);
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                if (!re.exec(file_data.name)) {
                    $("#supported_file").val(null);
                    return 0;
                }
            }
            if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                $("#special_doc").show();
            }
            else {
                $("#special_doc").hide();
            }
            if (this.activeMobile != this.studentMobile && this.activeMobile != '') {
                $("#mobile_warning").show();
                return 0;
            }
            else {
                $("#mobile_warning").hide();
            }
            if (this.requestedFullname === '' || this.requestedFullname === null) {
                return 0;
            }
            else if (this.activeMobile === '') {
                return 0;
            }
            else if (this.reasonType === '') {
                return 0;
            }
            else if (this.requesteReason === '') {
                return 0;
            }
            else if (this.supportedDocument === 0) {
                return 0;
            }
            else if (this.reasonType === 'Mistake in SSC/HSC Certificate') {
                this.effidevitDocument = $("#affidevit_file")[0].files.length;
                if (this.effidevitDocument === 0) {
                    return 0;
                }
                else {
                    var doc_type = "affidavit";
                    var file_data = $('#affidevit_file').prop('files')[0];
                    this.getImageData(file_data, doc_type, request_type);
                    return 1;
                }
            }
            else {
                return 1;
            }
        };
        /***
         * Preview Student's Documents for Name Correction before saving
         * **
         * */
        MultipleChangeRequest.prototype.previewStudentProfile = function () {
            var firstName = "";
            var lastName = "";
            var request_reason = "";
            var effidevitFile = "";
            var formRequestId;
            formRequestId = $("#srequested_id").val();
            firstName = $("#firstName").val();
            lastName = $("#lastName").val();
            request_reason = $("#request_reason").val();
            this.activeMobile = $("#smobileNo").val();
            var vidFileLength = $("#affidevit_file")[0].files.length;
            var fileName = $("#supported_file")[0].files[0].name;
            this.reasonType = $("#requestReasonType option:selected").val();
            if (vidFileLength > 0) {
                effidevitFile = $("#affidevit_file")[0].files[0].name;
            }
            else {
                effidevitFile = "";
            }
            firstName = firstName.replace(/[0-9`~!@#$%^&*()_|+\=?;:'",<>\{\}\[\]\\\/]/gi, '');
            this.requestedFname = firstName;
            lastName = lastName.replace(/[0-9`~!@#$%^&*()_|+\=?;:'",<>\{\}\[\]\\\/]/gi, '');
            //lastName = this.fieldValidation(lastName);
            this.requestedLname = lastName;
            this.requestedFullname = this.requestedFname + " " + this.requestedLname;
            request_reason = $.trim($('#request_reason').val());
            request_reason = request_reason.replace(/[0-9`~!@#$%^&*()_|+\-=?;:",<>\{\}\[\]\\\/]/gi, '');
            this.requesteReason = request_reason;
            this.students_documents = fileName;
            this.effidevitFile = effidevitFile;
            this.fjsonObject["requestId"] = formRequestId;
            this.fjsonObject["requestInitiator"] = this.studentId;
            this.fjsonObject["firstName"] = firstName;
            this.fjsonObject["lastName"] = lastName;
            this.fjsonObject["fullName"] = firstName + " " + lastName;
            this.fjsonObject["changeString"] = firstName + "," + lastName;
            this.fjsonObject["requestDescription"] = request_reason;
            this.fjsonObject["supportedDocuments"] = this.students_documents;
            this.fjsonObject["studentEmail"] = this.studentEmail;
            this.fjsonObject["mobileNo"] = this.activeMobile;
            this.fjsonObject["reasonType"] = this.reasonType;
            this.fjsonObject["previousName"] = this.studentFullname;
            this.fjsonObject["effidevitFile"] = effidevitFile;
            this.fjsonObject["requestSubmissionId"] = this.request_submission_id;
            this.selectedReasonType = this.reasonType;
            if (this.reasonType === 'Mistake of Student' || this.reasonType === 'Mistake in SSC/HSC Certificate') {
                this.fjsonObject["requestInitiatedStatus"] = 0; // Waiting for payment
            }
            else {
                this.fjsonObject["requestInitiatedStatus"] = 1; // Directly submit to the registrar office
            }
        };
        /**
         * Validation for student's Parent's Name Correction
         * */
        MultipleChangeRequest.prototype.pvalidate = function () {
            var request_type = "Parent";
            this.supportedDocument = 0;
            this.effidevitDocument = 0;
            this.reasonType = "";
            this.pRequestReason = "";
            var pParentType;
            this.requestedFatherName = $("#fatherName").val();
            this.requestedMotherName = $("#motherName").val();
            this.supportedDocument = $("#psupported_file")[0].files.length;
            this.pRequestReason = $.trim($('#prequest_reason').val());
            this.pReasonType = $("#pReasonType option:selected").val();
            this.$scope.pParentType = $("#pParentType option:selected").val();
            this.pMobile = $("#pMobileNo").val();
            var vidFileLength = $("#psupported_file")[0].files.length;
            if (vidFileLength > 0) {
                var doc_type = "supported";
                var file_data = $('#psupported_file').prop('files')[0];
                this.getImageData(file_data, doc_type, request_type);
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                if (!re.exec(file_data.name)) {
                    $("#psupported_file").val(null);
                    this.requestedFatherName = $("#fatherName").val(null);
                    this.requestedMotherName = $("#motherName").val(null);
                    return 0;
                }
            }
            if (this.pReasonType === 'Mistake in SSC/HSC Certificate') {
                $("#pspecial_doc").show();
            }
            else {
                $("#pspecial_doc").hide();
            }
            if (this.$scope.pParentType === 'Mother') {
                $("#motherPanel").show();
                $("#fatherPanel").hide();
                $("#fatherName").val('');
                $('#fatherName').attr("value", "");
                $('#motherName').attr('required', 'required');
            }
            else if (this.$scope.pParentType === 'Father') {
                $("#fatherPanel").show();
                $("#motherPanel").hide();
                $("#motherName").val('');
                $('#motherName').attr("value", "");
                $('#fatherName').attr('required', 'required');
            }
            else if (this.$scope.pParentType === 'Both') {
                $("#motherPanel").show();
                $("#fatherPanel").show();
                $('#motherName').attr('required', 'required');
                $('#fatherName').attr('required', 'required');
            }
            if (this.pMobile != this.studentMobile && this.pMobile != '') {
                $("#pmobile_warning").show();
                return 0;
            }
            else {
                $("#pmobile_warning").hide();
            }
            if ((this.requestedFatherName === '' || this.requestedFatherName === null) && (this.$scope.pParentType === 'Father')) {
                return 0;
            }
            else if ((this.requestedMotherName === '' || this.requestedMotherName === null) && (this.$scope.pParentType === 'Mother')) {
                return 0;
            }
            else if (this.$scope.pParentType === 'Both') {
                if (this.requestedFatherName === '') {
                    return 0;
                }
                if (this.requestedMotherName === '') {
                    return 0;
                }
            }
            else if (this.pMobile === '') {
                return 0;
            }
            else if (this.pReasonType === '') {
                return 0;
            }
            else if (this.pRequestReason === '') {
                return 0;
            }
            else if (this.supportedDocument === 0) {
                return 0;
            }
            else if (this.pReasonType === 'Mistake in SSC/HSC Certificate') {
                this.effidevitDocument = $("#paffidavit_file")[0].files.length;
                if (this.effidevitDocument === 0) {
                    return 0;
                }
                else {
                    var doc_type = "affidavit";
                    var file_data = $('#paffidavit_file').prop('files')[0];
                    this.getImageData(file_data, doc_type, request_type);
                    return 1;
                }
            }
            else {
                return 1;
            }
        };
        MultipleChangeRequest.prototype.clearParentData = function () {
            var pType = $("#pParentType option:selected").val();
            if (pType === 'Mother') {
                $("#fatherName").val('');
                $('#fatherName').attr("value", "");
            }
            if (pType === 'Father') {
                $("#motherName").val('');
                $('#motherName').attr("value", "");
            }
        };
        /***
         * Preview Student's Parent's Documents for Name Correction before saving
         * **
         * */
        MultipleChangeRequest.prototype.previewParentProfile = function () {
            var fatherName = "";
            var motherName = "";
            var request_reason = "";
            var affidavitFile = "";
            var docFileName = "";
            var formRequestId = $("#Prequested_id").val();
            fatherName = $("#fatherName").val();
            motherName = $("#motherName").val();
            request_reason = $("#prequest_reason").val();
            docFileName = $("#psupported_file")[0].files[0].name;
            if ($("#paffidavit_file")[0].files.length > 0) {
                affidavitFile = $("#paffidavit_file")[0].files[0].name;
                this.pAffidavitFile = affidavitFile;
            }
            else {
                affidavitFile = "";
                this.pAffidavitFile = "";
            }
            fatherName = fatherName.replace(/[0-9`~!@#$%^&*()_|+\=?;:'",<>\{\}\[\]\\\/]/gi, '');
            this.requestedFatherName = fatherName;
            if (motherName != null || motherName !== "") {
                motherName = motherName.replace(/[0-9`~!@#$%^&*()_|+\=?;:'",<>\{\}\[\]\\\/]/gi, '');
                this.requestedMotherName = motherName;
            }
            request_reason = $('#prequest_reason').val();
            request_reason = request_reason.replace(/[0-9`~!@#$%^&*()_|+\-=?;:",<>\{\}\[\]\\\/]/gi, '');
            this.pRequestReason = request_reason;
            if (docFileName === "" && this.students_documents === 'undefined') {
                $('#psupported_file').css({ "background-color": "#f7fff7" });
                $("#psupported_file").focus();
                $("#psupported_file").attr('placeholder', 'Please upload your document!');
            }
            else {
                this.students_documents = docFileName;
            }
            this.fjsonObject = {};
            this.fjsonObject["requestId"] = formRequestId;
            this.fjsonObject["requestInitiator"] = this.studentId;
            this.fjsonObject["studentFullName"] = this.studentFullname;
            this.fjsonObject["fatherName"] = this.requestedFatherName;
            this.fjsonObject["motherName"] = this.requestedMotherName;
            this.fjsonObject["changeString"] = this.requestedFatherName + "," + this.requestedMotherName;
            this.fjsonObject["requestDescription"] = this.pRequestReason;
            this.fjsonObject["supportedDocuments"] = this.students_documents;
            this.fjsonObject["studentEmail"] = this.studentEmail;
            this.fjsonObject["mobileNo"] = this.pMobile;
            this.fjsonObject["reasonType"] = this.pReasonType;
            this.fjsonObject["previousFatherName"] = this.fatherPreviousName;
            this.fjsonObject["previousMotherName"] = this.motherPreviousName;
            this.fjsonObject["previousName"] = this.fatherPreviousName + "," + this.motherPreviousName;
            this.fjsonObject["effidevitFile"] = this.pAffidavitFile;
            this.fjsonObject["requestSubmissionId"] = this.request_submission_id;
            this.selectedReasonType = this.pReasonType;
            if (this.pReasonType === 'Mistake of Student' || this.pReasonType === 'Mistake in SSC/HSC Certificate') {
                this.fjsonObject["requestInitiatedStatus"] = 0; // Waiting for payment
            }
            else {
                this.fjsonObject["requestInitiatedStatus"] = 1; // Directly submit to the registrar office
            }
            console.log("Parents JSON:", JSON.stringify(this.fjsonObject));
        };
        /**
         * Validation for student's DOB's Name Correction
         * */
        MultipleChangeRequest.prototype.dvalidate = function () {
            var request_type = "DOB";
            this.supportedDocument = 0;
            this.effidevitDocument = 0;
            this.reasonType = "";
            this.activeMobile = "";
            this.dRequestReason = "";
            this.requestedDob = $("#requestedDob").val();
            this.dDocument = $("#dsupported_file")[0].files.length;
            this.dRequestReason = $.trim($('#drequest_reason').val());
            this.dReasonType = $("#dReasonType option:selected").val();
            this.dMobile = $("#dmobileNo").val();
            var vidFileLength = $("#dsupported_file")[0].files.length;
            if (vidFileLength > 0) {
                var doc_type = "supported";
                var file_data = $('#dsupported_file').prop('files')[0];
                this.getImageData(file_data, doc_type, request_type);
                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                if (!re.exec(file_data.name)) {
                    $("#dsupported_file").val(null);
                    this.requestedDob = $("#requestedDob").val(null);
                    return 0;
                }
            }
            if (this.dReasonType === 'Mistake in SSC/HSC Certificate') {
                this.effidevitDocument = $("#daffidavit_file")[0].files.length;
                $("#dspecial_doc").show();
            }
            else {
                $("#dspecial_doc").hide();
            }
            if (this.dMobile !== this.studentMobile && this.dMobile != '') {
                $("#dmobile_warning").show();
                return 0;
            }
            else {
                $("#dmobile_warning").hide();
            }
            if (this.requestedDob === '' || this.requestedDob === null) {
                return 0;
            }
            else if (this.dMobile === '') {
                return 0;
            }
            else if (this.dReasonType === '') {
                return 0;
            }
            else if (this.dRequestReason === '') {
                return 0;
            }
            else if (this.supportedDocument === 0) {
                return 0;
            }
            else if (this.dReasonType === 'Mistake in SSC/HSC Certificate') {
                if (this.effidevitDocument === 0) {
                    return 0;
                }
                else {
                    var doc_type = "affidavit";
                    var file_data = $('#daffidavit_file').prop('files')[0];
                    this.getImageData(file_data, doc_type, request_type);
                    return 1;
                }
            }
            else {
                return 1;
            }
        };
        /***
         * Preview Student's Preview for DOB Correction before saving
         * **
         * */
        MultipleChangeRequest.prototype.previewStudentDOb = function () {
            var dob;
            var request_reason;
            var affidavitFile;
            var docFileName;
            var formRequestId = $("#Drequested_id").val();
            dob = $("#requestedDob").val();
            request_reason = $("#drequest_reason").val();
            docFileName = $("#dsupported_file")[0].files[0].name;
            if ($("#daffidavit_file")[0].files.length > 0) {
                affidavitFile = $("#daffidavit_file")[0].files[0].name;
                this.dAffidavitFile = affidavitFile;
            }
            else {
                affidavitFile = "";
                this.dAffidavitFile = "";
            }
            if (dob === "" || dob === null) {
                $("#requestedDob").css({ "background-color": "#f7fff7" });
                $("#requestedDob").focus();
                $("#requestedDob").attr('placeholder', 'Please Enter DOB!');
            }
            else {
                this.requestedDob = dob;
            }
            if ($.trim($('#drequest_reason').val()) == '') {
                $("#drequest_reason").css({ "background-color": "#f7fff7" });
                $("#drequest_reason").focus();
                $("#drequest_reason").attr('placeholder', 'Please write your reason of correction!');
            }
            else {
                request_reason = $('#drequest_reason').val();
                request_reason = request_reason.replace(/[0-9`~!@#$%^&*()_|+\-=?;:",<>\{\}\[\]\\\/]/gi, '');
                this.dRequestReason = request_reason;
            }
            if (docFileName === "" && this.dDocument === 'undefined') {
                $('#dsupported_file').css({ "background-color": "#f7fff7" });
                $("#dsupported_file").focus();
                $("#dsupported_file").attr('placeholder', 'Please upload your documents!');
            }
            else {
                this.dDocument = docFileName;
            }
            this.fjsonObject = {};
            this.fjsonObject["requestId"] = formRequestId;
            this.fjsonObject["requestInitiator"] = this.studentId;
            this.fjsonObject["studentFullName"] = this.studentFullname;
            this.fjsonObject["dob"] = this.requestedDob;
            this.fjsonObject["changeString"] = this.requestedDob;
            this.fjsonObject["requestDescription"] = this.dRequestReason;
            this.fjsonObject["supportedDocuments"] = this.dDocument;
            this.fjsonObject["studentEmail"] = this.studentEmail;
            this.fjsonObject["mobileNo"] = this.dMobile;
            this.fjsonObject["reasonType"] = this.dReasonType;
            this.fjsonObject["previousName"] = this.previousDob;
            this.fjsonObject["effidevitFile"] = this.dAffidavitFile;
            this.fjsonObject["requestSubmissionId"] = this.request_submission_id;
            this.selectedReasonType = this.dReasonType;
            if (this.dReasonType === 'Mistake of Student' || this.dReasonType === 'Mistake in SSC/HSC Certificate') {
                this.fjsonObject["requestInitiatedStatus"] = 0; // Waiting for payment completion
            }
            else {
                this.fjsonObject["requestInitiatedStatus"] = 1; // Directly submit to the registrar office
            }
            console.log("Parents JSON :", JSON.stringify(this.fjsonObject));
        };
        MultipleChangeRequest.prototype.initializeDatePickers = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker({
                    todayHighlight: true,
                    multidate: false,
                    autoclose: true
                });
                $('.datepicker-default').on('change', function () {
                });
            }, 200);
        };
        /* **
         * Validation for student's Application
         * Date: 30-05-2022
         * **/
        MultipleChangeRequest.prototype.AllValidate = function () {
            var required = $('input,textarea,select').filter('[required]:visible');
            var allRequired = true;
            required.each(function () {
                if ($(this).val() == '') {
                    allRequired = false;
                }
            });
            if (!allRequired) {
                return 0;
            }
            else {
                return 1;
            }
        };
        /***
         * Submit the Name correction application with full information
         ***/
        MultipleChangeRequest.prototype.submitRequest = function () {
            var requestApplication = [];
            requestApplication = this.requestString.split(",");
            var reqApp = requestApplication.sort(function (a, b) { return a - b; });
            console.log("requestApplication = ", requestApplication);
            console.log("After sorted = ", reqApp);
            var defer = this.$q.defer();
            var that = this;
            if (this.flag === true) {
                this.notify.error("You have already submitted your request.");
            }
            else {
                for (var i = 0; i <= requestApplication.length - 1; i++) {
                    var item = requestApplication[i];
                    switch (item) {
                        case '1':
                            {
                                this.previewStudentProfile();
                                this.documentUpload();
                                var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                                if (!re.exec(this.$scope.uniqueFileName)) {
                                    this.$scope.uniqueFileName = "";
                                    this.notify.error("File type does not support. Please upload jpg/png/pdf file.");
                                }
                                else {
                                    this.fjsonObject["supportedDocuments"] = this.$scope.uniqueFileName;
                                    this.finalRequestSubmission(item);
                                }
                                item = '';
                                break;
                            }
                        case '2': {
                            this.previewParentProfile();
                            this.PdocumentUpload();
                            var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                            if (!re.exec(this.$scope.puniqueFileName)) {
                                this.$scope.puniqueFileName = "";
                                this.notify.error("File type does not support. Please upload jpg/png/pdf file.");
                            }
                            else {
                                this.fjsonObject["supportedDocuments"] = this.$scope.puniqueFileName;
                                this.finalRequestSubmission(item);
                            }
                            item = '';
                            break;
                        }
                        case '3': {
                            this.previewStudentDOb();
                            this.DdocumentUpload();
                            var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
                            if (!re.exec(this.$scope.duniqueFileName)) {
                                this.$scope.duniqueFileName = "";
                                this.notify.error("File type does not support. Please upload jpg/png/pdf file.");
                            }
                            else {
                                this.fjsonObject["supportedDocuments"] = this.$scope.duniqueFileName;
                                this.finalRequestSubmission(item);
                            }
                            item = '';
                            break;
                        }
                        default: {
                            break;
                        }
                    }
                }
            }
            console.log("Application Parameter=", this.fjsonObject);
        };
        /****
         * @author: evana
         * @coded: 01/06/2022
         * @Description: Application submission
         * **/
        MultipleChangeRequest.prototype.finalRequestSubmission = function (requestId) {
            var _this = this;
            var defer = this.$q.defer();
            //var re = /(\.jpg|\.jpeg|\.pdf|\.png)$/i;
            this.studentService.submitStudentApplication(this.fjsonObject).then(function (success) {
                $('form[name="name-change"]')[0].reset();
                $(".apply-form").hide();
                $(".application_rules").hide();
                $("#application_confirmation").show();
                $("#multiple_application").hide();
                _this.flag = true;
                _this.submissionFlag = true;
                _this.ChangeRequestLogSave(requestId);
            });
        };
        /***
         * Retrieve Previous Request Status
         ***/
        MultipleChangeRequest.prototype.getLastRequestStatus = function (requestId) {
            var _this = this;
            this.$scope.requestStatus = [];
            var encodedid = "";
            this.changeRequestService.getLastRequestStatus(requestId).then(function (record) {
                _this.$scope.requestStatus = record.entries;
                _this.lastRequestStatus = _this.$scope.requestStatus[0].requestInitiatedStatus;
                _this.lastRequestDate = _this.$scope.requestStatus[0].requestCreatedOn;
                _this.selectedReasonType = _this.$scope.requestStatus[0].reasonType;
                _this.requestDetailId = _this.$scope.requestStatus[0].id;
                _this.requestSubmissionId = _this.$scope.requestStatus[0].requestSubmissionId;
                _this.getCorrectionStatus(_this.requestSubmissionId);
                console.log("getLastRequestStatus=", _this.$scope.requestStatus);
            });
        };
        /***
         * Save Log information here.
         * @dated: 16-02-2022
         * */
        MultipleChangeRequest.prototype.ChangeRequestLogSave = function (requestId) {
            var defer = this.$q.defer();
            var jsonobj = {};
            jsonobj["actionName"] = this.fjsonObject["changeString"];
            if (requestId == 1) {
                jsonobj["actionModule"] = "Student Name Correction Request";
            }
            else if (requestId == 2) {
                jsonobj["actionModule"] = "Parent's Name Correction Request";
            }
            else if (requestId == 3) {
                jsonobj["actionModule"] = "Student's DOB Correction Request";
            }
            jsonobj["requestDetailId"] = requestId;
            jsonobj["actionUser"] = this.studentId;
            jsonobj["actionComment"] = "Student's first application for correction request";
            this.httpClient.post("/ums-webservice-academic/academic/changeRequestLog/createLog", jsonobj, 'application/json')
                .success(function () {
            })
                .error(function (data) {
                console.log(data);
            });
        };
        MultipleChangeRequest.prototype.onBackKeyDown = function () {
            window.history.go(-1);
        };
        MultipleChangeRequest.prototype.getDecodedData = function (decodedId) {
            var decodedStringBtoAA = atob(decodedId);
            return decodedStringBtoAA;
        };
        MultipleChangeRequest.prototype.getImageData = function (imagefile, filtType, requestType) {
            var _this = this;
            var reader = new FileReader();
            reader.readAsDataURL(imagefile);
            reader.onloadend = function () {
                if (filtType === 'supported') {
                    if (requestType === 'DOB') {
                        _this.DimageData = reader.result;
                    }
                    else if (requestType === 'Parent') {
                        _this.PimageData = reader.result;
                    }
                    else {
                        _this.image_data = reader.result;
                    }
                }
                else {
                    if (requestType === 'DOB') {
                        _this.Daffidavit_data = reader.result;
                    }
                    else if (requestType === 'Parent') {
                        _this.Paffidavit_data = reader.result;
                    }
                    else {
                        _this.affidavit_data = reader.result;
                    }
                }
            };
        };
        MultipleChangeRequest.$inject = ['appConstants', '$scope', 'HttpClient', '$q', 'notify', '$sce', '$window', 'userService', 'studentService', 'changeRequestService', '$stateParams', '$state', '$location'];
        return MultipleChangeRequest;
    }());
    ums.MultipleChangeRequest = MultipleChangeRequest;
    ums.UMS.controller("MultipleChangeRequest", MultipleChangeRequest);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Spinner = (function () {
        function Spinner() {
            this.link = function ($scope, element, attr) {
            };
            this.templateUrl = './views/common/spinner.html';
        }
        return Spinner;
    }());
    ums.Spinner = Spinner;
    ums.UMS.directive('spinner', function () { return new Spinner(); });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ProfilePicture = (function () {
        function ProfilePicture(httpClient, $q) {
            var _this = this;
            this.httpClient = httpClient;
            this.$q = $q;
            this.restrict = 'A';
            this.scope = {
                userId: "=imgId"
            };
            this.link = function (scope, element, attributes) {
                var fetch = function (id) {
                    _this.httpClient.get("profilePicture/" + id, '', function (data, etag) {
                        var arr = new Uint8Array(data);
                        var raw = '';
                        var i, j, subArray, chunk = 5000;
                        for (i = 0, j = arr.length; i < j; i += chunk) {
                            subArray = arr.subarray(i, i + chunk);
                            raw += String.fromCharCode.apply(null, subArray);
                        }
                        var b64 = btoa(raw);
                        var dataURL = "data:image/jpeg;base64," + b64;
                        $(element).attr('src', dataURL);
                    }, function (response) {
                        //console.error(response);
                    }, 'arraybuffer');
                };
                scope.$watch(function () { return scope.userId; }, function (newVal, oldVal) {
                    if (newVal) {
                        fetch(newVal);
                    }
                });
                fetch('0');
            };
        }
        return ProfilePicture;
    }());
    ums.ProfilePicture = ProfilePicture;
    ums.UMS.directive("profilePicture", ['HttpClient', '$q', function (httpClient, $q) {
            return new ProfilePicture(httpClient, $q);
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ProfilePictureOthers = (function () {
        function ProfilePictureOthers(httpClient, $q) {
            var _this = this;
            this.httpClient = httpClient;
            this.$q = $q;
            this.restrict = 'A';
            this.scope = {
                userId: "=imgId"
            };
            this.link = function (scope, element, attributes) {
                var fetch = function (id) {
                    if (id == 0)
                        return;
                    _this.httpClient.get("profilePicture/" + id, '', function (data, etag) {
                        var arr = new Uint8Array(data);
                        var raw = '';
                        var i, j, subArray, chunk = 5000;
                        for (i = 0, j = arr.length; i < j; i += chunk) {
                            subArray = arr.subarray(i, i + chunk);
                            raw += String.fromCharCode.apply(null, subArray);
                        }
                        var b64 = btoa(raw);
                        var dataURL = "data:image/jpeg;base64," + b64;
                        $(element).attr('src', dataURL);
                    }, function (response) {
                        //console.error(response);
                    }, 'arraybuffer');
                };
                scope.$watch(function () { return scope.userId; }, function (newVal, oldVal) {
                    if (newVal) {
                        $(element).attr('src', '');
                        fetch(newVal);
                    }
                });
                fetch('0');
            };
        }
        return ProfilePictureOthers;
    }());
    ums.ProfilePictureOthers = ProfilePictureOthers;
    ums.UMS.directive("profilePictureOthers", ['HttpClient', '$q', function (httpClient, $q) {
            return new ProfilePictureOthers(httpClient, $q);
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Grid = (function () {
        function Grid() {
            this.restrict = 'A';
            this.replace = true;
            this.scope = {
                config: '=',
                data: '=',
                grid: '='
            };
            this.link = function (scope, element, attrs) {
                var table, div;
                scope.$watch('config', function (value) {
                    element.empty();
                    table = angular.element('<table id="' + attrs.gridid + '"></table>');
                    element.append(table);
                    if (attrs.pagerid) {
                        value.pager = '#' + attrs.pagerid;
                        var pager = angular.element(value.pager);
                        if (pager.length == 0) {
                            div = angular.element('<div id="' + attrs.pagerid + '"></div>');
                            element.append(div);
                        }
                    }
                    table.jqGrid(value);
                    scope.grid.api.gridElement(table);
                    var editOptions = {
                        editCaption: "The Edit Dialog",
                        closeOnEscape: true,
                        closeAfterEdit: true,
                        errorTextFormat: function (data) {
                            return 'Error: ' + data.responseText;
                        },
                        onclickSubmit: function (row, data) {
                            console.log(data);
                            if (scope.grid.api.gridEditActions
                                && scope.grid.api.gridEditActions.edit) {
                                scope.grid.api.gridEditActions.edit(data);
                            }
                        },
                        recreateForm: true,
                        beforeShowForm: function ($form) {
                            $form.find(".FormElement[readonly]")
                                .prop("disabled", true)
                                .addClass("ui-state-disabled")
                                .closest(".DataTD")
                                .prev(".CaptionTD")
                                .prop("disabled", true)
                                .addClass("ui-state-disabled");
                        },
                        beforeInitData: function ($form) {
                            scope.grid.api.gridEditActions.beforeShowEditForm($form, table);
                        },
                        afterShowForm: function ($form) {
                            scope.grid.api.gridEditActions.afterShowEditForm($form, table);
                        }
                    };
                    var addOptions = {
                        closeOnEscape: true,
                        closeAfterEdit: true,
                        errorTextFormat: function (data) {
                            return 'Error: ' + data.responseText;
                        },
                        onclickSubmit: function (row, data) {
                            if (scope.grid.api.gridEditActions
                                && scope.grid.api.gridEditActions.insert) {
                                scope.grid.api.gridEditActions.insert(data);
                            }
                        },
                        addCaption: 'Add New.....',
                        beforeShowForm: function (form) {
                            return false;
                        },
                        afterSubmit: function (response) {
                            return [false, '', null];
                        },
                        closeAfterAdd: true
                    };
                    var deleteOptions = {
                        closeAfterEdit: true,
                        errorTextFormat: function (data) {
                            return 'Error: ' + data.responseText;
                        },
                        onclickSubmit: function (row, data) {
                            if (scope.grid.api.gridEditActions
                                && scope.grid.api.gridEditActions.remove) {
                                scope.grid.api.gridEditActions.remove(data);
                            }
                        },
                        afterSubmit: function (response) {
                            return [false, '', null];
                        }
                    };
                    table.jqGrid('navGrid', '#' + attrs.pagerid, {
                        edit: true,
                        add: true,
                        del: true,
                        search: true,
                        refresh: true,
                        view: false,
                        position: "left",
                        cloneToTop: false
                    }, editOptions, addOptions, deleteOptions);
                    table.jqGrid('bindKeys', {
                        "onEnter": function (rowId) {
                            table.jqGrid('editGridRow', rowId, editOptions);
                        }
                    });
                    $(document).keydown(function (evt) {
                        // alt + n to create new row dialog
                        if (evt.altKey && evt.keyCode == 78) {
                            table.jqGrid('editGridRow', 'new', addOptions);
                        }
                    });
                    $(element).focus();
                });
                scope.$watch('data', function (value) {
                    table.jqGrid('setGridParam', { data: value })
                        .trigger('reloadGrid');
                    scope.grid.api.gridData(scope.data);
                });
            };
        }
        return Grid;
    }());
    ums.Grid = Grid;
    ums.UMS.directive('jqGrid', [function () {
            return new Grid();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SelectPicker = (function () {
        function SelectPicker($timeout) {
            var _this = this;
            this.$timeout = $timeout;
            this.restrict = 'A';
            this.scope = {
                dataSet: '=datas'
            };
            this.require = 'ngModel';
            this.link = function ($scope, element, attributes, ngModelCtrl) {
                if (attributes['select'] == 'select2') {
                    if (element.hasClass('select2-hidden-accessible')) {
                        element.select2('destroy');
                    }
                    var pHolder = attributes['placeholder'];
                    if (pHolder == "")
                        pHolder = "Select an option";
                    if (attributes['page'] == "true") {
                        var dataSet = $scope.dataSet;
                        var a = $("#" + attributes['parent']);
                        _this.$timeout(function () {
                            element.select2({
                                allowClear: true,
                                placeholder: pHolder,
                                dropdownParent: a,
                                minimumInputLength: 2,
                                query: function (options) {
                                    var pageSize = 50;
                                    var startIndex = (options.page - 1) * pageSize;
                                    var endIndex = startIndex + pageSize;
                                    var filteredData = dataSet;
                                    var obj = "";
                                    if (options.term && options.term.length > 0) {
                                        if (!options.context) {
                                            var term = options.term.toLowerCase();
                                            options.context = dataSet.filter(function (metric) {
                                                obj = metric.text.toLowerCase();
                                                return (obj.indexOf(term) !== -1);
                                            });
                                        }
                                        filteredData = options.context;
                                    }
                                    options.callback({
                                        context: filteredData,
                                        results: filteredData.slice(startIndex, endIndex),
                                        more: (startIndex + pageSize) < filteredData.length
                                    });
                                }
                            });
                            _this.elementInitialized = true;
                        });
                    }
                    else {
                        _this.$timeout(function () {
                            element.select2({
                                placeholder: "Select an option",
                                allowClear: true
                            });
                            _this.elementInitialized = true;
                        });
                    }
                    var refreshSelect = function () {
                        if (!_this.elementInitialized) {
                            // check after some interval for select2 to initialize
                            _this.$timeout(function () {
                                refreshSelect();
                            }, 250);
                            return;
                        }
                        _this.$timeout(function () {
                            element.trigger('change');
                        });
                    };
                    $scope.$watch(attributes.ngModel, refreshSelect);
                }
                else if (attributes['select'] == 'select-picker') {
                    _this.$timeout(function () {
                        $(element).selectpicker({
                            iconBase: 'fa',
                            tickIcon: 'fa-check'
                        });
                        _this.elementInitialized = true;
                    });
                }
            };
        }
        return SelectPicker;
    }());
    ums.SelectPicker = SelectPicker;
    ums.UMS.directive("select", ['$timeout', function ($timeout) { return new SelectPicker($timeout); }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ConvertToNumber = (function () {
        function ConvertToNumber() {
            this.restrict = 'A';
            this.require = 'ngModel';
            this.link = function (scope, element, attrs, ngModel) {
                ngModel.$parsers.push(function (val) {
                    return parseInt(val, 10);
                });
                ngModel.$formatters.push(function (val) {
                    return '' + val;
                });
            };
        }
        return ConvertToNumber;
    }());
    ums.ConvertToNumber = ConvertToNumber;
    ums.UMS.directive("convertToNumber", [function () { return new ConvertToNumber(); }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Modal = (function () {
        function Modal() {
            this.restrict = 'AE';
            this.transclude = true;
            this.scope = {
                header: '=',
                body: '=',
                callbackButtonLeft: '&ngClickLeftButton',
                callbackButtonRight: '&ngClickRightButton',
                handler: '='
            };
            this.controller = function ($scope) {
                //$scope.handler = 'lolo';
            };
            this.templateUrl = './views/common/modal.html';
        }
        return Modal;
    }());
    ums.Modal = Modal;
    ums.UMS.directive("modal", [function () {
            return new Modal();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Notification = (function () {
        function Notification(httpClient, $q, $interval, settings) {
            var _this = this;
            this.httpClient = httpClient;
            this.$q = $q;
            this.$interval = $interval;
            this.settings = settings;
            this.restrict = 'AE';
            this.link = function ($scope, element, attributes) {
                _this.scope = $scope;
                _this.scope.numOfUnreadNotification = 0;
                _this.scope.currentInterval = 0;
                _this.scope.tryCount = 0;
                _this.scope.delayFactor = 5000; //5 Seconds delay for each failed operation.
                _this.settings.getSettings().then(function (appSettings) {
                    if (appSettings['notification.enabled']) {
                        _this.scope.currentInterval = Number(appSettings['polling.interval']);
                        _this.scope.baseInterval = Number(appSettings['polling.interval']);
                        _this.getNotification();
                        _this.startNotificationTimer(_this.scope.baseInterval);
                    }
                });
                _this.scope.setReadStatus = _this.setReadStatus.bind(_this);
            };
            this.templateUrl = "./views/directive/notification.html";
        }
        Notification.prototype.getNotification = function () {
            var _this = this;
            this.httpClient.poll("notification/10/", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                var tempCount = 0;
                for (var i = 0; i < response.entries.length; i++) {
                    var notification = response.entries[i];
                    var producedOn = notification.producedOn ? moment(notification.producedOn, 'DD-MM-YYYY hh:mm:ss') : null;
                    var consumedOn = notification.consumedOn ? moment(notification.consumedOn, 'DD-MM-YYYY hh:mm:ss') : null;
                    if (producedOn = null || consumedOn == null || !consumedOn.isAfter(producedOn)) {
                        notification.isRead = false;
                        tempCount = tempCount + 1;
                    }
                    else {
                        notification.isRead = true;
                    }
                }
                if (tempCount != _this.scope.numOfUnreadNotification) {
                    _this.scope.numOfUnreadNotification = tempCount;
                }
                _this.scope.notifications = response.entries;
                //After a successful fetch we check whether the current interval and base interval are eaual or not.
                // If not, we make them equal and start the timer with the initial base Interval.
                if (_this.scope.currentInterval != _this.scope.baseInterval) {
                    _this.scope.currentInterval = _this.scope.baseInterval;
                    _this.scope.tryCount = 0;
                    _this.stopNotificationTimer();
                    _this.startNotificationTimer(_this.scope.baseInterval);
                }
            }, function (response) {
                if (response.status === 401) {
                    _this.stopNotificationTimer();
                }
                else if (response.status === 503 || response.status === 404) {
                    _this.stopNotificationTimer();
                    //For each fail operation interval will be increased by 5 seconds.
                    //And it will increase for 5 times. After that, the interval will be doubled.
                    if (_this.scope.tryCount % 5 != 0) {
                        _this.scope.tryCount++;
                        _this.scope.currentInterval = _this.scope.currentInterval + _this.scope.delayFactor;
                    }
                    else {
                        _this.scope.tryCount = 0;
                        _this.scope.currentInterval = _this.scope.currentInterval * 2;
                    }
                    _this.startNotificationTimer(_this.scope.currentInterval);
                }
            });
        };
        Notification.prototype.startNotificationTimer = function (interval) {
            var _this = this;
            this.intervalPromise = this.$interval(function () {
                _this.getNotification();
            }, interval);
        };
        Notification.prototype.stopNotificationTimer = function () {
            if (angular.isDefined(this.intervalPromise)) {
                this.$interval.cancel(this.intervalPromise);
                this.intervalPromise = undefined;
            }
        };
        Notification.prototype.setReadStatus = function () {
            var _this = this;
            //ToDo: Fix Me.
            //Caused a problem inside NotificationResourceHelper [Long.parseLong(notificationObject.getString("id"))]
            //During the conversion.  This is the Quick Fix for that Exception.
            for (var i = 0; i < this.scope.notifications.length; i++) {
                this.scope.notifications[i].id = this.scope.notifications[i].id + '';
            }
            this.httpClient.post('notification/read', this.scope.notifications, 'application/json')
                .success(function (data) {
                delete _this.scope.numOfUnreadNotification;
            }).error(function (data) {
            });
        };
        return Notification;
    }());
    ums.Notification = Notification;
    ums.UMS.directive("notification", ['HttpClient',
        '$q',
        '$interval',
        'Settings',
        function (httpClient, $q, $interval, settings) {
            return new Notification(httpClient, $q, $interval, settings);
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ConfirmationDIalog = (function () {
        function ConfirmationDIalog() {
            var _this = this;
            this.restrict = 'EA';
            this.scope = {
                recreate: '&deleteAndRecreate',
                cancelRecreation: '&cancelRecreation'
            };
            this.link = function ($scope, element, attributes) {
                var currentScope = _this;
                element.dialog({
                    resizable: false,
                    height: "auto",
                    modal: true
                    /*buttons:{
                      "Delete All & Recreate":function(){
                        console.debug("In the recreate %o", $scope.recreate);
                        $scope.recreate.call();
                        element.dialog("close");
                        //currentScope.scope.recreate;
                      },
                      "Cancel":function(){
                        $scope.cancelRecreation.call();
                        element.dialog("close");
                      }
                    }*/
                });
            };
        }
        return ConfirmationDIalog;
    }());
    ums.UMS.directive("confirmationDialog", function () { return new ConfirmationDIalog(); });
})(ums || (ums = {}));
/**
 * Created by My Pc on 09-May-17.
 */
var ums;
(function (ums) {
    var LeaveApplicationManagement = (function () {
        function LeaveApplicationManagement(appConstants, $scope, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, $timeout, leaveTypeService, leaveApplicationService, leaveApplicationStatusService, userService, attachmentService) {
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.$timeout = $timeout;
            this.leaveTypeService = leaveTypeService;
            this.leaveApplicationService = leaveApplicationService;
            this.leaveApplicationStatusService = leaveApplicationStatusService;
            this.userService = userService;
            this.attachmentService = attachmentService;
            this.fileAttachments = [];
            this.files = {};
            this.filesCopy = {};
            this.appId = "";
            this.leaveApplication = {};
            this.showStatusSection = false;
            this.showHistorySection = false;
            this.fromHistorySection = false;
            this.fromPendingApplicationSection = true;
            this.showApplicationSection = true;
            this.showRemainingLeaves = false;
            this.data = {};
            this.data.totalLeaveDurationInDays = 0;
            this.pageNumber = 1;
            this.pagination = {};
            this.pagination.currentPage = 1;
            this.itemsPerPage = 50;
            $scope.fileInserted = this.fileInserted.bind(this);
            this.initializeDatePickers();
            this.getLeaveTypes();
            this.getPendingApplications();
            $("#leaveType").focus();
        }
        LeaveApplicationManagement.prototype.removeFile = function (file) {
            console.log("In the remove file");
            console.log("The parameter");
            console.log(file);
            for (var i = 0; i < this.files.length; i++) {
                if (this.files[i].name === file.name) {
                    console.log("Found an occurance");
                    console.log(this.files[i]);
                    this.files[i].splice(i, 1);
                }
                break;
            }
            console.log(this.files);
        };
        LeaveApplicationManagement.prototype.fileInserted = function (event) {
            console.log("In the file insertion");
            console.log(event);
        };
        LeaveApplicationManagement.prototype.saveAttachments = function (id) {
            var _this = this;
            for (var i = 0; i < this.files.length; i++) {
                this.getFormData(this.files[i], id).then(function (formData) {
                    _this.leaveApplicationService.uploadFile(formData);
                });
            }
            this.files = {};
        };
        LeaveApplicationManagement.prototype.showHistory = function () {
            console.log("Showing file");
            console.log(this.files);
            this.leaveApprovalStatusList = this.appConstants.leaveApprovalStatus;
            this.leaveApprovalStatus = this.leaveApprovalStatusList[ums.Utils.LEAVE_APPLICATION_ALL - 1];
            console.log(this.leaveApprovalStatusList[8 - 1]);
            console.log("leave approval status: " + this.leaveApprovalStatus);
            this.pageNumber = 1;
            this.itemsPerPage = 10;
            this.getAllLeaveApplicationsForHistory();
            this.showHistorySection = true;
            this.showApplicationSection = false;
            this.fromHistorySection = true;
            this.fromPendingApplicationSection = false;
        };
        LeaveApplicationManagement.prototype.getAllLeaveApplicationsForHistory = function () {
            var _this = this;
            this.pendingApplications = [];
            this.leaveApplicationStatusService.fetchAllLeaveApplicationsOfEmployeeWithPagination(this.leaveApplicationService.user.employeeId, this.leaveApprovalStatus.id, this.pageNumber, this.itemsPerPage).then(function (leaveApplications) {
                _this.pendingApplications = leaveApplications.statusList;
                _this.totalItems = leaveApplications.totalSize;
                console.log(_this.pendingApplications);
            });
        };
        LeaveApplicationManagement.prototype.closeHistory = function () {
            this.showHistorySection = false;
            this.pageNumber = 1;
            this.itemsPerPage = 50;
            this.showApplicationSection = true;
            this.fromHistorySection = false;
            this.fromPendingApplicationSection = true;
            this.getPendingApplications();
        };
        LeaveApplicationManagement.prototype.setResultsPerPage = function (itemPerPage) {
            if (itemPerPage != undefined && itemPerPage > 0 && itemPerPage != null) {
                this.itemsPerPage = itemPerPage;
                this.getAllLeaveApplicationsForHistory();
            }
        };
        LeaveApplicationManagement.prototype.statusChanged = function (leaveApplicationStatus) {
            this.leaveApprovalStatus = leaveApplicationStatus;
            this.getAllLeaveApplicationsForHistory();
        };
        LeaveApplicationManagement.prototype.initializeDatePickers = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 200);
        };
        LeaveApplicationManagement.prototype.getLeaveTypes = function () {
            var _this = this;
            this.leaveTypes = [];
            this.leaveType = {};
            this.leaveTypeService.fetchLeaveTypes().then(function (leaveTypes) {
                _this.leaveTypes = leaveTypes;
                _this.leaveType = _this.leaveTypes[0];
                console.log("Leave types");
                console.log(_this.leaveTypes);
            });
        };
        LeaveApplicationManagement.prototype.dateChanged = function () {
            console.log("In the date changed");
            console.log(this.leaveApplication.fromDate);
            console.log(this.leaveApplication.toDate);
            var thisScope = this;
            setTimeout(function () {
                thisScope.getTotalDuration();
            }, 200);
        };
        LeaveApplicationManagement.prototype.downloadAttachment = function (file) {
            this.attachmentService.downloadFile(file.id, file.fileName);
        };
        LeaveApplicationManagement.prototype.setStatusModalContent = function (lmsApplicationStatus) {
            this.statusModal = lmsApplicationStatus;
        };
        LeaveApplicationManagement.prototype.updateLeaveType = function (lmsType) {
            this.leaveType = lmsType;
        };
        LeaveApplicationManagement.prototype.getTotalDuration = function () {
            if (this.leaveApplication.toDate != null && this.leaveApplication.fromDate != null) {
                var timeDiff = Math.abs(this.leaveApplication.toDate.getTime() - this.leaveApplication.fromDate.getTime());
                var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                this.leaveApplication.duration = diffDays + 1;
                if (this.leaveApplicationService.remainingLeavesMap[this.leaveType.id].daysLeftNumber < this.leaveApplication.duration) {
                    this.notify.error("Please select proper duration, you don't have " + this.leaveApplication.duration + " days left for the leave type");
                }
                this.$scope.$apply();
            }
        };
        LeaveApplicationManagement.prototype.getPendingApplications = function () {
            var _this = this;
            this.pendingApplications = [];
            this.leaveApplicationStatusService.fetchPendingLeaves(this.leaveApplicationService.employeeId).then(function (pendingLeaves) {
                _this.pendingApplications = pendingLeaves;
                _this.totalItems = pendingLeaves.length;
                //this.leaveApplicationService.employeeId = angular.copy(this.pendingApplications[0].applicantsId);
            });
        };
        LeaveApplicationManagement.prototype.save = function () {
            var _this = this;
            this.showRemainingLeaves = false;
            this.convertToJson(ums.Utils.LEAVE_APPLICATION_SAVED).then(function (json) {
                _this.leaveApplicationService.saveLeaveApplication(json).then(function (message) {
                    if (message.message == null) {
                        _this.leaveApplication = {};
                        _this.leaveType = _this.leaveTypes[0];
                        _this.data.totalLeaveDurationInDays = 0;
                    }
                    _this.showRemainingLeaves = true;
                });
            });
        };
        LeaveApplicationManagement.prototype.closeStatusSection = function () {
            this.showStatusSection = false;
            if (this.fromHistorySection)
                this.showHistorySection = true;
            else
                this.showApplicationSection = true;
        };
        LeaveApplicationManagement.prototype.applyLeave = function () {
            var _this = this;
            console.log("**************");
            console.log("In apply leave method");
            var foundOccurance = false;
            this.findIfThereIsAnyOvalapping(foundOccurance).then(function (occuranceStatus) {
                foundOccurance = occuranceStatus;
                if (_this.leaveApplication.fromDate == null || _this.leaveApplication.toDate == null || _this.leaveApplication.reason == null) {
                    _this.notify.error("Please fill up all the fields");
                }
                else if (_this.leaveApplicationService.remainingLeavesMap[_this.leaveType.id].daysLeftNumber < _this.leaveApplication.duration) {
                    _this.notify.error("Please select proper duration, you don't have " + _this.leaveApplication.duration + " days of the leave type");
                }
                else if (foundOccurance) {
                    _this.notify.error("Date overlapping is not allowed! Please check your approved applications in  pending leaves or histories.");
                }
                else {
                    _this.convertToJson(ums.Utils.LEAVE_APPLICATION_PENDING).then(function (json) {
                        console.log("Jsonsss....");
                        console.log(json);
                        _this.leaveApplicationService.saveLeaveApplication(json).then(function (message) {
                            console.log("********");
                            console.log(message);
                            if (message[0].message == "") {
                                _this.appId = message[0].id;
                                _this.saveAttachments(message[0].id);
                                _this.leaveApplication = {};
                                _this.leaveType = _this.leaveTypes[0];
                                _this.getPendingApplications();
                            }
                            else {
                                _this.leaveApplication = {};
                            }
                        });
                    });
                }
            });
        };
        LeaveApplicationManagement.prototype.findIfThereIsAnyOvalapping = function (foundOccurance) {
            var _this = this;
            var defer = this.$q.defer();
            var fromDate = moment(this.leaveApplication.fromDate).format("DD-MM-YYYY");
            var toDate = moment(this.leaveApplication.toDate).format("DD-MM-YYYY");
            this.leaveApplicationService.fetchApprovedLeavesWithDateRange(fromDate, toDate).then(function (applications) {
                foundOccurance = false;
                for (var i = 0; i < applications.length; i++) {
                    var appFromDate = moment(applications[i].fromDate, "DD/MM/YYYY").toDate();
                    var appToDate = moment(applications[i].toDate, "DD/MM/YYYY").toDate();
                    if (_this.leaveApplication.fromDate >= appFromDate && _this.leaveApplication.toDate <= appToDate) {
                        foundOccurance = true;
                        break;
                    }
                }
                defer.resolve(foundOccurance);
            });
            return defer.promise;
        };
        LeaveApplicationManagement.prototype.fetchApplicationStatus = function (pendingApplication, currentPage) {
            var _this = this;
            this.pagination.currentPage = currentPage;
            this.showStatusSection = true;
            this.showHistorySection = false;
            this.showApplicationSection = false;
            this.pendingApplication = pendingApplication;
            this.applicationStatusList = [];
            this.showRemainingLeaves = false;
            this.attachmentService.fetchAttachments(ums.Utils.APPLICATION_TYPE_LEAVE.toString(), pendingApplication.appId).then(function (attachments) {
                _this.fileAttachments = [];
                _this.fileAttachments = attachments;
            });
            this.leaveApplicationStatusService.fetchApplicationStatus(pendingApplication.appId).then(function (statusList) {
                _this.applicationStatusList = statusList;
                _this.showRemainingLeaves = true;
            });
        };
        LeaveApplicationManagement.prototype.pageChanged = function (currentPage) {
            console.log("current page: " + currentPage);
            this.pagination.currentPage = currentPage;
            this.pageNumber = currentPage;
            if (this.showHistorySection) {
                this.getAllLeaveApplicationsForHistory();
            } /*else {
              this.getRemainingLeaves();
            }*/
        };
        /*private convertToBinary():ng.IPromise<any>{
         var binaryFiles: Array<any>=[];
         let defer = this.$q.defer();
         if (this.files.length > 0) {
         for (var i = 0; i < this.files.length; i++) {
    
    
         let binaryValue: any = {};
         let reader = new FileReader();
         reader.readAsDataURL(this.files[i]);
    
         reader.onload = () => {
         var dataUrl = reader.result;
         binaryValue = dataUrl;
    
         console.log(dataUrl);
         };
    
    
         }
         }
         }*/
        LeaveApplicationManagement.prototype.getFormData = function (file, id) {
            var formData = new FormData();
            formData.append('files', file);
            console.log(this.files[0].name);
            formData.append('name', file.name);
            formData.append("id", id);
            console.log(formData);
            var defer = this.$q.defer();
            defer.resolve(formData);
            return defer.promise;
        };
        LeaveApplicationManagement.prototype.getStatusLabel = function (lmsAppStatus) {
            if (lmsAppStatus.actionStatus == 1)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-default\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else if (lmsAppStatus.actionStatus == 2)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-primary\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else if (lmsAppStatus.actionStatus == 3)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-danger\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else if (lmsAppStatus.actionStatus == 4)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-info\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else if (lmsAppStatus.actionStatus == 5)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-danger\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else if (lmsAppStatus.actionStatus = 6)
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i><span class=\"label label-danger\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
            else
                return "By " + lmsAppStatus.actionTakenByName + " on " + lmsAppStatus.actionTakenOn + " <i> <span class=\"label label-success\">" + lmsAppStatus.actionStatusLabel + "</span></i>";
        };
        LeaveApplicationManagement.prototype.convertToJson = function (appType) {
            var application = this.leaveApplication;
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            console.log("Lms application");
            console.log(this.leaveApplicationService.employeeId);
            var item = {};
            item['id'] = application.id;
            item['employeeId'] = application.employeeId;
            item['typeId'] = this.leaveType.id;
            var momentFromDate = moment(application.fromDate);
            var momentToDate = moment(application.toDate);
            item['fromDate'] = moment(application.fromDate).format("DD-MM-YYYY");
            item['toDate'] = moment(application.toDate).format("DD-MM-YYYY");
            item['reason'] = application.reason;
            item['appStatus'] = appType;
            item['employeeId'] = this.leaveApplicationService.employeeId;
            jsonObject.push(item);
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        LeaveApplicationManagement.$inject = ['appConstants', '$scope', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'userService', 'attachmentService'];
        return LeaveApplicationManagement;
    }());
    var LmsAppDir = (function () {
        function LmsAppDir() {
            this.restrict = "A";
            this.scope = {};
            this.controller = LeaveApplicationManagement;
            this.controllerAs = 'vm';
            this.link = function (scope, element, attributes) {
                console.log("In the directive");
            };
            this.templateUrl = "./views/directive/leave-application.html"; //ums-webapps/ums-web/src/main/webapp/iums/views/leave-management/leave-application-management.html
        }
        return LmsAppDir;
    }());
    ums.UMS.directive("lmsAppDir", [function () {
            return new LmsAppDir();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var LmsRemainingLeaveController = (function () {
        function LmsRemainingLeaveController(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, $timeout, leaveTypeService, leaveApplicationService, leaveApplicationStatusService, userService, attachmentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.$timeout = $timeout;
            this.leaveTypeService = leaveTypeService;
            this.leaveApplicationService = leaveApplicationService;
            this.leaveApplicationStatusService = leaveApplicationStatusService;
            this.userService = userService;
            this.attachmentService = attachmentService;
            this.showMore = false;
            this.getRemainingLeaves();
            console.log('in the constructor of the directive');
            this.showMore = false;
        }
        LmsRemainingLeaveController.prototype.showMoreRemainingLeaves = function () {
            this.showMore = true;
        };
        LmsRemainingLeaveController.prototype.showLessRemainingLeaves = function () {
            this.showMore = false;
        };
        LmsRemainingLeaveController.prototype.getRemainingLeaves = function () {
            var _this = this;
            console.log("From the remaining leave directive");
            this.leaveApplicationService.remainingLeaves = [];
            this.leaveApplicationService.remainingLeavesMap = {};
            this.leaveApplicationService.fetchRemainingLeavesByEmployeeId(this.leaveApplicationService.employeeId).then(function (leaves) {
                console.log("remaining leaves");
                console.log(leaves);
                for (var i = 0; i < leaves.length; i++) {
                    _this.leaveApplicationService.remainingLeaves.push(leaves[i]);
                    _this.leaveApplicationService.remainingLeavesMap[leaves[i].leaveTypeId] = _this.leaveApplicationService.remainingLeaves[i];
                }
                console.log('remaining leaves from service');
                console.log(_this.leaveApplicationService.remainingLeaves);
            });
        };
        LmsRemainingLeaveController.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'userService', 'attachmentService'];
        return LmsRemainingLeaveController;
    }());
    var LmsRemainingLeaveDir = (function () {
        function LmsRemainingLeaveDir() {
            this.restrict = "A";
            this.scope = {};
            this.controller = LmsRemainingLeaveController;
            this.controllerAs = 'vm';
            this.link = function (scope, element, attributes) {
            };
            this.templateUrl = './views/directive/remaining-leave.html';
        }
        return LmsRemainingLeaveDir;
    }());
    ums.UMS.directive('lmsRemainingLeaveDir', [function () {
            return new LmsRemainingLeaveDir();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var LmsPendingLeaveController = (function () {
        function LmsPendingLeaveController(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, $timeout, leaveTypeService, leaveApplicationService, leaveApplicationStatusService, userService, attachmentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.$timeout = $timeout;
            this.leaveTypeService = leaveTypeService;
            this.leaveApplicationService = leaveApplicationService;
            this.leaveApplicationStatusService = leaveApplicationStatusService;
            this.userService = userService;
            this.attachmentService = attachmentService;
            this.showMore = false;
        }
        LmsPendingLeaveController.prototype.getPendingApplications = function () {
            var _this = this;
            this.leaveApplicationStatusService.pendingApplications = [];
            this.leaveApplicationStatusService.fetchPendingLeaves(this.leaveApplicationService.employeeId).then(function (pendingLeaves) {
                _this.leaveApplicationStatusService.pendingApplications = pendingLeaves;
                //this.totalItems = pendingLeaves.length;
                //this.leaveApplicationService.employeeId = angular.copy(this.leaveApplicationStatusService.pendingApplications[0].applicantsId);
            });
        };
        LmsPendingLeaveController.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'userService', 'attachmentService'];
        return LmsPendingLeaveController;
    }());
    var LmsPendingLeaveDir = (function () {
        function LmsPendingLeaveDir() {
            this.restrict = "A";
            this.scope = {};
            this.controller = LmsPendingLeaveController;
            this.controllerAs = 'vm';
            this.link = function (scope, element, attributes) {
            };
            this.templateUrl = './views/directive/pending-leave.html';
        }
        return LmsPendingLeaveDir;
    }());
    ums.UMS.directive('lmsPendingLeaveDir', [function () {
            return new LmsPendingLeaveDir();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    function UnauthorizedInterceptor($q, $log, baseURI, notify, $transitions, $state, $injector) {
        var EXPIRED_TOKEN = 'expired_token';
        var USER_HOME = 'userHome';
        var LOG_OUT = 'logout';
        var CHANGE_PASSWORD = 'changePassword';
        var expiredSession = false;
        var backendUnavailable = false;
        return {
            responseError: function (response) {
                var injector = $injector.get('HttpClient');
                var calledApi = response.config.url == undefined || null ? "unknown" : response.config.url;
                var responseBody = response.data.reason == undefined || null ? "unknown" : response.data.reason;
                var responseStatus = String(response.status) == undefined || null ? "unknown" : String(response.status);
                switch (response.status) {
                    case 401:
                        injector.post("/ums-webservice-registrar/meeting/schedule/log", { 'calledApi': calledApi, 'responseBody': responseBody, 'responseCode': responseStatus }, 'application/json');
                        var base = baseURI.getBaseURI();
                        var requestURI = new URI(response.config.url);
                        if (base.host() == requestURI.host() && requestURI.pathname().indexOf(base.pathname()) == 0) {
                            if ($.trim(response.data) === EXPIRED_TOKEN) {
                                if (!expiredSession) {
                                    notify.error("Your session has expired. Please Logout and then Login again", false);
                                    expiredSession = !expiredSession;
                                }
                            }
                            else {
                                // var redirectQuery = '?redirectTo=' + encodeURIComponent(window.location.href);
                                window.location.href = ums.UrlUtil.getBaseAppUrl() + 'login/session-expired.html';
                            }
                        }
                        break;
                    case 503:
                        if (!backendUnavailable) {
                            $log.debug("Service temporarily unavailable");
                            notify.error("Service is temporarily unavailable. Please try again later.");
                            backendUnavailable = !backendUnavailable;
                        }
                        break;
                    case 403:
                        $state.go('changePassword');
                        notify.error("Please change your password first");
                        break;
                    /*$transitions.onEnter({}, function (transition) {
                        if (transition.to().name === USER_HOME || transition.to().name === CHANGE_PASSWORD
                            || transition.to().name === LOG_OUT) {
                            return true;
                        }
                        else {
                            console.log("4");
                            notify.error("Please change your password first");
                            return transition.router.stateService.target('changePassword');
                        }
                    });
                    break;*/
                    //406
                    case 412:
                        $state.go('studentProfile');
                        notify.error("Fill up the Student Profile Properly");
                        break;
                    case 406:
                        $state.go('studentProfile');
                        notify.error("Please provide your \"First Name\" and \"Last Name\"");
                        break;
                }
                return $q.reject(response);
            }
        };
    }
    UnauthorizedInterceptor.$inject = ['$q', '$log', 'BaseUri', 'notify', '$transitions', '$state', '$injector'];
    ums.UMS.factory('UnauthorizedInterceptor', UnauthorizedInterceptor);
    ums.UMS.config(['$httpProvider', function ($httpProvider) {
            $httpProvider.interceptors.push('UnauthorizedInterceptor');
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    function ValidationExceptions($q, $log, baseURI, notify) {
        return {
            responseError: function (response) {
                if (response.status == 400) {
                    var responseJson = response.data;
                    if (responseJson.cause && responseJson.cause == 'ValidationException') {
                        var fieldValidationModel = null;
                        if (responseJson.message) {
                            try {
                                fieldValidationModel = JSON.parse(responseJson.message);
                            }
                            catch (e) {
                                notify.error(responseJson.message);
                                return $q.reject(response);
                            }
                        }
                        var rootCause = fieldValidationModel.rootCause ? fieldValidationModel.rootCause : "";
                        if (rootCause != "") {
                            notify.error(rootCause);
                        }
                        if (fieldValidationModel.fieldValidation) {
                            for (var key in fieldValidationModel.fieldValidation) {
                                if (fieldValidationModel.fieldValidation.hasOwnProperty(key)) {
                                    notify.warn(fieldValidationModel.fieldValidation[key]);
                                }
                            }
                        }
                    }
                }
                return $q.reject(response);
            }
        };
    }
    ValidationExceptions.$inject = ['$q', '$log', 'BaseUri', 'notify'];
    ums.UMS.factory('ValidationExceptions', ValidationExceptions);
    ums.UMS.config(['$httpProvider', function ($httpProvider) {
            $httpProvider.interceptors.push('ValidationExceptions');
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    function ServerExceptionInterceptor($q, $log, baseURI, notify) {
        return {
            responseError: function (response) {
                if (response.status == 500) {
                    if (response.config.responseType == 'arraybuffer') {
                        notify.error("Internal Server Error");
                    }
                    else {
                        if (response.data && response.data.reason) {
                            notify.error(response.data.reason);
                        }
                    }
                }
                return $q.reject(response);
            }
        };
    }
    ServerExceptionInterceptor.$inject = ['$q', '$log', 'BaseUri', 'notify'];
    ums.UMS.factory('ServerExceptionInterceptor', ServerExceptionInterceptor);
    ums.UMS.config(['$httpProvider', function ($httpProvider) {
            $httpProvider.interceptors.push('ServerExceptionInterceptor');
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TrustAsHtml = (function () {
        function TrustAsHtml() {
        }
        TrustAsHtml.filter = function ($sce) {
            return function (value) {
                return $sce.trustAsHtml(value);
            };
        };
        TrustAsHtml.$inject = ['$sce'];
        return TrustAsHtml;
    }());
    ums.TrustAsHtml = TrustAsHtml;
    ums.UMS.filter('trustAsHtml', TrustAsHtml.filter);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var LoggedInUser = (function () {
        function LoggedInUser() {
        }
        return LoggedInUser;
    }());
    ums.LoggedInUser = LoggedInUser;
})(ums || (ums = {}));
/**
 * Created by My Pc on 14-May-17.
 */
var ums;
(function (ums) {
    var VisibilityType;
    (function (VisibilityType) {
        VisibilityType["VISIBLE"] = "Y";
        VisibilityType["INVISIBLE"] = "N";
    })(VisibilityType = ums.VisibilityType || (ums.VisibilityType = {}));
})(ums || (ums = {}));
/**
 * Created by My Pc on 17-Jun-17.
 */
var ums;
(function (ums) {
    var SemesterEnrollmentEligibilityResponse = (function () {
        function SemesterEnrollmentEligibilityResponse() {
        }
        SemesterEnrollmentEligibilityResponse.responseType = {
            DROP: "DROP",
            ELIGIBLE: "ELIGIBLE",
            NOT_ELIGIBLE: "NOT_ELIGIBLE",
            RESULT_NOT_PROCESSED: "RESULT_NOT_PROCESSED",
            DUES_EXISTS: "DUES_EXISTS",
            WAITING_FOR_PAYMENT: "WAITING_FOR_PAYMENT",
            WITHHELD: 'WITHHELD',
            PROCTORIAL_EXPELLED: 'PROCTORIAL_EXPELLED',
            CONTACT_IUMS: "CONTACT_IUMS"
        };
        return SemesterEnrollmentEligibilityResponse;
    }());
    ums.SemesterEnrollmentEligibilityResponse = SemesterEnrollmentEligibilityResponse;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var GridDecorator = (function () {
        function GridDecorator() {
        }
        GridDecorator.decorate = function (toDecorate) {
            toDecorate.decorateScope().gridOptions = new ums.GridOptions();
            toDecorate.decorateScope().gridOptions.colModel = toDecorate.getColumnModel();
            toDecorate.decorateScope().grid = {
                api: {}
            };
            toDecorate.decorateScope().grid.api = new ums.JqGridApiImpl();
            toDecorate.decorateScope().grid.api.gridEditActions = toDecorate;
            toDecorate.decorateScope().gridOptions.ondblClickRow = function (rowid, iRow, iCol, e) {
                toDecorate.decorateScope().grid.api.editGridRow(rowid);
            };
            return toDecorate;
        };
        return GridDecorator;
    }());
    ums.GridDecorator = GridDecorator;
    var LoadCompleteDecorator = (function () {
        function LoadCompleteDecorator() {
        }
        LoadCompleteDecorator.decorate = function (toDecorate, loadComplete) {
            toDecorate.decorateScope().gridOptions.loadComplete = loadComplete.loadComplete();
            return toDecorate;
        };
        return LoadCompleteDecorator;
    }());
    ums.LoadCompleteDecorator = LoadCompleteDecorator;
    var GridCompleteDecorator = (function () {
        function GridCompleteDecorator() {
        }
        GridCompleteDecorator.decorate = function (toDecorate, gridComplete) {
            toDecorate.decorateScope().gridOptions.gridComplete = gridComplete.gridComplete();
            return toDecorate;
        };
        return GridCompleteDecorator;
    }());
    ums.GridCompleteDecorator = GridCompleteDecorator;
    var RowAttributeDecorator = (function () {
        function RowAttributeDecorator() {
        }
        RowAttributeDecorator.decorate = function (toDecorate, rowAttribute) {
            toDecorate.decorateScope().gridOptions.rowattr = rowAttribute.rowattr;
            return toDecorate;
        };
        return RowAttributeDecorator;
    }());
    ums.RowAttributeDecorator = RowAttributeDecorator;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var GridOptions = (function () {
        function GridOptions() {
            var _this = this;
            this.datatype = "local";
            this.editurl = 'clientArray';
            this.autowidth = true;
            this.rownumbers = true;
            this.height = "auto";
            this.scroll = false;
            this.scrollrows = true;
            this.rowNum = 18;
            this.currentSelectedRowId = '';
            this.loadonce = true;
            this.onSelectRow = function (id) {
                _this.currentSelectedRowId = id;
            };
        }
        GridOptions.prototype.ondblClickRow = function (rowid, iRow, iCol, e) {
            console.debug(rowid);
            // do nothing, will be implemented in calling class
        };
        GridOptions.prototype.loadComplete = function () {
            //do nothing, will be implemented in calling class
            //Called after the data being loaded.
        };
        GridOptions.prototype.gridComplete = function () {
            //do nothing, will be implemented in calling class
            //Called after the grid being loaded.
        };
        GridOptions.prototype.rowattr = function (rowData) {
            //do nothing, will be implemented in calling class
            //return row attribute;
        };
        return GridOptions;
    }());
    ums.GridOptions = GridOptions;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var InlineNavigationOptionsImpl = (function () {
        function InlineNavigationOptionsImpl() {
            this.keys = true;
            this.edit = false;
            this.save = false;
            this.cancel = false;
            this.addParams = {
                useFormatter: true,
                position: 'last'
            };
            this.restoreAfterSelect = false;
        }
        return InlineNavigationOptionsImpl;
    }());
    ums.InlineNavigationOptionsImpl = InlineNavigationOptionsImpl;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var JqGridApiImpl = (function () {
        function JqGridApiImpl() {
            this.messageDisplayed = false;
        }
        JqGridApiImpl.prototype.getGrid = function () {
            return this.currentGridElement;
        };
        JqGridApiImpl.prototype.gridElement = function (element) {
            this.currentGridElement = element;
        };
        JqGridApiImpl.prototype.gridData = function (data) {
            this.currentGridData = data;
        };
        JqGridApiImpl.prototype.resize = function () {
            var _this = this;
            $(window).bind('resize', function () {
                _this.currentGridElement.jqGrid('setGridWidth', ($(window).width()));
            }).trigger('resize');
        };
        JqGridApiImpl.prototype.insert = function (rows) {
            if (rows) {
                for (var i = 0; i < rows.length; i++) {
                    this.currentGridData.push(rows[i]);
                }
                this.currentGridElement.jqGrid('setGridParam', { data: this.gridData })
                    .trigger('reloadGrid');
            }
        };
        JqGridApiImpl.prototype.clear = function () {
            this.currentGridData = {};
            this.currentGridElement.jqGrid('clearGridData', { data: this.gridElement })
                .trigger('reloadGrid');
        };
        JqGridApiImpl.prototype.refresh = function () {
            this.currentGridElement
                .jqGrid('clearGridData')
                .jqGrid('setGridParam', { data: this.gridData })
                .trigger('reloadGrid');
        };
        JqGridApiImpl.prototype.getRowData = function (rowId) {
            return this.currentGridElement.jqGrid('getRowData', rowId);
        };
        JqGridApiImpl.prototype.editGridRow = function (rowId) {
            var _this = this;
            var that = this;
            this.currentGridElement.jqGrid('editGridRow', rowId, {
                editCaption: "The Edit Dialog",
                closeOnEscape: true,
                closeAfterEdit: true,
                errorTextFormat: function (data) {
                    return 'Error: ' + data.responseText;
                },
                onclickSubmit: function (row, data) {
                    console.log(_this);
                    if (_this.gridEditActions
                        && _this.gridEditActions.edit) {
                        _this.gridEditActions.edit(data);
                    }
                },
                recreateForm: true,
                beforeShowForm: function ($form) {
                    $form.find(".FormElement[readonly]")
                        .prop("disabled", true)
                        .addClass("ui-state-disabled")
                        .closest(".DataTD")
                        .prev(".CaptionTD")
                        .prop("disabled", true)
                        .addClass("ui-state-disabled");
                },
                beforeInitData: function ($form) {
                    that.gridEditActions.beforeShowEditForm($form, that.currentGridElement);
                },
                afterShowForm: function ($form) {
                    //gridEditActions.afterShowEditForm($form, this.currentGridElement);
                }
            });
        };
        JqGridApiImpl.prototype.toggleMessage = function (message) {
            if (!this.messageDisplayed) {
                var text = !message ? 'Loading...' : message;
                $(".loading").html(text).show();
                $(".ui-jqgrid .ui-overlay").show();
            }
            else {
                $(".loading").html('').hide();
                $(".ui-jqgrid .ui-overlay").hide();
            }
            this.messageDisplayed = !this.messageDisplayed;
        };
        JqGridApiImpl.prototype.removeLoadingMessage = function () {
            $(".loading").html('').hide();
        };
        return JqGridApiImpl;
    }());
    ums.JqGridApiImpl = JqGridApiImpl;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var UmsUtil = (function () {
        function UmsUtil() {
        }
        UmsUtil.getNumberWithSuffix = function (n) {
            var suffix = "";
            switch (n) {
                case 1:
                    suffix = "st";
                    break;
                case 2:
                    suffix = "nd";
                    break;
                case 3:
                    suffix = "rd";
                    break;
                default:
                    suffix = "th";
                    break;
            }
            return n + "" + suffix;
        };
        UmsUtil.isEmpty = function (obj) {
            return Object.keys(obj).length === 0;
        };
        UmsUtil.isEmptyString = function (str) {
            return (typeof str === 'undefined' || str === '' || str == null);
        };
        UmsUtil.getFileContentType = function (fileType) {
            var contentType = "";
            switch (fileType) {
                case 'pdf':
                    contentType = this.PDF;
                    break;
                case 'xls':
                    contentType = this.XLS;
                    break;
                default:
                    alert("Wrong file type.........");
            }
            return contentType;
        };
        UmsUtil.writeFileContent = function (data, contentType, fileName) {
            var file = new Blob([data], { type: contentType });
            var reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onloadend = function (e) {
                UmsUtil.saveAsFile(reader.result, fileName);
            };
        };
        UmsUtil.saveAsFile = function (url, fileName) {
            var a = document.createElement("a");
            document.body.appendChild(a);
            a.style = "display: none";
            a.href = url;
            a.download = fileName;
            a.click();
            window.URL.revokeObjectURL(url);
            $(a).remove();
        };
        /**
         * File Content Types
         */
        UmsUtil.PDF = "application/pdf";
        UmsUtil.XLS = "application/vnd.ms-excel";
        UmsUtil.UNDERGRADUATE = 11;
        UmsUtil.POSTGRADUATE = 22;
        UmsUtil.APPLICATION_READMISSION_PARAMETER = '11';
        UmsUtil.SEMESTER_INACTIVE = 0;
        UmsUtil.SEMESTER_ACTIVE = 1;
        UmsUtil.SEMESTER_NEWLY_CREATED = 2;
        UmsUtil.SEMESTER_FETCH_ALL = 3;
        UmsUtil.SEMESTER_FETCH_ALL_WITH_NEWLY_CREATED = 4;
        UmsUtil.SEMESTER_SEMESTER_FETCH_ALL_WITH_UPCOMING = 5;
        return UmsUtil;
    }());
    ums.UmsUtil = UmsUtil;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var UrlUtil = (function () {
        function UrlUtil() {
        }
        UrlUtil.getBaseAppUrl = function () {
            return window.location.pathname.substring(0, window.location.pathname.indexOf('/', 1) + 1);
        };
        return UrlUtil;
    }());
    ums.UrlUtil = UrlUtil;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DetailedStudentPaymentService = (function () {
        function DetailedStudentPaymentService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        DetailedStudentPaymentService.prototype.getDetailedStudentPaymentByTransactionId = function (transactionId) {
            var defer = this.$q.defer();
            this.httpClient.get("detailed-student-payment/transactionId/" + transactionId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        DetailedStudentPaymentService.prototype.getDetailedStudentPaymentByTransactionIdList = function (transactionIdList) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("detailed-student-payment/transactionIdList", transactionIdList, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (response) {
                _this.notify.error("Error in fetching student payment details with transaction id list");
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        DetailedStudentPaymentService.$inject = ['$q', 'HttpClient', 'notify'];
        return DetailedStudentPaymentService;
    }());
    ums.DetailedStudentPaymentService = DetailedStudentPaymentService;
    ums.UMS.service("DetailedStudentPaymentService", DetailedStudentPaymentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionPaymentService = (function () {
        function AdmissionPaymentService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
            this.url = "academic/admission-payment";
        }
        AdmissionPaymentService.prototype.getAdmissionPayment = function (receiptId, quota) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.url + "/receipt-id/" + receiptId + "/quota/" + quota, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            }, function (response) { return _this.notify.error("Error in fetching admission payment information"); });
            return defer.promise;
        };
        AdmissionPaymentService.$inject = ['$q', 'HttpClient', 'notify'];
        return AdmissionPaymentService;
    }());
    ums.AdmissionPaymentService = AdmissionPaymentService;
    ums.UMS.service("AdmissionPaymentService", AdmissionPaymentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ListFilterDirective = (function () {
        function ListFilterDirective() {
            this.bindToController = true;
            this.controller = ListFilterController;
            this.controllerAs = 'vm';
            this.scope = {
                filters: '=',
                selectedFilters: '=',
                selectedFilter: '=',
                selectedFilterValue: '='
            };
            this.templateUrl = 'views/fee/filter/list.filter.directive.html';
        }
        ListFilterDirective.STATUS = "STATUS";
        ListFilterDirective.STUDENT_ID = "STUDENT_ID";
        ListFilterDirective.FILTER_ID = "FILTER_ID";
        return ListFilterDirective;
    }());
    ums.ListFilterDirective = ListFilterDirective;
    var ListFilterController = (function () {
        function ListFilterController($interval, $q) {
            var _this = this;
            this.$interval = $interval;
            this.$q = $q;
            this.filterValue = {
                label: null,
                value: null
            };
            $interval(function () {
                if (_this.filters !== null && _this.selectedFilterObj == null) {
                    _this.selectedFilterObj = _this.filters.filter(function (filter) { return filter.value == _this.selectedFilter; })[0];
                    _this.setFilter();
                }
            }, 1000);
        }
        ListFilterController.prototype.addFilter = function () {
            var _this = this;
            if (this.selectedFilters.filter(function (selectedFilter) { return selectedFilter.filter.value === _this.filter.value; }).length === 0) {
                this.selectedFilters.push({
                    id: Math.round(Math.random() * 1000),
                    filter: this.filter,
                    value: this.filterValue
                });
                console.log(this.selectedFilters);
            }
        };
        ListFilterController.prototype.removeFilter = function (removedFilterId) {
            if (removedFilterId != null) {
                for (var i = 0; i < this.selectedFilters.length; i++) {
                    if (this.selectedFilters[i].id === removedFilterId) {
                        this.selectedFilters.splice(i, 1);
                    }
                }
            }
            else {
                this.selectedFilters = [];
            }
        };
        ListFilterController.prototype.setFilter = function () {
            var _this = this;
            console.log("Filters");
            console.log(this.filters);
            console.log("In the set filter");
            console.log("Selected filter");
            console.log(this.selectedFilters);
            this.initializeFilter().then(function (selectedFilter) {
                if (selectedFilter) {
                    _this.selectedFilter = selectedFilter;
                    console.log("### innser selected filter");
                    console.log(_this.selectedFilter);
                    _this.filter = _this.filters.filter(function (filter) { return filter.value === selectedFilter; })[0];
                    if (_this.selectedFilter == 'STATUS') {
                        _this.filterValue = {
                            label: 'Applied',
                            value: 1
                        };
                    }
                    else {
                        _this.filterValue = {
                            label: null,
                            value: null
                        };
                    }
                }
            });
        };
        ListFilterController.prototype.initializeFilter = function () {
            var defer = this.$q.defer();
            defer.resolve(this.selectedFilterObj.value);
            return defer.promise;
        };
        ListFilterController.prototype.setFilterValue = function () {
            var _this = this;
            console.log("In the set filter value");
            console.log("Filter options");
            console.log(this.selectedFilterValue);
            if (this.filter && this.selectedFilterValue !== null) {
                this.filterValue
                    = this.filter.options.filter(function (filterOption) { return filterOption.value == _this.selectedFilterValue; })[0];
                console.log("#############");
                console.log(this.filterValue);
            }
        };
        ListFilterController.$inject = ['$interval', '$q'];
        return ListFilterController;
    }());
    ums.UMS.directive('listFilter', function () { return new ListFilterDirective(); });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var EmployeePublication = (function () {
        function EmployeePublication(registrarConstants, $scope, $q, notify, $window, $sce, publicationService, approvePublicationService) {
            this.registrarConstants = registrarConstants;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$window = $window;
            this.$sce = $sce;
            this.publicationService = publicationService;
            this.approvePublicationService = approvePublicationService;
            $scope.item = Array();
            $scope.publications = Array();
            $scope.employees = Array();
            $scope.currentlySelectedEmployee = {};
            $scope.pagination = {};
            $scope.pagination.currentPage = 1;
            $scope.totalPendingPublications = null;
            $scope.data = { publicationListViewCategory: '0', itemPerPage: 3, totalRecord: null };
            $scope.showActionTakenDate = false;
            $scope.showActionButtons = true;
            $scope.showNothingDiv = false;
            $scope.showRevertOptions = false;
            $scope.resetTopBottomDivs = this.resetTopBottomDivs.bind(this);
            $scope.view = this.view.bind(this);
            $scope.accept = this.accept.bind(this);
            $scope.reject = this.reject.bind(this);
            $scope.changePublicationViewCategory = this.changePublicationViewCategory.bind(this);
            $scope.pageChanged = this.pageChanged.bind(this);
            $scope.revertPublicationStatusToPending = this.revertPublicationStatusToPending.bind(this);
            $scope.getPublicationIndex = this.getPublicationIndex.bind(this);
            this.fetchTeachersList();
        }
        EmployeePublication.prototype.view = function (selectedEmployeeIndex) {
            this.$scope.data.publicationListViewCategory = '0';
            this.$scope.currentlySelectedEmployeeIndex = selectedEmployeeIndex;
            this.$scope.currentlySelectedEmployee = this.$scope.employees[this.$scope.currentlySelectedEmployeeIndex];
            this.getPublicationList();
            $("#teachersListDiv").hide(10);
            $("#publicationListDiv").show(200);
            $("#topArrowDiv").show(200);
        };
        EmployeePublication.prototype.resetTopBottomDivs = function () {
            this.fetchTeachersList();
            $("#topArrowDiv").hide(10);
            $("#publicationListDiv").hide(10);
            $("#teachersListDiv").show(200);
        };
        EmployeePublication.prototype.getPublicationList = function () {
            var _this = this;
            this.publicationService.getSpecificTeacherPublicationInformation(this.$scope.employees[this.$scope.currentlySelectedEmployeeIndex].id, this.$scope.data.publicationListViewCategory)
                .then(function (publicationForLength) {
                _this.$scope.data.totalRecord = publicationForLength.length;
                _this.$scope.publications = Array();
                if (_this.$scope.data.totalRecord == 0) {
                    console.log(_this.$scope.data.totalRecord);
                    _this.$scope.showNothingDiv = true;
                }
                else {
                    _this.$scope.showNothingDiv = false;
                    _this.publicationWithPagination();
                }
            });
        };
        EmployeePublication.prototype.publicationWithPagination = function () {
            var _this = this;
            this.publicationService.getPublicationInformationWithPagination(this.$scope.employees[this.$scope.currentlySelectedEmployeeIndex].id, this.$scope.data.publicationListViewCategory, this.$scope.pagination.currentPage, this.$scope.data.itemPerPage).then(function (publicationInformation) {
                _this.$scope.publications = publicationInformation;
                _this.$scope.totalPendingPublications = _this.$scope.publications.length;
            });
        };
        EmployeePublication.prototype.fetchTeachersList = function () {
            var _this = this;
            var publicationIsWaitingForApprovalStatus = '0';
            this.approvePublicationService.getTeachersList(publicationIsWaitingForApprovalStatus).then(function (employees) {
                _this.$scope.employees = employees;
                _this.showTeachersListOrNoPendingDiv(employees);
            });
        };
        EmployeePublication.prototype.showTeachersListOrNoPendingDiv = function (employees) {
            if (employees.length >= 1) {
                this.$scope.showNoPendingPublicationListDiv = false;
                this.$scope.showPendingPublicationDiv = true;
            }
            else {
                this.$scope.showPendingPublicationDiv = false;
                this.$scope.showNoPendingPublicationListDiv = true;
            }
        };
        EmployeePublication.prototype.pending = function (index) {
            var _this = this;
            var rejectStatus = '0';
            this.convertToJson(index, rejectStatus).then(function (json) {
                _this.approvePublicationService.updatePublicationStatus(json)
                    .then(function (message) {
                    _this.getPublicationList();
                    _this.$scope.totalPendingPublications--;
                });
            });
        };
        EmployeePublication.prototype.accept = function (index) {
            var _this = this;
            var acceptStatus = '1';
            this.convertToJson(index, acceptStatus).then(function (json) {
                _this.approvePublicationService.updatePublicationStatus(json)
                    .then(function (message) {
                    _this.getPublicationList();
                    _this.$scope.totalPendingPublications--;
                });
            });
        };
        EmployeePublication.prototype.reject = function (index) {
            var _this = this;
            var rejectStatus = '2';
            this.convertToJson(index, rejectStatus).then(function (json) {
                _this.approvePublicationService.updatePublicationStatus(json)
                    .then(function (message) {
                    _this.getPublicationList();
                    _this.$scope.totalPendingPublications--;
                });
            });
        };
        EmployeePublication.prototype.changePublicationViewCategory = function () {
            this.getPublicationList();
            this.modifyViewOnDifferentPublicationListCategory();
        };
        EmployeePublication.prototype.modifyViewOnDifferentPublicationListCategory = function () {
            if (this.$scope.data.publicationListViewCategory == '1' || this.$scope.data.publicationListViewCategory == '2') {
                this.$scope.showActionButtons = false;
                this.$scope.showActionTakenDate = true;
                this.$scope.showRevertOptions = true;
            }
            else {
                this.$scope.showActionTakenDate = false;
                this.$scope.showRevertOptions = false;
                this.$scope.showActionButtons = true;
            }
        };
        EmployeePublication.prototype.pageChanged = function (pageNumber) {
            this.$scope.pagination.currentPage = pageNumber;
            this.getPublicationList();
        };
        EmployeePublication.prototype.getPublicationIndex = function (index) {
            this.$scope.currentPublicationIndex = index;
        };
        EmployeePublication.prototype.revertPublicationStatusToPending = function () {
            this.pending(this.$scope.currentPublicationIndex);
        };
        EmployeePublication.prototype.convertToJson = function (index, status) {
            var defer = this.$q.defer();
            var JsonObject = {};
            var JsonArray = [];
            var item = {};
            var publicationInformation = {};
            publicationInformation = this.$scope.publications[index];
            item['publication'] = publicationInformation;
            item['publication']['status'] = status;
            JsonArray.push(item);
            JsonObject['entries'] = JsonArray;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        EmployeePublication.$inject = ['registrarConstants', '$scope', '$q', 'notify', '$window', '$sce', 'publicationService', 'approvePublicationService'];
        return EmployeePublication;
    }());
    ums.UMS.controller("EmployeePublication", EmployeePublication);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ApprovePublicationService = (function () {
        function ApprovePublicationService(registrarConstants, httpClient, $q, notify, $sce, $window) {
            this.registrarConstants = registrarConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        ApprovePublicationService.prototype.getPublicationInformation = function () {
            var url = "employee/publication/getPublicationInformation";
            var defer = this.$q.defer();
            this.httpClient.get(url, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                console.log(response);
            });
            return defer.promise;
        };
        ApprovePublicationService.prototype.getTeachersList = function (publicationStatus) {
            var url = "/ums-webservice-academic/academic/employee/getEmployee/publicationStatus/" + publicationStatus;
            var defer = this.$q.defer();
            this.httpClient.get(url, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                console.log();
            });
            return defer.promise;
        };
        ApprovePublicationService.prototype.updatePublicationStatus = function (json) {
            var _this = this;
            var url = "employee/publication/update/publicationStatus";
            var defer = this.$q.defer();
            this.httpClient.put(url, json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                if (json.entries[0]['publication'].status === '1') {
                    _this.notify.success("Successfully Approved");
                }
                else if (json.entries[0]['publication'].status === '2') {
                    _this.notify.success("Successfully Rejected");
                }
                defer.resolve("Successfully saved");
            }).error(function (data) {
                _this.notify.error("Error in Updating");
                console.log(data);
            });
            return defer.promise;
        };
        ApprovePublicationService.$inject = ['registrarConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return ApprovePublicationService;
    }());
    ums.ApprovePublicationService = ApprovePublicationService;
    ums.UMS.service('approvePublicationService', ApprovePublicationService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var EmployeeProfile = (function () {
        function EmployeeProfile($q, notify, $state, $stateParams, userService) {
            var _this = this;
            this.$q = $q;
            this.notify = notify;
            this.$state = $state;
            this.$stateParams = $stateParams;
            this.userService = userService;
            this.canEdit = false;
            this.state = $state;
            this.stateParams = $stateParams;
            if (this.stateParams.id && this.state.current.name.includes('employeeSearch')) {
                // when registrar tries to access all employee profile
                this.tab = 'employeeSearch.employeeProfile';
                this.employeeId = this.stateParams.id;
                this.initialRouting();
            }
            else if (!this.stateParams.id && this.state.current.name.includes('employeeSearch')) {
                // when registrar tries to access all employee profile
                this.state.go('employeeSearch');
            }
            else if (!this.stateParams.id && this.state.current.name.includes('employeeProfile')) {
                userService.fetchCurrentUserInfo().then(function (user) {
                    _this.tab = 'employeeProfile';
                    _this.employeeId = user.employeeId;
                    _this.initialRouting();
                });
            }
            else {
                this.notify.error("Can't determine the state. Please contact to IUMS for help");
            }
        }
        EmployeeProfile.prototype.initialRouting = function () {
            if (this.state.current.url === '/employeeProfile') {
                this.redirectTo('personal');
            }
            else {
                this.redirectTo(this.state.current.url.split('/')[1]);
            }
        };
        EmployeeProfile.prototype.redirectTo = function (tab) {
            var _this = this;
            this.verifyEditPermission(tab).then(function (canEdit) {
                _this.state.go(_this.tab + '.' + tab, { id: _this.employeeId, edit: canEdit });
            }).catch(function (reason) {
                _this.notify.error(reason);
            });
        };
        EmployeeProfile.prototype.verifyEditPermission = function (tab) {
            var defer = this.$q.defer();
            if (this.tab === 'employeeSearch.employeeProfile') {
                defer.resolve(true);
            }
            else if (this.tab === 'employeeProfile') {
                if (tab === 'service') {
                    defer.resolve(false);
                }
                else {
                    defer.resolve(true);
                }
            }
            else {
                defer.reject("Can't determine permission. Please contact to IUMS.");
            }
            return defer.promise;
        };
        EmployeeProfile.$inject = ['$q', 'notify', '$state', '$stateParams', 'userService'];
        return EmployeeProfile;
    }());
    ums.UMS.controller("EmployeeProfile", EmployeeProfile);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PersonalInformation = (function () {
        function PersonalInformation(registrarConstants, $q, notify, countryService, divisionService, districtService, thanaService, personalService, $stateParams, FileUpload) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.countryService = countryService;
            this.divisionService = divisionService;
            this.districtService = districtService;
            this.thanaService = thanaService;
            this.personalService = personalService;
            this.$stateParams = $stateParams;
            this.FileUpload = FileUpload;
            this.generalReadOnly = true;
            this.contactReadOnly = true;
            this.emergencyContactReadOnly = true;
            this.presentRequired = false;
            this.permanentRequired = false;
            this.disablePresentAddressDropdown = false;
            this.disablePermanentAddressDropdown = false;
            this.salutations = [];
            this.genders = [];
            this.maritalStatus = [];
            this.religions = [];
            this.nationalities = [];
            this.bloodGroups = [];
            this.publicationTypes = [];
            this.relations = [];
            this.countries = [];
            this.divisions = [];
            this.presentAddressDistricts = [];
            this.permanentAddressDistricts = [];
            this.allDistricts = [];
            this.presentAddressThanas = [];
            this.permanentAddressThanas = [];
            this.allThanas = [];
            this.copyOfGeneralInformation = {};
            this.copyOfContactInformation = {};
            this.copyOfEmergencyContactInformation = {};
            this.userId = "";
            this.enableEditButton = false;
            this.test = true;
            this.test1 = false;
            this.showLoader = true;
            this.entry = {
                general: {},
                contact: {},
                emergencyContact: {}
            };
            this.stateParams = $stateParams;
            this.enableEditButton = this.stateParams.edit;
            this.salutations = this.registrarConstants.salutationTypes;
            this.genders = this.registrarConstants.genderTypes;
            this.publicationTypes = this.registrarConstants.publicationTypes;
            this.bloodGroups = this.registrarConstants.bloodGroupTypes;
            this.maritalStatus = this.registrarConstants.maritalStatuses;
            this.religions = this.registrarConstants.religionTypes;
            this.relations = this.registrarConstants.relationTypes;
            this.nationalities = this.registrarConstants.nationalityTypes;
            this.userId = this.stateParams.id;
            this.test1 = false;
            this.initialization();
        }
        PersonalInformation.prototype.initialization = function () {
            var _this = this;
            this.countryService.getAll().then(function (countries) {
                _this.countries = countries;
                _this.divisionService.getAll().then(function (divisions) {
                    _this.divisions = divisions;
                    _this.districtService.getAll().then(function (districts) {
                        _this.presentAddressDistricts = districts;
                        _this.permanentAddressDistricts = districts;
                        _this.allDistricts = districts;
                        _this.thanaService.getAll().then(function (thanas) {
                            _this.presentAddressThanas = thanas;
                            _this.permanentAddressThanas = thanas;
                            _this.allThanas = thanas;
                            _this.getPersonalInformation();
                        });
                    });
                });
            });
        };
        PersonalInformation.prototype.submit = function (form) {
            if (form === 'general') {
                this.entry.general.employeeId = this.userId;
                this.entry.general.type = "general";
                this.submitGeneralForm();
            }
            else if (form === 'contact') {
                this.entry.contact.employeeId = this.userId;
                this.entry.contact.type = "contact";
                this.submitContactForm();
            }
            else if (form === 'emergencyContact') {
                this.entry.emergencyContact.employeeId = this.userId;
                this.entry.emergencyContact.type = "emergencyContact";
                this.submitEmergencyContactForm();
            }
            else {
                this.notify.error("Submit is not working. Please Contact to IUMS.");
            }
        };
        PersonalInformation.prototype.submitGeneralForm = function () {
            var _this = this;
            this.convertToJson('general', this.entry.general)
                .then(function (json) {
                _this.personalService.updatePersonalInformation(json)
                    .then(function (message) {
                    _this.getGeneralInformation();
                    _this.generalReadOnly = true;
                });
            });
        };
        PersonalInformation.prototype.submitContactForm = function () {
            var _this = this;
            this.convertToJson('contact', this.entry.contact)
                .then(function (json) {
                _this.personalService.updatePersonalInformation(json)
                    .then(function (message) {
                    _this.getContactInformation();
                    _this.contactReadOnly = true;
                });
            });
        };
        PersonalInformation.prototype.submitEmergencyContactForm = function () {
            var _this = this;
            this.convertToJson('emergencyContact', this.entry.emergencyContact)
                .then(function (json) {
                _this.personalService.updatePersonalInformation(json)
                    .then(function (message) {
                    _this.getEmergencyContactInformation();
                    _this.emergencyContactReadOnly = true;
                });
            });
        };
        PersonalInformation.prototype.getPersonalInformation = function () {
            var _this = this;
            this.showLoader = true;
            this.personalService.getPersonalInformation(this.userId)
                .then(function (data) {
                _this.initializePersonalObjects('all');
                _this.entry.general = data.general;
                _this.entry.contact = data.contact;
                _this.entry.emergencyContact = data.emergencyContact;
            })
                .then(function () {
                _this.copyOfGeneralInformation = angular.copy(_this.entry.general);
                _this.copyOfContactInformation = angular.copy(_this.entry.contact);
                _this.copyOfEmergencyContactInformation = angular.copy(_this.entry.emergencyContact);
                _this.showLoader = false;
            });
        };
        PersonalInformation.prototype.getGeneralInformation = function () {
            var _this = this;
            this.personalService.getPersonalInformation(this.userId).then(function (data) {
                _this.initializePersonalObjects('general');
                _this.entry.general = data.general;
            }).then(function () {
                _this.copyOfGeneralInformation = angular.copy(_this.entry.general);
            });
        };
        PersonalInformation.prototype.getContactInformation = function () {
            var _this = this;
            this.personalService.getPersonalInformation(this.userId).then(function (data) {
                _this.initializePersonalObjects('contact');
                _this.entry.contact = data.contact;
            }).then(function () {
                _this.copyOfContactInformation = angular.copy(_this.entry.contact);
            });
        };
        PersonalInformation.prototype.getEmergencyContactInformation = function () {
            var _this = this;
            this.personalService.getPersonalInformation(this.userId).then(function (data) {
                _this.initializePersonalObjects('emergencyContact');
                _this.entry.emergencyContact = data.emergencyContact;
            }).then(function () {
                _this.copyOfEmergencyContactInformation = angular.copy(_this.entry.emergencyContact);
            });
        };
        PersonalInformation.prototype.initializePersonalObjects = function (type) {
            if (type === 'general') {
                this.entry.general = {};
                this.copyOfGeneralInformation = {};
            }
            else if (type === 'contact') {
                this.entry.contact = {};
                this.copyOfContactInformation = {};
            }
            else if (type == 'emergencyContact') {
                this.entry.emergencyContact = {};
                this.copyOfEmergencyContactInformation = {};
            }
            else {
                this.entry.general = {};
                this.entry.contact = {};
                this.entry.emergencyContact = {};
                this.copyOfGeneralInformation = {};
                this.copyOfContactInformation = {};
                this.copyOfEmergencyContactInformation = {};
            }
        };
        PersonalInformation.prototype.setJsonObject = function (objType, obj) {
            if (objType === 'general') {
                this.entry.general = obj;
            }
            else if (objType === 'contact') {
                this.entry.contact = obj;
            }
            else if (objType === 'emergencyContact') {
                this.entry.emergencyContact = obj;
            }
        };
        PersonalInformation.prototype.changePresentAddressDistrict = function () {
            this.presentAddressDistricts = [];
            var districtLength = this.allDistricts.length;
            var index = 0;
            for (var i = 0; i < districtLength; i++) {
                if (this.entry.contact.preAddressDivision.id === this.allDistricts[i].foreign_id) {
                    this.presentAddressDistricts[index++] = this.allDistricts[i];
                }
            }
        };
        PersonalInformation.prototype.changePermanentAddressDistrict = function () {
            this.permanentAddressDistricts = [];
            var districtLength = this.allDistricts.length;
            var index = 0;
            for (var i = 0; i < districtLength; i++) {
                if (this.entry.contact.perAddressDivision.id === this.allDistricts[i].foreign_id) {
                    this.permanentAddressDistricts[index++] = this.allDistricts[i];
                }
            }
        };
        PersonalInformation.prototype.changePresentAddressThana = function () {
            this.presentAddressThanas = [];
            var thanaLength = this.allThanas.length;
            var index = 0;
            for (var i = 0; i < thanaLength; i++) {
                if (this.entry.contact.preAddressDistrict.id === this.allThanas[i].foreign_id) {
                    this.presentAddressThanas[index++] = this.allThanas[i];
                }
            }
        };
        PersonalInformation.prototype.changePermanentAddressThana = function () {
            this.permanentAddressThanas = [];
            var thanaLength = this.allThanas.length;
            var index = 0;
            for (var i = 0; i < thanaLength; i++) {
                if (this.entry.contact.perAddressDistrict.id === this.allThanas[i].foreign_id) {
                    this.permanentAddressThanas[index++] = this.allThanas[i];
                }
            }
        };
        PersonalInformation.prototype.sameAsPresentAddress = function () {
            if (this.checkBoxValue) {
                this.entry.contact.perAddressLine1 = this.entry.contact.preAddressLine1;
                this.entry.contact.perAddressLine2 = this.entry.contact.preAddressLine2;
                this.entry.contact.perAddressCountry = this.entry.contact.preAddressCountry;
                this.entry.contact.perAddressDivision = this.entry.contact.preAddressDivision;
                this.entry.contact.perAddressDistrict = this.entry.contact.preAddressDistrict;
                this.entry.contact.perAddressThana = this.entry.contact.preAddressThana;
                this.entry.contact.perAddressPostCode = this.entry.contact.preAddressPostCode;
                this.changePermanentAddressFields();
            }
            else {
                this.entry.contact.perAddressLine1 = "";
                this.entry.contact.perAddressLine2 = "";
                this.entry.contact.perAddressCountry = null;
                this.entry.contact.perAddressDivision = null;
                this.entry.contact.perAddressDistrict = null;
                this.entry.contact.perAddressThana = null;
                this.entry.contact.perAddressPostCode = "";
            }
        };
        PersonalInformation.prototype.changePresentAddressFields = function () {
            if (this.entry.contact.preAddressCountry.name === "Bangladesh") {
                this.presentRequired = true;
                this.disablePresentAddressDropdown = false;
                this.changePresentAddressDistrict();
                this.changePresentAddressThana();
            }
            else {
                this.presentRequired = false;
                this.disablePresentAddressDropdown = true;
                this.entry.contact.preAddressDivision = null;
                this.entry.contact.preAddressDistrict = null;
                this.entry.contact.preAddressThana = null;
                this.entry.contact.preAddressPostCode = "";
            }
        };
        PersonalInformation.prototype.changePermanentAddressFields = function () {
            if (this.entry.contact.perAddressCountry.name === "Bangladesh") {
                this.permanentRequired = true;
                this.disablePermanentAddressDropdown = false;
                this.changePermanentAddressDistrict();
                this.changePermanentAddressThana();
            }
            else {
                this.permanentRequired = false;
                this.disablePermanentAddressDropdown = true;
                this.entry.contact.perAddressDivision = null;
                this.entry.contact.perAddressDistrict = null;
                this.entry.contact.perAddressThana = null;
                this.entry.contact.perAddressPostCode = "";
            }
        };
        PersonalInformation.prototype.convertToJson = function (convertThis, obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        PersonalInformation.prototype.uploadImage = function () {
            var _this = this;
            this.test = false;
            var id = this.userId;
            var photoContent = $("#userPhoto").contents();
            var image = photoContent.prevObject[0].files[0];
            if (image && image != undefined) {
                if (image.type.startsWith("image")) {
                    this.getFormData(image, id).then(function (formData) {
                        _this.FileUpload.uploadPhoto(formData).then(function () {
                            var that = _this;
                            that.test = true;
                        });
                    });
                }
                else {
                    this.notify.error("File format is not correct. [png/jpg] is allowed");
                    this.test = true;
                }
            }
            else {
                this.test = true;
                this.notify.error("No image found");
            }
        };
        PersonalInformation.prototype.getFormData = function (file, id) {
            var formData = new FormData();
            formData.append('files', file);
            formData.append('name', file.name);
            formData.append("id", id);
            var defer = this.$q.defer();
            defer.resolve(formData);
            return defer.promise;
        };
        PersonalInformation.prototype.isObjectEmpty = function (obj) {
            for (var key in obj) {
                if (obj.hasOwnProperty(key))
                    return false;
            }
            return true;
        };
        PersonalInformation.$inject = ['registrarConstants', '$q', 'notify',
            'countryService', 'divisionService', 'districtService', 'thanaService',
            'personalService',
            '$stateParams', 'FileUpload'];
        return PersonalInformation;
    }());
    ums.UMS.controller("PersonalInformation", PersonalInformation);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PersonalService = (function () {
        function PersonalService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.personalUrl = "employee/personal";
        }
        PersonalService.prototype.updatePersonalInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put(this.personalUrl + "/update", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                _this.notify.success("Update Successful");
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                _this.notify.error("Error in Updating");
                defer.resolve(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PersonalService.prototype.getPersonalInformation = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.personalUrl + "/get/employeeId/" + employeeId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                _this.notify.error("Error in fetching Personal Information");
            });
            return defer.promise;
        };
        PersonalService.prototype.getAll = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.personalUrl + "/all/", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                _this.notify.error("Error in fetching Personal Information");
            });
            return defer.promise;
        };
        PersonalService.$inject = ['HttpClient', '$q', 'notify'];
        return PersonalService;
    }());
    ums.PersonalService = PersonalService;
    ums.UMS.service("personalService", PersonalService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AcademicInformation = (function () {
        function AcademicInformation(registrarConstants, $q, notify, academicService, academicDegreeService, $stateParams) {
            var _this = this;
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.academicService = academicService;
            this.academicDegreeService = academicDegreeService;
            this.$stateParams = $stateParams;
            this.academic = [];
            this.degreeLevel = [];
            this.degreeTitle = [];
            this.filteredDegreeTitle = [];
            this.year = [];
            this.newDegreeTitle = "";
            this.userId = "";
            this.enableEdit = [false];
            this.enableEditButton = false;
            this.showLoader = true;
            this.academic = [];
            this.year = ums.Utils.getYearRange();
            this.degreeLevel = registrarConstants.degreeLevel;
            this.stateParams = $stateParams;
            this.userId = this.stateParams.id;
            this.enableEditButton = this.stateParams.edit;
            this.academicDegreeService.getAcademicDegreeList().then(function (degree) {
                _this.degreeTitle = degree;
                _this.filteredDegreeTitle = degree;
                _this.get();
            });
        }
        AcademicInformation.prototype.submit = function (index) {
            var _this = this;
            this.convertToJson(this.academic[index]).then(function (json) {
                if (!_this.academic[index].id) {
                    _this.create(json, index);
                }
                else {
                    _this.update(json, index);
                }
            });
        };
        AcademicInformation.prototype.create = function (json, index) {
            var _this = this;
            this.academicService.saveAcademicInformation(json).then(function (data) {
                _this.academic[index] = data;
                _this.enableEdit[index] = false;
            }).catch(function (reason) {
                _this.enableEdit[index] = true;
            });
        };
        AcademicInformation.prototype.update = function (json, index) {
            var _this = this;
            this.academicService.updateAcademicInformation(json).then(function (data) {
                _this.academic[index] = data;
                _this.enableEdit[index] = false;
            }).catch(function (reason) {
                _this.enableEdit[index] = true;
            });
        };
        AcademicInformation.prototype.get = function () {
            var _this = this;
            this.showLoader = true;
            this.academic = [];
            this.academicService.getAcademicInformation(this.userId).then(function (academicInformation) {
                if (academicInformation) {
                    _this.academic = academicInformation;
                }
                else {
                    _this.academic = [];
                }
                _this.showLoader = false;
            });
        };
        AcademicInformation.prototype.delete = function (index) {
            var _this = this;
            if (this.academic[index].id) {
                this.academicService.deleteAcademicInformation(this.academic[index].id).then(function (data) {
                    _this.academic.splice(index, 1);
                });
            }
            else {
                this.academic.splice(index, 1);
            }
        };
        AcademicInformation.prototype.activeEditButton = function (index, canEdit) {
            this.enableEdit[index] = canEdit;
            if (canEdit) {
                this.tmp = {};
                this.tmp = angular.copy(this.academic[index]);
            }
            else {
                this.academic.splice(index, 1, this.tmp);
            }
        };
        AcademicInformation.prototype.createNewDegreeTitle = function () {
            var _this = this;
            this.convertToJson(this.newDegreeTitle).then(function (json) {
                _this.academicService.saveNewDegreeTitle(json).then(function () {
                    _this.academicDegreeService.getAcademicDegreeList().then(function (degree) {
                        _this.degreeTitle = degree;
                    });
                });
            });
        };
        AcademicInformation.prototype.addNew = function () {
            var academicEntry;
            academicEntry = {
                id: "",
                employeeId: this.userId,
                degreeLevel: null,
                degreeTitle: null,
                board: "",
                institution: "",
                passingYear: null,
                result: "",
                major: ""
            };
            this.academic.push(academicEntry);
        };
        AcademicInformation.prototype.convertToJson = function (object) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = object;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        AcademicInformation.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'academicService',
            'academicDegreeService',
            '$stateParams'
        ];
        return AcademicInformation;
    }());
    ums.UMS.controller("AcademicInformation", AcademicInformation);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AcademicService = (function () {
        function AcademicService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.academicUrl = "employee/academic";
        }
        AcademicService.prototype.saveNewDegreeTitle = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("degreeTitles", json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        AcademicService.prototype.saveAcademicInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.academicUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        AcademicService.prototype.updateAcademicInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put(this.academicUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Updated");
                defer.resolve(data);
            })
                .error(function (reason) {
                _this.notify.error("Error in Updating");
                defer.reject(reason);
            });
            return defer.promise;
        };
        AcademicService.prototype.deleteAcademicInformation = function (id) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.doDelete(this.academicUrl + "/" + id)
                .success(function () {
                _this.notify.success("Delete Successful");
                defer.resolve("Delete Successful");
            })
                .error(function (reason) {
                _this.notify.error("Error in Saving");
                defer.reject(reason);
            });
            return defer.promise;
        };
        AcademicService.prototype.getAcademicInformation = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.academicUrl + "/" + employeeId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in Fetching Academic Information");
            });
            return defer.promise;
        };
        AcademicService.$inject = ['HttpClient', '$q', 'notify'];
        return AcademicService;
    }());
    ums.AcademicService = AcademicService;
    ums.UMS.service("academicService", AcademicService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PublicationInformation = (function () {
        function PublicationInformation(registrarConstants, $q, notify, countryService, publicationService, $stateParams) {
            var _this = this;
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.countryService = countryService;
            this.publicationService = publicationService;
            this.$stateParams = $stateParams;
            this.publication = [];
            this.bulkPublication = [];
            this.publicationTypes = [];
            this.countries = [];
            this.userId = "";
            this.enableEdit = [false];
            this.editMode = [false];
            this.enableEditButton = false;
            this.showLoader = true;
            this.showLoaderWhileBibParsing = false;
            this.showSaveButton = false;
            this.bibInput = "";
            this.months = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"];
            this.notKey = [',', '{', '}', ' ', '='];
            this.pos = 0;
            this.input = "";
            this.entries = new Array();
            this.currentEntry = "";
            this.publication = [];
            this.stateParams = $stateParams;
            this.publicationTypes = this.registrarConstants.publicationTypes;
            this.userId = this.stateParams.id;
            this.enableEditButton = this.stateParams.edit;
            this.countryService.getAll().then(function (countries) {
                _this.countries = countries;
                _this.get();
            });
        }
        PublicationInformation.prototype.submit = function (index) {
            var _this = this;
            this.convertToJson(this.publication[index]).then(function (json) {
                if (!_this.publication[index].id) {
                    _this.create(json, index);
                }
                else {
                    _this.update(json, index);
                }
            });
        };
        PublicationInformation.prototype.create = function (json, index) {
            var _this = this;
            this.publicationService.savePublicationInformation(json).then(function (data) {
                _this.publication[index] = data;
                _this.enableEdit[index] = false;
            }).catch(function (reason) {
                _this.enableEdit[index] = true;
            });
        };
        PublicationInformation.prototype.update = function (json, index) {
            var _this = this;
            this.publicationService.updatePublicationInformation(json).then(function (data) {
                _this.publication[index] = data;
                _this.enableEdit[index] = false;
            }).catch(function (reason) {
                _this.enableEdit[index] = true;
            });
        };
        PublicationInformation.prototype.updateBib = function (index) {
            this.activeEditButtonBib(index, false);
        };
        PublicationInformation.prototype.get = function () {
            var _this = this;
            this.showLoader = true;
            this.publication = [];
            this.publicationService.getPublicationInformation(this.userId).then(function (academicInformation) {
                if (academicInformation) {
                    _this.publication = academicInformation;
                }
                else {
                    _this.publication = [];
                }
                _this.showLoader = false;
            });
        };
        PublicationInformation.prototype.delete = function (index) {
            var _this = this;
            if (this.publication[index].id) {
                this.publicationService.deletePublicationInformation(this.publication[index].id).then(function (data) {
                    _this.publication.splice(index, 1);
                });
            }
            else {
                this.publication.splice(index, 1);
            }
        };
        PublicationInformation.prototype.deleteBib = function (index) {
            this.bulkPublication.splice(index, 1);
        };
        PublicationInformation.prototype.activeEditButton = function (index, canEdit) {
            this.enableEdit[index] = canEdit;
            if (canEdit) {
                this.tmp = {};
                this.tmp = angular.copy(this.publication[index]);
            }
            else {
                this.publication.splice(index, 1, this.tmp);
            }
        };
        PublicationInformation.prototype.activeEditButtonBib = function (index, canEdit) {
            this.editMode[index] = canEdit;
        };
        PublicationInformation.prototype.addNew = function () {
            var publicationEntry;
            publicationEntry = {
                id: "",
                employeeId: this.userId,
                publicationTitle: "",
                publicationType: null,
                publicationInterestGenre: "",
                publicationWebLink: "",
                publisherName: "",
                dateOfPublication: null,
                publicationISSN: "",
                publicationIssue: "",
                publicationVolume: "",
                publicationJournalName: "",
                publicationCountry: null,
                status: "0",
                publicationPages: "",
                appliedOn: "",
                actionTakenOn: "",
                rowNumber: null
            };
            this.publication.push(publicationEntry);
        };
        PublicationInformation.prototype.addNewByBib = function (bulkBib) {
            var defer = this.$q.defer();
            this.bulkPublication = [];
            for (var i = 0; i < bulkBib.length; i++) {
                var publicationBibEntry = void 0;
                var title = "";
                if (bulkBib[i].entryTags.title[0] == "{" && bulkBib[i].entryTags.title[bulkBib[i].entryTags.title.length - 1] == "}") {
                    title = bulkBib[i].entryTags.title.slice(1, bulkBib[i].entryTags.title.length - 1);
                }
                else {
                    title = bulkBib[i].entryTags.title;
                }
                publicationBibEntry = {
                    id: "",
                    employeeId: this.userId,
                    publicationTitle: title,
                    publicationType: bulkBib[i].entryType.toUpperCase() == 'CONFERENCE' ? this.publicationTypes[0] :
                        bulkBib[i].entryType.toUpperCase() == 'ARTICLE' ? this.publicationTypes[1] :
                            bulkBib[i].entryType.toUpperCase() == 'BOOK' ? this.publicationTypes[2] : this.publicationTypes[3],
                    publicationInterestGenre: "",
                    publicationWebLink: bulkBib[i].entryTags.url,
                    publisherName: bulkBib[i].entryTags.publisher,
                    dateOfPublication: Number(bulkBib[i].entryTags.year),
                    publicationISSN: bulkBib[i].entryTags.issn,
                    publicationIssue: "",
                    publicationVolume: bulkBib[i].entryTags.volume,
                    publicationJournalName: bulkBib[i].entryTags.journal,
                    publicationCountry: null,
                    status: "0",
                    publicationPages: bulkBib[i].entryTags.pages,
                    appliedOn: "",
                    actionTakenOn: "",
                    rowNumber: null
                };
                this.bulkPublication.push(publicationBibEntry);
            }
            defer.resolve(this.bulkPublication);
            return defer.promise;
        };
        PublicationInformation.prototype.convertToJson = function (object) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = object;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        PublicationInformation.prototype.parseBib = function () {
            var _this = this;
            this.showLoaderWhileBibParsing = true;
            this.parsedBib = this.toJSON(this.bibInput);
            if (this.parsedBib == undefined || this.parsedBib == null || this.parsedBib.length == 0) {
                this.notify.error("Error while parsing. Unknown format.");
                this.showSaveButton = false;
            }
            else {
                this.addNewByBib(this.parsedBib).then(function (result) {
                    _this.showSaveButton = true;
                });
            }
            this.showLoaderWhileBibParsing = false;
        };
        PublicationInformation.prototype.validateBibInput = function () {
            var _this = this;
            var flag = 0;
            var errorIndex = [];
            for (var i = 0; i < this.bulkPublication.length; i++) {
                if (this.bulkPublication[i].publicationTitle && this.bulkPublication[i].publicationType && this.bulkPublication[i].dateOfPublication) {
                    //save operation
                }
                else {
                    flag = 1;
                    errorIndex.push(i + 1);
                }
            }
            if (flag == 0) {
                this.convertToJson(this.bulkPublication).then(function (json) {
                    _this.publicationService.saveBibPublicationInformation(json).then(function (resolve) {
                        _this.get();
                        _this.bulkPublication = [];
                        _this.bibInput = "";
                        _this.parsedBib = [];
                        _this.showLoaderWhileBibParsing = false;
                        _this.showSaveButton = false;
                        $('#importBibtex').modal('hide');
                    });
                });
            }
            else {
                var st = "";
                for (var j = 0; j < errorIndex.length; j++) {
                    st += errorIndex[j];
                    if (errorIndex.length - 1 != j)
                        st += ", ";
                }
                this.notify.error("Found error(s) in Sl [" + st + "]. Please fill required fields properly");
            }
        };
        // TODO: Need to create separate service for Bib Parsing.
        PublicationInformation.prototype.setInput = function (t) {
            this.input = t;
        };
        PublicationInformation.prototype.getEntries = function () {
            return this.entries;
        };
        PublicationInformation.prototype.isWhitespace = function (s) {
            return (s == ' ' || s == '\r' || s == '\t' || s == '\n');
        };
        PublicationInformation.prototype.match = function (s, canCommentOut) {
            if (canCommentOut == undefined || canCommentOut == null)
                canCommentOut = true;
            this.skipWhitespace(canCommentOut);
            if (this.input.substring(this.pos, this.pos + s.length) == s) {
                this.pos += s.length;
            }
            else {
                this.notify.error("Token mismatch: match expected " + s + ", found "
                    + this.input.substring(this.pos));
            }
            this.skipWhitespace(canCommentOut);
        };
        PublicationInformation.prototype.tryMatch = function (s, canCommentOut) {
            if (canCommentOut == undefined || canCommentOut == null)
                canCommentOut = true;
            this.skipWhitespace(canCommentOut);
            if (this.input.substring(this.pos, this.pos + s.length) == s) {
                return true;
            }
            else {
                return false;
            }
            //this.skipWhitespace(canCommentOut);
        };
        PublicationInformation.prototype.matchAt = function () {
            while (this.input.length > this.pos && this.input[this.pos] != '@') {
                this.pos++;
            }
            if (this.input[this.pos] == '@') {
                return true;
            }
            return false;
        };
        PublicationInformation.prototype.skipWhitespace = function (canCommentOut) {
            while (this.isWhitespace(this.input[this.pos])) {
                this.pos++;
            }
            if (this.input[this.pos] == "%" && canCommentOut == true) {
                while (this.input[this.pos] != "\n") {
                    this.pos++;
                }
                this.skipWhitespace(canCommentOut);
            }
        };
        PublicationInformation.prototype.value_braces = function () {
            var bracecount = 0;
            this.match("{", false);
            var start = this.pos;
            var escaped = false;
            while (true) {
                if (!escaped) {
                    if (this.input[this.pos] == '}') {
                        if (bracecount > 0) {
                            bracecount--;
                        }
                        else {
                            var end = this.pos;
                            this.match("}", false);
                            return this.input.substring(start, end);
                        }
                    }
                    else if (this.input[this.pos] == '{') {
                        bracecount++;
                    }
                    else if (this.pos >= this.input.length - 1) {
                        this.notify.error("Unterminated value: value_braces");
                    }
                }
                if (this.input[this.pos] == '\\' && escaped == false)
                    escaped = true;
                else
                    escaped = false;
                this.pos++;
            }
        };
        PublicationInformation.prototype.value_comment = function () {
            var str = '';
            var brcktCnt = 0;
            while (!(this.tryMatch("}", false) && brcktCnt == 0)) {
                str = str + this.input[this.pos];
                if (this.input[this.pos] == '{')
                    brcktCnt++;
                if (this.input[this.pos] == '}')
                    brcktCnt--;
                if (this.pos >= this.input.length - 1) {
                    this.notify.error("Unterminated value: value_comment ");
                }
                this.pos++;
            }
            return str;
        };
        PublicationInformation.prototype.value_quotes = function () {
            this.match('"', false);
            var start = this.pos;
            var escaped = false;
            while (true) {
                if (!escaped) {
                    if (this.input[this.pos] == '"') {
                        var end = this.pos;
                        this.match('"', false);
                        return this.input.substring(start, end);
                    }
                    else if (this.pos >= this.input.length - 1) {
                        this.notify.error("Unterminated value: value_quotes" + this.input.substring(start));
                    }
                }
                if (this.input[this.pos] == '\\' && escaped == false)
                    escaped = true;
                else
                    escaped = false;
                this.pos++;
            }
        };
        PublicationInformation.prototype.single_value = function () {
            var start = this.pos;
            if (this.tryMatch("{")) {
                return this.value_braces();
            }
            else if (this.tryMatch('"')) {
                return this.value_quotes();
            }
            else {
                var k = this.key();
                if (k.match("^[0-9]+$"))
                    return k;
                else if (this.months.indexOf(k.toLowerCase()) >= 0)
                    return k.toLowerCase();
                else
                    throw "Value expected: single_value" + this.input.substring(start) + ' for key: ' + k;
            }
        };
        PublicationInformation.prototype.value = function () {
            var values = [];
            values.push(this.single_value());
            while (this.tryMatch("#")) {
                this.match("#");
                values.push(this.single_value());
            }
            return values.join("");
        };
        ;
        PublicationInformation.prototype.key = function (optional) {
            var start = this.pos;
            while (true) {
                if (this.pos >= this.input.length) {
                    this.notify.error("Runaway key: key");
                }
                // а-яА-Я is Cyrillic
                //console.log(this.input[this.pos]);
                if (this.notKey.indexOf(this.input[this.pos]) >= 0) {
                    if (optional && this.input[this.pos] != ',') {
                        this.pos = start;
                        return null;
                    }
                    return this.input.substring(start, this.pos);
                }
                else {
                    this.pos++;
                }
            }
        };
        PublicationInformation.prototype.key_equals_value = function () {
            var key = this.key();
            if (this.tryMatch("=")) {
                this.match("=");
                var val = this.value();
                key = key.trim();
                return [key, val];
            }
            else {
                this.notify.error("Value expected, equals sign missing: key_equals_value" +
                    this.input.substring(this.pos));
            }
        };
        PublicationInformation.prototype.key_value_list = function () {
            var kv = this.key_equals_value();
            this.currentEntry['entryTags'] = {};
            this.currentEntry['entryTags'][kv[0]] = kv[1];
            while (this.tryMatch(",")) {
                this.match(",");
                // fixes problems with commas at the end of a list
                if (this.tryMatch("}")) {
                    break;
                }
                kv = this.key_equals_value();
                this.currentEntry['entryTags'][kv[0]] = kv[1];
            }
        };
        ;
        PublicationInformation.prototype.entry_body = function (d) {
            this.currentEntry = {};
            this.currentEntry['citationKey'] = this.key(true);
            this.currentEntry['entryType'] = d.substring(1);
            if (this.currentEntry['citationKey'] != null) {
                this.match(",");
            }
            this.key_value_list();
            this.entries.push(this.currentEntry);
        };
        PublicationInformation.prototype.directive = function () {
            this.match("@");
            return "@" + this.key();
        };
        PublicationInformation.prototype.preamble = function () {
            this.currentEntry = {};
            this.currentEntry['entryType'] = 'PREAMBLE';
            this.currentEntry['entry'] = this.value_comment();
            this.entries.push(this.currentEntry);
        };
        PublicationInformation.prototype.comment = function () {
            this.currentEntry = {};
            this.currentEntry['entryType'] = 'COMMENT';
            this.currentEntry['entry'] = this.value_comment();
            this.entries.push(this.currentEntry);
        };
        PublicationInformation.prototype.entry = function (d) {
            this.entry_body(d);
        };
        PublicationInformation.prototype.alernativeCitationKey = function () {
            this.entries.forEach(function (entry) {
                if (!entry.citationKey && entry.entryTags) {
                    entry.citationKey = '';
                    if (entry.entryTags.author) {
                        entry.citationKey += entry.entryTags.author.split(',')[0] += ', ';
                    }
                    entry.citationKey += entry.entryTags.year;
                }
            });
        };
        PublicationInformation.prototype.bibtex = function () {
            while (this.matchAt()) {
                var d = this.directive();
                this.match("{");
                if (d.toUpperCase() == "@STRING") {
                    //this.string();
                }
                else if (d.toUpperCase() == "@PREAMBLE") {
                    this.preamble();
                }
                else if (d.toUpperCase() == "@COMMENT") {
                    this.comment();
                }
                else {
                    this.entry(d);
                }
                this.match("}");
            }
            this.alernativeCitationKey();
        };
        ;
        PublicationInformation.prototype.toJSON = function (bibtex) {
            this.pos = 0;
            this.input = "";
            this.entries = new Array();
            this.currentEntry = "";
            this.setInput(bibtex);
            this.bibtex();
            return this.entries;
        };
        ;
        PublicationInformation.prototype.toBibtex = function (json, compact) {
            if (compact === undefined)
                compact = true;
            var out = '';
            var entrysep = ',';
            var indent = '';
            if (!compact) {
                entrysep = ',\n';
                indent = '    ';
            }
            for (var i in json) {
                out += "@" + json[i].entryType;
                out += '{';
                if (json[i].citationKey)
                    out += json[i].citationKey + entrysep;
                if (json[i].entry)
                    out += json[i].entry;
                if (json[i].entryTags) {
                    var tags = indent;
                    for (var jdx in json[i].entryTags) {
                        if (tags.trim().length != 0)
                            tags += entrysep + indent;
                        tags += jdx + (compact ? '={' : ' = {') +
                            json[i].entryTags[jdx] + '}';
                    }
                    out += tags;
                }
                out += compact ? '}\n' : '\n}\n\n';
            }
            return out;
        };
        PublicationInformation.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'countryService',
            'publicationService',
            '$stateParams'
        ];
        return PublicationInformation;
    }());
    ums.UMS.controller("PublicationInformation", PublicationInformation);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PublicationService = (function () {
        function PublicationService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.publicationUrl = "employee/publication";
        }
        PublicationService.prototype.savePublicationInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.publicationUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        PublicationService.prototype.saveBibPublicationInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.publicationUrl + "/bulk", json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        PublicationService.prototype.updatePublicationInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put(this.publicationUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Updated");
                defer.resolve(data);
            })
                .error(function (reason) {
                _this.notify.error("Error in Updating");
                defer.reject(reason);
            });
            return defer.promise;
        };
        PublicationService.prototype.deletePublicationInformation = function (id) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.doDelete(this.publicationUrl + "/" + id)
                .success(function () {
                _this.notify.success("Delete Successful");
                defer.resolve("Delete Successful");
            })
                .error(function (reason) {
                _this.notify.error("Error in Saving");
                defer.reject(reason);
            });
            return defer.promise;
        };
        PublicationService.prototype.getPublicationInformationWithPagination = function (employeeId, status, pageNumber, itemPerPage) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.publicationUrl + "/get/employeeId/" + employeeId + "/publicationStatus/" + status + "/pageNumber/" + pageNumber + "/ipp/" + itemPerPage, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in Fetching Publication Information");
            });
            return defer.promise;
        };
        PublicationService.prototype.getPublicationInformationViewWithPagination = function (employeeId, pageNumber, itemPerPage) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.publicationUrl + "/get/employeeId/" + employeeId + "/pageNumber/" + pageNumber + "/ipp/" + itemPerPage, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in Fetching Publication Information");
            });
            return defer.promise;
        };
        PublicationService.prototype.getSpecificTeacherPublicationInformation = function (employeeId, status) {
            var defer = this.$q.defer();
            this.httpClient.get(this.publicationUrl + "/get/" + employeeId + "/" + status, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                console.log(response);
            });
            return defer.promise;
        };
        PublicationService.prototype.getPublicationInformation = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.publicationUrl + "/" + employeeId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in Fetching Publication Information");
            });
            return defer.promise;
        };
        PublicationService.$inject = ['HttpClient', '$q', 'notify'];
        return PublicationService;
    }());
    ums.PublicationService = PublicationService;
    ums.UMS.service("publicationService", PublicationService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AwardInformation = (function () {
        function AwardInformation(registrarConstants, $q, notify, awardService, $stateParams) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.awardService = awardService;
            this.$stateParams = $stateParams;
            this.award = [];
            this.userId = "";
            this.enableEdit = [false];
            this.enableEditButton = false;
            this.showLoader = false;
            this.award = [];
            this.stateParams = $stateParams;
            this.userId = this.stateParams.id;
            this.enableEditButton = this.stateParams.edit;
            this.get();
        }
        AwardInformation.prototype.submit = function (index) {
            var _this = this;
            this.convertToJson(this.award[index]).then(function (json) {
                if (!_this.award[index].id) {
                    _this.create(json, index);
                }
                else {
                    _this.update(json, index);
                }
            });
        };
        AwardInformation.prototype.create = function (json, index) {
            var _this = this;
            this.awardService.saveAwardInformation(json).then(function (data) {
                _this.award[index] = data;
                _this.enableEdit[index] = false;
            }).catch(function (reason) {
                _this.enableEdit[index] = true;
            });
        };
        AwardInformation.prototype.update = function (json, index) {
            var _this = this;
            this.awardService.updateAwardInformation(json).then(function (data) {
                _this.award[index] = data;
                _this.enableEdit[index] = false;
            }).catch(function (reason) {
                _this.enableEdit[index] = true;
            });
        };
        AwardInformation.prototype.get = function () {
            var _this = this;
            this.showLoader = true;
            this.award = [];
            this.awardService.getAwardInformation(this.userId).then(function (awardInformation) {
                if (awardInformation) {
                    _this.award = awardInformation;
                }
                else {
                    _this.award = [];
                }
                _this.showLoader = false;
            });
        };
        AwardInformation.prototype.addNew = function () {
            var awardEntry;
            awardEntry = {
                id: "",
                employeeId: this.userId,
                awardName: "",
                awardInstitute: "",
                awardedYear: null,
                awardShortDescription: ""
            };
            this.award.push(awardEntry);
        };
        AwardInformation.prototype.delete = function (index) {
            var _this = this;
            if (this.award[index].id) {
                this.awardService.deleteAwardInformation(this.award[index].id).then(function (data) {
                    _this.award.splice(index, 1);
                });
            }
            else {
                this.award.splice(index, 1);
            }
        };
        AwardInformation.prototype.activeEditButton = function (index, canEdit) {
            this.enableEdit[index] = canEdit;
            if (canEdit) {
                this.tmp = {};
                this.tmp = angular.copy(this.award[index]);
            }
            else {
                this.award.splice(index, 1, this.tmp);
            }
        };
        AwardInformation.prototype.convertToJson = function (object) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = object;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        AwardInformation.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'awardService',
            '$stateParams'
        ];
        return AwardInformation;
    }());
    ums.UMS.controller("AwardInformation", AwardInformation);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AwardService = (function () {
        function AwardService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.awardUrl = "employee/award";
        }
        AwardService.prototype.saveAwardInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.awardUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        AwardService.prototype.updateAwardInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put(this.awardUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Updated");
                defer.resolve(data);
            })
                .error(function (reason) {
                _this.notify.error("Error in Updating");
                defer.reject(reason);
            });
            return defer.promise;
        };
        AwardService.prototype.deleteAwardInformation = function (id) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.doDelete(this.awardUrl + "/" + id)
                .success(function () {
                _this.notify.success("Delete Successful");
                defer.resolve("Delete Successful");
            })
                .error(function (reason) {
                _this.notify.error("Error in Saving");
                defer.reject(reason);
            });
            return defer.promise;
        };
        AwardService.prototype.getAwardInformation = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.awardUrl + "/" + employeeId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in Fetching Academic Information");
            });
            return defer.promise;
        };
        AwardService.$inject = ['HttpClient', '$q', 'notify'];
        return AwardService;
    }());
    ums.AwardService = AwardService;
    ums.UMS.service("awardService", AwardService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TrainingInformation = (function () {
        function TrainingInformation(registrarConstants, $q, notify, trainingService, $stateParams) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.trainingService = trainingService;
            this.$stateParams = $stateParams;
            this.training = [];
            this.trainingTypes = [];
            this.userId = "";
            this.enableEdit = [false];
            this.enableEditButton = false;
            this.showLoader = false;
            this.training = [];
            this.trainingTypes = registrarConstants.trainingCategories;
            this.stateParams = $stateParams;
            this.userId = this.stateParams.id;
            this.enableEditButton = this.stateParams.edit;
            this.get();
        }
        TrainingInformation.prototype.submit = function (index) {
            var _this = this;
            this.convertToJson(this.training[index]).then(function (json) {
                if (!_this.training[index].id) {
                    _this.create(json, index);
                }
                else {
                    _this.update(json, index);
                }
            });
        };
        TrainingInformation.prototype.create = function (json, index) {
            var _this = this;
            this.trainingService.saveTrainingInformation(json).then(function (data) {
                _this.training[index] = data;
                _this.enableEdit[index] = false;
            }).catch(function (reason) {
                _this.enableEdit[index] = true;
            });
        };
        TrainingInformation.prototype.update = function (json, index) {
            var _this = this;
            this.trainingService.updateTrainingInformation(json).then(function (data) {
                _this.training[index] = data;
                _this.enableEdit[index] = false;
            }).catch(function (reason) {
                _this.enableEdit[index] = true;
            });
        };
        TrainingInformation.prototype.get = function () {
            var _this = this;
            this.showLoader = true;
            this.training = [];
            this.trainingService.getTrainingInformation(this.userId).then(function (trainingData) {
                if (trainingData) {
                    _this.training = trainingData;
                }
                else {
                    _this.training = [];
                }
                _this.showLoader = false;
            });
        };
        TrainingInformation.prototype.addNew = function () {
            var trainingEntry;
            trainingEntry = {
                id: "",
                employeeId: this.userId,
                trainingName: "",
                trainingInstitution: "",
                trainingFrom: "",
                trainingTo: "",
                trainingDuration: null,
                trainingDurationString: "",
                trainingCategory: null
            };
            this.training.push(trainingEntry);
        };
        TrainingInformation.prototype.delete = function (index) {
            var _this = this;
            if (this.training[index].id) {
                this.trainingService.deleteTrainingInformation(this.training[index].id).then(function (data) {
                    _this.training.splice(index, 1);
                });
            }
            else {
                this.training.splice(index, 1);
            }
        };
        TrainingInformation.prototype.activeEditButton = function (index, canEdit) {
            this.enableEdit[index] = canEdit;
            if (canEdit) {
                this.tmp = {};
                this.tmp = angular.copy(this.training[index]);
            }
            else {
                this.training.splice(index, 1, this.tmp);
            }
        };
        TrainingInformation.prototype.convertToJson = function (object) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = object;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        TrainingInformation.prototype.calculateDifference = function (form, index, FromDate, ToDate) {
            if (ums.Utils.validateDateInput(FromDate, ToDate, 1)) {
                this.training[index].trainingDuration = ums.Utils.getDateDiffInDays(FromDate, ToDate, 1);
                this.training[index].trainingDurationString = ums.Utils.getFormattedDateDiff(FromDate, ToDate, 1);
                form.$invalid = false;
            }
            else {
                if (this.training[index].trainingTo) {
                    this.notify.error("From date is greater than to date");
                }
                form.$invalid = true;
            }
        };
        TrainingInformation.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'trainingService',
            '$stateParams'
        ];
        return TrainingInformation;
    }());
    ums.UMS.controller("TrainingInformation", TrainingInformation);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TrainingService = (function () {
        function TrainingService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.trainingUrl = "employee/training";
        }
        TrainingService.prototype.saveTrainingInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.trainingUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        TrainingService.prototype.updateTrainingInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put(this.trainingUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Updated");
                defer.resolve(data);
            })
                .error(function (reason) {
                _this.notify.error("Error in Updating");
                defer.reject(reason);
            });
            return defer.promise;
        };
        TrainingService.prototype.deleteTrainingInformation = function (id) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.doDelete(this.trainingUrl + "/" + id)
                .success(function () {
                _this.notify.success("Delete Successful");
                defer.resolve("Delete Successful");
            })
                .error(function (reason) {
                _this.notify.error("Error in Saving");
                defer.reject(reason);
            });
            return defer.promise;
        };
        TrainingService.prototype.getTrainingInformation = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.trainingUrl + "/" + employeeId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in Fetching Training Information");
            });
            return defer.promise;
        };
        TrainingService.$inject = ['HttpClient', '$q', 'notify'];
        return TrainingService;
    }());
    ums.TrainingService = TrainingService;
    ums.UMS.service("trainingService", TrainingService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExperienceInformation = (function () {
        function ExperienceInformation(registrarConstants, $q, notify, experienceService, $stateParams) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.experienceService = experienceService;
            this.$stateParams = $stateParams;
            this.experience = [];
            this.experienceTypes = [];
            this.userId = "";
            this.enableEdit = [false];
            this.enableEditButton = false;
            this.showLoader = false;
            this.experience = [];
            this.stateParams = $stateParams;
            this.experienceTypes = registrarConstants.experienceCategories;
            this.userId = this.stateParams.id;
            this.enableEditButton = this.stateParams.edit;
            this.get();
        }
        ExperienceInformation.prototype.submit = function (index) {
            var _this = this;
            this.convertToJson(this.experience[index]).then(function (json) {
                if (!_this.experience[index].id) {
                    _this.create(json, index);
                }
                else {
                    _this.update(json, index);
                }
            });
        };
        ExperienceInformation.prototype.create = function (json, index) {
            var _this = this;
            this.experienceService.saveExperienceInformation(json).then(function (data) {
                _this.experience[index] = data;
                _this.enableEdit[index] = false;
            }).catch(function (reason) {
                _this.enableEdit[index] = true;
            });
        };
        ExperienceInformation.prototype.update = function (json, index) {
            var _this = this;
            this.experienceService.updateExperienceInformation(json).then(function (data) {
                _this.experience[index] = data;
                _this.enableEdit[index] = false;
            }).catch(function (reason) {
                _this.enableEdit[index] = true;
            });
        };
        ExperienceInformation.prototype.get = function () {
            var _this = this;
            this.showLoader = true;
            this.experience = [];
            this.experienceService.getExperienceInformation(this.userId).then(function (experienceInformation) {
                if (experienceInformation) {
                    _this.experience = experienceInformation;
                }
                else {
                    _this.experience = [];
                }
                _this.showLoader = false;
            });
        };
        ExperienceInformation.prototype.addNew = function () {
            var experienceEntry;
            experienceEntry = {
                id: "",
                employeeId: this.userId,
                experienceInstitution: "",
                experienceDesignation: "",
                experienceFrom: "",
                experienceTo: "",
                experienceDuration: null,
                experienceDurationString: "",
                experienceCategory: null
            };
            this.experience.push(experienceEntry);
        };
        ExperienceInformation.prototype.delete = function (index) {
            var _this = this;
            if (this.experience[index].id) {
                this.experienceService.deleteExperienceInformation(this.experience[index].id).then(function (data) {
                    _this.experience.splice(index, 1);
                });
            }
            else {
                this.experience.splice(index, 1);
            }
        };
        ExperienceInformation.prototype.activeEditButton = function (index, canEdit) {
            this.enableEdit[index] = canEdit;
            if (canEdit) {
                this.tmp = {};
                this.tmp = angular.copy(this.experience[index]);
            }
            else {
                this.experience.splice(index, 1, this.tmp);
            }
        };
        ExperienceInformation.prototype.convertToJson = function (object) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = object;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        ExperienceInformation.prototype.calculateDifference = function (form, index, FromDate, ToDate) {
            if (ums.Utils.validateDateInput(FromDate, ToDate, 1)) {
                this.experience[index].experienceDuration = ums.Utils.getDateDiffInDays(FromDate, ToDate, 1);
                this.experience[index].experienceDurationString = ums.Utils.getFormattedDateDiff(FromDate, ToDate, 1);
                form.$invalid = false;
            }
            else {
                if (this.experience[index].experienceTo) {
                    this.notify.error("From date is greater than to date");
                }
                form.$invalid = true;
            }
        };
        ExperienceInformation.$inject = ['registrarConstants',
            '$q',
            'notify',
            'experienceService',
            '$stateParams'
        ];
        return ExperienceInformation;
    }());
    ums.UMS.controller("ExperienceInformation", ExperienceInformation);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExperienceService = (function () {
        function ExperienceService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.experienceUrl = "employee/experience";
        }
        ExperienceService.prototype.saveExperienceInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.experienceUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        ExperienceService.prototype.updateExperienceInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put(this.experienceUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Updated");
                defer.resolve(data);
            })
                .error(function (reason) {
                _this.notify.error("Error in Updating");
                defer.reject(reason);
            });
            return defer.promise;
        };
        ExperienceService.prototype.deleteExperienceInformation = function (id) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.doDelete(this.experienceUrl + "/" + id)
                .success(function () {
                _this.notify.success("Delete Successful");
                defer.resolve("Delete Successful");
            })
                .error(function (reason) {
                _this.notify.error("Error in Saving");
                defer.reject(reason);
            });
            return defer.promise;
        };
        ExperienceService.prototype.getExperienceInformation = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.experienceUrl + "/" + employeeId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in Fetching Experience Information");
            });
            return defer.promise;
        };
        ExperienceService.$inject = ['HttpClient', '$q', 'notify'];
        return ExperienceService;
    }());
    ums.ExperienceService = ExperienceService;
    ums.UMS.service("experienceService", ExperienceService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdditionalInformation = (function () {
        function AdditionalInformation(registrarConstants, $q, notify, additionalService, $stateParams, employeeService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.additionalService = additionalService;
            this.$stateParams = $stateParams;
            this.employeeService = employeeService;
            this.additional = null;
            this.aoi = [];
            this.socialInfo = [];
            this.tmpSocial = [];
            this.userId = "";
            this.enableEdit = false;
            this.enableAoiEdit = false;
            this.enableSocialEdit = false;
            this.enableEditButton = false;
            this.showLoader = false;
            this.showUserNameOfAlreadyTakenAcademicInitial = "";
            this.socialLinkType = [];
            this.additional = {};
            this.aoi = [];
            this.socialInfo = [];
            this.stateParams = $stateParams;
            this.userId = this.stateParams.id;
            this.enableEditButton = this.stateParams.edit;
            this.socialLinkType = this.registrarConstants.socialLinkType;
            this.get('additional');
            this.get('aoi');
            this.get('social');
        }
        AdditionalInformation.prototype.get = function (type) {
            var _this = this;
            this.showLoader = true;
            if (type === 'additional') {
                this.additionalService.getAdditionalInformation(this.userId).then(function (additionalInformation) {
                    if (additionalInformation) {
                        _this.additional = additionalInformation;
                    }
                    else {
                        _this.additional = {};
                    }
                    _this.showLoader = false;
                });
            }
            else if (type === 'aoi') {
                this.additionalService.getAoiInformation(this.userId).then(function (aoiInformation) {
                    if (aoiInformation) {
                        _this.aoi = aoiInformation;
                    }
                    else {
                        _this.aoi = [];
                    }
                    _this.showLoader = false;
                });
            }
            else if (type === 'social') {
                this.additionalService.getSocialLinkInfo(this.userId).then(function (socialInfo) {
                    if (socialInfo) {
                        _this.socialInfo = socialInfo;
                    }
                    else {
                        _this.socialInfo = [];
                    }
                    _this.showLoader = false;
                });
            }
        };
        AdditionalInformation.prototype.submit = function (type) {
            var _this = this;
            if (type === 'additional') {
                this.additional.employeeId = this.stateParams.id;
                console.log(this.additional);
                this.convertToJson(this.additional).then(function (json) {
                    _this.additionalService.saveAdditionalInformation(json).then(function (data) {
                        _this.enableEdit = false;
                    }).catch(function (reason) {
                        _this.enableEdit = true;
                    });
                });
            }
            else if (type === 'aoi') {
                this.convertToJson(this.aoi).then(function (json) {
                    _this.additionalService.saveAoiInformation(json).then(function (data) {
                        _this.enableAoiEdit = false;
                    }).catch(function (reason) {
                        _this.enableAoiEdit = true;
                    });
                });
            }
            else if (type === 'social') {
                this.socialInfo.forEach(function (value) {
                    if (value.isOther == true) {
                        value.type = value.typeOther;
                    }
                });
                this.convertToJson(this.socialInfo).then(function (json) {
                    _this.additionalService.saveSocialInformation(json, _this.userId).then(function (data) {
                        _this.enableSocialEdit = false;
                    }).catch(function (reason) {
                        _this.enableSocialEdit = true;
                    });
                });
            }
        };
        AdditionalInformation.prototype.activeEditButton = function (canEdit, type) {
            if (type === 'additional') {
                this.enableEdit = canEdit;
                if (canEdit) {
                    this.tmpAdditional = {};
                    this.tmpAdditional = angular.copy(this.additional);
                }
                else {
                    this.additional = {};
                    this.additional = this.tmpAdditional;
                }
            }
            else if (type === 'aoi') {
                this.enableAoiEdit = canEdit;
                if (canEdit) {
                    this.tmpAoi = [];
                    this.tmpAoi = angular.copy(this.aoi);
                }
                else {
                    this.aoi = [];
                    this.aoi = this.tmpAoi;
                }
            }
            else if (type === 'social') {
                this.enableSocialEdit = canEdit;
                if (canEdit) {
                    this.tmpSocial = [];
                    this.tmpSocial = angular.copy(this.socialInfo);
                    for (var i = 0; i < this.socialInfo.length; i++) {
                        var isAdded = 0;
                        for (var j = 0; j < this.socialLinkType.length; j++) {
                            if (this.socialInfo[i].type == this.socialLinkType[j].name) {
                                isAdded = 1;
                            }
                        }
                        if (!isAdded) {
                            this.socialInfo[i].isOther = true;
                            this.socialInfo[i].typeOther = this.socialInfo[i].type;
                            this.socialInfo[i].type = "Other";
                        }
                    }
                }
                else {
                    this.socialInfo = [];
                    this.socialInfo = this.tmpSocial;
                }
            }
        };
        AdditionalInformation.prototype.delete = function (index) {
            this.aoi.splice(index, 1);
        };
        AdditionalInformation.prototype.addNew = function () {
            var aoiEntry;
            aoiEntry = {
                employeeId: this.userId,
                areaOfInterest: ""
            };
            this.aoi.push(aoiEntry);
        };
        AdditionalInformation.prototype.deleteSocial = function (index) {
            this.socialInfo.splice(index, 1);
        };
        AdditionalInformation.prototype.checkOther = function (index) {
            if (this.socialInfo[index].type == 'Other') {
                this.socialInfo[index].isOther = true;
            }
            else {
                this.socialInfo[index].isOther = false;
                this.socialInfo[index].typeOther = "";
            }
        };
        AdditionalInformation.prototype.addNewSocial = function () {
            var socialEntry;
            socialEntry = {
                employeeId: this.userId,
                type: "Facebook",
                link: "",
                isOther: false,
                typeOther: ""
            };
            this.socialInfo.push(socialEntry);
        };
        AdditionalInformation.prototype.checkDuplicate = function (form) {
            var _this = this;
            this.showUserNameOfAlreadyTakenAcademicInitial = "";
            if (this.additional.academicInitial) {
                this.additionalService.checkDuplicate(this.userId, this.additional.academicInitial.toUpperCase()).then(function (result) {
                    if (result) {
                        _this.employeeService.getEmployee(result.employeeId).then(function (emp) {
                            if (emp.id == _this.userId) {
                            }
                            else {
                                _this.showUserNameOfAlreadyTakenAcademicInitial = emp.employeeName;
                                form.$invalid = true;
                            }
                        });
                    }
                });
            }
        };
        AdditionalInformation.prototype.modifyToUpperCase = function () {
            if (this.additional.academicInitial) {
                this.additional.academicInitial = this.additional.academicInitial.toUpperCase();
            }
        };
        AdditionalInformation.prototype.convertToJson = function (object) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = object;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        AdditionalInformation.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'additionalService',
            '$stateParams',
            'employeeService'
        ];
        return AdditionalInformation;
    }());
    ums.UMS.controller("AdditionalInformation", AdditionalInformation);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdditionalService = (function () {
        function AdditionalService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.additionalUrl = "employee/additional";
            this.aoiUrl = "employee/aoi";
            this.socialUrl = "employee/socialLink";
        }
        AdditionalService.prototype.checkDuplicateAcademicInitial = function (pShortName, pDeptId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.additionalUrl + "/initial/" + pShortName + "/deptId/" + pDeptId, 'application/json', function (result, etag) {
                defer.resolve(result);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error");
            });
            return defer.promise;
        };
        AdditionalService.prototype.saveAdditionalInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.additionalUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        AdditionalService.prototype.getAdditionalInformation = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.additionalUrl + "/" + employeeId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json);
            }, function (response) {
                _this.notify.error("Error in Fetching Additional Information");
            });
            return defer.promise;
        };
        // AreaOfInterest Information
        AdditionalService.prototype.saveAoiInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.aoiUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        AdditionalService.prototype.saveSocialInformation = function (json, userId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.socialUrl + "/" + userId, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        AdditionalService.prototype.getAoiInformation = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.aoiUrl + "/" + employeeId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in Fetching Additional Information");
            });
            return defer.promise;
        };
        AdditionalService.prototype.getSocialLinkInfo = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.socialUrl + "/" + employeeId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in Fetching Additional Information");
            });
            return defer.promise;
        };
        AdditionalService.prototype.checkDuplicate = function (employeeId, initial) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.additionalUrl + "/" + employeeId + "/initial/" + initial, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json);
            }, function (response) {
                _this.notify.error("Error in Fetching Additional Information");
            });
            return defer.promise;
        };
        AdditionalService.$inject = ['HttpClient', '$q', 'notify'];
        return AdditionalService;
    }());
    ums.AdditionalService = AdditionalService;
    ums.UMS.service("additionalService", AdditionalService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ServiceInformation = (function () {
        function ServiceInformation(registrarConstants, $q, notify, serviceService, $stateParams, departmentService, designationService, employeeService, departmentDesignationRoleMapService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.serviceService = serviceService;
            this.$stateParams = $stateParams;
            this.departmentService = departmentService;
            this.designationService = designationService;
            this.employeeService = employeeService;
            this.departmentDesignationRoleMapService = departmentDesignationRoleMapService;
            this.service = [];
            this.userId = "";
            this.designations = [];
            this.filteredDesignation = [];
            this.employmentTypes = [];
            this.serviceIntervals = [];
            this.serviceRegularIntervals = [];
            this.serviceContractIntervals = [];
            this.departments = [];
            this.joiningIntervals = [];
            this.endIntervals = [];
            this.endTypes = [];
            this.enableEdit = [false];
            this.enableServiceDetailEdit = [[false]];
            this.enableEditButton = false;
            this.showLoader = true;
            this.service = [];
            this.stateParams = $stateParams;
            this.userId = this.stateParams.id;
            this.enableEditButton = this.stateParams.edit;
            this.employmentTypes = this.registrarConstants.employmentTypes;
            this.joiningIntervals = this.registrarConstants.joiningIntervals;
            this.endIntervals = this.registrarConstants.serviceEndIntervals;
            this.endTypes = this.registrarConstants.serviceEndTypes;
            this.getDepartments();
            this.getDesignations();
            this.getServiceIntervals();
            this.get();
        }
        ServiceInformation.prototype.getDesignations = function () {
            var _this = this;
            this.designationService.getAll().then(function (designations) {
                _this.designations = designations;
            });
        };
        ServiceInformation.prototype.getDepartments = function () {
            var _this = this;
            this.departmentService.getAll().then(function (departments) {
                _this.departments = departments;
            });
        };
        ServiceInformation.prototype.initEnableEditServiceDetails = function () {
            for (var i = 0; i < this.service.length; i++) {
                this.enableServiceDetailEdit.push([false]);
            }
        };
        ServiceInformation.prototype.getServiceIntervals = function () {
            this.serviceRegularIntervals.push(this.registrarConstants.servicePeriods[0]);
            this.serviceRegularIntervals.push(this.registrarConstants.servicePeriods[1]);
            this.serviceRegularIntervals.push(this.registrarConstants.servicePeriods[2]);
            this.serviceContractIntervals.push(this.registrarConstants.servicePeriods[3]);
            this.serviceContractIntervals.push(this.registrarConstants.servicePeriods[4]);
        };
        ServiceInformation.prototype.filterDesignationSelection = function (index) {
            var _this = this;
            this.filteredDesignation[index] = [];
            this.departmentDesignationRoleMapService.getDepartmentDesignationRoleMapByDepartment(this.service[index].department.id.toString()).then(function (response) {
                if (response.length < 1) {
                    _this.notify.error("No designation found");
                }
                else {
                    for (var i = 0; i < response.length; i++) {
                        for (var j = 0; j < _this.designations.length; j++) {
                            if (response[i].designation.id == _this.designations[j].id) {
                                _this.filteredDesignation[index].push(_this.designations[j]);
                            }
                        }
                    }
                }
            });
        };
        ServiceInformation.prototype.submit = function (type, index, parentIndex) {
            var _this = this;
            if (type === 'service') {
                this.convertToJson(this.service[index]).then(function (json) {
                    if (!_this.service[index].id) {
                        _this.create(type, json, index);
                    }
                    else {
                        _this.update(type, json, index);
                    }
                });
            }
            else if (type === 'serviceDetails') {
                if (this.validateServiceDetailForm(index, parentIndex)) {
                    this.notify.error("Missing period or start date");
                }
                else {
                    this.convertToJson(this.service[parentIndex].intervalDetails[index]).then(function (json) {
                        if (!_this.service[parentIndex].intervalDetails[index].id) {
                            _this.service[parentIndex].intervalDetails[index].serviceId = _this.service[parentIndex].id;
                            _this.create(type, json, index, parentIndex);
                        }
                        else {
                            _this.update(type, json, index, parentIndex);
                        }
                    });
                }
            }
        };
        ServiceInformation.prototype.validateServiceDetailForm = function (index, parentIndex) {
            return (!this.service[parentIndex].intervalDetails[index].interval || !this.service[parentIndex].intervalDetails[index].startDate);
        };
        ServiceInformation.prototype.create = function (type, json, index, parentIndex) {
            var _this = this;
            if (type === 'service') {
                this.serviceService.saveServiceInformation(json).then(function (data) {
                    _this.service[index] = data;
                    _this.enableEdit[index] = false;
                }).catch(function (reason) {
                    _this.enableEdit[index] = true;
                });
            }
            else if (type === 'serviceDetails') {
                this.serviceService.saveServiceDetailInformation(json).then(function (data) {
                    _this.service[parentIndex].intervalDetails[index] = data;
                    _this.enableServiceDetailEdit[parentIndex][index] = false;
                }).catch(function (reason) {
                    _this.enableServiceDetailEdit[parentIndex][index] = true;
                });
            }
        };
        ServiceInformation.prototype.update = function (type, json, index, parentIndex) {
            var _this = this;
            if (type === 'service') {
                this.serviceService.updateServiceInformation(json).then(function (data) {
                    _this.service[index] = data;
                    _this.enableEdit[index] = false;
                }).catch(function (reason) {
                    _this.enableEdit[index] = true;
                });
            }
            else if (type === 'serviceDetails') {
                this.serviceService.updateServiceDetailInformation(json).then(function (data) {
                    _this.service[parentIndex].intervalDetails[index] = data;
                    _this.enableServiceDetailEdit[parentIndex][index] = false;
                }).catch(function (reason) {
                    _this.enableServiceDetailEdit[parentIndex][index] = true;
                });
            }
        };
        ServiceInformation.prototype.get = function () {
            var _this = this;
            this.showLoader = true;
            this.service = [];
            this.serviceService.getServiceInformation(this.userId).then(function (serviceInformation) {
                if (serviceInformation) {
                    _this.service = serviceInformation;
                    _this.setInitialDesignation();
                    _this.initEnableEditServiceDetails();
                }
                else {
                    _this.service = [];
                }
                _this.showLoader = false;
            });
        };
        ServiceInformation.prototype.setInitialDesignation = function () {
            for (var i = 0; i < this.service.length; i++) {
                this.filterDesignationSelection(i);
            }
        };
        ServiceInformation.prototype.activeEditButton = function (type, index, canEdit, parentIndex) {
            if (type === 'service') {
                this.enableEdit[index] = canEdit;
            }
            else if (type === 'serviceDetails') {
                this.enableServiceDetailEdit[parentIndex][index] = canEdit;
            }
        };
        ServiceInformation.prototype.addNew = function (type, index) {
            if (type == "service") {
                this.addNewService();
                this.enableServiceDetailEdit.push([false]);
            }
            else if (type == "serviceDetails") {
                this.addNewServiceDetails(index);
            }
        };
        ServiceInformation.prototype.addNewServiceDetails = function (index) {
            var serviceDetailsEntry;
            serviceDetailsEntry = {
                id: "",
                interval: null,
                startDate: "",
                endDate: "",
                expirationDate: "",
                comment: "",
                serviceId: ""
            };
            this.service[index].intervalDetails.push(serviceDetailsEntry);
        };
        ServiceInformation.prototype.addNewService = function () {
            var serviceEntry;
            serviceEntry = {
                id: "",
                employeeId: this.userId,
                department: null,
                designation: null,
                employmentType: null,
                joiningDate: "",
                expirationDate: null,
                endType: null,
                endDate: "",
                joiningInterval: null,
                serviceEndInterval: this.endIntervals[0],
                intervalDetails: []
            };
            this.service.push(serviceEntry);
        };
        ServiceInformation.prototype.delete = function (type, index, parentIndex) {
            var _this = this;
            if (type === 'service') {
                if (this.service[index].id) {
                    this.serviceService.deleteServiceInformation(this.service[index].id).then(function (data) {
                        _this.service.splice(index, 1);
                    });
                }
                else {
                    this.service.splice(index, 1);
                }
            }
            else if (type === 'serviceDetails') {
                if (this.service[parentIndex].intervalDetails[index].id) {
                    this.serviceService.deleteServiceDetailInformation(this.service[parentIndex].intervalDetails[index].id).then(function (data) {
                        _this.service[parentIndex].intervalDetails.splice(index, 1);
                    });
                }
                else {
                    this.service[parentIndex].intervalDetails.splice(index, 1);
                }
            }
        };
        ServiceInformation.prototype.convertToJson = function (object) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = object;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        ServiceInformation.$inject = ['registrarConstants',
            '$q',
            'notify',
            'serviceService',
            '$stateParams',
            'departmentService',
            'designationService',
            'employeeService',
            'departmentDesignationRoleMapService'
        ];
        return ServiceInformation;
    }());
    ums.UMS.controller("ServiceInformation", ServiceInformation);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ServiceService = (function () {
        function ServiceService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.serviceUrl = "employee/service";
        }
        ServiceService.prototype.saveServiceInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.serviceUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        ServiceService.prototype.saveServiceDetailInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("employee/serviceDetail", json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Saved");
                defer.resolve(data);
            })
                .error(function (data) {
                _this.notify.error("Error in Saving");
                defer.reject(data);
            });
            return defer.promise;
        };
        ServiceService.prototype.updateServiceInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put(this.serviceUrl, json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Updated");
                defer.resolve(data);
            })
                .error(function (reason) {
                _this.notify.error("Error in Updating");
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ServiceService.prototype.updateServiceDetailInformation = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put("employee/serviceDetail", json, 'application/json')
                .success(function (data) {
                _this.notify.success("Successfully Updated");
                defer.resolve(data);
            })
                .error(function (reason) {
                _this.notify.error("Error in Updating");
                defer.reject(reason);
            });
            return defer.promise;
        };
        ServiceService.prototype.deleteServiceInformation = function (id) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.doDelete(this.serviceUrl + "/" + id)
                .success(function () {
                _this.notify.success("Delete Successful");
                defer.resolve("Delete Successful");
            })
                .error(function (reason) {
                _this.notify.error("Error in Saving");
                defer.reject(reason);
            });
            return defer.promise;
        };
        ServiceService.prototype.deleteServiceDetailInformation = function (id) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.doDelete("employee/serviceDetail" + "/" + id)
                .success(function () {
                _this.notify.success("Delete Successful");
                defer.resolve("Delete Successful");
            })
                .error(function (reason) {
                _this.notify.error("Error in Saving");
                defer.reject(reason);
            });
            return defer.promise;
        };
        ServiceService.prototype.getServiceInformation = function (employeeId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.serviceUrl + "/" + employeeId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                _this.notify.error("Error in Fetching Service Information");
            });
            return defer.promise;
        };
        ServiceService.$inject = ['HttpClient', '$q', 'notify'];
        return ServiceService;
    }());
    ums.ServiceService = ServiceService;
    ums.UMS.service("serviceService", ServiceService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var LibrarySearch = (function () {
        function LibrarySearch($q, notify, libConstants, $stateParams, httpClient, deviceDetector, userService) {
            this.$q = $q;
            this.notify = notify;
            this.libConstants = libConstants;
            this.$stateParams = $stateParams;
            this.httpClient = httpClient;
            this.deviceDetector = deviceDetector;
            this.userService = userService;
            this.isDeskTopDevice = false;
            this.showLoader = true;
            this.isDeskTopDevice = this.userService.isDesktop ? this.userService.isDesktop : this.deviceDetector.isDeskTop;
            this.recordList = Array();
            this.recordIdList = Array();
            this.data = {
                itemPerPage: 10,
                totalRecord: 0,
                materialTypeOptions: libConstants.materialTypes,
                contributorRoles: libConstants.libContributorRoles
            };
            this.pagination = {};
            this.pagination.currentPage = 1;
            this.search = {
                queryTerm: '',
                searchType: 'basic',
                itemType: Array(),
                title: '',
                author: '',
                subject: '',
                corpAuthor: '',
                publisher: '',
                yearFrom: '',
                yearTo: ''
            };
            this.search.queryTerm = "";
            this.search.searchType = "basic";
            this.choice = "any";
            this.choiceType = "Exact";
            this.prepareFilter();
            this.fetchRecords(1);
            this.search.itemType = "Book";
        }
        LibrarySearch.prototype.prepareFilter = function () {
            var filter = {};
            filter.searchType = this.search.searchType;
            if (this.search.searchType == 'basic') {
                filter.basicQueryField = this.choice;
                filter.basicQueryTerm = this.search.queryTerm;
                if (this.choiceType == "Exact") {
                }
                else if (this.choiceType == "Likely") {
                    filter.basicQueryTerm = this.search.queryTerm ? "*" + this.search.queryTerm + "*" : this.search.queryTerm;
                }
            }
            else if (this.search.searchType == 'advanced_search') {
                filter.advancedSearchFilter = [];
                var advanceSearchMap1 = {};
                advanceSearchMap1.key = 'materialType_s';
                advanceSearchMap1.value = this.search.itemType;
                filter.advancedSearchFilter.push(advanceSearchMap1);
                if (this.search.title) {
                    var advanceSearchMap2 = {};
                    advanceSearchMap2.key = 'title_t';
                    advanceSearchMap2.value = "*" + this.search.title + "*";
                    filter.advancedSearchFilter.push(advanceSearchMap2);
                }
                if (this.search.author) {
                    var advanceSearchMap3 = {};
                    advanceSearchMap3.key = 'contributors_txt';
                    advanceSearchMap3.value = "*" + this.search.author + "*";
                    filter.advancedSearchFilter.push(advanceSearchMap3);
                }
                if (this.search.subject) {
                    var advanceSearchMap4 = {};
                    advanceSearchMap4.key = 'subjects_txt';
                    advanceSearchMap4.value = "*" + this.search.subject + "*";
                    filter.advancedSearchFilter.push(advanceSearchMap4);
                }
                if (this.search.corpAuthor) {
                    var advanceSearchMap5 = {};
                    advanceSearchMap5.key = 'corpAuthorMain_s';
                    advanceSearchMap5.value = "*" + this.search.corpAuthor + "*";
                    filter.advancedSearchFilter.push(advanceSearchMap5);
                }
                if (this.search.publisher) {
                    var advanceSearchMap6 = {};
                    advanceSearchMap6.key = 'publisher_txt';
                    advanceSearchMap6.value = "*" + this.search.publisher + "*";
                    filter.advancedSearchFilter.push(advanceSearchMap6);
                }
                if (this.search.yearFrom && this.search.yearTo) {
                    var advanceSearchMap7 = {};
                    advanceSearchMap7.key = 'yearOfPublication_i';
                    advanceSearchMap7.value = "[" + this.search.yearFrom + " TO " + this.search.yearTo + "]";
                    filter.advancedSearchFilter.push(advanceSearchMap7);
                }
            }
            this.search.filter = filter;
            // localStorage["lms_search_filter"] = JSON.stringify(filter);
        };
        LibrarySearch.prototype.doSearch = function () {
            this.prepareFilter();
            this.fetchRecords(1);
        };
        LibrarySearch.prototype.pageChanged = function (pageNumber) {
            this.fetchRecords(pageNumber);
        };
        LibrarySearch.prototype.fetchRecords = function (pageNumber) {
            var _this = this;
            this.showLoader = true;
            this.getRecords(pageNumber, this.data.itemPerPage, "", this.search.filter).then(function (response) {
                _this.recordIdList = Array();
                _this.recordList = response.entries;
                _this.data.totalRecord = response.total;
                _this.prepareRecord();
                for (var i = 0; i < _this.recordList.length; i++) {
                    _this.recordIdList.push(_this.recordList[i].mfnNo);
                }
                localStorage["lms_records"] = JSON.stringify(_this.recordIdList);
                localStorage["lms_current_index"] = 0;
                localStorage["lms_total_record"] = response.total;
                localStorage["lms_page"] = pageNumber;
                localStorage["lms_search_type"] = _this.choiceType;
                _this.showLoader = false;
            }, function errorCallback(response) {
                this.notify.error(response);
            });
        };
        LibrarySearch.prototype.getRecords = function (page, itemPerPage, orderBy, filter) {
            var defer = this.$q.defer();
            var tPage = page - 1;
            var resourceUrl = "/ums-webservice-library/record/all/ipp/" + itemPerPage + "/page/" + tPage + "/order/3?filter=" + encodeURIComponent(JSON.stringify(filter));
            this.httpClient.get(resourceUrl, 'application/json', function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        LibrarySearch.prototype.navigateRecord = function (operation, mfnNo, pageNumber, currentIndex) {
            localStorage["lms_page"] = pageNumber;
            localStorage["lms_current_index"] = currentIndex;
            window.location.href = "#/cataloging/" + operation + "/record/" + mfnNo;
        };
        LibrarySearch.prototype.recordDetails = function (recordIndex) {
            this.record = {};
            this.record = this.recordList[recordIndex];
        };
        LibrarySearch.prototype.prepareRecord = function () {
            for (var index = 0; index < this.recordList.length; index++) {
                this.recordList[index].subjectList = Array();
                this.recordList[index].noteList = Array();
                var noteJsonStringObj = $.parseJSON(this.recordList[index].noteJsonString);
                if (noteJsonStringObj != null) {
                    for (var i = 0; i < noteJsonStringObj.length; i++) {
                        var note = { viewOrder: noteJsonStringObj[i].viewOrder, note: noteJsonStringObj[i].note };
                        this.recordList[index].noteList.push(note);
                    }
                }
                var subjectJsonStringObj = $.parseJSON(this.recordList[index].subjectJsonString);
                if (subjectJsonStringObj != null) {
                    for (var i = 0; i < subjectJsonStringObj.length; i++) {
                        var subject = {
                            viewOrder: subjectJsonStringObj[i].viewOrder,
                            subject: subjectJsonStringObj[i].subject
                        };
                        this.recordList[index].subjectList.push(subject);
                    }
                }
                var physicalDescriptionStringObj = $.parseJSON(this.recordList[index].physicalDescriptionString);
                if (physicalDescriptionStringObj != null) {
                    this.recordList[index].physicalDescription = {
                        pagination: physicalDescriptionStringObj.pagination,
                        illustrations: physicalDescriptionStringObj.illustrations,
                        accompanyingMaterials: physicalDescriptionStringObj.accompanyingMaterials,
                        dimensions: physicalDescriptionStringObj.dimensions
                    };
                }
            }
        };
        LibrarySearch.$inject = [
            '$q',
            'notify',
            'libConstants',
            '$stateParams',
            'HttpClient',
            'deviceDetector',
            'userService'
        ];
        return LibrarySearch;
    }());
    ums.LibrarySearch = LibrarySearch;
    ums.UMS.controller("LibrarySearch", LibrarySearch);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var EmployeeSearch = (function () {
        function EmployeeSearch(appConstants, registrarConstants, $q, notify, departmentService, designationService, employeeService, employeeSearchService, $state) {
            this.appConstants = appConstants;
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.departmentService = departmentService;
            this.designationService = designationService;
            this.employeeService = employeeService;
            this.employeeSearchService = employeeSearchService;
            this.$state = $state;
            this.searchByEmployeeId = "";
            this.searchByEmployeeName = "";
            this.searchByEmployeeStatus = {};
            this.searchByEmployeeType = {};
            this.searchByEmploymentType = {};
            this.employees = [];
            this.departments = [];
            this.designations = [];
            this.indexValue = 0;
            this.currentPageNumber = 1;
            this.itemsPerPage = 10;
            this.enablePreviousButton = false;
            this.enableNextButton = false;
            this.statuses = [];
            this.empTypes = [];
            this.employmentTypes = [];
            this.filterd = [];
            this.showLoader = true;
            this.showTableLoader = true;
            this.tempEmployeess = [];
            this.state = $state;
            this.init();
        }
        EmployeeSearch.prototype.init = function () {
            this.showLoader = true;
            this.statuses = this.registrarConstants.empStatus;
            this.empTypes = this.appConstants.employeeTypes;
            this.employmentTypes = this.registrarConstants.employmentTypes;
            console.log(this.employmentTypes);
            this.getEmployees();
            this.getDepartments();
            this.getDesignations();
            this.showLoader = false;
        };
        EmployeeSearch.prototype.getDesignations = function () {
            var _this = this;
            this.designationService.getAll().then(function (designations) {
                _this.designations = designations;
            });
        };
        EmployeeSearch.prototype.getDepartments = function () {
            var _this = this;
            this.departmentService.getAll().then(function (departments) {
                _this.departments = departments;
            });
        };
        EmployeeSearch.prototype.getEmployees = function () {
            var _this = this;
            this.showTableLoader = true;
            this.employeeService.getAllWithLessResource().then(function (data) {
                _this.employees = data;
                _this.tempEmployeess = angular.copy(data);
                if (_this.searchByEmployeeStatus)
                    _this.filterEmployees();
                _this.showTableLoader = false;
            });
        };
        EmployeeSearch.prototype.filterEmployees = function () {
            var _this = this;
            console.log('In the filter employees');
            this.employees = [];
            if (this.searchByEmployeeStatus) {
                if (this.searchByEmployeeStatus.name === 'Active') {
                    this.employees = [];
                    this.tempEmployeess.forEach(function (e) {
                        if (e.statusName === 'Active')
                            _this.employees.push(angular.copy(e));
                    });
                }
                else {
                    this.employees = angular.copy(this.tempEmployeess);
                }
            }
            else {
                this.employees = [];
                this.employees = angular.copy(this.tempEmployeess);
            }
        };
        EmployeeSearch.prototype.view = function (index) {
            this.employee = {};
            this.indexValue = index;
            this.employee = this.filterd[index];
            this.checkPreviousAndNextButtons();
            this.state.go("employeeSearch.employeeProfile", { id: this.employee.id });
        };
        EmployeeSearch.prototype.checkPreviousAndNextButtons = function () {
            this.enablePreviousButton = this.indexValue > 0;
            this.enableNextButton = this.indexValue < this.filterd.length - 1;
        };
        EmployeeSearch.prototype.previous = function () {
            this.indexValue = this.indexValue - 1;
            this.currentPageNumber = (this.indexValue + 1) % this.itemsPerPage == 0 ? this.currentPageNumber - 1 : this.currentPageNumber;
            this.view(this.indexValue);
        };
        EmployeeSearch.prototype.next = function () {
            this.indexValue = this.indexValue + 1;
            this.currentPageNumber = this.indexValue % this.itemsPerPage == 0 ? this.currentPageNumber + 1 : this.currentPageNumber;
            this.view(this.indexValue);
        };
        EmployeeSearch.$inject = [
            'appConstants',
            'registrarConstants',
            '$q',
            'notify',
            'departmentService',
            'designationService',
            'employeeService',
            'employeeSearchService',
            '$state'
        ];
        return EmployeeSearch;
    }());
    ums.UMS.controller("EmployeeSearch", EmployeeSearch);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var EmployeeSearchService = (function () {
        function EmployeeSearchService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        EmployeeSearchService.prototype.getEmployeeCV = function (employeeId) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "CV of " + employeeId;
            this.httpClient.get("employee/report/cv/employeeId/" + employeeId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        EmployeeSearchService.prototype.getEmployeeListPdf = function (deptList, employeeTypeList, choice, statusList, employmentTypeList) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "List of Employees";
            this.httpClient.get("academic/employee/report/employee/list/deptList/" + deptList + "/empTypeList/" + employeeTypeList + "/choice/" + choice + "/status/" + statusList + "/employmentType/" + employmentTypeList, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        EmployeeSearchService.prototype.getEmployeeListExcel = function (deptList, employeeTypeList, choice, statusList, employmentTypeList) {
            var contentType = ums.UmsUtil.getFileContentType("xls");
            var fileName = "List of Employees";
            this.httpClient.get("academic/employee/report/excel/employee/list/deptList/" + deptList + "/empTypeList/" + employeeTypeList + "/choice/" + choice + "/status/" + statusList + "/employmentType/" + employmentTypeList, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        EmployeeSearchService.prototype.getEmployeeListForAddressPdf = function (deptList, employeeTypeList, choice, statusList, employmentTypeList) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "List of Employees For Addresses";
            this.httpClient.get("academic/employee/report/employee/address/deptList/" + deptList + "/empTypeList/" + employeeTypeList + "/choice/" + choice + "/status/" + statusList + "/employmentType/" + employmentTypeList, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        EmployeeSearchService.prototype.getEmployeeListForJoiningDatePdf = function (deptList, employeeTypeList, choice, statusList, employmentTypeList) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "List of Employees For Joining Date";
            this.httpClient.get("academic/employee/report/employee/joiningDate/deptList/" + deptList + "/empTypeList/" + employeeTypeList + "/choice/" + choice + "/status/" + statusList + "/employmentType/" + employmentTypeList, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        EmployeeSearchService.$inject = ['HttpClient', '$q', 'notify'];
        return EmployeeSearchService;
    }());
    ums.EmployeeSearchService = EmployeeSearchService;
    ums.UMS.service("employeeSearchService", EmployeeSearchService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AttachmentSettingService = (function () {
        function AttachmentSettingService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        AttachmentSettingService.prototype.get = function (id) {
            var _this = this;
            var url = "attachment/setting/";
            var defer = this.$q.defer();
            this.httpClient.get(url + id, 'application/json', function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                _this.notify.error("Error while getting attachment settings");
                console.error(response);
            });
            return defer.promise;
        };
        AttachmentSettingService.$inject = ['HttpClient', '$q', 'notify'];
        return AttachmentSettingService;
    }());
    ums.AttachmentSettingService = AttachmentSettingService;
    ums.UMS.service("attachmentSettingService", AttachmentSettingService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Resolution = (function () {
        function Resolution(registrarConstants, $q, notify, committeesService, scheduleService, resolutionService, FileUpload, attachmentSettingService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.committeesService = committeesService;
            this.scheduleService = scheduleService;
            this.resolutionService = resolutionService;
            this.FileUpload = FileUpload;
            this.attachmentSettingService = attachmentSettingService;
            this.committees = [];
            this.agendaResolutionStatus = [];
            this.loader = true;
            this.innerLoader = true;
            this.minutesIsSubmit = false;
            this.schedule = [];
            this.agendaResolution = [];
            this.init();
            this.getAttachmentSetting(ums.Utils.ATTACHMENT_TYPE_FOR_MEETING_MODULE);
        }
        Resolution.prototype.prepareEditor = function () {
            this.setAgendaResolutionStatus = this.registrarConstants.agendaResolutionStatus;
            CKEDITOR.replace('editorForResolution');
            CKEDITOR.instances['editorForResolution'].setData("");
            CKEDITOR.replace('editorForDiscussion');
            CKEDITOR.instances['editorForDiscussion'].setData("");
        };
        Resolution.prototype.getAttachmentSetting = function (id) {
            var _this = this;
            this.attachmentSettingService.get(id).then(function (response) {
                _this.attachmentSetting = response;
            });
        };
        Resolution.prototype.downloadAttachment = function (attachment) {
            this.FileUpload.downloadFile(attachment);
        };
        Resolution.prototype.init = function () {
            this.prepareEditor();
            this.getAll();
            this.clearAgendaResolutionModel();
            this.clearAgendaResolutionDetailsModel();
            this.clearEditors();
        };
        Resolution.prototype.prepareToEdit = function (pIndex) {
            $('html, body').animate({ scrollTop: '0px' }, 0);
            this.clearAgendaResolutionModel();
            this.setAgendaResolutionModel = angular.copy(this.getListOfAgendaResolution[pIndex]);
            this.setEditorValues();
        };
        Resolution.prototype.setEditorValues = function () {
            CKEDITOR.instances['editorForResolution'].setData(this.agendaResolutionModel.resolution);
            CKEDITOR.instances['editorForDiscussion'].setData(this.agendaResolutionModel.discussion);
        };
        Resolution.prototype.getHoldAgendaList = function () {
            var _this = this;
            this.resolutionService.getAgendaResolutionByStatus(this.getAgendaResolutionStatus[1].id).then(function (result) {
                _this.agendaInHoldList = result;
            });
        };
        Resolution.prototype.getSchedules = function () {
            var _this = this;
            var committee = this.getCurrentItem;
            this.scheduleService.getSchedule(committee.id).then(function (response) {
                _this.setListOfSchedule = response;
                _this.setCurrentSchedule = response[0];
                _this.get();
            });
        };
        Resolution.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.committeesService.fetchAll().then(function (result) {
                _this.setListOfCommittees = result;
                _this.setLoaderStatus = false;
                _this.setCurrentItem = result[0];
                _this.getSchedules();
            });
        };
        Resolution.prototype.get = function () {
            var _this = this;
            this.setInnerLoaderStatus = true;
            var committee = this.getCurrentItem;
            var schedule = this.getCurrentSchedule;
            if (schedule.minuteFlag == 0) {
                this.minutesIsSubmit = false;
            }
            else {
                this.minutesIsSubmit = true;
            }
            if (committee && schedule) {
                this.resolutionService.getAgendaResolution(committee.id, schedule.id).then(function (response) {
                    _this.setListOfAgendaResolution = response;
                    _this.setInnerLoaderStatus = false;
                    _this.setDefaultValues();
                });
            }
            else {
                this.setListOfAgendaResolution = [];
                this.setInnerLoaderStatus = false;
            }
        };
        Resolution.prototype.clearAgendaResolutionModel = function () {
            this.setAgendaResolutionModel = this.initAgendaResolutionModel();
        };
        Resolution.prototype.clearEditors = function () {
            var defer = this.$q.defer();
            CKEDITOR.instances['editorForResolution'].setData("");
            CKEDITOR.instances['editorForDiscussion'].setData("");
        };
        Resolution.prototype.clearAgendaResolutionDetailsModel = function () {
            this.setAgendaResolutionDetailsModel = this.initAgendaResolutionModel();
        };
        Resolution.prototype.initAgendaResolutionModel = function () {
            var agendaResolution = {};
            agendaResolution.id = "";
            agendaResolution.agendaNo = "";
            agendaResolution.agenda = "";
            agendaResolution.plainTextAgenda = "";
            agendaResolution.discussion = "";
            agendaResolution.plainTextDiscussion = "";
            agendaResolution.resolution = "";
            agendaResolution.plainTextResolution = "";
            agendaResolution.viewOrder = null;
            agendaResolution.schedule = null;
            agendaResolution.committee = null;
            agendaResolution.status = this.getAgendaResolutionStatus[0];
            agendaResolution.createdBy = "";
            agendaResolution.createdOn = "";
            agendaResolution.updatedBy = "";
            agendaResolution.updatedOn = "";
            agendaResolution.lastModified = "";
            return agendaResolution;
        };
        Resolution.prototype.setDefaultValues = function () {
            this.agendaResolutionModel.committee = this.getCurrentItem;
            this.agendaResolutionModel.schedule = this.getCurrentSchedule;
        };
        Resolution.prototype.submit = function (form) {
            if (this.getAgendaResolutionModel.id == "") {
                this.create(form);
            }
            else {
                this.edit(form);
            }
        };
        Resolution.prototype.create = function (form) {
            var _this = this;
            this.getEditorValueToModel().then(function () {
                _this.toJson(_this.getAgendaResolutionModel).then(function (json) {
                    _this.resolutionService.create(json).then(function (response) {
                        if (response === ums.Utils.SUCCESS) {
                            _this.notify.success(ums.Utils.SUCCESS);
                            _this.get();
                            _this.clearAgendaResolutionModel();
                            _this.clearEditors();
                            _this.resetForm(form);
                        }
                        else {
                            _this.notify.error(ums.Utils.ERROR);
                        }
                    });
                });
            });
        };
        Resolution.prototype.upload = function (index, ar) {
            this.FileUpload.uploadAttachment("files" + index, ar.id, ums.Utils.ATTACHMENT_TYPE_FOR_MEETING_MODULE, this.getCurrentItem.name + "/" + this.getCurrentSchedule.serialNo);
        };
        Resolution.prototype.getEditorValueToModel = function () {
            var defer = this.$q.defer();
            this.agendaResolutionModel.resolution = CKEDITOR.instances['editorForResolution'].getData();
            this.agendaResolutionModel.discussion = CKEDITOR.instances['editorForDiscussion'].getData();
            defer.resolve("Success");
            return defer.promise;
        };
        Resolution.prototype.edit = function (form) {
            var _this = this;
            this.getEditorValueToModel().then(function () {
                _this.toJson(_this.getAgendaResolutionModel).then(function (json) {
                    _this.resolutionService.revise(json).then(function (response) {
                        if (response === ums.Utils.SUCCESS) {
                            _this.notify.success(ums.Utils.SUCCESS);
                            _this.get();
                            _this.clearAgendaResolutionModel();
                            _this.clearEditors();
                            _this.resetForm(form);
                        }
                        else {
                            _this.notify.error(ums.Utils.ERROR);
                        }
                    });
                });
            });
        };
        Resolution.prototype.details = function (pIndex) {
            this.clearAgendaResolutionDetailsModel();
            this.setAgendaResolutionDetailsModel = angular.copy(this.getListOfAgendaResolution[pIndex]);
        };
        Resolution.prototype.resetForm = function (form) {
            form.$setPristine();
        };
        Resolution.prototype.setItem = function (pItem) {
            this.setCurrentItem = pItem;
        };
        Object.defineProperty(Resolution.prototype, "setAgendaResolutionDetailsModel", {
            set: function (pVal) {
                this.agendaResolutionDetailsModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getAgendaResolutionDetailsModel", {
            get: function () {
                return this.agendaResolutionDetailsModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "setHoldAgendaModel", {
            set: function (pVal) {
                this.agendaInHoldModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getHoldAgendaModel", {
            get: function () {
                return this.agendaInHoldModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "setAgendaResolutionModel", {
            set: function (pVal) {
                this.agendaResolutionModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getAgendaResolutionModel", {
            get: function () {
                return this.agendaResolutionModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "setLoaderStatus", {
            set: function (pLoaderStatus) {
                this.loader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "setInnerLoaderStatus", {
            set: function (pLoaderStatus) {
                this.innerLoader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getInnerLoaderStatus", {
            get: function () {
                return this.innerLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "setListOfCommittees", {
            set: function (pList) {
                this.committees = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getListOfCommittees", {
            get: function () {
                return this.committees;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "setListOfSchedule", {
            set: function (pList) {
                this.schedule = [];
                this.schedule = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getListOfSchedule", {
            get: function () {
                return this.schedule;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "setListOfAgendaResolution", {
            set: function (pList) {
                this.agendaResolution = [];
                this.agendaResolution = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getListOfAgendaResolution", {
            get: function () {
                return this.agendaResolution;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "setCurrentItem", {
            set: function (pItem) {
                this.currentItem = {};
                this.currentItem = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getCurrentItem", {
            get: function () {
                return this.currentItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "setCurrentSchedule", {
            set: function (pItem) {
                this.currentSchedule = {};
                this.currentSchedule = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getCurrentSchedule", {
            get: function () {
                return this.currentSchedule;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "getAgendaResolutionStatus", {
            get: function () {
                return this.agendaResolutionStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Resolution.prototype, "setAgendaResolutionStatus", {
            set: function (value) {
                this.agendaResolutionStatus = value;
            },
            enumerable: true,
            configurable: true
        });
        Resolution.prototype.toJson = function (obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        Resolution.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'committeesService',
            'scheduleService',
            'resolutionService',
            'FileUpload',
            'attachmentSettingService'
        ];
        return Resolution;
    }());
    ums.UMS.controller("Resolution", Resolution);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ResolutionService = (function () {
        function ResolutionService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        ResolutionService.prototype.revise = function (json) {
            console.log("Agenda Resolution Data=", json);
            var defer = this.$q.defer();
            this.httpClient.put("meeting/agendaResolution", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ResolutionService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("meeting/agendaResolution", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ResolutionService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agendaResolution/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ResolutionService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agendaResolution" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ResolutionService.prototype.getAgendaResolution = function (pCommitteeId, pScheduleId) {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agendaResolution/committeeId/" + pCommitteeId + "/scheduleId/" + pScheduleId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ResolutionService.prototype.getAgendaResolutionByStatus = function (pStatus) {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agendaResolution/status/" + pStatus, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ResolutionService.$inject = ['HttpClient', '$q', 'notify'];
        return ResolutionService;
    }());
    ums.ResolutionService = ResolutionService;
    ums.UMS.service("resolutionService", ResolutionService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Schedule = (function () {
        function Schedule(registrarConstants, $q, notify, committeesService, scheduleService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.committeesService = committeesService;
            this.scheduleService = scheduleService;
            this.committees = [];
            this.loader = true;
            this.innerLoader = true;
            this.schedule = [];
            this.init();
        }
        Schedule.prototype.init = function () {
            this.getAll();
            this.clearScheduleCreateModel();
            this.clearScheduleEditModel();
            this.clearScheduleDetailsModel();
        };
        Schedule.prototype.prepareToEdit = function (pIndex) {
            this.clearScheduleEditModel();
            this.setScheduleEditModel = angular.copy(this.getListOfSchedule[pIndex]);
        };
        Schedule.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.committeesService.fetchAll().then(function (result) {
                _this.setListOfCommittees = result;
                _this.setLoaderStatus = false;
                _this.setCurrentItem = result[0];
                _this.get();
            });
        };
        Schedule.prototype.get = function () {
            var _this = this;
            this.setInnerLoaderStatus = true;
            var committee = this.getCurrentItem;
            this.scheduleService.getSchedule(committee.id).then(function (response) {
                _this.setListOfSchedule = response;
                _this.convertMeetingToMeetingTimeObject();
                _this.setInnerLoaderStatus = false;
            });
        };
        Schedule.prototype.convertMeetingToMeetingTimeObject = function () {
            for (var i = 0; i < this.getListOfSchedule.length; i++) {
                this.getListOfSchedule[i].meetingTimeObj = moment(this.getListOfSchedule[i].meetingTime, "hh:mm A");
            }
        };
        Schedule.prototype.setViewOrder = function () {
            this.scheduleCreateModel.serialNo = this.getListOfSchedule.length + 1;
        };
        Schedule.prototype.clearScheduleCreateModel = function () {
            this.setScheduleCreateModel = this.initScheduleModel();
        };
        Schedule.prototype.clearScheduleEditModel = function () {
            this.setScheduleEditModel = this.initScheduleModel();
        };
        Schedule.prototype.clearScheduleDetailsModel = function () {
            this.setScheduleDetailsModel = this.initScheduleModel();
        };
        Schedule.prototype.initScheduleModel = function () {
            var schedule = {};
            schedule.id = "";
            schedule.serialNo = null;
            schedule.meetingTitle = "";
            schedule.meetingDescription = "";
            schedule.referenceNo = "";
            schedule.meetingDate = "";
            schedule.meetingTime = "";
            schedule.meetingTimeObj = null;
            schedule.location = "";
            schedule.committee = null;
            schedule.createdBy = "";
            schedule.createdOn = "";
            schedule.updatedBy = "";
            schedule.updatedOn = "";
            schedule.lastModified = "";
            schedule.minuteFlag = 0;
            return schedule;
        };
        Schedule.prototype.setDefaultValues = function (type, index) {
            if (type === "create") {
                this.scheduleCreateModel.committee = this.getCurrentItem;
            }
            else {
                this.scheduleEditModel.committee = this.getCurrentItem;
                this.assignCommitteeManually();
            }
        };
        Schedule.prototype.assignCommitteeManually = function () {
            for (var i = 0; i < this.committees.length; i++) {
                if (this.scheduleEditModel.committee.id === this.committees[i].id) {
                    this.scheduleEditModel.committee = angular.copy(this.committees[i]);
                }
            }
        };
        Schedule.prototype.convertMeetingTimeObjectToMeetingTimeString = function (type) {
            var defer = this.$q.defer();
            if (type === "create") {
                this.getScheduleCreateModel.meetingTime = moment(this.getScheduleCreateModel.meetingTimeObj).format("HH:mm");
            }
            else {
                this.getScheduleEditModel.meetingTime = moment(this.getScheduleEditModel.meetingTimeObj).format("HH:mm");
            }
            defer.resolve("Success");
            return defer.promise;
        };
        Schedule.prototype.create = function (form) {
            var _this = this;
            this.convertMeetingTimeObjectToMeetingTimeString("create").then(function () {
                _this.toJson(_this.getScheduleCreateModel).then(function (json) {
                    _this.scheduleService.create(json).then(function (response) {
                        if (response === ums.Utils.SUCCESS) {
                            _this.notify.success(ums.Utils.SUCCESS);
                            _this.get();
                            _this.clearScheduleCreateModel();
                            _this.resetForm(form);
                        }
                        else {
                            _this.notify.error(ums.Utils.ERROR);
                        }
                    });
                });
            });
        };
        Schedule.prototype.edit = function (form) {
            var _this = this;
            this.convertMeetingTimeObjectToMeetingTimeString("edit").then(function () {
                _this.toJson(_this.getScheduleEditModel).then(function (json) {
                    _this.scheduleService.revise(json).then(function (response) {
                        if (response === ums.Utils.SUCCESS) {
                            _this.notify.success(ums.Utils.SUCCESS);
                            _this.get();
                            _this.clearScheduleEditModel();
                            _this.resetForm(form);
                        }
                        else {
                            _this.notify.error(ums.Utils.ERROR);
                        }
                    });
                });
            });
        };
        Schedule.prototype.details = function (pIndex) {
            this.clearScheduleDetailsModel();
            this.setScheduleDetailsModel = angular.copy(this.getListOfSchedule[pIndex]);
        };
        Schedule.prototype.resetForm = function (form) {
            form.$setPristine();
        };
        Schedule.prototype.setItem = function (pItem) {
            this.setCurrentItem = pItem;
        };
        Object.defineProperty(Schedule.prototype, "setScheduleEditModel", {
            set: function (pVal) {
                this.scheduleEditModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "getScheduleEditModel", {
            get: function () {
                return this.scheduleEditModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "setScheduleDetailsModel", {
            set: function (pVal) {
                this.scheduleDetailsModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "getScheduleDetailsModel", {
            get: function () {
                return this.scheduleDetailsModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "setScheduleCreateModel", {
            set: function (pVal) {
                this.scheduleCreateModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "getScheduleCreateModel", {
            get: function () {
                return this.scheduleCreateModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "setLoaderStatus", {
            set: function (pLoaderStatus) {
                this.loader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "setInnerLoaderStatus", {
            set: function (pLoaderStatus) {
                this.innerLoader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "getInnerLoaderStatus", {
            get: function () {
                return this.innerLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "setListOfCommittees", {
            set: function (pList) {
                this.committees = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "getListOfCommittees", {
            get: function () {
                return this.committees;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "setListOfSchedule", {
            set: function (pList) {
                this.schedule = [];
                this.schedule = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "getListOfSchedule", {
            get: function () {
                return this.schedule;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "setCurrentItem", {
            set: function (pItem) {
                this.currentItem = {};
                this.currentItem = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Schedule.prototype, "getCurrentItem", {
            get: function () {
                return this.currentItem;
            },
            enumerable: true,
            configurable: true
        });
        Schedule.prototype.toJson = function (obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        Schedule.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'committeesService',
            'scheduleService'
        ];
        return Schedule;
    }());
    ums.UMS.controller("Schedule", Schedule);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ScheduleService = (function () {
        function ScheduleService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        ScheduleService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("meeting/schedule", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ScheduleService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("meeting/schedule", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ScheduleService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/schedule/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ScheduleService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/schedule" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ScheduleService.prototype.getSchedule = function (pCommitteeId) {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/schedule/committeeId/" + pCommitteeId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ScheduleService.$inject = ['HttpClient', '$q', 'notify'];
        return ScheduleService;
    }());
    ums.ScheduleService = ScheduleService;
    ums.UMS.service("scheduleService", ScheduleService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var InviteMemberService = (function () {
        function InviteMemberService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        InviteMemberService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("inviteMember", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        InviteMemberService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("inviteMember", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        InviteMemberService.prototype.batchMemberInvitationCreate = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("inviteMember/batch/members", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        InviteMemberService.prototype.batchGuestInvitationCreate = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("inviteMember/batch/guests", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        InviteMemberService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("inviteMember/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        InviteMemberService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("inviteMember/" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        InviteMemberService.prototype.getInviteMember = function (pCommitteeId, pScheduleId) {
            var defer = this.$q.defer();
            this.httpClient.get("inviteMember/committeeId/" + pCommitteeId + "/scheduleId/" + pScheduleId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        InviteMemberService.$inject = ['HttpClient', '$q', 'notify'];
        return InviteMemberService;
    }());
    ums.InviteMemberService = InviteMemberService;
    ums.UMS.service("inviteMemberService", InviteMemberService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var InviteMember = (function () {
        function InviteMember(registrarConstants, $q, notify, committeeService, scheduleService, membersService, inviteMemberService, guestService, agendaService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.committeeService = committeeService;
            this.scheduleService = scheduleService;
            this.membersService = membersService;
            this.inviteMemberService = inviteMemberService;
            this.guestService = guestService;
            this.agendaService = agendaService;
            this.committees = [];
            this.loader = true;
            this.innerLoader = true;
            this.schedule = [];
            this.members = [];
            this.guests = [];
            this.attendanceStatus = [];
            this.invitedMembers = [];
            this.selectedMembers = [];
            this.selectedGuests = [];
            this.invitingMembers = [];
            this.guest = {};
            this.agendaList = [];
            this.invitationTypes = [];
            this.checkAllMembers = false;
            this.checkAllGuests = false;
            this.checkAllAgendas = false;
            this.invitationTypes = this.registrarConstants.invitationType;
            this.init();
        }
        InviteMember.prototype.init = function () {
            this.getAll();
            this.setListOfAttendanceStatus = this.registrarConstants.attendanceStatus;
        };
        InviteMember.prototype.getMembers = function () {
            var _this = this;
            this.setInnerLoaderStatus = true;
            var committee = this.getCurrentItem;
            this.membersService.getMembers(committee.id).then(function (response) {
                _this.setListOfMember = response;
                _this.setInnerLoaderStatus = false;
                _this.getGuests();
            });
        };
        InviteMember.prototype.getGuests = function () {
            var _this = this;
            var schedule = this.getCurrentSchedule;
            this.guestService.getAll(schedule.id).then(function (response) {
                _this.setListOfGuests = response;
                _this.getInvitedMember();
            });
        };
        InviteMember.prototype.getSchedules = function () {
            var _this = this;
            var committee = this.getCurrentItem;
            this.scheduleService.getSchedule(committee.id).then(function (response) {
                _this.setListOfSchedule = response;
                _this.setCurrentSchedule = response[0];
                _this.getAgendas();
            });
        };
        InviteMember.prototype.getAgendas = function () {
            var _this = this;
            var committee = this.getCurrentItem;
            var schedule = this.getCurrentSchedule;
            this.agendaService.getAgendaResolution(committee.id, schedule.id).then(function (response) {
                _this.agendaList = response;
                _this.getMembers();
            });
        };
        InviteMember.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.committeeService.fetchAll().then(function (result) {
                _this.setListOfCommittees = result;
                _this.setLoaderStatus = false;
                _this.setCurrentItem = result[0];
                _this.getSchedules();
            });
        };
        InviteMember.prototype.getInvitedMember = function () {
            var _this = this;
            this.setInnerLoaderStatus = true;
            var committee = this.getCurrentItem;
            var schedule = this.getCurrentSchedule;
            if (committee && schedule) {
                this.inviteMemberService.getInviteMember(committee.id, schedule.id).then(function (response) {
                    _this.setInvitedMembers = response;
                    _this.setInnerLoaderStatus = false;
                });
            }
            else {
                this.setInvitedMembers = [];
                this.setInnerLoaderStatus = false;
            }
        };
        InviteMember.prototype.initInviteMemberModel = function () {
            var inviteMember = {};
            inviteMember.id = "";
            inviteMember.committee = null;
            inviteMember.schedule = null;
            inviteMember.memberOrGuestId = "";
            inviteMember.attendanceStatus = null;
            inviteMember.totalNumberOfNotificationSent = null;
            inviteMember.invitationType = null;
            inviteMember.createdBy = "";
            inviteMember.createdOn = "";
            inviteMember.updatedBy = "";
            inviteMember.updatedOn = "";
            inviteMember.lastModified = "";
            return inviteMember;
        };
        InviteMember.prototype.initGuestModel = function () {
            var guest = {};
            guest.id = "";
            guest.schedule = this.currentSchedule;
            guest.name = "";
            guest.phone = "";
            guest.email = "";
            guest.remarks = "";
            guest.agendas = [];
            return guest;
        };
        InviteMember.prototype.batchMembersInvitationCreate = function () {
            var _this = this;
            this.prepareDataBeforeBatchMemberInviteCreateOperation(this.selectedMembers).then(function (result) {
                _this.toJsonArray(result).then(function (json) {
                    _this.inviteMemberService.batchMemberInvitationCreate(json).then(function (response) {
                        if (response === ums.Utils.SUCCESS) {
                            _this.notify.success(ums.Utils.SUCCESS);
                            _this.getMembers();
                        }
                        else {
                            _this.notify.error(ums.Utils.ERROR);
                        }
                    });
                });
            });
        };
        InviteMember.prototype.batchGuestsInvitationCreate = function () {
            var _this = this;
            this.prepareDataBeforeBatchGuestInviteCreateOperation(this.selectedGuests).then(function (result) {
                _this.toJsonArray(result).then(function (json) {
                    _this.inviteMemberService.batchGuestInvitationCreate(json).then(function (response) {
                        if (response === ums.Utils.SUCCESS) {
                            _this.notify.success(ums.Utils.SUCCESS);
                            _this.getMembers();
                        }
                        else {
                            _this.notify.error(ums.Utils.ERROR);
                        }
                    });
                });
            });
        };
        InviteMember.prototype.update = function (member, status) {
            var _this = this;
            member.attendanceStatus = this.getListOfAttendanceStatus[status];
            this.toJson(member).then(function (json) {
                _this.inviteMemberService.revise(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.getMembers();
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        InviteMember.prototype.prepareToCreateGuest = function () {
            this.guest = this.initGuestModel();
        };
        InviteMember.prototype.addGuest = function () {
            var _this = this;
            this.toJson(this.guest).then(function (json) {
                _this.guestService.create(json).then(function (reponse) {
                    if (reponse == ums.Utils.SUCCESS) {
                        _this.notify.success("Guest created successfully");
                        _this.getGuests();
                    }
                    else {
                        _this.notify.error("Error while creating guest");
                    }
                });
            });
        };
        InviteMember.prototype.selectMembersToInvite = function (member) {
            if (member.checkedValue) {
                var index = this.selectedMembers.indexOf(member);
                if (index == -1) {
                    this.selectedMembers.push(member);
                }
            }
            else {
                var index = this.selectedMembers.indexOf(member);
                if (index >= 0) {
                    this.selectedMembers.splice(index, 1);
                }
            }
            this.checkAllMembers = this.selectedMembers.length === this.members.length;
        };
        InviteMember.prototype.selectAllMembersToInvite = function () {
            var _this = this;
            this.selectedMembers = [];
            this.members.forEach(function (val, i) {
                _this.members[i].checkedValue = _this.checkAllMembers;
                if (_this.checkAllMembers)
                    _this.selectedMembers.push(val);
            });
        };
        InviteMember.prototype.selectedAgenda = function (agenda) {
            if (agenda.checkValue) {
                var index = this.guest.agendas.indexOf(agenda);
                if (index == -1) {
                    this.guest.agendas.push(agenda);
                }
            }
            else {
                var index = this.guest.agendas.indexOf(agenda);
                if (index >= 0) {
                    this.guest.agendas.splice(index, 1);
                }
            }
            this.checkAllAgendas = this.guest.agendas.length === this.agendaList.length;
        };
        InviteMember.prototype.selectAllAgendas = function () {
            var _this = this;
            this.guest.agendas = [];
            this.agendaList.forEach(function (val, i) {
                _this.agendaList[i].checkValue = _this.checkAllAgendas;
                if (_this.checkAllAgendas)
                    _this.guest.agendas.push(val);
            });
        };
        InviteMember.prototype.selectGuestsToInvite = function (guest) {
            if (guest.checkedValue) {
                var index = this.selectedGuests.indexOf(guest);
                if (index == -1) {
                    this.selectedGuests.push(guest);
                }
            }
            else {
                var index = this.selectedGuests.indexOf(guest);
                if (index >= 0) {
                    this.selectedGuests.splice(index, 1);
                }
            }
            this.checkAllGuests = this.selectedGuests.length === this.guests.length;
        };
        InviteMember.prototype.selectAllGuestsToInvite = function () {
            var _this = this;
            this.selectedGuests = [];
            this.guests.forEach(function (val, i) {
                _this.guests[i].checkedValue = _this.checkAllGuests;
                if (_this.checkAllGuests)
                    _this.selectedGuests.push(val);
            });
        };
        InviteMember.prototype.prepareDataBeforeBatchMemberInviteCreateOperation = function (m) {
            var defer = this.$q.defer();
            this.invitingMembers = [];
            for (var i = 0; i < m.length; i++) {
                var im = {};
                im.id = "";
                im.committee = this.getCurrentItem;
                im.schedule = this.getCurrentSchedule;
                im.memberOrGuestId = m[i].id;
                im.attendanceStatus = this.getListOfAttendanceStatus[0];
                im.totalNumberOfNotificationSent = 0;
                im.invitationType = this.invitationTypes[0];
                im.createdBy = "";
                im.createdOn = "";
                im.updatedBy = "";
                im.updatedOn = "";
                im.lastModified = "";
                this.invitingMembers.push(im);
            }
            defer.resolve(this.invitingMembers);
            return defer.promise;
        };
        InviteMember.prototype.prepareDataBeforeBatchGuestInviteCreateOperation = function (m) {
            var defer = this.$q.defer();
            this.invitingMembers = [];
            for (var i = 0; i < m.length; i++) {
                var im = {};
                im.id = "";
                im.committee = this.getCurrentItem;
                im.schedule = this.getCurrentSchedule;
                im.memberOrGuestId = m[i].id;
                im.attendanceStatus = this.getListOfAttendanceStatus[0];
                im.totalNumberOfNotificationSent = 0;
                im.invitationType = this.invitationTypes[1];
                im.createdBy = "";
                im.createdOn = "";
                im.updatedBy = "";
                im.updatedOn = "";
                im.lastModified = "";
                this.invitingMembers.push(im);
            }
            defer.resolve(this.invitingMembers);
            return defer.promise;
        };
        InviteMember.prototype.resetForm = function (form) {
            form.$setPristine();
        };
        InviteMember.prototype.setItem = function (pItem) {
            this.setCurrentItem = pItem;
        };
        Object.defineProperty(InviteMember.prototype, "setCurrentSchedule", {
            set: function (pItem) {
                this.currentSchedule = {};
                this.currentSchedule = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getCurrentSchedule", {
            get: function () {
                return this.currentSchedule;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setLoaderStatus", {
            set: function (pLoaderStatus) {
                this.loader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setInnerLoaderStatus", {
            set: function (pLoaderStatus) {
                this.innerLoader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getInnerLoaderStatus", {
            get: function () {
                return this.innerLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setListOfAttendanceStatus", {
            set: function (pList) {
                this.attendanceStatus = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getListOfAttendanceStatus", {
            get: function () {
                return this.attendanceStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setListOfCommittees", {
            set: function (pList) {
                this.committees = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getListOfCommittees", {
            get: function () {
                return this.committees;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setCurrentItem", {
            set: function (pItem) {
                this.currentItem = {};
                this.currentItem = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getCurrentItem", {
            get: function () {
                return this.currentItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setListOfMember", {
            set: function (pList) {
                this.members = [];
                this.members = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getListOfMember", {
            get: function () {
                return this.members;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setListOfGuests", {
            set: function (pList) {
                this.guests = [];
                this.guests = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getListOfGuests", {
            get: function () {
                return this.guests;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setListOfSchedule", {
            set: function (pList) {
                this.schedule = [];
                this.schedule = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getListOfSchedule", {
            get: function () {
                return this.schedule;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setInvitedMembers", {
            set: function (pList) {
                this.invitedMembers = [];
                this.invitedMembers = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getInvitedMembers", {
            get: function () {
                return this.invitedMembers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setSelectedMembers", {
            set: function (pList) {
                this.selectedMembers = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getSelectedMembers", {
            get: function () {
                return this.selectedMembers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setSelectedGuests", {
            set: function (pList) {
                this.selectedGuests = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getSelectedGuests", {
            get: function () {
                return this.selectedGuests;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setInvitingMembers", {
            set: function (pList) {
                this.invitingMembers = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getInvitingMembers", {
            get: function () {
                return this.invitingMembers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setCheckAllMembers", {
            set: function (pVal) {
                this.checkAllMembers = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getCheckAllMembers", {
            get: function () {
                return this.checkAllMembers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "setCheckAllGuests", {
            set: function (pVal) {
                this.checkAllGuests = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InviteMember.prototype, "getCheckAllGuests", {
            get: function () {
                return this.checkAllGuests;
            },
            enumerable: true,
            configurable: true
        });
        InviteMember.prototype.toJson = function (obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        InviteMember.prototype.toJsonArray = function (obj) {
            var defer = this.$q.defer();
            var JsonArray = [];
            JsonArray = obj;
            defer.resolve(JsonArray);
            return defer.promise;
        };
        InviteMember.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'committeesService',
            'scheduleService',
            'membersService',
            'inviteMemberService',
            'guestService',
            'agendaService'
        ];
        return InviteMember;
    }());
    ums.UMS.controller("InviteMember", InviteMember);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var GuestService = (function () {
        function GuestService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        GuestService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("guest", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        GuestService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("guest", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        GuestService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("guest/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        GuestService.prototype.getAll = function (scheduleId) {
            var defer = this.$q.defer();
            this.httpClient.get("guest/scheduleId/" + scheduleId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        GuestService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("guest/" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        GuestService.$inject = ['HttpClient', '$q', 'notify'];
        return GuestService;
    }());
    ums.GuestService = GuestService;
    ums.UMS.service("guestService", GuestService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Minutes = (function () {
        function Minutes(registrarConstants, $q, notify, committeesService, scheduleService, agendaResolutionService, inviteMemberService, minutesService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.committeesService = committeesService;
            this.scheduleService = scheduleService;
            this.agendaResolutionService = agendaResolutionService;
            this.inviteMemberService = inviteMemberService;
            this.minutesService = minutesService;
            this.committees = [];
            this.loader = true;
            this.innerLoader = true;
            this.schedule = [];
            this.agendaResolution = [];
            this.inviteMembers = [];
            this.agendaResolutionLoader = true;
            this.inviteMemberLoader = true;
            this.agendaIsAvailable = false;
            this.inviteMemberIsAvailable = false;
            this.minutesIsSubmit = false;
            this.setListOfMeetingMinutes = [];
            this.init();
        }
        Minutes.prototype.init = function () {
            this.getAll();
        };
        Minutes.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.committeesService.fetchAll().then(function (result) {
                _this.setListOfCommittees = result;
                _this.setLoaderStatus = false;
                _this.setCurrentItem = result[0];
                _this.getSchedules();
            });
        };
        Minutes.prototype.getSchedules = function () {
            var _this = this;
            this.setInnerLoaderStatus = true;
            var committee = this.getCurrentItem;
            this.scheduleService.getSchedule(committee.id).then(function (response) {
                _this.setListOfSchedule = response;
                _this.setInnerLoaderStatus = false;
                _this.setCurrentSchedule = response[0];
                _this.get();
            });
        };
        Minutes.prototype.get = function () {
            var _this = this;
            this.setAgendaResolutionLoaderStatus = true;
            this.setInviteMemberLoaderStatus = true;
            this.setAgendaIsAvailable = false;
            this.setInviteMemberIsAvailable = false;
            var committee = this.getCurrentItem;
            var schedule = this.getCurrentSchedule;
            if (committee && schedule) {
                setTimeout(function () {
                    _this.checkMinutesIsSubmit(schedule);
                    _this.checkPdfContentAvailability(committee, schedule);
                }, 1000);
            }
            else {
                this.setAgendaResolutionLoaderStatus = false;
                this.setInviteMemberLoaderStatus = false;
            }
        };
        Minutes.prototype.checkMinutesIsSubmit = function (schedule) {
            if (schedule.minuteFlag == 0) {
                this.minutesIsSubmit = false;
            }
            else {
                this.minutesIsSubmit = true;
            }
        };
        Minutes.prototype.checkPdfContentAvailability = function (committee, schedule) {
            this.checkInvitedMembersContent(committee, schedule);
            this.checkAgendaResolutionContent(committee, schedule);
        };
        Minutes.prototype.checkAgendaResolutionContent = function (committee, schedule) {
            var _this = this;
            this.agendaResolutionService.getAgendaResolution(committee.id, schedule.id).then(function (response) {
                _this.setAgendaResolutionList = response;
                _this.setAgendaIsAvailable = _this.getAgendaResolutionList.length > 0;
                _this.setAgendaResolutionLoaderStatus = false;
            });
        };
        Minutes.prototype.checkInvitedMembersContent = function (committee, schedule) {
            var _this = this;
            this.inviteMemberService.getInviteMember(committee.id, schedule.id).then(function (response) {
                _this.setInviteMembers = response;
                _this.setInviteMemberIsAvailable = _this.getInviteMembers.length > 0;
                _this.setInviteMemberLoaderStatus = false;
            });
        };
        Minutes.prototype.getAgendaResolution = function (committee, schedule) {
            var _this = this;
            this.agendaResolutionService.getAgendaResolution(committee.id, schedule.id).then(function (response) {
                _this.setAgendaResolutionList = response;
            });
        };
        Minutes.prototype.getInviteMemberList = function (committee, schedule) {
            var _this = this;
            this.inviteMemberService.getInviteMember(committee.id, schedule.id).then(function (response) {
                _this.setInviteMembers = response;
            });
        };
        Minutes.prototype.setItem = function (pItem) {
            this.setCurrentItem = pItem;
        };
        Object.defineProperty(Minutes.prototype, "setLoaderStatus", {
            set: function (pLoaderStatus) {
                this.loader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setAgendaIsAvailable", {
            set: function (pLoaderStatus) {
                this.agendaIsAvailable = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getAgendaIsAvailable", {
            get: function () {
                return this.agendaIsAvailable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setInviteMemberIsAvailable", {
            set: function (pLoaderStatus) {
                this.inviteMemberIsAvailable = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getInviteMemberIsAvailable", {
            get: function () {
                return this.inviteMemberIsAvailable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setAgendaResolutionLoaderStatus", {
            set: function (pLoaderStatus) {
                this.agendaResolutionLoader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getAgendaResolutionLoaderStatus", {
            get: function () {
                return this.agendaResolutionLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setInviteMemberLoaderStatus", {
            set: function (pLoaderStatus) {
                this.inviteMemberLoader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getInviteMemberLoaderStatus", {
            get: function () {
                return this.inviteMemberLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setInnerLoaderStatus", {
            set: function (pLoaderStatus) {
                this.innerLoader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getInnerLoaderStatus", {
            get: function () {
                return this.innerLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setListOfCommittees", {
            set: function (pList) {
                this.committees = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getListOfCommittees", {
            get: function () {
                return this.committees;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setListOfSchedule", {
            set: function (pList) {
                this.schedule = [];
                this.schedule = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getListOfSchedule", {
            get: function () {
                return this.schedule;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setCurrentItem", {
            set: function (pItem) {
                this.currentItem = {};
                this.currentItem = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getCurrentItem", {
            get: function () {
                return this.currentItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setCurrentSchedule", {
            set: function (pItem) {
                this.currentSchedule = {};
                this.currentSchedule = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getCurrentSchedule", {
            get: function () {
                console.log("Current Schedule", JSON.stringify(this.currentSchedule));
                return this.currentSchedule;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setAgendaResolutionList", {
            set: function (pItem) {
                this.agendaResolution = [];
                this.agendaResolution = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getAgendaResolutionList", {
            get: function () {
                return this.agendaResolution;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "setInviteMembers", {
            set: function (pItem) {
                this.inviteMembers = [];
                this.inviteMembers = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Minutes.prototype, "getInviteMembers", {
            get: function () {
                return this.inviteMembers;
            },
            enumerable: true,
            configurable: true
        });
        Minutes.prototype.downloadPdf = function () {
            this.minutesService.getMeetingMinutes(this.getCurrentItem.id, this.getCurrentSchedule.id);
        };
        Minutes.prototype.submitMinutes = function () {
            this.minutesService.updateMeetingMinutesFlag(this.getCurrentSchedule.id);
        };
        Minutes.prototype.draftMeetingMinutes = function () {
            this.minutesService.getMeetingMinutes(this.getCurrentItem.id, this.getCurrentSchedule.id);
        };
        Minutes.prototype.downloadOnlyAgendaPdf = function () {
            this.minutesService.getMeetingMinutesAgendaOnly(this.getCurrentItem.id, this.getCurrentSchedule.id);
        };
        Minutes.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'committeesService',
            'scheduleService',
            'resolutionService',
            'inviteMemberService',
            'minutesService'
        ];
        return Minutes;
    }());
    ums.UMS.controller("Minutes", Minutes);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MinutesService = (function () {
        function MinutesService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        MinutesService.prototype.getMeetingMinutes = function (committeeId, scheduleId) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Meeting Minutes";
            this.httpClient.get("meeting/agendaResolution/pdf/committeeId/" + committeeId + "/scheduleId/" + scheduleId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        MinutesService.prototype.getMeetingMinutesAgendaOnly = function (committeeId, scheduleId) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Meeting Minutes";
            this.httpClient.get("meeting/agendaResolution/pdf/agendaOnly/committeeId/" + committeeId + "/scheduleId/" + scheduleId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        /*
        * @author: evana
        * @date: 29-08-2022
        * @Desc: Meeting minutes flag update.
        * */
        MinutesService.prototype.updateMeetingMinutesFlag = function (scheduleId) {
            var defer = this.$q.defer();
            this.httpClient.put("meeting/schedule/minutesFlagUpdate", scheduleId, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MinutesService.$inject = ['HttpClient', '$q', 'notify'];
        return MinutesService;
    }());
    ums.MinutesService = MinutesService;
    ums.UMS.service("minutesService", MinutesService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Committees = (function () {
        function Committees(registrarConstants, $q, notify, committeesService, userService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.committeesService = committeesService;
            this.userService = userService;
            this.committeeList = [];
            this.loader = true;
            this.committeeTypes = [];
            this.canCreate = false;
            this.setCommitteeTypes = registrarConstants.committeeTypes;
            this.getCurrentUser();
        }
        Committees.prototype.init = function () {
            this.canCreate ? this.getAll() : this.fetchAll();
            this.clearCommitteeCreateModel();
            this.clearCommitteeEditModel();
        };
        Committees.prototype.fetchAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.committeesService.fetchAll().then(function (result) {
                _this.setListOfCommittees = result;
                _this.setLoaderStatus = false;
            });
        };
        Committees.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.committeesService.getAll().then(function (result) {
                _this.setListOfCommittees = result;
                _this.setLoaderStatus = false;
            });
        };
        Committees.prototype.getCurrentUser = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (response) {
                //this.canCreate = response.roleId === 9999, 7116=director finance, 8101=secretary(BOT), 7201=Registrar, 7202=dept. registrar;
                if (response.roleId === 9999 || response.roleId === 7201 || response.roleId === 7202 || response.roleId === 7116 || response.roleId === 8101) {
                    _this.canCreate = true;
                }
                else {
                    _this.canCreate = false;
                }
                _this.init();
            });
        };
        Committees.prototype.prepareToEdit = function (pIndex) {
            this.clearCommitteeEditModel();
            this.setCommitteeEditModel = angular.copy(this.getListOfCommittees[pIndex]);
        };
        Committees.prototype.details = function (pIndex) {
            this.clearCommitteeDetailModel();
            this.setCommitteeDetailModel = angular.copy(this.getListOfCommittees[pIndex]);
        };
        Committees.prototype.edit = function (form) {
            var _this = this;
            this.toJson(this.getCommitteeEditModel).then(function (json) {
                _this.committeesService.revise(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.init();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        Committees.prototype.create = function (form) {
            var _this = this;
            this.toJson(this.getCommitteeCreateModel).then(function (json) {
                _this.committeesService.create(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.init();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        Committees.prototype.resetForm = function (form) {
            form.$setPristine();
        };
        Committees.prototype.clearCommitteeCreateModel = function () {
            this.setCommitteeCreateModel = this.initCommitteeModel();
        };
        Committees.prototype.clearCommitteeEditModel = function () {
            this.setCommitteeEditModel = this.initCommitteeModel();
        };
        Committees.prototype.clearCommitteeDetailModel = function () {
            this.setCommitteeDetailModel = this.initCommitteeModel();
        };
        Committees.prototype.initCommitteeModel = function () {
            var committee = {};
            committee.id = "";
            committee.viewOrder = null;
            committee.name = "";
            committee.startDate = "";
            committee.endDate = "";
            committee.type = null;
            committee.definition = "";
            committee.remarks = "";
            committee.createdBy = "";
            committee.createdOn = "";
            committee.updatedBy = "";
            committee.updatedOn = "";
            committee.lastModified = "";
            return committee;
        };
        Object.defineProperty(Committees.prototype, "setCommitteeTypes", {
            set: function (pVal) {
                this.committeeTypes = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "getCommitteeTypes", {
            get: function () {
                return this.committeeTypes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "setCommitteeCreateModel", {
            set: function (pVal) {
                this.committeeCreateModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "getCommitteeCreateModel", {
            get: function () {
                return this.committeeCreateModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "setCommitteeDetailModel", {
            set: function (pVal) {
                this.committeeDetailModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "getCommitteeDetailModel", {
            get: function () {
                return this.committeeDetailModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "setCommitteeEditModel", {
            set: function (pVal) {
                this.committeeEditModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "getCommitteeEditModel", {
            get: function () {
                return this.committeeEditModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "setListOfCommittees", {
            set: function (pList) {
                this.committeeList = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "getListOfCommittees", {
            get: function () {
                return this.committeeList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "setLoaderStatus", {
            set: function (pVal) {
                this.loader = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Committees.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Committees.prototype.toJson = function (obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        Committees.$inject = ['registrarConstants', '$q', 'notify', 'committeesService', 'userService'];
        return Committees;
    }());
    ums.UMS.controller("Committees", Committees);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CommitteesService = (function () {
        function CommitteesService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        CommitteesService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("committee", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        CommitteesService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("committee", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        CommitteesService.prototype.getAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("committee/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        CommitteesService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("committee/fetch/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        CommitteesService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("committee/" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        CommitteesService.$inject = ['HttpClient', '$q', 'notify'];
        return CommitteesService;
    }());
    ums.CommitteesService = CommitteesService;
    ums.UMS.service("committeesService", CommitteesService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MembersService = (function () {
        function MembersService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        MembersService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("member", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MembersService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("member", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MembersService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("member/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MembersService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("member/" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MembersService.prototype.getMembers = function (pCommitteeId) {
            var defer = this.$q.defer();
            this.httpClient.get("member/committeeId/" + pCommitteeId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MembersService.$inject = ['HttpClient', '$q', 'notify'];
        return MembersService;
    }());
    ums.MembersService = MembersService;
    ums.UMS.service("membersService", MembersService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Members = (function () {
        function Members(registrarConstants, $q, notify, committeeService, membersService, memberCreateRuleService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.committeeService = committeeService;
            this.membersService = membersService;
            this.memberCreateRuleService = memberCreateRuleService;
            this.committees = [];
            this.loader = true;
            this.innerLoader = true;
            this.activeMembers = [];
            this.inactiveMembers = [];
            this.members = [];
            this.memberCreateRules = [];
            this.memberStatues = [];
            this.filteredMember = [];
            this.init();
        }
        Members.prototype.init = function () {
            this.getAll();
            this.getMemberStatuses();
            this.clearMemberCreateModel();
            this.clearMemberEditModel();
            this.clearMemberDetailsModel();
        };
        Members.prototype.getMemberStatuses = function () {
            this.setStatuses = this.registrarConstants.committeeMemberStatus;
        };
        Members.prototype.getAllMemberCreateRules = function () {
            var _this = this;
            this.memberCreateRuleService.getMemberCreateRules(this.getCurrentItem.id).then(function (response) {
                _this.setListOfMemberCreateRule = response;
                _this.get();
            });
        };
        Members.prototype.prepareToEdit = function (member) {
            this.clearMemberEditModel();
            this.setMemberEditModel = angular.copy(member);
        };
        Members.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.committeeService.fetchAll().then(function (result) {
                _this.setListOfCommittees = result;
                _this.setLoaderStatus = false;
                _this.setCurrentItem = result[0];
                _this.getAllMemberCreateRules();
            });
        };
        Members.prototype.get = function () {
            var _this = this;
            this.setInnerLoaderStatus = true;
            var committee = this.getCurrentItem;
            this.membersService.getMembers(committee.id).then(function (response) {
                _this.setListOfMembers = response;
                _this.separateMemberListByMemberStatus();
                _this.setInnerLoaderStatus = false;
            });
        };
        Members.prototype.separateMemberListByMemberStatus = function () {
            var _this = this;
            this.setListOfActiveMembers = [];
            this.setListOfInActiveMembers = [];
            this.getListOfMembers.forEach(function (val) {
                val.status.id == _this.getStatuses[0].id ? _this.activeMembers.push(val) : _this.inactiveMembers.push(val);
            });
        };
        Members.prototype.clearMemberCreateModel = function () {
            this.setMemberCreateModel = this.initMemberModel();
        };
        Members.prototype.clearMemberEditModel = function () {
            this.setMemberEditModel = this.initMemberModel();
        };
        Members.prototype.clearMemberDetailsModel = function () {
            this.setMemberDetailsModel = this.initMemberModel();
        };
        Members.prototype.setViewOrder = function () {
            this.memberCreateModel.viewOrder = this.getListOfActiveMembers.length + 1;
        };
        Members.prototype.initMemberModel = function () {
            var member = {};
            member.id = "";
            member.viewOrder = null;
            member.committee = null;
            member.memberCreateRule = null;
            member.name = "";
            member.email = "";
            member.phone = "";
            member.address = "";
            member.joiningDate = "";
            member.endDate = "";
            member.employeeId = "";
            member.remarks = "";
            member.createdBy = "";
            member.createdOn = "";
            member.updatedBy = "";
            member.updatedOn = "";
            return member;
        };
        Members.prototype.setDefaultValues = function (type, index) {
            if (type === "create") {
                this.memberCreateModel.committee = this.getCurrentItem;
                this.memberCreateModel.memberCreateRule = this.memberCreateRules[index];
            }
            else {
                this.memberEditModel.committee = this.getCurrentItem;
                this.assignMemberCreateRuleManually();
            }
        };
        Members.prototype.assignMemberCreateRuleManually = function () {
            for (var i = 0; i < this.memberCreateRules.length; i++) {
                if (this.memberEditModel.memberCreateRule.id === this.memberCreateRules[i].id) {
                    this.memberEditModel.memberCreateRule = angular.copy(this.memberCreateRules[i]);
                }
            }
        };
        Members.prototype.create = function (form) {
            var _this = this;
            this.toJson(this.getMemberCreateModel).then(function (json) {
                _this.membersService.create(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.get();
                        _this.clearMemberCreateModel();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        Members.prototype.edit = function (form) {
            var _this = this;
            this.toJson(this.getMemberEditModel).then(function (json) {
                _this.membersService.revise(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.get();
                        _this.clearMemberEditModel();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        Members.prototype.details = function (member) {
            this.clearMemberDetailsModel();
            this.setMemberDetailsModel = angular.copy(member);
        };
        Members.prototype.resetForm = function (form) {
            form.$setPristine();
        };
        Members.prototype.setItem = function (pItem) {
            this.setCurrentItem = pItem;
        };
        Object.defineProperty(Members.prototype, "setMemberEditModel", {
            set: function (pVal) {
                this.memberEditModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getMemberEditModel", {
            get: function () {
                return this.memberEditModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setMemberDetailsModel", {
            set: function (pVal) {
                this.memberDetailsModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getMemberDetailsModel", {
            get: function () {
                return this.memberDetailsModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setMemberCreateModel", {
            set: function (pVal) {
                this.memberCreateModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getMemberCreateModel", {
            get: function () {
                return this.memberCreateModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setLoaderStatus", {
            set: function (pLoaderStatus) {
                this.loader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setInnerLoaderStatus", {
            set: function (pLoaderStatus) {
                this.innerLoader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getInnerLoaderStatus", {
            get: function () {
                return this.innerLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setListOfCommittees", {
            set: function (pList) {
                this.committees = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getListOfCommittees", {
            get: function () {
                return this.committees;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setListOfMemberCreateRule", {
            set: function (pList) {
                this.memberCreateRules = [];
                this.memberCreateRules = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getListOfMemberCreateRule", {
            get: function () {
                return this.memberCreateRules;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setListOfActiveMembers", {
            set: function (pList) {
                this.activeMembers = [];
                this.activeMembers = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getListOfActiveMembers", {
            get: function () {
                return this.activeMembers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setListOfInActiveMembers", {
            set: function (pList) {
                this.inactiveMembers = [];
                this.inactiveMembers = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getListOfInActiveMembers", {
            get: function () {
                return this.inactiveMembers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setListOfMembers", {
            set: function (pList) {
                this.members = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getListOfMembers", {
            get: function () {
                return this.members;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setCurrentItem", {
            set: function (pItem) {
                this.currentItem = {};
                this.currentItem = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getCurrentItem", {
            get: function () {
                return this.currentItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "setStatuses", {
            set: function (pList) {
                this.memberStatues = [];
                this.memberStatues = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Members.prototype, "getStatuses", {
            get: function () {
                return this.memberStatues;
            },
            enumerable: true,
            configurable: true
        });
        Members.prototype.toJson = function (obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        Members.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'committeesService',
            'membersService',
            'memberCreateRuleService'
        ];
        return Members;
    }());
    ums.UMS.controller("Members", Members);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ReferenceBook = (function () {
        function ReferenceBook(registrarConstants, $q, notify, referenceBookService, FileUpload, attachmentSettingService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.referenceBookService = referenceBookService;
            this.FileUpload = FileUpload;
            this.attachmentSettingService = attachmentSettingService;
            this.loader = true;
            this.referenceBook = [];
            this.attachments = [];
            this.init();
        }
        ReferenceBook.prototype.init = function () {
            this.getAll();
            this.getAttachmentSetting(ums.Utils.ATTACHMENT_TYPE_FOR_COMMITTEE_MODULE);
            this.clearReferenceBookCreateModel();
            this.clearReferenceBookEditModel();
        };
        ReferenceBook.prototype.getAttachmentSetting = function (id) {
            var _this = this;
            this.attachmentSettingService.get(id).then(function (response) {
                _this.attachmentSetting = response;
            });
        };
        ReferenceBook.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.referenceBookService.fetchAll().then(function (response) {
                _this.setReferenceBookList = response;
                _this.setLoaderStatus = false;
            });
        };
        ReferenceBook.prototype.prepareToEdit = function (pIndex) {
            this.clearReferenceBookEditModel();
            this.setReferenceBookEditModel = angular.copy(this.getReferenceBookList[pIndex]);
            this.fetchAttachments();
        };
        ReferenceBook.prototype.fetchAttachments = function () {
            var _this = this;
            this.FileUpload.fetch(ums.Utils.ATTACHMENT_TYPE_FOR_COMMITTEE_MODULE, this.getReferenceBookEditModel.id).then(function (result) {
                _this.attachments = result;
            });
        };
        ReferenceBook.prototype.edit = function (form) {
            var _this = this;
            this.toJson(this.getReferenceBookEditModel).then(function (json) {
                _this.referenceBookService.revise(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.FileUpload.uploadAttachment("files", _this.getReferenceBookEditModel.id, ums.Utils.ATTACHMENT_TYPE_FOR_COMMITTEE_MODULE, "reference-guide");
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.init();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        ReferenceBook.prototype.create = function (form) {
            var _this = this;
            this.toJson(this.getReferenceBookCreateModel).then(function (json) {
                _this.referenceBookService.create(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.init();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        ReferenceBook.prototype.downloadAttachment = function (attachment) {
            this.FileUpload.downloadFile(attachment);
        };
        ReferenceBook.prototype.resetForm = function (form) {
            form.$setPristine();
        };
        ReferenceBook.prototype.initReferenceBookModel = function () {
            var referenceBook = {};
            referenceBook.id = "";
            referenceBook.name = "";
            referenceBook.webLink = "";
            referenceBook.remarks = "";
            referenceBook.createdBy = "";
            referenceBook.createdOn = "";
            referenceBook.updatedBy = "";
            referenceBook.updatedOn = "";
            return referenceBook;
        };
        ReferenceBook.prototype.clearReferenceBookCreateModel = function () {
            this.setReferenceBookCreateModel = this.initReferenceBookModel();
        };
        ReferenceBook.prototype.clearReferenceBookEditModel = function () {
            this.setReferenceBookEditModel = this.initReferenceBookModel();
        };
        Object.defineProperty(ReferenceBook.prototype, "setLoaderStatus", {
            set: function (pVal) {
                this.loader = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceBook.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceBook.prototype, "setReferenceBookList", {
            set: function (pList) {
                this.referenceBook = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceBook.prototype, "getReferenceBookList", {
            get: function () {
                return this.referenceBook;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceBook.prototype, "setReferenceBookEditModel", {
            set: function (pVal) {
                this.referenceBookEditModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceBook.prototype, "getReferenceBookEditModel", {
            get: function () {
                return this.referenceBookEditModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceBook.prototype, "setReferenceBookCreateModel", {
            set: function (pVal) {
                this.referenceBookCreateModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceBook.prototype, "getReferenceBookCreateModel", {
            get: function () {
                return this.referenceBookCreateModel;
            },
            enumerable: true,
            configurable: true
        });
        ReferenceBook.prototype.toJson = function (obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        ReferenceBook.$inject = ['registrarConstants', '$q', 'notify', 'referenceBookService', 'FileUpload', 'attachmentSettingService'];
        return ReferenceBook;
    }());
    ums.UMS.controller("ReferenceBook", ReferenceBook);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ReferenceBookService = (function () {
        function ReferenceBookService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        ReferenceBookService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("referenceBook", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ReferenceBookService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("referenceBook", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ReferenceBookService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("referenceBook/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ReferenceBookService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("referenceBook/" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        ReferenceBookService.$inject = ['HttpClient', '$q', 'notify'];
        return ReferenceBookService;
    }());
    ums.ReferenceBookService = ReferenceBookService;
    ums.UMS.service("referenceBookService", ReferenceBookService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MemberCreateRuleService = (function () {
        function MemberCreateRuleService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        MemberCreateRuleService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("memberCreateRule", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MemberCreateRuleService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("memberCreateRule", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MemberCreateRuleService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("memberCreateRule/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MemberCreateRuleService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("memberCreateRule/" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MemberCreateRuleService.prototype.getMemberCreateRules = function (pCommitteeId) {
            var defer = this.$q.defer();
            this.httpClient.get("memberCreateRule/committeeId/" + pCommitteeId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        MemberCreateRuleService.$inject = ['HttpClient', '$q', 'notify'];
        return MemberCreateRuleService;
    }());
    ums.MemberCreateRuleService = MemberCreateRuleService;
    ums.UMS.service("memberCreateRuleService", MemberCreateRuleService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MemberCreateRule = (function () {
        function MemberCreateRule(registrarConstants, $q, notify, committeeService, memberCreateRuleService, referenceBookService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.committeeService = committeeService;
            this.memberCreateRuleService = memberCreateRuleService;
            this.referenceBookService = referenceBookService;
            this.committees = [];
            this.loader = true;
            this.innerLoader = true;
            this.memberCreateRule = [];
            this.referenceBooks = [];
            this.memberDesignations = [];
            this.init();
        }
        MemberCreateRule.prototype.init = function () {
            this.getAll();
            this.getAllReferenceBook();
            this.getMemberDesignationList();
            this.clearMemberCreateRuleCreateModel();
            this.clearMemberCreateRuleEditModel();
        };
        MemberCreateRule.prototype.getMemberDesignationList = function () {
            this.setMemberDesignation = this.registrarConstants.committeeMemberDesignation;
        };
        MemberCreateRule.prototype.getAllReferenceBook = function () {
            var _this = this;
            this.referenceBookService.fetchAll().then(function (response) {
                _this.setListOfReferenceBook = response;
            });
        };
        MemberCreateRule.prototype.prepareToEdit = function (pIndex) {
            this.clearMemberCreateRuleEditModel();
            this.setMemberCreateRuleEditModel = angular.copy(this.getMemberCreateRules[pIndex]);
        };
        MemberCreateRule.prototype.details = function (pIndex) {
            this.clearMemberCreateRuleDetailModel();
            this.setMemberCreateRuleDetailModel = angular.copy(this.getMemberCreateRules[pIndex]);
        };
        MemberCreateRule.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.committeeService.fetchAll().then(function (result) {
                _this.setListOfCommittees = result;
                _this.setLoaderStatus = false;
                _this.setCurrentItem = result[0];
                _this.get();
            });
        };
        MemberCreateRule.prototype.get = function () {
            var _this = this;
            this.setInnerLoaderStatus = true;
            var committee = this.getCurrentItem;
            this.memberCreateRuleService.getMemberCreateRules(committee.id).then(function (response) {
                _this.setMemberCreateRules = response;
                _this.setInnerLoaderStatus = false;
            });
        };
        MemberCreateRule.prototype.clearMemberCreateRuleCreateModel = function () {
            this.setMemberCreateRuleCreateModel = this.initMemberCreateRuleModel();
        };
        MemberCreateRule.prototype.clearMemberCreateRuleEditModel = function () {
            this.setMemberCreateRuleEditModel = this.initMemberCreateRuleModel();
        };
        MemberCreateRule.prototype.clearMemberCreateRuleDetailModel = function () {
            this.setMemberCreateRuleDetailModel = this.initMemberCreateRuleModel();
        };
        MemberCreateRule.prototype.setViewOrder = function () {
            this.memberCreateRuleCreateModel.viewOrder = this.getMemberCreateRules.length + 1;
        };
        MemberCreateRule.prototype.initMemberCreateRuleModel = function () {
            var mcr = {};
            mcr.id = "";
            mcr.viewOrder = null;
            mcr.committee = null;
            mcr.rule = "";
            mcr.designation = null;
            mcr.expirationYear = null;
            mcr.numberOfTotalMembers = 0;
            mcr.referenceBook = null;
            mcr.remarks = "";
            mcr.createdBy = "";
            mcr.createdOn = "";
            mcr.updatedBy = "";
            mcr.updatedOn = "";
            mcr.lastModified = "";
            return mcr;
        };
        MemberCreateRule.prototype.setDefaultValues = function (type, index) {
            if (type === "create") {
                this.memberCreateRuleCreateModel.committee = this.getCurrentItem;
            }
            else {
                this.memberCreateRuleEditModel.committee = this.getCurrentItem;
                this.assignReferenceBookManually();
            }
        };
        MemberCreateRule.prototype.assignReferenceBookManually = function () {
            for (var i = 0; i < this.getListOfReferenceBook.length; i++) {
                if (this.getMemberCreateRuleEditModel.referenceBook.id == this.getListOfReferenceBook[i].id) {
                    this.getMemberCreateRuleEditModel.referenceBook = angular.copy(this.getListOfReferenceBook[i]);
                }
            }
        };
        MemberCreateRule.prototype.create = function (form) {
            var _this = this;
            this.toJson(this.getMemberCreateRuleCreateModel).then(function (json) {
                _this.memberCreateRuleService.create(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.get();
                        _this.clearMemberCreateRuleCreateModel();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        MemberCreateRule.prototype.edit = function (form) {
            var _this = this;
            this.toJson(this.getMemberCreateRuleEditModel).then(function (json) {
                _this.memberCreateRuleService.revise(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.get();
                        _this.clearMemberCreateRuleEditModel();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        MemberCreateRule.prototype.resetForm = function (form) {
            form.$setPristine();
        };
        MemberCreateRule.prototype.setItem = function (pItem) {
            this.setCurrentItem = pItem;
        };
        Object.defineProperty(MemberCreateRule.prototype, "setMemberCreateRuleEditModel", {
            set: function (pVal) {
                this.memberCreateRuleEditModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "getMemberCreateRuleEditModel", {
            get: function () {
                return this.memberCreateRuleEditModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "setMemberCreateRuleDetailModel", {
            set: function (pVal) {
                this.memberCreateRuleDetailModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "getMemberCreateRuleDetailModel", {
            get: function () {
                return this.memberCreateRuleDetailModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "setMemberCreateRuleCreateModel", {
            set: function (pVal) {
                this.memberCreateRuleCreateModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "getMemberCreateRuleCreateModel", {
            get: function () {
                return this.memberCreateRuleCreateModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "setLoaderStatus", {
            set: function (pLoaderStatus) {
                this.loader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "setInnerLoaderStatus", {
            set: function (pLoaderStatus) {
                this.innerLoader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "getInnerLoaderStatus", {
            get: function () {
                return this.innerLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "setListOfCommittees", {
            set: function (pList) {
                this.committees = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "getListOfCommittees", {
            get: function () {
                return this.committees;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "setListOfReferenceBook", {
            set: function (pList) {
                this.referenceBooks = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "getListOfReferenceBook", {
            get: function () {
                return this.referenceBooks;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "setCurrentItem", {
            set: function (pItem) {
                this.currentItem = {};
                this.currentItem = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "getCurrentItem", {
            get: function () {
                return this.currentItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "setMemberCreateRules", {
            set: function (pList) {
                this.memberCreateRule = [];
                this.memberCreateRule = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "getMemberCreateRules", {
            get: function () {
                return this.memberCreateRule;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "setMemberDesignation", {
            set: function (pList) {
                this.memberDesignations = [];
                this.memberDesignations = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberCreateRule.prototype, "getMemberDesignation", {
            get: function () {
                return this.memberDesignations;
            },
            enumerable: true,
            configurable: true
        });
        MemberCreateRule.prototype.toJson = function (obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        MemberCreateRule.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'committeesService',
            'memberCreateRuleService',
            'referenceBookService'
        ];
        return MemberCreateRule;
    }());
    ums.UMS.controller("MemberCreateRule", MemberCreateRule);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Duties = (function () {
        function Duties(registrarConstants, $q, notify, committeeService, membersService, dutiesService, referenceBookService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.committeeService = committeeService;
            this.membersService = membersService;
            this.dutiesService = dutiesService;
            this.referenceBookService = referenceBookService;
            this.committees = [];
            this.loader = true;
            this.innerLoader = true;
            this.duties = [];
            this.referenceBooks = [];
            this.init();
        }
        Duties.prototype.init = function () {
            this.getAll();
            this.getAllReferenceBook();
            this.clearDutiesCreateModel();
            this.clearDutiesEditModel();
        };
        Duties.prototype.getAllReferenceBook = function () {
            var _this = this;
            this.referenceBookService.fetchAll().then(function (response) {
                _this.setListOfReferenceBook = response;
            });
        };
        Duties.prototype.prepareToEdit = function (pIndex) {
            this.clearDutiesEditModel();
            this.setDutiesEditModel = angular.copy(this.getDuties[pIndex]);
        };
        Duties.prototype.details = function (pIndex) {
            this.clearDutiesDetailModel();
            this.setDutiesDetailModel = angular.copy(this.getDuties[pIndex]);
        };
        Duties.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.committeeService.fetchAll().then(function (result) {
                _this.setListOfCommittees = result;
                _this.setLoaderStatus = false;
                _this.setCurrentItem = result[0];
                _this.get();
            });
        };
        Duties.prototype.get = function () {
            var _this = this;
            this.setInnerLoaderStatus = true;
            var committee = this.getCurrentItem;
            this.dutiesService.getDuties(committee.id).then(function (response) {
                _this.setDuties = response;
                _this.setInnerLoaderStatus = false;
            });
        };
        Duties.prototype.clearDutiesCreateModel = function () {
            this.setDutiesCreateModel = this.initDutiesModel();
        };
        Duties.prototype.clearDutiesEditModel = function () {
            this.setDutiesEditModel = this.initDutiesModel();
        };
        Duties.prototype.clearDutiesDetailModel = function () {
            this.setDutiesDetailModel = this.initDutiesModel();
        };
        Duties.prototype.setViewOrder = function () {
            this.dutiesCreateModel.viewOrder = this.getDuties.length + 1;
        };
        Duties.prototype.initDutiesModel = function () {
            var duty = {};
            duty.id = "";
            duty.viewOrder = null;
            duty.committee = null;
            duty.powerAndDuties = "";
            duty.referenceBook = null;
            duty.remarks = "";
            duty.createdBy = "";
            duty.createdOn = "";
            duty.updatedBy = "";
            duty.updatedOn = "";
            duty.lastModified = "";
            return duty;
        };
        Duties.prototype.setDefaultValues = function (type, index) {
            if (type === "create") {
                this.dutiesCreateModel.committee = this.getCurrentItem;
            }
            else {
                this.dutiesEditModel.committee = this.getCurrentItem;
                this.assignReferenceBookManually();
            }
        };
        Duties.prototype.assignReferenceBookManually = function () {
            for (var i = 0; i < this.getListOfReferenceBook.length; i++) {
                if (this.getDutiesEditModel.referenceBook.id == this.getListOfReferenceBook[i].id) {
                    this.getDutiesEditModel.referenceBook = angular.copy(this.getListOfReferenceBook[i]);
                }
            }
        };
        Duties.prototype.create = function (form) {
            var _this = this;
            this.toJson(this.getDutiesCreateModel).then(function (json) {
                _this.dutiesService.create(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.get();
                        _this.clearDutiesCreateModel();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        Duties.prototype.edit = function (form) {
            var _this = this;
            this.toJson(this.getDutiesEditModel).then(function (json) {
                _this.dutiesService.revise(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.get();
                        _this.clearDutiesEditModel();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        Duties.prototype.resetForm = function (form) {
            form.$setPristine();
        };
        Duties.prototype.setItem = function (pItem) {
            this.setCurrentItem = pItem;
        };
        Object.defineProperty(Duties.prototype, "setDutiesEditModel", {
            set: function (pVal) {
                this.dutiesEditModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "getDutiesEditModel", {
            get: function () {
                return this.dutiesEditModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "setDutiesCreateModel", {
            set: function (pVal) {
                this.dutiesCreateModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "getDutiesCreateModel", {
            get: function () {
                return this.dutiesCreateModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "setDutiesDetailModel", {
            set: function (pVal) {
                this.dutiesDetailModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "getDutiesDetailsModel", {
            get: function () {
                return this.dutiesDetailModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "setLoaderStatus", {
            set: function (pLoaderStatus) {
                this.loader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "setInnerLoaderStatus", {
            set: function (pLoaderStatus) {
                this.innerLoader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "getInnerLoaderStatus", {
            get: function () {
                return this.innerLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "setListOfCommittees", {
            set: function (pList) {
                this.committees = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "getListOfCommittees", {
            get: function () {
                return this.committees;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "setListOfReferenceBook", {
            set: function (pList) {
                this.referenceBooks = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "getListOfReferenceBook", {
            get: function () {
                return this.referenceBooks;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "setCurrentItem", {
            set: function (pItem) {
                this.currentItem = {};
                this.currentItem = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "getCurrentItem", {
            get: function () {
                return this.currentItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "setDuties", {
            set: function (pList) {
                this.duties = [];
                this.duties = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Duties.prototype, "getDuties", {
            get: function () {
                return this.duties;
            },
            enumerable: true,
            configurable: true
        });
        Duties.prototype.toJson = function (obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        Duties.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'committeesService',
            'membersService',
            'dutiesService',
            'referenceBookService'
        ];
        return Duties;
    }());
    ums.UMS.controller("Duties", Duties);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DutiesService = (function () {
        function DutiesService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        DutiesService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("duties", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        DutiesService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("duties", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        DutiesService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("duties/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        DutiesService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("duties/" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        DutiesService.prototype.getDuties = function (pCommitteeId) {
            var defer = this.$q.defer();
            this.httpClient.get("duties/committeeId/" + pCommitteeId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        DutiesService.$inject = ['HttpClient', '$q', 'notify'];
        return DutiesService;
    }());
    ums.DutiesService = DutiesService;
    ums.UMS.service("dutiesService", DutiesService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CommitteeOrganizer = (function () {
        function CommitteeOrganizer(registrarConstants, $q, notify, committeeOrganizerService, userService, employeeService, committeesService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.committeeOrganizerService = committeeOrganizerService;
            this.userService = userService;
            this.employeeService = employeeService;
            this.committeesService = committeesService;
            this.committeeOrganizers = [];
            this.loader = true;
            this.createModalLoader = true;
            this.committeeTypes = [];
            this.canCreate = false;
            this.employeeList = [];
            this.committeeList = [];
            this.statuses = [];
            this.cmExpireStatus = [];
            this.setListOfExpireMembers = [];
            var timeElapsed = Date.now();
            var today = new Date(timeElapsed);
            var dateString = today.toLocaleDateString('en-GB');
            var dateArray = dateString.split("/");
            var newdtl = dateArray[0] + "/" + dateArray[1] + "/" + dateArray[2];
            this.CurrentDate = newdtl;
            this.setCommitteeTypes = registrarConstants.committeeTypes;
            this.setStatuses = registrarConstants.committeeOrganizerStatus;
            this.getCurrentUser();
            this.getExpiringUser();
        }
        CommitteeOrganizer.prototype.init = function () {
            this.getAll();
            this.clearCommitteeOrganizerCreateModel();
            this.clearCommitteeOrganizerEditModel();
            this.clearCommitteeOrganizerDetailModel();
        };
        CommitteeOrganizer.prototype.getAllEmployees = function () {
            var _this = this;
            this.employeeService.getAll().then(function (response) {
                _this.setEmployeeList = angular.copy(response);
            });
        };
        CommitteeOrganizer.prototype.getAllCommittees = function () {
            var _this = this;
            if (this.canCreate) {
                this.committeesService.getAll().then(function (result) {
                    _this.setListOfCommittees = result;
                });
            }
            else {
                this.committeesService.fetchAll().then(function (result) {
                    _this.setListOfCommittees = result;
                });
            }
        };
        CommitteeOrganizer.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            var todate;
            todate = new Date();
            var dateArr;
            var datestring;
            this.committeeOrganizerService.fetchAll().then(function (result) {
                console.log("committee organizers length=", _this.committeeList.length);
                for (var i = 0; i < result.length; i++) {
                    datestring = "";
                    dateArr = result[i].endDate.split("/");
                    datestring = dateArr[1] + "/" + dateArr[0] + "/" + dateArr[2];
                    var extendDate = new Date(datestring);
                    if (todate > extendDate) {
                        _this.cmExpireStatus[i] = 0; // Not expired
                        console.log("todate is greater =", extendDate);
                    }
                    else {
                        _this.cmExpireStatus[i] = 1; //Expired
                        console.log("todate is smaller =", todate);
                    }
                }
                console.log("Total Diff=", _this.cmExpireStatus);
                _this.setListOfCommitteeOrganizers = result;
                _this.setLoaderStatus = false;
            });
        };
        CommitteeOrganizer.prototype.edit = function (form) {
            var _this = this;
            this.toJson(this.getCommitteeOrganizerEditModel).then(function (json) {
                _this.committeeOrganizerService.revise(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.init();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        CommitteeOrganizer.prototype.create = function (form) {
            var _this = this;
            this.toJson(this.committeeOrganizerCreateModel).then(function (json) {
                _this.committeeOrganizerService.create(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.init();
                        _this.resetForm(form);
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
                console.log(json);
            });
        };
        CommitteeOrganizer.prototype.getCurrentUser = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (response) {
                if (response.roleId === 9999 || response.roleId === 7201 || response.roleId === 7202 || response.roleId === 7116 || response.roleId === 8101) {
                    _this.canCreate = true;
                }
                else {
                    _this.canCreate = false;
                }
                _this.fetchRequiredData(_this.canCreate);
                _this.init();
            });
        };
        /*
        * @desc: Notify users for expiring committee organizer before one month.
        * */
        CommitteeOrganizer.prototype.getExpiringUser = function () {
            var _this = this;
            this.committeeOrganizerService.fetchExipreAll().then(function (result) {
                _this.setListOfExpireMembers = result;
                console.log("expireAll=", JSON.stringify(_this.setListOfExpireMembers));
            });
        };
        CommitteeOrganizer.prototype.fetchRequiredData = function (pVal) {
            if (pVal) {
                this.getAllEmployees();
                this.getAllCommittees();
            }
        };
        CommitteeOrganizer.prototype.details = function (pIndex) {
            this.clearCommitteeOrganizerDetailModel();
            this.setCommitteeOrganizerDetailModel = angular.copy(this.getListOfCommitteeOrganizers[pIndex]);
        };
        CommitteeOrganizer.prototype.prepareToEdit = function (pIndex) {
            this.clearCommitteeOrganizerEditModel();
            this.setCommitteeOrganizerEditModel = angular.copy(this.getListOfCommitteeOrganizers[pIndex]);
        };
        CommitteeOrganizer.prototype.clearCommitteeOrganizerEditModel = function () {
            this.setCommitteeOrganizerEditModel = this.initCommitteeOrganizerModel();
        };
        CommitteeOrganizer.prototype.clearCommitteeOrganizerDetailModel = function () {
            this.setCommitteeOrganizerDetailModel = this.initCommitteeOrganizerModel();
        };
        CommitteeOrganizer.prototype.clearCommitteeOrganizerCreateModel = function () {
            this.setCommitteeOrganizerCreateModel = this.initCommitteeOrganizerModel();
        };
        CommitteeOrganizer.prototype.resetForm = function (form) {
            form.$setPristine();
        };
        CommitteeOrganizer.prototype.initCommitteeOrganizerModel = function () {
            var committeeOrganizer = {};
            committeeOrganizer.id = "";
            committeeOrganizer.committeeManager = null;
            committeeOrganizer.committee = null;
            committeeOrganizer.startDate = "";
            committeeOrganizer.endDate = "";
            committeeOrganizer.status = null;
            committeeOrganizer.remarks = "";
            committeeOrganizer.createdBy = "";
            committeeOrganizer.createdOn = "";
            committeeOrganizer.updatedBy = "";
            committeeOrganizer.updatedOn = "";
            committeeOrganizer.lastModified = "";
            return committeeOrganizer;
        };
        Object.defineProperty(CommitteeOrganizer.prototype, "setEmployeeList", {
            set: function (pList) {
                this.employeeList = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "getEmployeeList", {
            get: function () {
                return this.employeeList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "setListOfCommitteeOrganizers", {
            set: function (pList) {
                this.committeeOrganizers = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "getListOfCommitteeOrganizers", {
            get: function () {
                return this.committeeOrganizers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "setCommitteeOrganizerCreateModel", {
            set: function (pValue) {
                this.committeeOrganizerCreateModel = pValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "getCommitteeOrganizerCreateModel", {
            get: function () {
                return this.committeeOrganizerCreateModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "setCommitteeOrganizerEditModel", {
            set: function (pValue) {
                this.committeeOrganizerEditModel = pValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "getCommitteeOrganizerEditModel", {
            get: function () {
                return this.committeeOrganizerEditModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "setListOfCommittees", {
            set: function (pList) {
                this.committeeList = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "getListOfCommittees", {
            get: function () {
                return this.committeeList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "setCommitteeOrganizerDetailModel", {
            set: function (pValue) {
                this.committeeOrganizerDetailModel = pValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "getCommitteeOrganizerDetailModel", {
            get: function () {
                return this.committeeOrganizerDetailModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "setCommitteeTypes", {
            set: function (pVal) {
                this.committeeTypes = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "getCommitteeTypes", {
            get: function () {
                return this.committeeTypes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "setCanCreate", {
            get: function () {
                return this.loader;
            },
            set: function (pVal) {
                this.loader = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "setCreateModalLoaderStatus", {
            set: function (pVal) {
                this.createModalLoader = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "getCreateModalLoaderStatus", {
            get: function () {
                return this.createModalLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "setLoaderStatus", {
            set: function (pVal) {
                this.loader = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "setStatuses", {
            set: function (pVal) {
                this.statuses = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitteeOrganizer.prototype, "getStatuses", {
            get: function () {
                return this.statuses;
            },
            enumerable: true,
            configurable: true
        });
        CommitteeOrganizer.prototype.toJson = function (obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        CommitteeOrganizer.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'committeeOrganizerService',
            'userService',
            'employeeService',
            'committeesService'
        ];
        return CommitteeOrganizer;
    }());
    ums.UMS.controller("CommitteeOrganizer", CommitteeOrganizer);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CommitteeOrganizerService = (function () {
        function CommitteeOrganizerService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        CommitteeOrganizerService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("committee/organizer", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        CommitteeOrganizerService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("committee/organizer", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        CommitteeOrganizerService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("committee/organizer/" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        CommitteeOrganizerService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("committee/organizer/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        CommitteeOrganizerService.prototype.fetchExipreAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("committee/organizer/expireAll", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        CommitteeOrganizerService.$inject = ['HttpClient', '$q', 'notify'];
        return CommitteeOrganizerService;
    }());
    ums.CommitteeOrganizerService = CommitteeOrganizerService;
    ums.UMS.service("committeeOrganizerService", CommitteeOrganizerService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AgendaHoldHistoryService = (function () {
        function AgendaHoldHistoryService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        AgendaHoldHistoryService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("meeting/agenda/hold", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaHoldHistoryService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("meeting/agenda/hold", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaHoldHistoryService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agenda/hold/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaHoldHistoryService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agenda/hold/" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaHoldHistoryService.prototype.getAgendaResolution = function (pAgendaResolution) {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agenda/hold/agendaResolution/" + pAgendaResolution, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaHoldHistoryService.$inject = ['HttpClient', '$q', 'notify'];
        return AgendaHoldHistoryService;
    }());
    ums.AgendaHoldHistoryService = AgendaHoldHistoryService;
    ums.UMS.service("agendaHoldHistoryService", AgendaHoldHistoryService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AgendaService = (function () {
        function AgendaService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        AgendaService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("meeting/agendaResolution", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("meeting/agendaResolution", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        /*
       * @author: evana
       * @Dated: 01-04-2022
       * @Title: Agenda Keywords insert during agenda creation
       * */
        AgendaService.prototype.Keywordcreate = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("meeting/agendaKeyword/create", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        /*
      * @author: evana
      * @Dated: 01-04-2022
      * @Title: Agenda Keywords Update during agenda editing
      * */
        AgendaService.prototype.keywordUpdate = function (json) {
            var defer = this.$q.defer();
            console.log("agenda keyword updating called from here.");
            this.httpClient.put("meeting/agendaKeyword/update", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agendaResolution/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agendaResolution" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaService.prototype.getAgendaResolution = function (pCommitteeId, pScheduleId) {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agendaResolution/committeeId/" + pCommitteeId + "/scheduleId/" + pScheduleId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaService.prototype.getLastInsertAgendaId = function (meetingNo) {
            var _this = this;
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("meeting/agendaResolution/lastAgendaId/meetingId/" + meetingNo, ums.HttpClient.MIME_TYPE_JSON, function (cresult, etag) {
                defer.resolve(cresult);
                //alert(cresult);
            }, function (response) {
                _this.notify.error("Error in getting data");
            });
            return defer.promise;
        };
        AgendaService.prototype.KeywordExistChecking = function (agendaKeyword) {
            var _this = this;
            var defer = this.$q.defer();
            var cresult = {};
            this.httpClient.get("meeting/agendaKeyword/keywordExistChecking/" + agendaKeyword, ums.HttpClient.MIME_TYPE_JSON, function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting data");
            });
            return defer.promise;
        };
        AgendaService.prototype.getAgendaResolutionByStatus = function (pStatus) {
            var defer = this.$q.defer();
            this.httpClient.get("meeting/agendaResolution/status/" + pStatus, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        AgendaService.$inject = ['HttpClient', '$q', 'notify'];
        return AgendaService;
    }());
    ums.AgendaService = AgendaService;
    ums.UMS.service("agendaService", AgendaService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Agenda = (function () {
        function Agenda(registrarConstants, $q, notify, committeesService, scheduleService, agendaService, agendaHoldHistoryService, FileUpload, attachmentSettingService) {
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.committeesService = committeesService;
            this.scheduleService = scheduleService;
            this.agendaService = agendaService;
            this.agendaHoldHistoryService = agendaHoldHistoryService;
            this.FileUpload = FileUpload;
            this.attachmentSettingService = attachmentSettingService;
            this.agendaKeyword = [];
            this.count = 1;
            this.keywords_json = {};
            this.committees = [];
            this.agendaResolutionStatus = [];
            this.loader = true;
            this.innerLoader = true;
            this.minutesIsSubmit = false;
            this.schedule = [];
            this.agendaResolution = [];
            this.init();
            this.getAttachmentSetting(ums.Utils.ATTACHMENT_TYPE_FOR_MEETING_MODULE);
            this.indexNumber = 1;
            this.keystring = "";
        }
        Agenda.prototype.prepareEditor = function () {
            this.setAgendaResolutionStatus = this.registrarConstants.agendaResolutionStatus;
            CKEDITOR.replace('editorForAgenda');
            CKEDITOR.instances['editorForAgenda'].setData("");
        };
        Agenda.prototype.getAttachmentSetting = function (id) {
            var _this = this;
            this.attachmentSettingService.get(id).then(function (response) {
                _this.attachmentSetting = response;
            });
        };
        Agenda.prototype.downloadAttachment = function (attachment) {
            console.log("Attachment object=", attachment);
            this.FileUpload.downloadFile(attachment);
        };
        /*
        public deleteAttachment(attachment: IAttachmentModel): void{

            console.log("Attachment object for delettion=", attachment);
            this.FileUpload.deleteFileById(attachment.id, attachment.fileType, attachment.fileName);
        }

         */
        Agenda.prototype.fetchAttachments = function (ar, index) {
            var _this = this;
            this.FileUpload.fetch(ums.Utils.ATTACHMENT_TYPE_FOR_MEETING_MODULE, ar.id).then(function (result) {
                _this.getListOfAgendaResolution[index].files = result;
            });
        };
        Agenda.prototype.upload = function (index, ar) {
            this.FileUpload.uploadSpecificAttachment("files" + index, ar.id, "agenda", ums.Utils.ATTACHMENT_TYPE_FOR_MEETING_MODULE, this.getCurrentItem.name + "/" + this.getCurrentSchedule.serialNo);
        };
        Agenda.prototype.init = function () {
            this.prepareEditor();
            this.getAll();
            this.clearAgendaResolutionModel();
            this.clearAgendaResolutionDetailsModel();
            this.clearEditors();
        };
        Agenda.prototype.prepareToEdit = function (pIndex) {
            console.log("Edit button--->");
            $('html, body').animate({ scrollTop: '0px' }, 0);
            this.keystring = "";
            var keywordString;
            $("#keyword_list").empty();
            this.clearAgendaResolutionModel();
            this.setAgendaResolutionModel = angular.copy(this.getListOfAgendaResolution[pIndex]);
            console.log("selected agenda=", JSON.stringify(this.getListOfAgendaResolution[pIndex]));
            keywordString = this.getListOfAgendaResolution[pIndex].agendaKeyword;
            this.keystring = keywordString;
            this.keywordArray = keywordString.split(",");
            console.log("keyword Array = ", this.keywordArray);
            this.setEditorValues();
        };
        Agenda.prototype.prepareToHold = function (pIndex) {
            this.agendaInHoldModel = this.getListOfAgendaResolution[pIndex];
        };
        Agenda.prototype.hold = function () {
            var _this = this;
            this.agendaInHoldModel.status = this.getAgendaResolutionStatus[1];
            this.toJson(this.agendaInHoldModel).then(function (json) {
                _this.agendaService.revise(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.setHoldAgendaModel = {};
                        _this.get();
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        Agenda.prototype.import = function (index) {
            var _this = this;
            var agenda = this.agendaInHoldList[index];
            agenda.schedule = this.getCurrentSchedule;
            agenda.committee = this.getCurrentItem;
            agenda.status = this.getAgendaResolutionStatus[2];
            this.toJson(agenda).then(function (json) {
                _this.agendaService.revise(json).then(function (response) {
                    if (response === ums.Utils.SUCCESS) {
                        _this.notify.success(ums.Utils.SUCCESS);
                        _this.get();
                        _this.getHoldAgendaList();
                    }
                    else {
                        _this.notify.error(ums.Utils.ERROR);
                    }
                });
            });
        };
        Agenda.prototype.setEditorValues = function () {
            CKEDITOR.instances['editorForAgenda'].setData(this.agendaResolutionModel.agenda);
        };
        Agenda.prototype.getHoldAgendaList = function () {
            var _this = this;
            this.agendaService.getAgendaResolutionByStatus(this.getAgendaResolutionStatus[1].id).then(function (result) {
                _this.agendaInHoldList = result;
            });
        };
        Agenda.prototype.getSchedules = function () {
            var _this = this;
            var committee = this.getCurrentItem;
            this.scheduleService.getSchedule(committee.id).then(function (response) {
                _this.setListOfSchedule = response;
                _this.setCurrentSchedule = response[0];
                _this.get();
            });
        };
        Agenda.prototype.getAll = function () {
            var _this = this;
            this.setLoaderStatus = true;
            this.committeesService.fetchAll().then(function (result) {
                _this.setListOfCommittees = result;
                _this.setLoaderStatus = false;
                _this.setCurrentItem = result[0];
                _this.getSchedules();
            });
        };
        Agenda.prototype.get = function () {
            var _this = this;
            this.setInnerLoaderStatus = true;
            var committee = this.getCurrentItem;
            var schedule = this.getCurrentSchedule;
            if (schedule.minuteFlag == 0) {
                this.minutesIsSubmit = false;
            }
            else {
                this.minutesIsSubmit = true;
            }
            if (committee && schedule) {
                this.agendaService.getAgendaResolution(committee.id, schedule.id).then(function (response) {
                    _this.setListOfAgendaResolution = response;
                    _this.setInnerLoaderStatus = false;
                    _this.setDefaultValues();
                });
            }
            else {
                this.setListOfAgendaResolution = [];
                this.setInnerLoaderStatus = false;
            }
        };
        Agenda.prototype.clearAgendaResolutionModel = function () {
            this.setAgendaResolutionModel = this.initAgendaResolutionModel();
        };
        Agenda.prototype.clearEditors = function () {
            var defer = this.$q.defer();
            CKEDITOR.instances['editorForAgenda'].setData("");
        };
        Agenda.prototype.clearAgendaResolutionDetailsModel = function () {
            this.setAgendaResolutionDetailsModel = this.initAgendaResolutionModel();
        };
        Agenda.prototype.initAgendaResolutionModel = function () {
            var agendaResolution = {};
            agendaResolution.id = "";
            agendaResolution.agendaNo = "";
            agendaResolution.agenda = "";
            agendaResolution.plainTextAgenda = "";
            agendaResolution.resolution = "";
            agendaResolution.plainTextResolution = "";
            agendaResolution.viewOrder = null;
            agendaResolution.schedule = null;
            agendaResolution.committee = null;
            agendaResolution.status = this.getAgendaResolutionStatus[0];
            agendaResolution.createdBy = "";
            agendaResolution.createdOn = "";
            agendaResolution.updatedBy = "";
            agendaResolution.updatedOn = "";
            agendaResolution.lastModified = "";
            return agendaResolution;
        };
        Agenda.prototype.setDefaultValues = function () {
            this.agendaResolutionModel.committee = this.getCurrentItem;
            this.agendaResolutionModel.schedule = this.getCurrentSchedule;
        };
        Agenda.prototype.submit = function (form) {
            if (this.getAgendaResolutionModel.id == "") {
                this.create(form);
            }
            else {
                this.edit(form);
            }
            this.keywordArray.length = 0;
            this.keystring = "";
        };
        Agenda.prototype.create = function (form) {
            var _this = this;
            this.getEditorValueToModel().then(function () {
                _this.toJson(_this.getAgendaResolutionModel).then(function (json) {
                    _this.agendaService.create(json).then(function (response) {
                        if (response === ums.Utils.SUCCESS) {
                            _this.notify.success("Agenda is created successfully.");
                            _this.agendaKeywordPreperation();
                            _this.get();
                            _this.clearAgendaResolutionModel();
                            _this.clearEditors();
                            _this.resetForm(form);
                        }
                        else {
                            _this.notify.error("Sorry! Failed to create an agenda.");
                        }
                    });
                });
            });
        };
        Agenda.prototype.onKeyDownEvent = function ($event) {
            var defer = this.$q.defer();
            var key = $event.keyCode;
            var i = 1;
            console.log(key);
            var agenda_keyword = "";
            agenda_keyword = $("#agenda_keyword").val().toUpperCase();
            var checkbox_id = 1;
            var list_generate = "";
            if (key === 13) {
                var flag = 0;
                if (this.agendaKeyword.length == 0) {
                    this.agendaKeyword[0] = agenda_keyword;
                    this.keystring += agenda_keyword + ", ";
                    //$("#keyword_list").append("<li class='pbm' data-ng-model='agenda-keuword' data-ng-click='delete_keyword("+this.indexNumber+")'><div class=\"icheckbox_line-blue\"><input id=\"line-checkbox-"+ this.indexNumber+"\" type=\"checkbox\" name=\"keywords\" value=\""+agenda_keyword+"\" style=\"position: absolute; opacity: 0;\"><div class=\"icheck_line-icon\"></div>" +agenda_keyword+ "<ins class=\"iCheck-helper\" style=\"position: absolute; top: 0%; left: 0%; display: block; width: 100%; height: 100%; margin: 0px; padding: 0px; background: rgb(255, 255, 255); border: 0px; opacity: 0;\"></ins></div></li>");
                    //$("#keyword_add").append("<td ng-click='delete_keyword("+this.indexNumber+")'>"+ agenda_keyword +"</td>");
                    //$("#keyword_add").append("<td style='width: fit-content !important'><a data-ng-click='vm.delete_keyword("+this.indexNumber+")' style=\"cursor: pointer;\"> <div class=\"icheckbox_line-blue\"><input id=\"line-checkbox-"+ this.indexNumber+"\" type=\"checkbox\" name=\"keywords\" value=\""+agenda_keyword+"\" style=\"position: absolute; opacity: 0;\"><div class=\"icheck_line-icon\"></div>" +agenda_keyword+ "<ins class=\"iCheck-helper\" style=\"position: absolute; top: 0%; left: 0%; display: block; width: 100%; height: 100%; margin: 0px; padding: 0px; background: rgb(255, 255, 255); border: 0px; opacity: 0;\"></ins></div></a></td>");
                    // $("#keyword_add").append("<td style='width: fit-content !important'><a ng-click='vm.delete_keyword("+this.indexNumber+")' style=\"cursor: pointer;\"> <div class=\"icheckbox_line-blue\"><input id=\"line-checkbox-"+ this.indexNumber+"\" type=\"checkbox\" name=\"keywords\" value=\""+agenda_keyword+"\" style=\"position: absolute; opacity: 0;\"><div class=\"icheck_line-icon\"></div>" +agenda_keyword+ "<ins class=\"iCheck-helper\" style=\"position: absolute; top: 0%; left: 0%; display: block; width: 100%; height: 100%; margin: 0px; padding: 0px; background: rgb(255, 255, 255); border: 0px; opacity: 0;\"></ins></div></a></td>");
                    this.indexNumber = this.indexNumber + 1;
                    $("#agenda_keyword").val('');
                    $("#keyword_validation").empty();
                }
                else {
                    if (this.agendaKeyword.indexOf(agenda_keyword) > -1) {
                        $("#agenda_keyword").val('');
                        $("#keyword_validation").html("<font color='red'>This Keyword already exists!</font>").fadeIn(5000);
                    }
                    else {
                        this.agendaKeyword[this.count] = agenda_keyword;
                        //$("#keyword_add").append("<td style='width: fit-content !important'><a data-ng-click='vm.delete_keyword("+this.indexNumber+")' style=\"cursor: pointer;\"> <div class=\"icheckbox_line-blue\"><input id=\"line-checkbox-"+ this.indexNumber+"\" type=\"checkbox\" name=\"keywords\" value=\""+agenda_keyword+"\" style=\"position: absolute; opacity: 0;\"><div class=\"icheck_line-icon\"></div>" +agenda_keyword+ "<ins class=\"iCheck-helper\" style=\"position: absolute; top: 0%; left: 0%; display: block; width: 100%; height: 100%; margin: 0px; padding: 0px; background: rgb(255, 255, 255); border: 0px; opacity: 0;\"></ins></div></a></td>");
                        this.keystring += agenda_keyword + ", ";
                        this.indexNumber = this.indexNumber + 1;
                        this.count++;
                        $("#agenda_keyword").val('');
                        $("#keyword_validation").empty();
                    }
                }
                this.keywordArray = this.keystring.split(",");
                console.log("Keyword Array for Insertion=", this.keywordArray);
                console.log("Keystring =", this.keystring);
                $event.preventDefault();
                return false;
            }
        };
        Agenda.prototype.agendaKeywordPreperation = function () {
            var _this = this;
            var defer = this.$q.defer();
            var requestRecord = [];
            var keywords = "";
            var agendaNo;
            var meetingNo = $("#iSchedule").val();
            this.keywords_json["meetingNo"] = meetingNo;
            this.agendaService.getLastInsertAgendaId(meetingNo).then(function (record) {
                requestRecord = record.entries;
                for (var i = 0; i < requestRecord.length; i++) {
                    agendaNo = requestRecord[i].id;
                    _this.LastInsertId = agendaNo;
                    _this.keywords_json["agendaNo"] = requestRecord[i].id;
                }
                console.log("Keyword Json Object=", requestRecord);
                _this.agendaKeywordInsert();
            });
        };
        Agenda.prototype.agendaKeywordInsert = function () {
            var _this = this;
            var defer = this.$q.defer();
            var keywords = "";
            var meetingNo = $("#iSchedule").val();
            var i = 0;
            /*
            $('input:checkbox[name=keywords]').each(function()
            {
                // if($(this).is(':checked'))
                alert($(this).val());
                keywords += $(this).val().toUpperCase()+", ";
                i = i + 1;
            });
            if(i == 0){
                keywords = $("#agenda_keyword").val();
                this.keywords_json["agendaKeyword"] = keywords;
            }else
            {
                this.keywords_json["agendaKeyword"] = keywords.slice(0, -1);
            }
             */
            if (this.agendaKeyword != null) {
                this.keywords_json["agendaKeyword"] = this.agendaKeyword.toString() + ",";
            }
            if (this.agendaKeyword !== null) {
                this.agendaService.Keywordcreate(this.keywords_json).then(function (success) {
                    $("#keyword_list").empty();
                    $("#keyword_validation").empty();
                    _this.keystring = "";
                    setTimeout(function () { window.location.reload(); }, 2000);
                    //window.location.reload();
                });
            }
        };
        Agenda.prototype.agendaKeywordUpdate = function () {
            var defer = this.$q.defer();
            var keywords = "";
            var meetingNo = $("#iSchedule").val();
            var keywordId = $("#KeywordId").val();
            var agendaId = $("#agendaId").val();
            this.keywords_json["id"] = keywordId;
            var i = 0;
            $('input:checkbox[name=keywords]').each(function () {
                keywords += $(this).val().toUpperCase() + ", ";
                i = i + 1;
            });
            if (i == 0) {
                keywords = $("#agenda_keyword").val();
                this.keywords_json["agendaKeyword"] = keywords;
            }
            else {
                this.keywords_json["agendaKeyword"] = keywords.slice(0, -1);
            }
            console.log("Keywords for Agenda Keyword Update=" + keywords);
            console.log("keywordId", keywordId);
            if (keywordId != 0) {
                this.agendaService.keywordUpdate(this.keywords_json).then(function (success) {
                    $("#agenda_keyword").val('');
                    $('#edit_keyword tr').each(function () {
                        $(this).children('td').remove();
                    });
                });
            }
            else {
                console.log("new insert keywords=" + keywords);
                this.keywords_json["meetingNo"] = meetingNo;
                this.keywords_json["agendaNo"] = agendaId;
                this.agendaService.Keywordcreate(this.keywords_json).then(function (success) {
                    $("#keyword_list").empty();
                });
            }
        };
        Agenda.prototype.delete_keyword = function (checkbox_id) {
            $('#edit_keyword tr').each(function () {
                $(this).children('td').eq(checkbox_id).remove();
            });
            var itemtoRemove = this.keywordArray[checkbox_id];
            var keywordIndex = this.keywordArray.indexOf(itemtoRemove);
            this.keywordArray.splice($.inArray(itemtoRemove, this.keywordArray), 1);
            var itemIndex = this.agendaKeyword.indexOf(itemtoRemove);
            this.agendaKeyword.splice(itemIndex, 1);
            console.log("After deleting a word from agendaKeyword=", this.agendaKeyword);
            console.log("After deleting a word from keyArray=", this.keywordArray);
            this.keystring = "";
            this.keystring = this.keywordArray.toString();
            console.log("After deleting a word from KeyString=", this.keystring);
        };
        Agenda.prototype.getEditorValueToModel = function () {
            var defer = this.$q.defer();
            this.agendaResolutionModel.agenda = CKEDITOR.instances['editorForAgenda'].getData();
            defer.resolve("Success");
            return defer.promise;
        };
        Agenda.prototype.edit = function (form) {
            var _this = this;
            this.agendaKeywordUpdate();
            this.getEditorValueToModel().then(function () {
                _this.toJson(_this.getAgendaResolutionModel).then(function (json) {
                    _this.agendaService.revise(json).then(function (response) {
                        if (response === ums.Utils.SUCCESS) {
                            _this.notify.success(ums.Utils.SUCCESS);
                            _this.get();
                            _this.clearAgendaResolutionModel();
                            _this.clearEditors();
                            _this.resetForm(form);
                        }
                        else {
                            _this.notify.error(ums.Utils.ERROR);
                        }
                    });
                });
            });
        };
        Agenda.prototype.details = function (pIndex) {
            this.clearAgendaResolutionDetailsModel();
            this.setAgendaResolutionDetailsModel = angular.copy(this.getListOfAgendaResolution[pIndex]);
        };
        Agenda.prototype.resetForm = function (form) {
            form.$setPristine();
        };
        Agenda.prototype.setItem = function (pItem) {
            this.setCurrentItem = pItem;
        };
        Object.defineProperty(Agenda.prototype, "setAgendaResolutionDetailsModel", {
            set: function (pVal) {
                this.agendaResolutionDetailsModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getAgendaResolutionDetailsModel", {
            get: function () {
                return this.agendaResolutionDetailsModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "setHoldAgendaModel", {
            set: function (pVal) {
                this.agendaInHoldModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getHoldAgendaModel", {
            get: function () {
                return this.agendaInHoldModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "setAgendaResolutionModel", {
            set: function (pVal) {
                this.agendaResolutionModel = pVal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getAgendaResolutionModel", {
            get: function () {
                return this.agendaResolutionModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "setLoaderStatus", {
            set: function (pLoaderStatus) {
                this.loader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getLoaderStatus", {
            get: function () {
                return this.loader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "setInnerLoaderStatus", {
            set: function (pLoaderStatus) {
                this.innerLoader = pLoaderStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getInnerLoaderStatus", {
            get: function () {
                return this.innerLoader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "setListOfCommittees", {
            set: function (pList) {
                this.committees = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getListOfCommittees", {
            get: function () {
                return this.committees;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "setListOfSchedule", {
            set: function (pList) {
                this.schedule = [];
                this.schedule = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getListOfSchedule", {
            get: function () {
                return this.schedule;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "setListOfAgendaResolution", {
            set: function (pList) {
                this.agendaResolution = [];
                this.agendaResolution = pList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getListOfAgendaResolution", {
            get: function () {
                return this.agendaResolution;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "setCurrentItem", {
            set: function (pItem) {
                this.currentItem = {};
                this.currentItem = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getCurrentItem", {
            get: function () {
                return this.currentItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "setCurrentSchedule", {
            set: function (pItem) {
                this.currentSchedule = {};
                this.currentSchedule = pItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getCurrentSchedule", {
            get: function () {
                return this.currentSchedule;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "getAgendaResolutionStatus", {
            get: function () {
                return this.agendaResolutionStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Agenda.prototype, "setAgendaResolutionStatus", {
            set: function (value) {
                this.agendaResolutionStatus = value;
            },
            enumerable: true,
            configurable: true
        });
        Agenda.prototype.toJson = function (obj) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = obj;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        Agenda.$inject = [
            'registrarConstants',
            '$q',
            'notify',
            'committeesService',
            'scheduleService',
            'agendaService',
            'agendaHoldHistoryService',
            'FileUpload',
            'attachmentSettingService'
        ];
        return Agenda;
    }());
    ums.UMS.controller("Agenda", Agenda);
})(ums || (ums = {}));
var ums;
(function (ums) {
    ums.FILEMANAGER_CONFIG = {};
    ums.UMS.config(['BaseUriProvider', function (baseUriProvider) {
            baseUriProvider.setServicePath('/ums-webservice-academic/');
        }]);
    ums.UMS.config(['$ocLazyLoadProvider', function ($ocLazyLoadProvider) {
            $ocLazyLoadProvider.config({
                serie: true,
                modules: [
                    {
                        name: 'FileManagerApp',
                        files: [
                            'js/lib/angular-filemanager/app.js',
                            'js/lib/angular-filemanager/providers/config.js',
                            'js/lib/angular-filemanager/directives/directives.js',
                            'js/lib/angular-filemanager/filters/filters.js',
                            'js/lib/angular-filemanager/entities/chmod.js',
                            'js/lib/angular-filemanager/entities/item.js',
                            'js/lib/angular-filemanager/services/apihandler.js',
                            'js/lib/angular-filemanager/services/apimiddleware.js',
                            'js/lib/angular-filemanager/services/filenavigator.js',
                            'js/lib/angular-filemanager/providers/translations.js',
                            'js/lib/angular-filemanager/controllers/main.js',
                            'js/lib/angular-filemanager/controllers/selector-controller.js',
                            'js/lib/angular-translate.min.js',
                            'css/angular-filemanager.min.css',
                            'vendors/bootstrap-datepicker/css/datepicker.css',
                            'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                            'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css',
                            'vendors/bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js'
                        ],
                        serie: true
                    },
                    {
                        name: 'amCharts',
                        files: [
                            'vendors/amcharts/amcharts.js'
                        ]
                    },
                    {
                        name: 'serial',
                        files: [
                            'vendors/amcharts/serial.js'
                        ]
                    },
                    {
                        name: 'amChartsDirective',
                        files: [
                            'js/lib/amChartsDirective.js'
                        ]
                    }
                ]
            });
        }]);
    angular.module('ngHandsontableApp', ['ngHandsontable']);
    angular.module('dirPaginationApp', ['angularUtils.directives.dirPagination']);
    angular.module('ngDeviceDetectorApp', ['ng.deviceDetector']);
    angular.module('jqWidgetsApp', ['jqwidgets']);
    angular.module('toggleSwitch', ['toggle-switch']);
    angular.module('ui.grid', ['ui.grid']);
    angular.module('ui.grid.selection', ['ui.grid.selection']);
    angular.module('ui.grid.exporter', ['ui.grid.exporter']);
    // angular.module('ngSanitize',['ngSanitize']);
    ums.UMS.constant("appConstants", ums.Constants.Default());
    ums.UMS.constant("registrarConstants", ums.Constants.RegistrarConstant());
    ums.UMS.constant("libConstants", ums.Constants.LibConstant());
    ums.UMS.filter('$split', function () {
        return function (input) {
            return input.split(',');
        };
    });
    /* Filter used in course-teacher.html, it returns the total size of the keys in a json object */
    ums.UMS.filter('numKeys', function () {
        return function (json) {
            var keys = Object.keys(json);
            return keys.length;
        };
    });
    ums.UMS.filter('nth', function () {
        return function (serial) {
            switch (serial) {
                case 1:
                    return serial + "st";
                case 2:
                    return serial + "nd";
                case 3:
                    return serial + "rd";
                case 4:
                    return serial + "th";
                case 5:
                    return serial + "th";
            }
            return serial;
        };
    });
    ums.UMS.filter('range', function () {
        return function (input, total) {
            total = parseInt(total);
            for (var i = 1; i <= total; i++) {
                var num = i + '';
                input.push(num.padStart(2, '0'));
            }
            return input;
        };
    });
    ums.UMS.config(function ($stateProvider, $urlRouterProvider, $locationProvider) {
        //
        // For any unmatched url, redirect to /state1
        //$locationProvider.html5Mode(true);
        $urlRouterProvider.when('/passwordReport', '/passwordReport/singleUserPassword');
        $urlRouterProvider.when('/mailBox', '/mailBox/inbox');
        $urlRouterProvider.otherwise("/userHome");
        //
        // Now set up the states
        $stateProvider
            .state('dashBoard', {
            url: "/dashBoard",
            templateUrl: 'templates/states/main.html',
            controller: 'MainController',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/jquery-tablesorter/jquery.tablesorter.min.js',
                                'vendors/calendar/zabuto_calendar.min.js',
                                'vendors/flot-chart/jquery.flot.categories.js',
                                'vendors/flot-chart/jquery.flot.pie.js',
                                'vendors/flot-chart/jquery.flot.tooltip.js',
                                'vendors/flot-chart/jquery.flot.resize.js',
                                'vendors/flot-chart/jquery.flot.fillbetween.js',
                                'vendors/flot-chart/jquery.flot.stack.js',
                                'vendors/flot-chart/jquery.flot.spline.js'
                            ]
                        });
                    }]
            }
        })
            .state('userHome', {
            url: "/userHome",
            templateUrl: 'views/user-home.html',
            controller: 'MainController',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js']
                        });
                    }]
            }
        })
            .state('logout', {
            url: "/logout",
            controller: 'Logout'
        })
            .state('noticeForStudents', {
            url: "/noticeForStudents",
            controller: 'StudentNotice',
            templateUrl: 'views/student-notification.html',
            controllerAs: 'vm'
        })
            .state('studentWaiverApproval', {
            url: "/studentWaiverApproval",
            controller: 'StudentWaiverApproval',
            templateUrl: 'views/waiver/student-waiver-approval.html',
            controllerAs: 'vm'
        })
            .state('createSemester', {
            url: "/createSemester",
            controller: 'NewSemester',
            templateUrl: 'views/semester/new-semester.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-notify/jquery.notify.js'
                            ]
                        });
                    }]
            }
        }).state('amsAttendanceInfo', {
            url: "/amsAttendanceInfo",
            controller: 'AmsAttendanceInfo',
            controllerAs: 'vm',
            templateUrl: 'views/ams/ams-attendance-info.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load(['amCharts', 'serial', 'amChartsDirective'], { serie: true });
                    }]
            }
        }).
            state('showSemesterList', {
            url: "/showSemesterList",
            controller: "SemesterInfo",
            templateUrl: "views/semester/list-semester.html"
        }).
            state('biometricAttendanceReport', {
            url: "/biometricAttendanceReport",
            controller: "BiometricAttendanceReport",
            controllerAs: 'vm',
            templateUrl: "views/ams/biometric-attendance-report.html"
        }).state('dayWiseReport', {
            url: "/dayWiseReport",
            controller: "DayWiseReport",
            controllerAs: 'vm',
            templateUrl: "views/ams/day-wise-report.html"
        }).
            state('createSyllabus', {
            url: "/createSyllabus",
            controller: 'NewSyllabus',
            templateUrl: 'views/syllabus/new-syllabus.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('studentProfilePaymentInfo', {
            url: "/studentProfilePaymentInfo",
            controller: 'StudentProfilePaymentInformation',
            controllerAs: 'vm',
            templateUrl: 'views/student-payment-information/student-payment-information.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.css',
                                'vendors/bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.css',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('gradeSubmissionDeadLine', {
            url: "/gradeSubmissionDeadLine",
            controller: 'GradeSubmissionDeadLine',
            templateUrl: 'views/grade/grade-submission-dead-line.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-daterangepicker/daterangepicker-bs3.css',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js',
                                'vendors/bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js',
                                'vendors/jquery-maskedinput/jquery-maskedinput.js',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('examSeatPlan', {
            url: "/examSeatPlan",
            controller: 'ExamSeatPlan',
            templateUrl: 'views/semester/exam-seat-plan.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('examSeatPlanRoomWiseReport', {
            url: "/examSeatPlanRoomWiseReport",
            controller: 'ExamSeatPlanRoomWiseReport',
            templateUrl: 'views/semester/exam-seat-plan-room-wise-report.html',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('examStudents', {
            url: "/examStudents",
            controller: 'ExamStudents',
            templateUrl: 'views/semester/exam-students.html',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('modifySeatPlan', {
            url: "/modifySeatPlan",
            controller: 'ModifySeatPlan',
            controllerAs: 'vm',
            templateUrl: 'views/semester/modify-seat-plan.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('teachersRoutine', {
            url: "/teachersRoutine",
            controller: 'TeachersRoutine',
            templateUrl: 'views/dept/teachers-routine.html',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('roomBasedRoutine', {
            url: "/roomBasedRoutine",
            controller: 'RoomBasedRoutine',
            templateUrl: 'views/dept/room-based-routine.html'
        })
            .state('studentAdviser', {
            url: "/studentAdviser",
            controller: 'StudentAdviser',
            templateUrl: 'views/dept/student-adviser.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js'
                            ]
                        });
                    }]
            }
        }).state('sectionAssignment', {
            url: "/sectionAssignment",
            controller: 'SectionAssignment',
            templateUrl: 'views/section-assign/section-assign.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js'
                            ]
                        });
                    }]
            }
        }).state('publishSeatPlan', {
            url: "/publishSeatPlan",
            controller: 'PublishSeatPlan',
            templateUrl: 'views/semester/publish-seat-plan.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('viewSeatPlan', {
            url: "/viewSeatPlan",
            controller: 'ViewSeatPlan',
            templateUrl: 'views/semester/view-seat-plan.html'
        })
            .state('seatPlanReports', {
            url: "/seatPlanReports",
            controller: 'SeatPlanReports',
            templateUrl: 'views/semester/seat-plan-reports.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('create', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-registrar-web/iums/#/create', '_self');
            }
        })
            .state('creationHistory', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-registrar-web/iums/#/creationHistory', '_self');
            }
        })
            .state('resendCredentials', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-registrar-web/iums/#/resendCredentials', '_self');
            }
        })
            .state('verifyEmployee', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-registrar-web/iums/#/verifyEmployee', '_self');
            }
        })
            .state('employeeSearch', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-registrar-web/iums/#/employeeSearch', '_self');
            }
        })
            .state('applicationCarry', {
            url: "/applicationCarry",
            controller: 'ApplicationCarry',
            templateUrl: 'views/application/application-carry.html'
        })
            .state('studentPaymentSlip', {
            url: "/studentPaymentSlip",
            controller: 'StudentPaymentSlip',
            controllerAs: 'vm',
            templateUrl: 'views/student-payment-slip/student-payment-slip.html'
        })
            .state('semesterInstallments', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/semesterInstallments', '_self');
            }
        })
            .state('customPayments', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/customPayments', '_self');
            }
        })
            .state('journalVoucher', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/journalVoucher', '_self');
            }
        })
            .state('balanceSheetReport', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/balanceSheetReport', '_self');
            }
        })
            .state('generalLedgerReport', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/generalLedgerReport', '_self');
            }
        })
            .state('receiptVoucher', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/receiptVoucher', '_self');
            }
        })
            .state('paymentVoucher', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/paymentVoucher', '_self');
            }
        })
            .state('contraVoucher', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/contraVoucher', '_self');
            }
        })
            .state('studentPaymentInfo', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/studentPaymentInfo', '_self');
            }
        })
            .state('accountsReport', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/accountsReport', '_self');
            }
        })
            .state('trialBalance', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-account-web/iums/#/trialBalance', '_self');
            }
        })
            .state('agendaIndexing', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-registrar-web/iums/#/agendaIndexing', '_self');
            }
        })
            .state('paymentHistory', {
            url: "/studentPaymentHistory",
            controller: 'StudentPaymentHistory',
            controllerAs: 'vm',
            templateUrl: 'views/student-payment-information/student-payment-history.html'
        })
            .state('semesterExtension', {
            url: "/semesterExtension",
            controller: 'SemesterExtension',
            controllerAs: 'vm',
            templateUrl: 'views/semester-extension/semester-extension.html'
        })
            .state('loginAs', {
            url: "/loginAs",
            controller: 'LoginAs',
            controllerAs: 'vm',
            templateUrl: 'views/loginAs/login-as.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.css',
                                'vendors/bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.css',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('applicationClearanceImprovement', {
            url: "/applicationClearanceImprovement",
            controller: 'ApplicationClearanceImprovement',
            templateUrl: 'views/application/application-clearance-improvement.html'
        })
            .state('applicationTES', {
            url: "/applicationTES",
            controller: 'studentTES',
            controllerAs: 'vm',
            templateUrl: 'views/teachers-evaluation-system/student-tes.html'
        }).state('teachersEvaluationReport', {
            url: "/evaluationReport",
            controller: 'TeachersEvaluationReport',
            controllerAs: 'vm',
            templateUrl: 'views/teachers-evaluation-system/teachers-evaluation-report.html'
        }).state('showSyllabusList', {
            url: "/showSyllabusList",
            controller: "GridSyllabus",
            templateUrl: "views/syllabus/list-syllabus.html",
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/jquery-tablesorter/themes/blue/style-custom.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-tablesorter/jquery.tablesorter.js'
                            ]
                        });
                    }]
            }
        })
            .state('viewFullSyllabus', {
            url: "/viewFullSyllabus/:syllabusId",
            controller: 'FullSyllabus',
            templateUrl: 'views/syllabus/view-full-syllabus.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('createStudent', {
            url: "/createStudent",
            controller: 'NewStudent',
            templateUrl: 'views/student/new-student.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-maskedinput/jquery-maskedinput.js'
                            ]
                        });
                    }]
            }
        })
            .state('createUgCourse', {
            url: "/createUgCourse",
            controller: 'NewCourseUg',
            templateUrl: 'views/course/new-course-ug.html'
        })
            .state('createPgCourse', {
            url: "/createPgCourse",
            controller: 'NewCoursePg',
            templateUrl: 'views/course/new-course-pg.html'
        })
            .state('semesterConfig', {
            url: "/semesterConfig",
            controller: 'SemesterConfig',
            templateUrl: 'views/semester/semester-config.html'
        })
            .state('semesterSettingParameter', {
            url: "/semesterSettingParameter",
            controller: 'SemesterSettingParameter',
            templateUrl: 'views/semester/semester-setting-parameter.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-colorpicker/css/colorpicker.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-daterangepicker/daterangepicker-bs3.css',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.min.css',
                                'vendors/bootstrap-clockface/css/clockface.css',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js',
                                'vendors/moment/moment.js',
                                'vendors/bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js',
                                'vendors/bootstrap-clockface/js/clockface.js',
                                'vendors/bootstrap-colorpicker/js/bootstrap-colorpicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-maskedinput/jquery-maskedinput.js',
                                'vendors/charCount.js',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('optionalCourseDatelineProgramWise', {
            url: "/optionalCourseDatelineProgramWise",
            controller: 'OptionalCourseDatelineSet',
            templateUrl: 'views/semester/optional-course-dateline.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-colorpicker/css/colorpicker.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-daterangepicker/daterangepicker-bs3.css',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.min.css',
                                'vendors/bootstrap-clockface/css/clockface.css',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js',
                                'vendors/moment/moment.js',
                                'vendors/bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js',
                                'vendors/bootstrap-clockface/js/clockface.js',
                                'vendors/bootstrap-colorpicker/js/bootstrap-colorpicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-maskedinput/jquery-maskedinput.js',
                                'vendors/charCount.js',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('teachingEvaluationDatelineProgramWise', {
            url: "/teachingEvaluationDatelineProgramWise",
            controller: 'TeacherEvaluationDatelineSet',
            templateUrl: 'views/semester/teacher-evaluation-dateline.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-colorpicker/css/colorpicker.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-daterangepicker/daterangepicker-bs3.css',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.min.css',
                                'vendors/bootstrap-clockface/css/clockface.css',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js',
                                'vendors/moment/moment.js',
                                'vendors/bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js',
                                'vendors/bootstrap-clockface/js/clockface.js',
                                'vendors/bootstrap-colorpicker/js/bootstrap-colorpicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-maskedinput/jquery-maskedinput.js',
                                'vendors/charCount.js',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('semesterWithdrawAppStd', {
            url: "/semesterWithdrawAppStd",
            controller: 'SemesterWithdrawAppStd',
            templateUrl: 'views/semester/semester-withdraw-app-std.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/ckeditor/ckeditor.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('semesterWithdrawApp', {
            url: "/semesterWithdrawApp",
            controller: 'SemesterWithdrawAppEmp',
            templateUrl: 'views/semester/semester-withdraw-app-emp.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/ckeditor/ckeditor.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('semesterSyllabusMap', {
            url: "/semesterSyllabusMap",
            controller: 'SemesterSyllabusMap',
            templateUrl: 'views/semester/semester-syllabus-map.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('changePassword', {
            url: "/changePassword",
            controller: 'ChangePassword',
            templateUrl: 'views/common/change-password.html'
        })
            .state('passwordReport', {
            url: "/passwordReport",
            controller: 'PasswordReport',
            templateUrl: 'views/common/password-report.html'
        })
            .state('changeRequestPanel', {
            url: "/changeRequestPanel",
            controller: 'ChangeRequestPanel',
            templateUrl: 'views/student/change-request-panel.html'
        })
            .state('changeRequestList', {
            onEnter: function ($window) {
                $window.open('https://' + location.hostname + '/ums-registrar-web/iums/#/changeRequestList', '_blank');
            }
        })
            .state('profileChangeRequest', {
            url: "/profileChangeRequest",
            templateUrl: 'views/student/profile-change-request.html',
            controller: 'ProfileChangeRequest',
            controllerAs: 'vm'
        })
            .state('multipleChangeRequest', {
            url: "/multipleChangeRequest",
            controller: 'MultipleChangeRequest',
            templateUrl: 'views/student/multiple-change-request.html',
            controllerAs: 'vm'
        })
            .state('passwordReport.singleUserPassword', {
            controller: 'PasswordReport',
            url: "/singleUserPassword",
            templateUrl: "views/user-management/single-user-password.html"
        })
            .state('passwordReport.bulkUserPassword', {
            controller: 'PasswordReport',
            url: "/bulkUserPassword",
            templateUrl: "views/user-management/bulk-user-password.html"
        })
            .state('courseTeacher', {
            url: "/courseTeacher",
            controller: 'CourseTeacher',
            templateUrl: 'views/dept/course-teacher.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js']
                        });
                    }]
            }
        })
            .state('examiner', {
            url: "/examiner",
            controller: 'Examiner',
            templateUrl: 'views/dept/examiner.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js']
                        });
                    }]
            }
        })
            .state('classRoutine', {
            url: "/classRoutine",
            controller: 'ClassRoutine',
            templateUrl: 'views/routine/class-routine.html',
            controllerAs: 'vm'
        })
            .state('classRoutine.classRoutineChart', {
            url: "/classRoutineChart",
            controller: 'ClassRoutineChartController',
            templateUrl: 'views/routine/class-routine-chart.html',
            controllerAs: 'vm'
        })
            .state('classRoutine.classRoutineChart.classRoutineSlotEditForm', {
            url: "/classRoutineSlotEditForm",
            controller: 'ClassRoutineSlotEditController',
            templateUrl: 'views/routine/routine-slot-edit-form.html',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js',
                                'vendors/moment/moment.js',
                                'vendors/bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('classRoutineConfig', {
            url: "/classRoutineConfig",
            controller: 'RoutineConfigController',
            templateUrl: 'views/routine/class-routine-config.html',
            controllerAs: 'vm'
        })
            .state('uploadMeritList', {
            url: "/uploadMeritList",
            templateUrl: 'views/admission/merit-list-upload.html',
            controller: 'AdmissionMeritList'
        })
            .state('admissionTotalSeat', {
            url: "/admissionTotalSeat",
            templateUrl: 'views/admission/admission-total-seat-assignment.html',
            controller: 'AdmissionTotalSeatAssignment'
        })
            .state('admissionCancellation', {
            url: "/admissionCancellation",
            params: {
                'studentId': null
            },
            templateUrl: 'views/admission/admission-cancellation.html',
            controller: 'AdmissionCancellation',
            controllerAs: 'vm'
        })
            .state('admissionCancellationList', {
            url: "/admissionCancellationList",
            templateUrl: 'views/admission/admission-cancellation-list.html',
            controller: 'AdmissionCancellationList',
            controllerAs: 'vm'
        })
            .state('admissionDepartmentSelection', {
            url: "/admissionDepartmentSelection",
            templateUrl: 'views/admission/admission-department-selection.html',
            controller: 'AdmissionDepartmentSelection',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('uploadTaletalkData', {
            url: "/uploadTaletalkData",
            templateUrl: 'views/admission/taletalk-data-upload.html',
            controller: 'AdmissionTaletalkData'
        })
            .state('departmentSelectionDeadline', {
            url: "/departmentSelectionDeadline",
            templateUrl: 'views/admission/department-selection-deadline.html',
            controller: 'DepartmentSelectionDeadlineAssignment'
        })
            .state('admissionStatistics', {
            url: "/admissionStatistics",
            templateUrl: 'views/admission/admission-statistics.html',
            controller: 'AdmissionStatistics'
        })
            .state('admissionStudentReceipt', {
            url: "/admissionStudentReceipt",
            templateUrl: 'views/admission/admission-student-receipt.html',
            controller: 'AdmissionStudentReceipt',
            controllerAs: 'vm'
        })
            .state('admissionStudentId', {
            url: "/admissionStudentId",
            templateUrl: 'views/admission/admission-student-id.html',
            controller: 'AdmissionStudentId'
        })
            .state('admissionMigrationList', {
            url: "/admissionMigrationList",
            templateUrl: 'views/admission/admission-migration-list.html',
            controller: 'AdmissionMigrationList',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('certificateVerification', {
            url: "/certificateVerification",
            templateUrl: 'views/admission/certificate-verification.html',
            controller: 'AdmissionCertificateVerification',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('admissionReport', {
            url: "/admissionReport",
            templateUrl: 'views/admission/admission-report.html',
            controller: 'AdmissionReport',
            controllerAs: 'vm'
        })
            .state('studentsRoutine', {
            url: "/studentsRoutine",
            controller: 'StudentsRoutine',
            controllerAs: 'vm',
            templateUrl: 'views/routine/students-routine.html'
        })
            .state('studentProfile', {
            url: "/studentProfile",
            params: {
                'studentObj': null
            },
            controller: "StudentProfile",
            templateUrl: 'views/student/student-profile-v1.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-datetimepicker-malot/css/bootstrap-datetimepicker.min.css',
                                'vendors/bootstrap-datetimepicker-malot/js/bootstrap-datetimepicker.min.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('assignRole', {
            url: "/assignRole",
            controller: 'AssignRole',
            controllerAs: 'vm',
            templateUrl: 'views/common/assign-role.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-notify/jquery.notify.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css'
                            ]
                        });
                    }]
            }
        })
            .state('degreeAwardDate', {
            url: "/degreeAwardDate",
            controller: 'DegreeAwardDate',
            templateUrl: 'views/degree-award-date/degree-award-date.html',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-notify/jquery.notify.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css'
                            ]
                        });
                    }]
            }
        })
            .state('downloadNomenclature', {
            url: "/downloadNomenclature",
            controller: 'DownloadNomenclature',
            templateUrl: 'views/nomenclature/download-nomenclature.html',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-notify/jquery.notify.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css'
                            ]
                        });
                    }]
            }
        })
            .state('studentDetailsReport', {
            url: "/studentDetailsReport",
            controller: 'StudentDetailsReport',
            templateUrl: 'views/student-details-report/student-details-report.html',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-notify/jquery.notify.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css'
                            ]
                        });
                    }]
            }
        })
            .state('registeredStudentsCountReport', {
            url: "/registeredStudentsCountReport",
            controller: 'TotalRegisteredStudentsCountReport',
            templateUrl: 'views/total-registered-students-count-report/total-registered-students-count-report.html',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/jquery-notify/jquery.notify.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css'
                            ]
                        });
                    }]
            }
        })
            .state('sectionWiseStudentInfoReport', {
            url: "/sectionWiseStudentInfoReport",
            controller: 'SectionWiseStudentInfoReport',
            templateUrl: 'views/section-wise-student-info-report/section-wise-student-info-report.html',
            controllerAs: 'vm'
        })
            .state('advisingStudentInfoReport', {
            url: "/advisingStudentInfoReport",
            controller: 'AdvisingStudentInfoReport',
            templateUrl: 'views/advising-student-info-report/advising-student-info-report.html',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('admissionInfoReport', {
            url: "/admissionInfoReport",
            controller: 'AdmissionInfoReport',
            templateUrl: 'views/admission-info-report/admission-info-report.html',
            controllerAs: 'vm'
        })
            .state('classRoomInfo', {
            url: "/classRoomInfo",
            controller: 'ClassRoomInfo',
            templateUrl: 'views/common/academic/class-room.html'
        })
            .state('examRoutine', {
            url: "/examRoutine",
            controller: 'ExamRoutine',
            templateUrl: 'views/common/academic/exam-routine.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('examRoutineStudent', {
            url: "/examRoutineStudent",
            controller: 'ExamRoutineStudent',
            controllerAs: 'vm',
            templateUrl: 'views/common/academic/exam-routine-student.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js'
                            ]
                        });
                    }]
            }
        })
            .state('optionalCoursesOffer', {
            url: "/optionalCoursesOffer",
            templateUrl: 'views/dept/optional-course-setting.html',
            controller: 'OptionalCoursesOffer'
        })
            .state('optionalCoursesApplication', {
            url: "/optionalCoursesApplication",
            templateUrl: 'views/student/optional-course.html',
            controller: 'OptionalCoursesApplication'
        })
            .state('semesterEnrollment', {
            url: "/semesterEnrollment",
            templateUrl: 'views/semester/semester-enrollment.html',
            controller: 'SemesterEnrollment'
        })
            .state('flushCache', {
            url: "/flushCache",
            controller: 'FlushCache'
        })
            .state('gradeSheetSelectionTeacher', {
            url: "/gradeSheetSelectionTeacher/:1",
            templateUrl: 'views/grade/grade-sheet-selection.html',
            controller: 'MarksSubmission',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load(['amCharts', 'serial', 'amChartsDirective'], { serie: true });
                    }]
            }
        })
            .state('gradeSheetSelectionHead', {
            url: "/gradeSheetSelectionHead/:1",
            templateUrl: 'views/grade/grade-sheet-selection.html',
            controller: 'MarksSubmission',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load(['amCharts', 'serial', 'amChartsDirective'], { serie: true });
                    }]
            }
        })
            .state('gradeSheetSelectionCoE', {
            url: "/gradeSheetSelectionCoE/:1",
            templateUrl: 'views/grade/grade-sheet-selection.html',
            controller: 'MarksSubmission',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load(['amCharts', 'serial', 'amChartsDirective',
                            'vendors/bootstrap-datepicker/css/datepicker.css',
                            'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js'], { serie: true });
                    }]
            }
        })
            .state('gradeSheetSelectionVC', {
            url: "/gradeSheetSelectionVC/:1",
            templateUrl: 'views/grade/grade-sheet-selection.html',
            controller: 'MarksSubmission',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load(['amCharts', 'serial', 'amChartsDirective'], { serie: true });
                    }]
            }
        })
            .state('loggerGrid', {
            url: "/loggerGrid",
            controller: 'LoggerGrid',
            templateUrl: 'views/logger/logger-grid.html'
        })
            .state('courseMaterial', {
            url: "/courseMaterial",
            //url: "/courseMaterial/:1/:2",
            controller: 'CourseMaterial',
            controllerAs: 'vm',
            templateUrl: 'views/course-material/course-material.html',
            resolve: {
                fileManager: ['$ocLazyLoad',
                    function ($ocLazyLoad) {
                        return $ocLazyLoad.load(['FileManagerApp']);
                    }
                ],
                loadMyCtrl: ['$$animateJs', '$ocLazyLoad', 'fileManager', function ($$animateJs, $ocLazyLoad, fileManager) {
                        return fileManager;
                    }]
            }
        })
            .state('studentCourseMaterial', {
            url: "/studentCourseMaterial",
            controller: 'StudentCourseMaterial',
            templateUrl: 'views/course-material/student-course-material.html',
            resolve: {
                fileManager: ['$ocLazyLoad',
                    function ($ocLazyLoad) {
                        return $ocLazyLoad.load(['FileManagerApp']);
                    }
                ],
                loadMyCtrl: ['$$animateJs', '$ocLazyLoad', 'fileManager', function ($$animateJs, $ocLazyLoad, fileManager) {
                        return fileManager;
                    }]
            }
        })
            .state('degreeAward', {
            url: "/degreeAward",
            controller: 'DegreeAwardController',
            controllerAs: 'vm',
            templateUrl: 'views/degree-award/degree-award.html'
        })
            .state('resultProcessing', {
            url: "/resultProcessing",
            controller: 'ResultProcessing',
            controllerAs: 'vm',
            templateUrl: 'views/result/result-processing.html'
        })
            .state('studentWiseResultProcess', {
            url: "/studentWiseResultProcess",
            controller: 'StudentWiseResultProcess',
            controllerAs: 'vm',
            templateUrl: 'views/result/student-wise-result-process.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/jplist/html/css/jplist-custom.css']
                        });
                    }]
            }
        })
            .state('advisingStudents', {
            url: "/advisingStudents",
            controller: 'AdvisingStudents',
            templateUrl: 'views/dept/advising-students.html'
        })
            .state('gStudentProfile', {
            url: "/gStudentProfile",
            controller: 'GStudentProfile',
            templateUrl: 'views/student/g-student-profile-search-by-id.html'
        })
            .state('classAttendance', {
            url: "/classAttendance",
            controller: 'ClassAttendance',
            templateUrl: 'views/dept/class-attendance.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js']
                        });
                    }]
            }
        })
            .state('marksSubmissionStat', {
            url: "/marksSubmissionStat",
            controller: 'MarksSubmissionStat',
            templateUrl: 'views/grade/marks-submission-stat.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/jquery-tablesorter/themes/blue/style-custom.css',
                                'vendors/jquery-tablesorter/jquery.tablesorter.js']
                        });
                    }]
            }
        })
            .state('publicHolidays', {
            url: "/publicHolidays",
            controller: 'PublicHolidays',
            controllerAs: 'vm',
            templateUrl: 'views/holidays/public-holidays.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('empLeaveApplication', {
            url: "/empLeaveApplication",
            controller: 'employeeLeaveApplicationController',
            controllerAs: 'vm',
            templateUrl: 'views/leave-management/employee-leave-application.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.css',
                                'vendors/bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.css',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('employeeExamAttendance', {
            url: "/employeeExamAttendance",
            controller: 'EmployeeExamAttendance',
            controllerAs: 'vm',
            templateUrl: 'views/employee-exam-attendance/employee-exam-attendance.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.css',
                                'vendors/bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.css',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js'
                            ]
                        });
                    }]
            }
        }).state('optCourseOffer', {
            url: "/optCourseOffer",
            controller: 'OptCourseOffer',
            controllerAs: 'vm',
            templateUrl: 'views/optCourse/optCourseOffer/opt-course-offer.html'
        }).state('optStudentCourseSelection', {
            url: "/optStudentCourseSelection",
            controller: 'OptStudentCourseSelection',
            controllerAs: 'vm',
            templateUrl: 'views/optCourse/optStudentCourseSelection/opt-student-course-selection.html'
        }).state('optShiftStudent', {
            url: "/optShiftStudent",
            controller: 'OptShiftStudent',
            controllerAs: 'vm',
            templateUrl: 'views/optCourse/optShiftStudent/opt-shift.html'
        }).state('optSection', {
            url: "/optSection",
            controller: 'OptSection',
            controllerAs: 'vm',
            templateUrl: 'views/optCourse/optSection/opt-section.html'
        }).state('leaveApplication', {
            url: "/leaveApplication",
            controller: 'LeaveApplicationController',
            controllerAs: 'vm',
            templateUrl: 'views/leave-management/leave-application.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.css',
                                'vendors/bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.css',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js'
                            ]
                        });
                    }]
            }
        }).state('dailyExamReport.expelledInformation', {
            url: "/expelledInformation",
            controller: 'ExpelledInformation',
            controllerAs: 'vm',
            templateUrl: 'views/expelled-information/add-expelled-information.html',
            params: {
                semesterId: null,
                examType: null,
                examDate: null
            },
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        }).state('dailyExamReport.dailyExamAttendanceReport', {
            url: "/dailyExamAttendanceReport",
            controller: 'DailyExamAttendanceReport',
            controllerAs: 'vm',
            templateUrl: 'views/daily-examination-report/student-exam-attendant-info.html',
            params: {
                semesterId: null,
                examType: null,
                examDate: null
            },
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        }).state('dailyExamReport', {
            url: "/dailyExamReport",
            controller: 'DailyExamReport',
            controllerAs: 'vm',
            templateUrl: 'views/daily-examination-report/daily-examination-report.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        }).state('dailyExamReport.questionCorrectionInfo', {
            url: "/questionCorrectionInfo",
            controller: 'QuestionCorrectionInfo',
            controllerAs: 'vm',
            templateUrl: 'views/question-correction-info/question-correction-info.html',
            params: {
                semesterId: null,
                examType: null,
                examDate: null
            },
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        }).state('dailyExamReport.absentLateComingInfo', {
            url: "/absentLateComingInfo",
            controller: 'AbsentLateComingInfo',
            controllerAs: 'vm',
            templateUrl: 'views/absent-late-coming-info/absent-late-coming-info.html',
            params: {
                semesterId: null,
                examType: null,
                examDate: null
            },
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css',
                                'vendors/bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('leaveApproval', {
            url: "/leaveApproval",
            controller: 'LeaveApplicationApproval',
            controllerAs: 'vm',
            templateUrl: 'views/leave-management/leave-application-approval.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.css',
                                'vendors/bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.css',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('carryApproval', {
            url: "/carryApproval",
            controller: 'CarryApplicationApproval',
            controllerAs: 'vm',
            templateUrl: 'views/cciManagement/carry-application-approval.html'
        })
            .state('deadlineExtension', {
            url: "/deadlineExtension",
            controller: 'DeadlineExtension',
            controllerAs: 'vm',
            templateUrl: 'views/deadline-extension/deadline-extension.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.css',
                                'vendors/bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.css',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js'
                            ]
                        });
                    }]
            }
        }).state('downloadTranscript', {
            url: "/downloadTranscript",
            controller: 'DownloadTranscript',
            controllerAs: 'vm',
            templateUrl: 'views/transcript/download-transcript.html'
        }).state('cciReports', {
            url: "/cciReports",
            controller: 'cciReports',
            controllerAs: 'vm',
            templateUrl: 'views/cciManagement/cci-reports.html'
        }).state('teacherEvaluationSystem', {
            url: "/teacherEvaluationSystem",
            controller: 'AdminVcTes',
            controllerAs: 'vm',
            templateUrl: 'views/teachers-evaluation-system/admin-vc-tes.html'
        }).state('tesComparison', {
            url: "/tesComparison",
            controller: 'AdminVcTesComparison',
            controllerAs: 'vm',
            templateUrl: 'views/teachers-evaluation-system/search-box-evaluation-compare.html'
        }).state('questionWiseReport', {
            url: "/questionWiseReport",
            controller: 'IndividualQuestionTesReport',
            controllerAs: 'vm',
            templateUrl: 'views/teachers-evaluation-system/individual-question-tes-report.html'
        }).state('assignQuestions', {
            url: "/assignQuestions",
            controller: 'QuestionsAdmin',
            controllerAs: 'vm',
            templateUrl: 'views/teachers-evaluation-system/questions.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js'
                            ]
                        });
                    }]
            }
        }).state('tes', {
            url: "/tes",
            controller: 'HeadTES',
            controllerAs: 'vm',
            templateUrl: 'views/teachers-evaluation-system/head-tes.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js',
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js'
                            ]
                        });
                    }]
            }
        })
            .state('userGuide', {
            url: "/userGuide",
            controller: 'UserGuide',
            templateUrl: 'views/common/user-guide.html'
        })
            .state('mailBox', {
            url: "/mailBox",
            templateUrl: 'views/common/mailbox/mailbox.html'
        })
            .state('mailBox.inbox', {
            url: "/inbox",
            controller: 'MailInbox',
            templateUrl: 'views/common/mailbox/mail-inbox.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/bootstrap-wysihtml5/bootstrap3-wysihtml5.min.css',
                                'vendors/bootstrap-wysihtml5/bootstrap3-wysihtml5.all.min.js']
                        });
                    }]
            }
        })
            .state('mailBox.composeMail', {
            url: "/composeMail",
            controller: 'MailCompose',
            templateUrl: 'views/common/mailbox/mail-compose.html'
        })
            .state('mailBox.viewMail', {
            url: "/viewMail",
            templateUrl: 'views/common/mailbox/mail-view.html'
        })
            .state('readmission', {
            url: "/readmission",
            controller: 'ReadmissionController',
            controllerAs: 'vm',
            templateUrl: 'views/readmission/readmission.html'
        })
            .state('semesterFee', {
            url: "/semesterFee",
            controller: 'SemesterFeeController',
            controllerAs: 'vm',
            templateUrl: 'views/fee/semesterfee/semester.fee.html'
        })
            .state('semesterFeePrevious', {
            url: "/semesterFeePrevious",
            controller: 'SemesterFeePreviousController',
            controllerAs: 'vm',
            templateUrl: 'views/fee/semesterfee/semester.fee.previous.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.css',
                                'vendors/bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js',
                                'vendors/bootstrap-timepicker/css/bootstrap-timepicker.css',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('certificateFee', {
            url: "/certificateFee",
            controller: 'CertificateFeeController',
            controllerAs: 'vm',
            templateUrl: 'views/fee/certificate/certificate.fee.html'
        })
            .state('certificateStatus', {
            url: "/certificateStatus",
            controller: 'CertificateStatusController',
            controllerAs: 'vm',
            templateUrl: 'views/fee/certificate/certificate.status.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/select2/select2-madmin.css']
                        });
                    }]
            }
        })
            .state('certificateApproval', {
            url: "/certificateApproval",
            controller: 'CertificateApprovalController',
            controllerAs: 'vm',
            templateUrl: 'views/fee/certificate/certificate.approval.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js',
                                'vendors/select2/select2-madmin.css'
                            ]
                        });
                    }]
            }
        })
            .state('studentDues', {
            url: "/studentDues",
            controller: 'StudentDuesController',
            controllerAs: 'vm',
            templateUrl: 'views/fee/dues/student.dues.html'
        })
            .state('listDues', {
            url: "/listDues",
            controller: 'ListDues',
            controllerAs: 'vm',
            templateUrl: 'views/fee/dues/list.dues.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/select2/select2-madmin.css']
                        });
                    }]
            }
        })
            .state('installmentSetting', {
            url: "/installmentSetting",
            controller: 'InstallmentSettingController',
            controllerAs: 'vm',
            templateUrl: 'views/fee/installment-setting/installment.setting.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('dummyController', {
            url: "/dummyConroller/:1",
            controller: 'DummyController',
            templateUrl: 'views/dummy/dummy.html'
        })
            .state('twoFATest', {
            url: "/twoFATest",
            controller: 'TwoFATestController',
            controllerAs: 'vm',
            templateUrl: 'views/twofatest/two.fa.test.html'
        })
            .state('employeeProfile', {
            url: "/employeeProfile",
            templateUrl: 'views/ems/profile-management/non-admin/employee-profile.html',
            controller: 'EmployeeProfile',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-imageupload/bootstrap-imageupload.css',
                                'vendors/bootstrap-imageupload/bootstrap-imageupload.js'
                            ]
                        });
                    }]
            }
        })
            .state('employeeProfile.personal', {
            url: "/personal",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/non-admin/personal/personal-information.html',
            controller: 'PersonalInformation',
            controllerAs: 'vm'
        })
            .state('employeeProfile.academic', {
            url: "/academic",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/non-admin/academic/academic-information.html',
            controller: 'AcademicInformation',
            controllerAs: 'vm'
        })
            .state('employeeProfile.publication', {
            url: "/publication",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/non-admin/publication/publication-information.html',
            controller: 'PublicationInformation',
            controllerAs: 'vm'
        })
            .state('employeeProfile.training', {
            url: "/training",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/non-admin/training/training-information.html',
            controller: 'TrainingInformation',
            controllerAs: 'vm'
        })
            .state('employeeProfile.award', {
            url: "/award",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/non-admin/award/award-information.html',
            controller: 'AwardInformation',
            controllerAs: 'vm'
        })
            .state('employeeProfile.experience', {
            url: "/experience",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/non-admin/experience/experience-information.html',
            controller: 'ExperienceInformation',
            controllerAs: 'vm'
        })
            .state('employeeProfile.additional', {
            url: "/additional",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/non-admin/additional/additional-information.html',
            controller: 'AdditionalInformation',
            controllerAs: 'vm'
        })
            .state('employeeProfile.service', {
            url: "/service",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/non-admin/service/service-information.html',
            controller: 'ServiceInformation',
            controllerAs: 'vm'
        })
            .state('search', {
            url: "/search",
            controller: 'LibrarySearch',
            controllerAs: 'vm',
            templateUrl: 'views/library/library-search.html',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/bootstrap-select/bootstrap-select.css'
                            ]
                        });
                    }]
            }
        })
            .state('gradeSheet', {
            url: "/gradeSheet",
            controller: 'StudentGradesheetController',
            controllerAs: 'vm',
            templateUrl: 'views/student/grade-sheet-studentView.html'
        })
            .state('employeeSearch.employeeProfile', {
            url: "/employeeProfile",
            params: {
                'id': null
            },
            templateUrl: 'views/ems/profile-management/admin/employee-profile.html',
            controller: 'EmployeeProfile',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js',
                                'vendors/bootstrap-switch/css/bootstrap-switch.css',
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-switch/js/bootstrap-switch.min.js',
                                'vendors/bootstrap-imageupload/bootstrap-imageupload.css',
                                'vendors/bootstrap-imageupload/bootstrap-imageupload.js'
                            ]
                        });
                    }]
            }
        })
            .state('employeeSearch.employeeProfile.personal', {
            url: "/personal",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/admin/personal/personal-information.html',
            controller: 'PersonalInformation',
            controllerAs: 'vm'
        })
            .state('employeeSearch.employeeProfile.academic', {
            url: "/academic",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/admin/academic/academic-information.html',
            controller: 'AcademicInformation',
            controllerAs: 'vm'
        })
            .state('employeeSearch.employeeProfile.publication', {
            url: "/publication",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/admin/publication/publication-information.html',
            controller: 'PublicationInformation',
            controllerAs: 'vm'
        })
            .state('employeeSearch.employeeProfile.training', {
            url: "/training",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/admin/training/training-information.html',
            controller: 'TrainingInformation',
            controllerAs: 'vm'
        })
            .state('employeeSearch.employeeProfile.award', {
            url: "/award",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/admin/award/award-information.html',
            controller: 'AwardInformation',
            controllerAs: 'vm'
        })
            .state('employeeSearch.employeeProfile.experience', {
            url: "/experience",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/admin/experience/experience-information.html',
            controller: 'ExperienceInformation',
            controllerAs: 'vm'
        })
            .state('employeeSearch.employeeProfile.additional', {
            url: "/additional",
            params: {
                'id': null,
                'edit': null
            },
            templateUrl: 'views/ems/profile-management/admin/additional/additional-information.html',
            controller: 'AdditionalInformation',
            controllerAs: 'vm'
        })
            .state('punishment', {
            url: "/punishment",
            templateUrl: 'views/punishment/punishment.html',
            controller: 'PunishmentController',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('studentPunishment', {
            url: "/studentPunishment",
            templateUrl: 'views/punishment/punishment-student-view.html',
            controller: 'PunishmentStudentViewController',
            controllerAs: 'vm'
        })
            .state('punishmentView', {
            url: "/punishmentView",
            templateUrl: 'views/punishment/punishment-view.html',
            controller: 'PunishmentViewController',
            controllerAs: 'vm'
        })
            .state('schedule', {
            url: "/schedule",
            templateUrl: 'views/mms/schedule/schedule.html',
            controller: 'Schedule',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js',
                                'vendors/bootstrap-daterangepicker/daterangepicker.js',
                                'vendors/moment/moment.js',
                                'vendors/bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js',
                                'vendors/bootstrap-timepicker/js/bootstrap-timepicker.js'
                            ]
                        });
                    }]
            }
        })
            .state('agenda', {
            url: "/agenda",
            templateUrl: 'views/mms/agenda/agenda.html',
            controller: 'Agenda',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/ckeditor/ckeditor.js',
                                'vendors/ckeditor/styles.js'
                            ]
                        });
                    }]
            }
        })
            .state('resolution', {
            url: "/resolution",
            templateUrl: 'views/mms/resolution/resolution.html',
            controller: 'Resolution',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/ckeditor/ckeditor.js',
                                'vendors/ckeditor/styles.js'
                            ]
                        });
                    }]
            }
        })
            .state('invite', {
            url: "/invite",
            templateUrl: 'views/mms/invitation/invite-member.html',
            controller: 'InviteMember',
            controllerAs: 'vm'
        })
            .state('minutes', {
            url: "/minutes",
            templateUrl: 'views/mms/minutes/minutes.html',
            controller: 'Minutes',
            controllerAs: 'vm'
        })
            .state('committees', {
            url: "/committees",
            templateUrl: 'views/cms/committee/committees.html',
            controller: 'Committees',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js']
                        });
                    }]
            }
        })
            .state('members', {
            url: "/members",
            templateUrl: 'views/cms/member/members.html',
            controller: 'Members',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: ['vendors/bootstrap-datepicker/css/datepicker.css',
                                'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js']
                        });
                    }]
            }
        })
            .state('referenceBook', {
            url: "/referenceBook",
            templateUrl: 'views/cms/referencebook/reference-book.html',
            controller: 'ReferenceBook',
            controllerAs: 'vm'
        })
            .state('memberCreateRule', {
            url: "/memberCreateRule",
            templateUrl: 'views/cms/membercreaterule/member-create-rule.html',
            controller: 'MemberCreateRule',
            controllerAs: 'vm'
        })
            .state('duties', {
            url: "/duties",
            templateUrl: 'views/cms/duties/duties.html',
            controller: 'Duties',
            controllerAs: 'vm'
        })
            .state('committeeOrganizer', {
            url: "/committeeOrganizer",
            templateUrl: 'views/cms/committee-organizer.html',
            controller: 'CommitteeOrganizer',
            controllerAs: 'vm'
        })
            .state('admitCard', {
            url: "/admitCard",
            controller: 'AdmitCard',
            templateUrl: 'views/student/admit-card.html',
            controllerAs: 'vm'
        })
            .state('paymentAmendment', {
            url: "/paymentAmendment",
            controller: 'AmendmentController',
            templateUrl: 'views/student-payment-amendment/amendment.html',
            controllerAs: 'vm',
            resolve: {
                loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                        return $ocLazyLoad.load({
                            files: [
                                'vendors/select2/select2-madmin.css',
                                'vendors/bootstrap-select/bootstrap-select.min.css',
                                'vendors/multi-select/css/multi-select-madmin.css',
                                'vendors/select2/select2.min.js',
                                'vendors/bootstrap-select/bootstrap-select.min.js',
                                'vendors/multi-select/js/jquery.multi-select.js'
                            ]
                        });
                    }]
            }
        })
            .state('faqStd', {
            url: "/faqStd",
            controller: 'FaqController',
            templateUrl: 'views/faq.html'
        });
    });
})(ums || (ums = {}));
(function ($) {
    $.fn.Data = function () {
        return {};
    };
    var $this = $.fn.Data;
    $.fn.Data.pages = {
        '/index': { title: 'Dashboard', 'breadcrumb': ['Dashboard'] },
        '/userHome': { title: 'User Home', 'breadcrumb': ['User Home'] },
        '/createSemester': { title: 'Create New Semester', 'breadcrumb': ['Semester'] },
        '/showSemesterList': { title: 'Semester List', 'breadcrumb': ['Semester List'] },
        '/createSyllabus': { title: 'Create New Syllabus', 'breadcrumb': ['Syllabus'] },
        '/showSyllabusList': { title: 'Syllabus List', 'breadcrumb': ['Syllabus List'] },
        '/viewFullSyllabus': { title: 'Syllabus', 'breadcrumb': ['Syllabus'] },
        '/createStudent': { title: 'Create New Student', 'breadcrumb': ['Student'] },
        '/changePassword': { title: 'Change Password', 'breadcrumb': ['Password'] },
        '/createUgCourse': { title: 'Create UG Course', 'breadcrumb': ['Course'] },
        '/createPgCourse': { title: 'Create PG Course', 'breadcrumb': ['Course'] },
        '/semesterSyllabusMap': { title: 'Semester Syllabus Map', 'breadcrumb': ['Semester-Syllabus Map'] },
        '/singleUserPassword': { title: 'User Management', 'breadcrumb': ['User Management', 'Single'] },
        '/bulkUserPassword': { title: 'User Management ', 'breadcrumb': ['User Management', 'Bulk'] },
        '/courseTeacher': { title: 'Course Teacher Assign ', 'breadcrumb': ['Course Teacher'] },
        '/classRoutine': { title: 'Class Routine Upload ', 'breadcrumb': ['Class Routine'] },
        '/teachersRoutine': { title: 'Class Routine', 'breadcrumb': ['Class Routine'] },
        '/certificateFee': { title: 'Certificate Fee', 'breadcrumb': ['Certificate Fee'] },
        '/studentProfile': { title: 'Student Profile ', 'breadcrumb': ['Student Profile'] },
        '/changeRequestPanel': { title: 'Change Request Panel', 'breadcrumb': ['Change Request Panel'] },
        '/profileChangeRequest': { title: 'Profile Change Request', 'breadcrumb': ['Profile Change Request'] },
        '/multipleChangeRequest': { title: 'Profile Change Request', 'breadcrumb': ['Profile Change Request'] },
        '/gStudentProfile': { title: 'Student\'s Profile ', 'breadcrumb': ['Student Profile'] },
        '/gradeSheet': { title: 'Semester Result ', 'breadcrumb': ['Semester Result'] },
        '/classRoomInfo': { title: 'Class Room Information ', 'breadcrumb': ['Class Room Information'] },
        '/examRoutine': { title: 'Exam Routine ', 'breadcrumb': ['Exam Routine'] },
        '/optionalCoursesApplication': { title: 'Optional Courses ', 'breadcrumb': ['Optional Course Application'] },
        '/optionalCoursesOffer': { title: 'Optional Courses ', 'breadcrumb': ['Optional Course Settings'] },
        '/admissionCancellation': { title: 'Admission Cancellation ', 'breadcrumb': ['Admission Cancellation'] },
        '/admissionCancellationList': { title: 'Admission Cancellation Data ', 'breadcrumb': ['Admission Cancellation Data'] },
        '/degreeAwardDate': { title: 'Degree Award Date', 'breadcrumb': ['Degree Award Date'] },
        '/noticeForStudents': { title: 'Common Notice ', 'breadcrumb': ['Common Notice'] },
        '/loginAs': { title: 'Super Admin Access ', 'breadcrumb': ['Super Admin Access'] },
        '/gradeSheetSelectionTeacher/T': {
            title: 'Grade Sheet View/Selection',
            'breadcrumb': ['Grade Sheet View/Selection'],
            'manualName': 'UserGuide-OnlineGradeSubmission',
            'navId': '2029'
        },
        '/applicationClearanceImprovement': {
            title: 'Application for Clearance/Improvement Courses',
            'breadcrumb': ['Application for Clearance/Improvement']
        },
        '/semesterExtension': {
            title: 'Semester Extension ',
            'breadcrumb': ['Semester Extension']
        },
        '/deadlineExtension': {
            title: 'Individual Deadline Extension',
            'breadcrumb': ['Individual Deadline Extension']
        },
        '/studentWaiverApproval': {
            title: 'Student Waiver/Quota Portal',
            'breadcrumb': ['Student Waiver/Quota Portal']
        },
        '/applicationCarry': {
            title: 'Application for Carry Courses',
            'breadcrumb': ['Application for Carry Courses']
        },
        '/cciReports': {
            title: 'Carry/Clearance/Improvement/Special-carry/Re-admission Reports',
            'breadcrumb': ['Carry/Clearance/Improvement/Special-carry/Re-admission Reports']
        },
        '/downloadTranscript': {
            title: 'Student Transcript Download',
            'breadcrumb': ['Student Transcript Download']
        },
        '/semesterSettingParameter': {
            title: 'Semester Initialization Parameters',
            'breadcrumb': ['Semester Initialization Parameters']
        },
        '/teachingEvaluationDatelineProgramWise': {
            title: 'Teacher Evaluation Deadline',
            'breadcrumb': ['Teacher Evaluation Deadline']
        },
        '/optionalCourseDatelineProgramWise': {
            title: 'Optional Course Deadline',
            'breadcrumb': ['Optional Course Deadline']
        },
        '/assignRole': {
            title: 'Assign Role',
            'breadcrumb': ['Assign Role']
        },
        '/amsAttendanceInfo': {
            title: 'Biometric Attendance Info',
            'breadcrumb': ['Biometric Attendance Info']
        },
        '/biometricAttendanceReport': {
            title: 'Employee Wise Attendance Report',
            'breadcrumb': ['Employee Wise Attendance Report']
        },
        '/dayWiseReport': {
            title: 'Day Wise Attendance Report',
            'breadcrumb': ['Day Wise Attendance Report']
        },
        '/carryApproval': {
            title: 'Carry Application Approval',
            'breadcrumb': ['Carry  Application Approval']
        },
        '/examSeatPlan': { title: 'Exam Seat Plan ', 'breadcrumb': ['Seat Plan '] },
        '/seatPlanRegular': { title: 'Exam Seat Plan - Regular ', 'breadcrumb': ['Seat Plan', 'Regular'] },
        '/seatPlanCCI': { title: 'Exam Seat Plan - CCI ', 'breadcrumb': ['Seat Plan', 'CCI'] },
        '/publishSeatPlan': { title: 'Publish Seat Plan', 'breadcrumb': ['Seat Plan', 'Publish'] },
        '/examiner': { title: 'Assign Preparer-Scrutinizer', 'breadcrumb': ['Preparer-Scrutinizer'] },
        '/courseMaterial': { title: 'Course Materials', 'breadcrumb': ['Course Materials'] },
        '/studentCourseMaterial': { title: 'Course Materials', 'breadcrumb': ['Course Materials'] },
        '/gradeSubmissionDeadLine': { title: 'Grade Submission Deadline', 'breadcrumb': ['Grade Submission Deadline'] },
        '/studentAdviser': { title: 'Students\' Advisor', 'breadcrumb': ['Students\' Advisor'] },
        '/studentsRoutine': { title: 'Class Routine', 'breadcrumb': ['Class Routine'] },
        '/examRoutineStudent': { title: 'Exam Routine', 'breadcrumb': ['Exam Routine'] },
        '/sectionAssignment': { title: 'Students\' Section', 'breadcrumb': ['Students\' Section'] },
        '/advisingStudents': { title: 'Advising Students', 'breadcrumb': ['Advising Students'] },
        '/resultProcessing': { title: 'Result Processing', 'breadcrumb': ['Result Processing'] },
        '/classAttendance': {
            title: 'Attendance Sheet',
            'breadcrumb': ['Attendance Sheet'],
            'navId': '2069',
            'manualName': 'UserGuide-ClassAttendance'
        },
        '/roomBasedRoutine': { title: 'Room-wise Routine', 'breadcrumb': ['Routine', 'Room-wise'] },
        '/marksSubmissionStat': { title: 'Marks Submission Statistics', 'breadcrumb': ['Marks Submission Stat.'] },
        '/uploadMeritList': { title: 'Upload Admission Merit List', 'breadcrumb': ['Admission Merit List'] },
        '/userGuide': { title: 'User Guide', 'breadcrumb': ['User Guide'] },
        '/inbox': { title: 'MailBox - Inbox', 'breadcrumb': ['MailBox', 'Inbox'] },
        '/composeMail': { title: 'MailBox - Compose Mail', 'breadcrumb': ['MailBox', 'Compose'] },
        '/viewMail': { title: 'MailBox - View Mail', 'breadcrumb': ['MailBox', 'View'] },
        '/uploadTaletalkData': { title: 'Upload Taletalk Data', 'breadcrumb': ['Admission Taletalk Student List'] },
        '/certificateVerification': {
            title: 'Certificate Verification',
            'breadcrumb': ['Admission Certificate Verification']
        },
        '/admissionTotalSeat': {
            title: 'Assign program-wise total seat',
            'breadcrumb': ['Admission Total Seat Assignment']
        },
        '/admissionStudentId': { title: 'Admitted Student Id', 'breadcrumb': ['Admitted Student Information'] },
        '/leaveApplication': { title: 'Leave Application', 'breadcrumb': ['Leave Application '] },
        '/semesterWithdrawAppStd': { title: 'Semester Withdrawal', 'breadcrumb': ['Semester Withdrawal '] },
        '/semesterWithdrawApp': { title: 'Semester Withdrawal', 'breadcrumb': ['Semester Withdrawal '] },
        '/leaveApproval': { title: 'Leave Application Approval', 'breadcrumb': ['Leave Application Approval'] },
        '/expelledInformation': { title: 'Expelled Students Information', 'breadcrumb': ['Expelled Students Information'] },
        '/viewExpelledInformation': { title: 'View Expelled Information', 'breadcrumb': ['Expelled Students Information'] },
        '/dailyExamAttendanceReport': { title: 'Daily Exam Attendance Report', 'breadcrumb': ['Daily Exam Attendance Report'] },
        '/absentLateComingInfo': { title: 'Absent/Late Coming Info', 'breadcrumb': ['Absent/Late Coming'] },
        '/absentLateComingView': { title: 'Absent/Late Coming View', 'breadcrumb': ['Absent/Late Coming'] },
        '/dailyExamReport': { title: 'Daily Examination Report', 'breadcrumb': ['Daily Examination Report'] },
        '/questionCorrectionInfo': { title: 'Question Correction Info', 'breadcrumb': ['Question Correction Info'] },
        '/employeeExamAttendance': { title: 'Employee Exam Attendance', 'breadcrumb': ['Employee Exam Attendance'] },
        '/applicationTES': { title: 'Teacher Evaluation System', 'breadcrumb': ['Teachers\' Evaluation System'] },
        '/tes': { title: 'Teacher Evaluation System', 'breadcrumb': ['Teacher\' Evaluation System'] },
        '/teacherEvaluationSystem': { title: 'Individual Performance Evaluation', 'breadcrumb': ['Individual Performance Evaluation'] },
        '/tesComparison': { title: 'Overall Performance Evaluation', 'breadcrumb': ['Overall Performance Evaluation'] },
        '/assignQuestions': { title: 'Question Set Up For Evaluation', 'breadcrumb': ['Question Set Up For Evaluation'] },
        '/questionWiseReport': { title: 'Question Wise Report', 'breadcrumb': ['question Wise Report'] },
        '/evaluationReport': { title: 'Evaluation Report', 'breadcrumb': ['Evaluation Report'] },
        '/downloadNomenclature': { title: 'Nomenclature Download', 'breadcrumb': ['Nomenclature download'] },
        '/studentDetailsReport': { title: 'Student Details Report', 'breadcrumb': ['Student Details Report'] },
        '/registeredStudentsCountReport': { title: 'Registered Students Count Report', 'breadcrumb': ['Registered Students Count Report'] },
        '/sectionWiseStudentInfoReport': { title: 'Student Section Information Report', 'breadcrumb': ['Student Section Information Report'] },
        '/advisingStudentInfoReport': { title: 'Advising Student Information Report', 'breadcrumb': ['Advising Student Information Report'] },
        '/admissionInfoReport': { title: 'Admission Information Report', 'breadcrumb': ['Admission Information Report'] },
        '/studentPaymentSlip': { title: 'Generate Payment Slip', 'breadcrumb': ['Generate Payment Slip'] },
        '/optCourseOffer': { title: 'Offer Optional Course', 'breadcrumb': ['Offer Optional Course'] },
        '/optStudentCourseSelection': { title: 'Optional Course Application', 'breadcrumb': ['Optional Course Application'] },
        '/optSection': { title: 'Optional Course Section', 'breadcrumb': ['Optional Course Section'] },
        '/optShiftStudent': { title: 'Optional Course Shifting', 'breadcrumb': ['Optional Course Shifting'] },
        '/publicHolidays': { title: 'Public Holidays', 'breadcrumb': ['Public Holidays  '] },
        '/search': { title: 'Library:Search', 'breadcrumb': ['Search'] },
        '/employeeProfile': { title: 'Profile', 'breadcrumb': ['Profile'] },
        '/personal': { title: 'Profile', 'breadcrumb': ['Profile'] },
        '/academic': { title: 'Profile', 'breadcrumb': ['Profile'] },
        '/publication': { title: 'Profile', 'breadcrumb': ['Profile'] },
        '/award': { title: 'Profile', 'breadcrumb': ['Profile'] },
        '/training': { title: 'Profile', 'breadcrumb': ['Profile'] },
        '/experience': { title: 'Profile', 'breadcrumb': ['Profile'] },
        '/additional': { title: 'Profile', 'breadcrumb': ['Profile'] },
        '/service': { title: 'Profile', 'breadcrumb': ['Profile'] },
        '/classRoutineConfig': { title: 'Class Routine Configuration', 'breadcrumb': ['Class Routine Configuration'] },
        '/employeeInformation': { title: 'Search', 'breadcrumb': ['Search'] },
        '/viewSeatPlan': { title: 'Exam Seat Plan', 'breadcrumb': ['Exam Seat Plan'] },
        '/admissionReport': { title: 'Admission Report', 'breadcrumb': ['Admission Report'] },
        '/semesterFee': { title: 'Semester Fee', 'breadcrumb': ['Semester Fee'] },
        '/semesterFeePrevious': { title: 'Previous Semester Fee', 'breadcrumb': ['Previous Semester Fee'] },
        '/readmission': { title: 'Readmission Application', 'breadcrumb': ['Readmission Application'] },
        '/punishment': { title: 'Punishment', 'breadcrumb': ['Punishment'] },
        '/studentPunishment': { title: 'Punishment', 'breadcrumb': ['Punishment'] },
        '/punishmentView': { title: 'Student\'s Punishment', 'breadcrumb': ['Student\'s Punishment'] },
        '/committees': { title: 'Committees', 'breadcrumb': ['Committees'] },
        '/members': { title: 'Members', 'breadcrumb': ['Members'] },
        '/referenceBook': { title: 'Reference Guide', 'breadcrumb': ['Reference Guide'] },
        '/duties': { title: 'Power and Duties', 'breadcrumb': ['Power and Duties'] },
        '/memberCreateRule': { title: 'Member Create Rule', 'breadcrumb': ['Member Create Rule'] },
        '/committeeOrganizer': { title: "Committee Organizer", 'breadcrumb': ['Committee Organizer'] },
        '/schedule': { title: 'Schedule', 'breadcrumb': ['Schedule'] },
        '/minutes': { title: 'Minutes', 'breadcrumb': ['Minutes'] },
        '/agenda': { title: 'Agenda', 'breadcrumb': ['Agenda'] },
        '/resolution': { title: 'Resolution', 'breadcrumb': ['Resolution'] },
        '/invite': { title: 'Invite Member', 'breadcrumb': ['Invite Member'] },
        '/studentPaymentHistory': { title: 'Payments', 'breadcrumb': ['Payments'] },
        '/admitCard': { title: 'Admit Card', 'breadcrumb': ['Admit Card'] },
        '/paymentAmendment': { title: 'Payment Amendment', 'breadcrumb': ['Payment Amendment'] },
        '/degreeAward': { title: 'Degree Award', 'breadcrumb': ['Degree Award'] },
        '/examSeatPlanRoomWiseReport': { title: 'Room Wise Excel Report', 'breadcrumb': ['Room Wise Excel Report'] },
        '/examStudents': { title: 'Exam Students', 'breadcrumb': ['Exam Students'] }
    };
    $.fn.Data.get = function (id) {
        if (id && $this.pages[id]) {
            return $this.pages[id];
        }
    };
})(jQuery);
var ums;
(function (ums) {
    var ExamRoutineService = (function () {
        function ExamRoutineService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        ExamRoutineService.prototype.getSemesterfinalExamRoutineForStudent = function (semesterId, examType, programId, year, semester) {
            var examRoutineList = [];
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/examroutine/semeterfinal/semester/" + semesterId + "/examtype/" + examType + "/programId/" + programId
                + "/year/" + year + "/semester/" + semester, "application/json", function (json, etag) {
                examRoutineList = json.entries;
                defer.resolve(examRoutineList);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamRoutineService.prototype.CCIExamRoutineForStudent = function (studentId, semesterId, examType, programId, year, semester) {
            var examRoutineList = [];
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/examroutine/cci/studentId/" + studentId + "/semester/" + semesterId + "/examtype/" + examType + "/programId/" + programId
                + "/year/" + year + "/semester/" + semester, "application/json", function (json, etag) {
                examRoutineList = json.entries;
                console.log(examRoutineList, 'service');
                defer.resolve(examRoutineList);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamRoutineService.prototype.getExamRoutine = function (semesterId, examType) {
            var examRoutineList = [];
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/examroutine/simplified/semester/" + semesterId + "/examtype/" + examType, "application/json", function (json, etag) {
                examRoutineList = json.entries;
                defer.resolve(examRoutineList);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamRoutineService.prototype.getExamDatesBySemesterAndTypeAndCourseId = function (courseId, semesterId, examType) {
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/examroutine/examDateBySemesterAndTypeAndCourseId/course-id/" + courseId + "/semester/" + semesterId + "/examtype/" + examType, "application/json", function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamRoutineService.prototype.getExamRoutineByDept = function (semesterId, examType) {
            var examRoutineList = [];
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/examroutine/deptWise/semester/" + semesterId + "/examtype/" + examType, "application/json", function (json, etag) {
                examRoutineList = json.entries;
                defer.resolve(examRoutineList);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamRoutineService.prototype.getExamRoutineDates = function (semesterId, examType) {
            var examRoutineList = [];
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/examroutine/examdates/semester/" + semesterId + "/examtype/" + examType, "application/json", function (json, etag) {
                examRoutineList = json.entries;
                defer.resolve(examRoutineList);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamRoutineService.prototype.getStudentExamRoutineReport = function (examType) {
            this.httpClient.get("/ums-webservice-academic/academic/routine/student-exam-routine-report/" + examType, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                ums.UmsUtil.writeFileContent(data, 'application/pdf', 'ExamRoutine');
                //this.$window.open(fileURL);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ExamRoutineService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return ExamRoutineService;
    }());
    ums.ExamRoutineService = ExamRoutineService;
    ums.UMS.service("examRoutineService", ExamRoutineService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SeatPlanService = (function () {
        function SeatPlanService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        SeatPlanService.prototype.getSeatPlanAttendanceSheetReport = function (programType, semesterId, examType, examDate) {
            var _this = this;
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/seatplan/programType/" + programType + "/semesterId/" + semesterId + "/examType/" + examType + "/examDate/" + examDate, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                _this.$window.open(fileURL);
                defer.resolve("success");
            }, function (response) {
                console.error(response);
                defer.resolve("failure");
            }, 'arraybuffer');
            return defer.promise;
        };
        SeatPlanService.prototype.getRoomWiseStudentCount = function (semesterId, examType, slotNo) {
            var defer = this.$q.defer();
            this.httpClient.get("academic/seatplan/semester-id/" + semesterId + "/exam-type/" + examType + "/slot-no/" + slotNo, ums.HttpClient.MIME_TYPE_JSON, (function (response) {
                defer.resolve(response);
            }));
            return defer.promise;
        };
        SeatPlanService.prototype.getRoomAndExamDateWiseStudentCount = function (semesterId, examType, examDate) {
            var defer = this.$q.defer();
            this.httpClient.get("academic/seatplan/semester-id/" + semesterId + "/exam-type/" + examType + "/exam-date/" + examDate, ums.HttpClient.MIME_TYPE_JSON, (function (response) {
                defer.resolve(response);
            }));
            return defer.promise;
        };
        SeatPlanService.prototype.getSeatPlanInfo = function (semesterId, examType, examDate, studentId) {
            var defer = this.$q.defer();
            examDate = '11-12-2017';
            this.httpClient.get("academic/seatPlan/by-student/semester-id/" + semesterId + "/exam-type/" + examType + "/exam-date/" + examDate + "/student-id/" + studentId, ums.HttpClient.MIME_TYPE_JSON, (function (response) {
                console.log(response.entries);
                defer.resolve(response.entries);
            }));
            return defer.promise;
        };
        SeatPlanService.prototype.updateSeatPlan = function (seatPlan) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put("academic/seatplan/updateSeat", seatPlan, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                _this.notify.success("Successfully Saved");
            }).error(function (error) {
                console.error(error);
            });
            return defer.promise;
        };
        SeatPlanService.prototype.getRoomWiseStudentReport = function (semesterId, examType, slot, roomId, roomNo, semesterName, examTypeName) {
            var fileName = semesterName + '-' + examTypeName + '-' + 'slot-' + slot + '-room-' + roomNo;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            this.httpClient
                .get("academic/seatplan/room-wise-report/semester-id/" + semesterId + "/exam-type/" + examType + "/slot/" + slot + "/room-id/" + roomId, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (error) { }, 'arraybuffer');
        };
        SeatPlanService.prototype.getRoomAndExamDateWiseStudentReport = function (semesterId, examType, roomId, roomNo, semesterName, examTypeName, examDate) {
            var fileName = semesterName + '-' + examTypeName + '-' + '-room-' + roomNo + 'exam-date' + examDate;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            this.httpClient
                .get("academic/seatplan/room-examDate-wise-report/semester-id/" + semesterId + "/exam-type/" + examType + "/room-id/" + roomId + "/exam-date/" + examDate, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (error) { }, 'arraybuffer');
        };
        SeatPlanService.prototype.getSeatPlanTopSheetReport = function (programType, semesterId, examType, examDate) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/seatplan/topsheet/programType/" + programType + "/semesterId/" + semesterId + "/examType/" + examType + "/examDate/" + examDate, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                _this.$window.open(fileURL);
                defer.resolve("success");
            }, function (response) {
                console.error(response);
                defer.resolve("failure");
            }, 'arraybuffer');
            return defer.promise;
        };
        SeatPlanService.prototype.getSeatPlanByStudent = function (semesterId, examType, examDate, studentId) {
            var defer = this.$q.defer();
            var url = "/ums-webservice-academic/academic/seatplan/splan/semesterId/" + semesterId + "/examType/" + examType + "/examDate/" + examDate + "/studentId/" + studentId;
            this.httpClient.get(url, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SeatPlanService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return SeatPlanService;
    }());
    ums.SeatPlanService = SeatPlanService;
    ums.UMS.service("seatPlanService", SeatPlanService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var UgRegistrationResultService = (function () {
        function UgRegistrationResultService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.showLoader = false;
        }
        UgRegistrationResultService.prototype.getProgramWiseExamStudents = function (semesterId, programId, examType, semesterName, examTypeName, programName) {
            var _this = this;
            var defer = this.$q.defer();
            var fileName = semesterName + '-' + examTypeName + '-' + programName + '.zip';
            this.showLoader = true;
            this.httpClient
                .get("academic/registration-report/semester-id/" + semesterId + "/program-id/" + programId + "/exam-type/" + examType, 'application/zip', function (data, etag) {
                _this.showLoader = false;
                defer.resolve(true);
                ums.UmsUtil.writeFileContent(data, 'application/zip', fileName);
            }, function (error) { defer.resolve(false); }, 'arraybuffer');
            return defer.promise;
        };
        UgRegistrationResultService.prototype.getProgramAndExamDateWiseExamStudents = function (semesterId, programId, examType, semesterName, examTypeName, programName, examDate) {
            var _this = this;
            var defer = this.$q.defer();
            var fileName = semesterName + '-' + examTypeName + '-' + programName + examDate + '.zip';
            this.showLoader = true;
            this.httpClient
                .get("academic/registration-report/semester-id/" + semesterId + "/program-id/" + programId + "/exam-type/" + examType + "/exam-date/" + examDate, 'application/zip', function (data, etag) {
                _this.showLoader = false;
                defer.resolve(true);
                ums.UmsUtil.writeFileContent(data, 'application/zip', fileName);
            }, function (error) { defer.resolve(false); }, 'arraybuffer');
            return defer.promise;
        };
        UgRegistrationResultService.prototype.getDepartmentWiseExamStudents = function (semesterId, departmentId, examType, semesterName, examTypeName, department) {
            var _this = this;
            var defer = this.$q.defer();
            var fileName = semesterName + '-' + examTypeName + '-' + department + '.zip';
            this.showLoader = true;
            this.httpClient
                .get("academic/registration-report/semester-id/" + semesterId + "/department-id/" + departmentId + "/exam-type/" + examType, 'application/zip', function (data, etag) {
                _this.showLoader = false;
                ums.UmsUtil.writeFileContent(data, 'application/zip', fileName);
                defer.resolve(true);
            }, function (error) { defer.resolve(false); }, 'arraybuffer');
            return defer.promise;
        };
        UgRegistrationResultService.prototype.getDepartmentAndExamDateWiseExamStudents = function (semesterId, departmentId, examType, semesterName, examTypeName, department, examDate) {
            var _this = this;
            var defer = this.$q.defer();
            var fileName = semesterName + '-' + examTypeName + '-' + department + examDate + '.zip';
            this.showLoader = true;
            this.httpClient
                .get("academic/registration-report/semester-id/" + semesterId + "/department-id/" + departmentId + "/exam-type/" + examType + "/exam-date/" + examDate, 'application/zip', function (data, etag) {
                _this.showLoader = false;
                ums.UmsUtil.writeFileContent(data, 'application/zip', fileName);
                defer.resolve(true);
            }, function (error) { defer.resolve(false); }, 'arraybuffer');
            return defer.promise;
        };
        UgRegistrationResultService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return UgRegistrationResultService;
    }());
    ums.UgRegistrationResultService = UgRegistrationResultService;
    ums.UMS.service("UgRegistrationResultService", UgRegistrationResultService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CommonService = (function () {
        function CommonService(appConstants, httpClient, $q) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
        }
        CommonService.prototype.padLeft = function (nr, n, str) {
            return Array(n - String(nr).length + 1).join(str) + nr;
            //examples
            /*
            console.log(padLeft(23,5));       //=> '00023'
            console.log((23).padLeft(5));     //=> '00023'
            console.log((23).padLeft(5,' ')); //=> '   23'
            console.log(padLeft(23,5,'>>'));  //=> '>>>>>>23' */
        };
        CommonService.prototype.fetchCurrentUser = function () {
            var url = "/ums-webservice-academic/users/current";
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                defer.resolve({ id: json.departmentId, name: json.departmentName });
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        CommonService.prototype.getGradeLetter = function (total_marks, reg_type) {
            total_marks = Math.round(total_marks);
            var regType = this.appConstants.courseRegType;
            if (total_marks >= 80 && reg_type == regType.REGULAR)
                return "A+";
            else if (total_marks >= 75 && total_marks < 80 && reg_type == regType.REGULAR)
                return "A";
            else if (total_marks >= 70 && total_marks < 75 && reg_type == regType.REGULAR)
                return "A-";
            else if (total_marks >= 65 && total_marks < 70 && reg_type == regType.REGULAR)
                return "B+";
            else if (total_marks >= 60 && total_marks < 65 && reg_type == regType.REGULAR)
                return "B";
            else if (total_marks >= 60 && (reg_type == regType.IMPROVEMENT || reg_type == regType.SPECIAL_IMPROVEMENT))
                return "B"; // Improvement OR Special Improvement
            else if (total_marks >= 55 && total_marks < 60 && (reg_type == regType.REGULAR || reg_type == regType.IMPROVEMENT || reg_type == regType.SPECIAL_IMPROVEMENT))
                return "B-";
            else if (total_marks >= 50 && total_marks < 55 && (reg_type == regType.REGULAR || reg_type == regType.IMPROVEMENT || reg_type == regType.SPECIAL_IMPROVEMENT))
                return "C+";
            else if (total_marks >= 45 && total_marks < 50)
                return "C";
            else if (total_marks >= 45 && (reg_type == regType.CLEARANCE || reg_type == regType.CARRY || reg_type == regType.SPECIAL_CARRY))
                return "C"; //Carry,Clearance, Special Carry
            else if (total_marks >= 40 && total_marks < 45)
                return "D";
            else if (total_marks < 40)
                return "F";
        };
        CommonService.$inject = ['appConstants', 'HttpClient', '$q'];
        return CommonService;
    }());
    ums.CommonService = CommonService;
    ums.UMS.service('commonService', CommonService);
})(ums || (ums = {}));
/**
 * Created by Monjur-E-Morshed on 08-Dec-16.
 */
var ums;
(function (ums) {
    var FacultyService = (function () {
        function FacultyService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.url = "academic/faculty";
        }
        FacultyService.prototype.getAllFaculties = function () {
            var defer = this.$q.defer();
            var faculties = [];
            this.httpClient.get(this.url + "/all", this.appConstants.mimeTypeJson, function (json, etag) {
                faculties = json.entries;
                defer.resolve(faculties);
                defer.resolve(faculties);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        FacultyService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return FacultyService;
    }());
    ums.FacultyService = FacultyService;
    ums.UMS.service("facultyService", FacultyService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var RoutineType;
    (function (RoutineType) {
        RoutineType[RoutineType["DISTRIBUTED"] = 0] = "DISTRIBUTED";
        RoutineType[RoutineType["LOADED"] = 1] = "LOADED";
    })(RoutineType = ums.RoutineType || (ums.RoutineType = {}));
    var ClassRoutineService = (function () {
        function ClassRoutineService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.routineUrl = '/ums-webservice-academic/academic/routine';
            this.routineUrl = 'academic/routine';
        }
        ClassRoutineService.prototype.getClassRoutineReportForTeacher = function () {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get("/ums-webservice-academic/academic/routine/routineReportTeacher", undefined, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, 'class-routine.pdf');
            }, function (response) {
                defer.resolve("success");
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        ClassRoutineService.prototype.getRoutineForTeacher = function (employeeId, semesterId) {
            var _this = this;
            console.log("Semester id :" + semesterId);
            var defer = this.$q.defer();
            var routines = {};
            this.httpClient.get("/ums-webservice-academic/academic/routine/routineForTeacher/employeeId/" + employeeId + '/semesterId/' + semesterId, 'application/json', function (data, etag) {
                routines = data.entries;
                defer.resolve(routines);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching routine data");
            });
            return defer.promise;
        };
        ClassRoutineService.prototype.getRoutineBySemesterAndCourse = function (semesterId, courseId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/routine/semester/" + semesterId + "/course/" + courseId, 'application/json', function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching routine data");
            });
            return defer.promise;
        };
        ClassRoutineService.prototype.getRoomBasedClassRoutine = function (semesterId, roomId) {
            var defer = this.$q.defer();
            if (!roomId) {
                roomId = 9999;
            }
            this.httpClient.get("academic/routine/roomBasedRoutine/semester/" + semesterId + "/room/" + roomId, 'application/json', function (data, etag) {
                defer.resolve(data.entries);
            }, function (response) {
                console.error(response);
                defer.resolve("failure");
            });
            return defer.promise;
        };
        ClassRoutineService.prototype.getRoomBasedClassRoutineInnerHtmlFormat = function (semesterId, roomId) {
            var _this = this;
            var defer = this.$q.defer();
            if (!roomId) {
                roomId = 9999;
            }
            this.httpClient.get("academic/routine/roomBasedRoutine/semester/" + semesterId + "/room/" + roomId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                //this.$window.open(fileURL);
                defer.resolve(fileURL);
            }, function (response) {
                console.error(response);
                defer.resolve("failure");
            }, 'arraybuffer');
            return defer.promise;
        };
        ClassRoutineService.prototype.getSemesterWiseRoutineReport = function (semesterId, programId, year, semester, section) {
            this.httpClient.get(this.routineUrl + "/semester-wise-report/semester-id/" + semesterId + "/program/" + programId + "/year/" + year + "/semester/" + semester + "/section/" + section, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                ums.UmsUtil.writeFileContent(data, 'application/pdf', 'SemesterWiseRoutine');
                //this.$window.open(fileURL);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ClassRoutineService.prototype.getStudentRoutineReport = function () {
            this.httpClient.get(this.routineUrl + "/student-routine-report", 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                ums.UmsUtil.writeFileContent(data, 'application/pdf', 'SemesterWiseRoutine');
                //this.$window.open(fileURL);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ClassRoutineService.prototype.getAllSemesterWiseRoutineReport = function (semesterId, programId) {
            this.httpClient.get(this.routineUrl + "/all-semester-wise-report/semester-id/" + semesterId + "/program/" + programId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                ums.UmsUtil.writeFileContent(data, 'application/pdf', 'SemesterWiseRoutine');
                //this.$window.open(fileURL);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ClassRoutineService.prototype.getTeacherWiseReport = function (teacherId, semesterId) {
            this.httpClient.get(this.routineUrl + "/teacher-wise-report/teacher-id/" + teacherId + "/semester/" + semesterId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                ums.UmsUtil.writeFileContent(data, 'application/pdf', 'TeacherWiseRoutine');
                //this.$window.open(fileURL);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ClassRoutineService.prototype.getAllTeacherWiseReport = function (semesterId, programId) {
            this.httpClient.get(this.routineUrl + "/teacher-wise-report/semester/" + semesterId + "/program/" + programId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                ums.UmsUtil.writeFileContent(data, 'application/pdf', 'TeacherWiseRoutine');
                //this.$window.open(fileURL);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ClassRoutineService.prototype.getRoomWiseRoutine = function (roomId, semesterId) {
            this.httpClient.get(this.routineUrl + "/room-wise-report/room-id/" + roomId + "/semester/" + semesterId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                ums.UmsUtil.writeFileContent(data, 'application/pdf', 'RoomWiseRoutine');
                //this.$window.open(fileURL);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ClassRoutineService.prototype.getAllRoomWiseRoutine = function (semesterId, programId) {
            this.httpClient.get(this.routineUrl + "/room-wise-report/semester/" + semesterId + "/program/" + programId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                ums.UmsUtil.writeFileContent(data, 'application/pdf', 'RoomWiseRoutine');
                //this.$window.open(fileURL);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ClassRoutineService.prototype.getClassRoutineForEmployee = function (semesterId, programId, year, semester, section) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.routineUrl + "/semester/"
                + semesterId + "/program/" + programId + "/year/" + year + "/semester/" + semester + "/section/" + section, 'application/json', function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching routine data");
            });
            return defer.promise;
        };
        ClassRoutineService.prototype.getClassRoutineForStudents = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.routineUrl + "/studentsRoutine", 'application/json', function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching routine data");
            });
            return defer.promise;
        };
        ClassRoutineService.prototype.saveOrUpdateClassRoutine = function (classRoutineList) {
            var defer = this.$q.defer();
            this.httpClient.put(this.routineUrl + "/saveOrUpdate", classRoutineList, 'application/json')
                .success(function (response) {
                defer.resolve(response);
            }).error(function (data) {
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        ClassRoutineService.prototype.deleteRoutineById = function (id) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.doDelete(this.routineUrl + "/id/" + id)
                .success(function (response) { return defer.resolve(response); })
                .error(function (response) {
                console.error(response);
                _this.notify.error("Error in removing routine data");
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        ClassRoutineService.prototype.downloadRoutineTemplate = function (semesterId) {
            var fileName = "RoutineTemplate";
            var contentType = ums.UmsUtil.getFileContentType("xls");
            var url = this.routineUrl + "/routine-template/semester/" + semesterId;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ClassRoutineService.prototype.uploadFile = function (formData) {
            var _this = this;
            var defer = this.$q.defer();
            var url = this.routineUrl + "/upload";
            this.httpClient.post(url, formData, undefined)
                .success(function (response) {
                _this.notify.success("Routine template parsed successfully");
                console.log('response');
                console.log(response);
                defer.resolve(response);
            }).error(function (data) {
                console.error(data);
            });
            return defer.promise;
        };
        ClassRoutineService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return ClassRoutineService;
    }());
    ums.ClassRoutineService = ClassRoutineService;
    ums.UMS.service("classRoutineService", ClassRoutineService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var RoutineTeacherLoadService = (function () {
        function RoutineTeacherLoadService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.routineUrl = '';
            this.routineUrl = 'academic/routine-teacher-load';
        }
        RoutineTeacherLoadService.prototype.getBySemesterAndCourseIdList = function (semesterId, courseIdList) {
            var defer = this.$q.defer();
            this.httpClient.post(this.routineUrl + ("/semester/" + semesterId), courseIdList, 'application/json')
                .success(function (response) { return defer.resolve(response); })
                .error(function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        RoutineTeacherLoadService.prototype.saveOrUpdate = function (routineTeacherLoadList) {
            var defer = this.$q.defer();
            this.httpClient.put(this.routineUrl + "/save", routineTeacherLoadList, 'application/json')
                .success(function (response) { return defer.resolve(response); })
                .error(function (response) {
                defer.resolve(undefined);
                console.error(response);
            });
            return defer.promise;
        };
        RoutineTeacherLoadService.prototype.delete = function (id) {
            var defer = this.$q.defer();
            this.httpClient.doDelete(this.routineUrl + "/delete/" + id)
                .success(function (response) { return defer.resolve(response); })
                .error(function (response) {
                defer.resolve(undefined);
                console.error(response);
            });
            return defer.promise;
        };
        RoutineTeacherLoadService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return RoutineTeacherLoadService;
    }());
    ums.RoutineTeacherLoadService = RoutineTeacherLoadService;
    ums.UMS.service("RoutineTeacherLoadService", RoutineTeacherLoadService);
})(ums || (ums = {}));
/*
module ums {
  import ClassRoutine = ums.ClassRoutine;

    export class ClassRoutineSlotEditController {


    private selectedCourse: Course;
    private selectedRoom: ClassRoom;
    private selectedCourseTeacher:Employee;
    private showCourseInfo: boolean;
    private showRoomInfo: boolean;
    private showTeachersInfo: boolean;
    private routineBasedOnCourse: ClassRoutine[];
    private routineBasedOnRoom: ClassRoutine[];
    private routineBasedOnCourseTeacher: ClassRoutine[];
    private THEORY_TYPE: number = 1;
    private SESSIONAL_TYPE: number = 2;
    private courseTeacher: Employee = <Employee>{};
    private sectionList: IConstant[] = [];
    private sessionalSectionMap: any = {};
    private slotGroupNo: number;


    public static $inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'courseService', 'classRoomService', 'classRoutineService', '$timeout', 'userService', 'routineConfigService', '$state', 'courseTeacherService'];

    constructor(private appConstants: any,
                private httpClient: HttpClient,
                private $q: ng.IQService,
                private notify: Notify,
                private $sce: ng.ISCEService,
                private $window: ng.IWindowService,
                private semesterService: SemesterService,
                private courseService: CourseService,
                private classRoomService: ClassRoomService,
                private classRoutineService: ClassRoutineService,
                private $timeout: ng.ITimeoutService,
                private userService: UserService,
                private routineConfigService: RoutineConfigService,
                private $state: any,
                private courseTeacherService: CourseTeacherService) {

      this.init();
    }

    public init() {
      this.showCourseInfo = false;
      this.showRoomInfo = false;
      console.log("Slot routine list");
      console.log(this.classRoutineService.slotRoutineList);
      if (this.classRoutineService.slotRoutineList.length == 0) {
        this.slotGroupNo = Math.floor((Math.random() * 10000) + 1);
        let slotRoutine: ClassRoutine = <ClassRoutine>{};
        slotRoutine.slotGroup = this.slotGroupNo;
        slotRoutine = this.initialzeRoutine(slotRoutine);
        this.classRoutineService.slotRoutineList.push(slotRoutine);
      }else{
        console.log("Existing slot");
        console.log(this.classRoutineService.slotRoutineList);
        this.classRoutineService.slotRoutineList.forEach((c:ClassRoutine)=>{
          c.startTimeObj = moment(c.startTime,"hh:mm A").toDate();
          c.endTimeObj = moment(c.endTime,'hh:mm A').toDate();
          this.slotGroupNo = c.slotGroup;
        });
      }
      this.setSessionalSection().then((sectionList: any) => {
        this.assignSectionsToSessionalCourses();
      });
    }


    private initialzeRoutine(slotRoutine: ClassRoutine): ClassRoutine {
      slotRoutine.startTime = this.classRoutineService.selectedHeader.startTime;
      slotRoutine.endTime = this.classRoutineService.selectedHeader.endTime;
      slotRoutine.startTimeObj = moment(slotRoutine.startTime,"hh:mm A").toDate();
      slotRoutine.endTimeObj = moment(slotRoutine.endTime,'hh:mm A').toDate();
      slotRoutine.semesterId = this.classRoutineService.selectedSemester.id;
      slotRoutine.semester = this.classRoutineService.selectedSemester;
      slotRoutine.programId = this.classRoutineService.selectedProgram.id.toString();
      slotRoutine.program = this.classRoutineService.selectedProgram;
      if (slotRoutine.duration == null)
        slotRoutine.duration = this.routineConfigService.routineConfig.duration.toString();
      else
        slotRoutine.duration = slotRoutine.duration.toString();
      slotRoutine.academicYear = +this.classRoutineService.studentsYear;
      slotRoutine.academicSemester = +this.classRoutineService.studentsSemester;
      slotRoutine.section = this.classRoutineService.selectedTheorySection.id;
      slotRoutine.day = this.classRoutineService.selectedDay.id;
      return slotRoutine;
    }

    public add() {
      let slotRoutine: ClassRoutine = <ClassRoutine>{};
      slotRoutine.slotGroup = this.slotGroupNo;
      slotRoutine = this.initialzeRoutine(slotRoutine);
      this.classRoutineService.slotRoutineList.push(slotRoutine);
      //$("#courseNo").focus();
    }

    public courseSearched(){
        this.fetchCourseInfo();
    }


    public courseSelected(slotRoutine: ClassRoutine) {
      console.log("Slot routine");
      console.log(slotRoutine);
      this.selectedCourse = slotRoutine.course;
      let startTime: any = {};
      startTime = moment(this.classRoutineService.selectedHeader.startTime,"hh:mm A");
      slotRoutine.startTimeObj = moment(startTime).toDate();
      if (slotRoutine.course.type_value == this.SESSIONAL_TYPE) {
        let endTime: any = moment(startTime).add(this.routineConfigService.routineConfig.duration * 3, 'm').toDate();
        slotRoutine.endTimeObj = moment(endTime).toDate();
        slotRoutine.sessionalSection = slotRoutine.sessionalSection? slotRoutine.sessionalSection: this.sectionList[0];
        slotRoutine.duration = (this.routineConfigService.routineConfig.duration * 3).toString();
        this.assignExistingTeacher(slotRoutine, slotRoutine.sessionalSection.id);
      } else {
        let endTime: any = moment(startTime).add(this.routineConfigService.routineConfig.duration, 'm').toDate();
        slotRoutine.endTimeObj = moment(endTime).toDate();
        slotRoutine.duration = this.routineConfigService.routineConfig.duration.toString();
        this.assignExistingTeacher(slotRoutine, this.classRoutineService.selectedTheorySection.id);
      }
      slotRoutine.courseId = slotRoutine.course.id;
      this.fetchCourseInfo();
    }

    public courseTeacherSearched(){
      this.fetchCourseTeacherInfo();
      console.log('course teacher');
      console.log(this.selectedCourseTeacher);
    }

    public courseTeacherSelected(courseTeacher: Employee){
      this.fetchCourseTeacherInfo();
    }

    public fetchCourseTeacherInfo(){
        this.showCourseInfo=false;
        this.showRoomInfo = false;
        this.showTeachersInfo = true;

      if(this.selectedCourseTeacher)
      this.classRoutineService.getRoutineForTeacher(this.selectedCourseTeacher.id).then((routine:ClassRoutine[])=>{
        this.routineBasedOnCourseTeacher=[];
        this.routineBasedOnCourseTeacher = routine;
      });
    }

    private assignExistingTeacher(slotRoutine: ClassRoutine, section: string) {
      console.log("Section ---> "+section);
      console.log("Course teacher map");
      console.log(this.classRoutineService.courseTeacherMapWithCourseIdAndSection);
      console.log(this.classRoutineService.slotRoutineList);
      if (this.classRoutineService.courseTeacherMapWithCourseIdAndSection[slotRoutine.course.id+section] != undefined) {
        console.log("Found");
        let courseTeacherList: CourseTeacherInterface[] = angular.copy(this.classRoutineService.courseTeacherMapWithCourseIdAndSection[slotRoutine.course.id+section]);
        //courseTeacherList.forEach((c: CourseTeacherInterface) => c.id = undefined);
        slotRoutine.courseTeacher = courseTeacherList;
      } else {
        slotRoutine.courseTeacher = [];
      }
    }


    public removeCourseTeacher(routine: ClassRoutine, courseTeacher: CourseTeacherInterface) {
      for (var i = 0; i < routine.courseTeacher.length; i++) {
        if (routine.courseTeacher[i] == courseTeacher) {
          routine.courseTeacher.splice(i, 1);

          if (courseTeacher.id != null) {
            this.courseTeacherService.delete(courseTeacher.id);
          }
          break;
        }
      }
    }

    public setSessionalSection(): ng.IPromise<any> {
      let defer: ng.IDeferred<any> = this.$q.defer();
      if (this.classRoutineService.selectedTheorySection.id == 'A')
        this.sectionList = this.appConstants.sessionalSectionsA;
      else if (this.classRoutineService.selectedTheorySection.id == 'B')
        this.sectionList = this.appConstants.sessionalSectionsB;
      else if (this.classRoutineService.selectedTheorySection.id == 'C')
        this.sectionList = this.appConstants.sessionalSectionsC;
      else
        this.sectionList = this.appConstants.sessionalSectionsD;

      defer.resolve(this.sectionList);
      return defer.promise;
    }

    public assignSectionsToSessionalCourses() {
      this.sessionalSectionMap = {};
      this.sectionList.forEach((s) => {
        this.sessionalSectionMap[s.id] = s;
      });

      this.classRoutineService.slotRoutineList.forEach((routine: ClassRoutine) => {
        routine.sessionalSection = this.sessionalSectionMap[routine.section];
      })
    }

    public addSelectedTeacher(slotRoutine: ClassRoutine) {
      let courseTeacher: CourseTeacherInterface = <CourseTeacherInterface>{};
      courseTeacher.course = slotRoutine.course;
      courseTeacher.courseId = slotRoutine.courseId;
      courseTeacher.courseType = slotRoutine.course.type_value;
      courseTeacher.section = slotRoutine.section;
      courseTeacher.semesterId = this.classRoutineService.selectedSemester.id.toString();
      courseTeacher.teacher = <Teacher>{};
      courseTeacher.teacher.id = slotRoutine.employee.id;
      courseTeacher.teacherId = slotRoutine.employee.id;
      courseTeacher.teacher.name = slotRoutine.employee.employeeName;
      courseTeacher.teacher.departmentId = slotRoutine.employee.deptOfficeId;
      courseTeacher.teacher.departmentName = slotRoutine.employee.deptOfficeName;
      courseTeacher.teacher.designationName = slotRoutine.employee.designationName;
      courseTeacher.teacher.status = slotRoutine.employee.status;
      if (slotRoutine.courseTeacher == undefined)
        slotRoutine.courseTeacher = [];
      slotRoutine.courseTeacher.push(courseTeacher);
      slotRoutine.employee = <Employee>{};
      this.createCourseTeacherMapForSlot(courseTeacher);

    }

    private createCourseTeacherMapForSlot(courseTeacher: CourseTeacherInterface) {
      let courseTeacherList: CourseTeacherInterface[] = [];
      if (this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section] == undefined) {
        courseTeacherList.push(courseTeacher);
        this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section] = courseTeacherList;
        this.classRoutineService.courseTeacherMapWithCourseIdAndSection[courseTeacher.courseId] = courseTeacherList;
      } else {
        courseTeacherList = this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section];
        courseTeacherList.push(courseTeacher);
        this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section] = courseTeacherList;
      }
    }

    public fetchCourseInfo() {
      this.showCourseInfo = true;
      this.showRoomInfo = false;
      this.showTeachersInfo = false;
      this.classRoutineService.getRoutineBySemesterAndCourse(this.classRoutineService.selectedSemester.id, this.selectedCourse.id).then((classRoutineList: ClassRoutine[]) => {

        this.routineBasedOnCourse = [];
        this.routineBasedOnCourse = classRoutineList;
      })
    }

    public fetchRoomInfo() {
      this.showCourseInfo = false;
      this.showRoomInfo = true;
      this.showTeachersInfo = false;
      this.classRoutineService.getRoomBasedClassRoutine(this.classRoutineService.selectedSemester.id, +this.selectedRoom.id).then((classRoutineList: ClassRoutine[]) => {
        this.routineBasedOnRoom = [];
        this.routineBasedOnRoom = classRoutineList;
        console.log("In room");
        console.log(classRoutineList);
      })
    }

    public roomSearched(){
        this.fetchRoomInfo();
    }

    public roomSelected(slotRoutine: ClassRoutine) {
      this.selectedRoom = slotRoutine.room;
      slotRoutine.roomId = slotRoutine.room.id;
      this.fetchRoomInfo();
    }

    public save() {
      this.classRoutineService.saveOrUpdateClassRoutine(this.classRoutineService.slotRoutineList).then((updatedRoutineList: ClassRoutine[]) => {
        this.classRoutineService.routineData = [];
        this.classRoutineService.routineData = updatedRoutineList;
      })
    }

    public remove(routine: ClassRoutine) {
      if (routine.courseTeacher != undefined && routine.courseTeacher.length > 0) {
        routine.courseTeacher.forEach((t: CourseTeacherInterface) => {
          t.semesterId = this.classRoutineService.selectedSemester.id.toString();
          t.section = this.classRoutineService.selectedTheorySection.id;
        })
        this.courseTeacherService.deleteTeacherList(routine.courseTeacher).then((response) => {
          if (response != undefined)
            this.removeSlotRoutine(routine);
        })
      } else {
        this.removeSlotRoutine(routine);
      }

    }

    private removeFromMainRoutineData(routine: ClassRoutine) {
      for (var i = 0; i < this.classRoutineService.routineData.length; i++) {
        if (this.classRoutineService.routineData[i] = routine) {
          this.classRoutineService.routineData.splice(i, 1);
          break;
        }
      }
    }

    private removeSlotRoutine(routine: ClassRoutine) {
      for (var i = 0; i < this.classRoutineService.slotRoutineList.length; i++) {
        if (routine == this.classRoutineService.slotRoutineList[i]) {
          if (routine.id != null) {
            this.classRoutineService.deleteRoutineById(routine.id);
            this.removeFromMainRoutineData(routine);
            this.classRoutineService.slotRoutineList.splice(i, 1);
          }
          else
            this.classRoutineService.slotRoutineList.splice(i, 1);
          break;
        }
      }
    }

    public assignEndTime(classRoutine: ClassRoutine) {
      let duration: number = angular.copy(this.routineConfigService.routineConfig.duration);
      if (classRoutine.course.type_value == Utils.COURSE_TYPE_SESSIONAL)
        duration = duration * 3;
      let startTime: any = {};
      startTime = moment(classRoutine.startTimeObj);
      let endTime: any = moment(startTime).add(duration, 'm').toDate();
      classRoutine.endTimeObj = moment(endTime).toDate();
    }
  }

  UMS.controller("ClassRoutineSlotEditController", ClassRoutineSlotEditController);
}*/
var ums;
(function (ums) {
    var RoutineConfigController = (function () {
        function RoutineConfigController(appConstants, httpClient, $q, notify, $sce, $window, routineConfigService, $stateParams, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.routineConfigService = routineConfigService;
            this.$stateParams = $stateParams;
            this.semesterService = semesterService;
            this.init();
        }
        RoutineConfigController.prototype.init = function () {
            this.weekDays = this.appConstants.weekDays;
            this.programTypeList = this.appConstants.programType;
            this.selectedProgramType = this.programTypeList[0];
            this.getSemesterList();
        };
        RoutineConfigController.prototype.getSemesterList = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.selectedProgramType.id, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesterList) {
                _this.semesterList = [];
                _this.semesterList = semesterList;
                _this.selectedSemester = _this.semesterList.filter(function (s) { return s.status = ums.Utils.SEMESTER_STATUS_ACTIVE; })[0];
            });
        };
        RoutineConfigController.prototype.getRoutineConfigData = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.routineConfigService.getBySemesterAndProgramType(this.selectedSemester.id, +this.selectedProgramType.id).then(function (routineConfigData) {
                routineConfigData.startTimeObj = moment(routineConfigData.startTime, "hh:mm A").toDate();
                routineConfigData.endTimeObj = moment(routineConfigData.endTime, "hh:mm A").toDate();
                _this.routineConfigData = routineConfigData;
            });
        };
        RoutineConfigController.prototype.saveOrUpdate = function () {
            var _this = this;
            console.log("In save or update section");
            this.routineConfigData.programType = +this.selectedProgramType.id;
            this.routineConfigData.semesterId = this.selectedSemester.id;
            this.routineConfigData.startTime = moment(this.routineConfigData.startTimeObj).format("hh:mm A");
            this.routineConfigData.endTime = moment(this.routineConfigData.endTimeObj).format("hh:mm A");
            this.routineConfigService.saveOrUpdate(this.routineConfigData).then(function (routineConfigData) {
                _this.routineConfigData = routineConfigData;
            });
        };
        RoutineConfigController.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'routineConfigService', '$stateParams', 'semesterService'];
        return RoutineConfigController;
    }());
    ums.RoutineConfigController = RoutineConfigController;
    ums.UMS.controller("RoutineConfigController", RoutineConfigController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DayType;
    (function (DayType) {
        DayType[DayType["SATURDAY"] = 1] = "SATURDAY";
        DayType[DayType["SUNDAY"] = 2] = "SUNDAY";
        DayType[DayType["MONDAY"] = 3] = "MONDAY";
        DayType[DayType["TUESDAY"] = 4] = "TUESDAY";
        DayType[DayType["WEDNESDAY"] = 5] = "WEDNESDAY";
        DayType[DayType["THURSDAY"] = 6] = "THURSDAY";
        DayType[DayType["FRIDAY"] = 7] = "FRIDAY";
    })(DayType = ums.DayType || (ums.DayType = {}));
    var RoutineConfigService = (function () {
        function RoutineConfigService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.routineUrl = 'academic/routine-config';
        }
        RoutineConfigService.prototype.saveOrUpdate = function (routineConfig) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put(this.routineUrl, routineConfig, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                _this.notify.success("Saved Successfully");
                defer.resolve(response);
            });
            return defer.promise;
        };
        RoutineConfigService.prototype.getBySemesterAndProgramType = function (semesterId, programType) {
            var defer = this.$q.defer();
            this.httpClient.get(this.routineUrl + "/semester/" + semesterId + "/programType/" + programType, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                console.log("response");
                console.log(response);
                defer.resolve(response);
            });
            return defer.promise;
        };
        RoutineConfigService.prototype.getByStudent = function () {
            var defer = this.$q.defer();
            this.httpClient.get(this.routineUrl + "/forStudent", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                console.log("response");
                console.log(response);
                defer.resolve(response);
            });
            return defer.promise;
        };
        RoutineConfigService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return RoutineConfigService;
    }());
    ums.RoutineConfigService = RoutineConfigService;
    ums.UMS.service("routineConfigService", RoutineConfigService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExamGradeService = (function () {
        function ExamGradeService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        ExamGradeService.prototype.getGradeSubmissionDeadLine = function (semesterId, examType, examDate, courseType) {
            var defer = this.$q.defer();
            var gradeSubmissionStatisticsArr = {};
            if (courseType == ums.Utils.COURSE_TYPE_SESSIONAL) {
                examDate = '09-09-99';
            }
            this.httpClient.get("academic/gradeSubmission/deadline/semester/" + semesterId + "/examType/" + examType + "/courseType/" + courseType + "/examDate/" + examDate, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                gradeSubmissionStatisticsArr = json.entries;
                defer.resolve(gradeSubmissionStatisticsArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamGradeService.prototype.updateGradeSubmissionDeadLine = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put('academic/gradeSubmission/gradeSubmissionDeadLine', json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve("Successfully saved");
            }).error(function (data) {
                console.log(data);
            });
            return defer.promise;
        };
        ExamGradeService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return ExamGradeService;
    }());
    ums.ExamGradeService = ExamGradeService;
    ums.UMS.service('examGradeService', ExamGradeService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ClassRoomService = (function () {
        function ClassRoomService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        ClassRoomService.prototype.getClassRooms = function () {
            var _this = this;
            var defer = this.$q.defer();
            var rooms = {};
            this.httpClient.get("/ums-webservice-academic/academic/classroom/program", 'application/json', function (json, etag) {
                rooms = json.entries;
                defer.resolve(rooms);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching room data");
            });
            return defer.promise;
        };
        ClassRoomService.prototype.getAllClassRooms = function () {
            var _this = this;
            var defer = this.$q.defer();
            console.log("-----");
            var rooms = {};
            this.httpClient.get("/ums-webservice-academic/academic/classroom/all", 'application/json', function (json, etag) {
                rooms = json.entries;
                console.log("----" + json);
                defer.resolve(rooms);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching room data");
            });
            return defer.promise;
        };
        ClassRoomService.prototype.getClassRoomsForSeatPlan = function () {
            var _this = this;
            var defer = this.$q.defer();
            var rooms = {};
            this.httpClient.get("academic/classroom/seat-plan/all", 'application/json', function (json, etag) {
                console.log(json);
                rooms = json;
                defer.resolve(rooms.rows);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching room data for seat plan");
            });
            return defer.promise;
        };
        ClassRoomService.prototype.getClassRoomsBasedOnRoutine = function (semesterId) {
            var _this = this;
            var defer = this.$q.defer();
            var rooms = {};
            this.httpClient.get("/ums-webservice-academic/academic/classroom/forRoutine/semester/" + semesterId, 'application/json', function (json, etag) {
                rooms = json.entries;
                defer.resolve(rooms);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching room data");
            });
            return defer.promise;
        };
        ClassRoomService.prototype.getClassRoomsBasedOnSeatPlan = function (semesterId, examType) {
            var _this = this;
            console.log("examType in service");
            console.log(examType);
            var defer = this.$q.defer();
            var rooms = {};
            this.httpClient.get("/ums-webservice-academic/academic/classroom/seatplan/semester/" + semesterId + "/examType/" + examType, 'application/json', function (json, etag) {
                rooms = json.entries;
                console.log(rooms);
                defer.resolve(rooms);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching room data");
            });
            return defer.promise;
        };
        ClassRoomService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return ClassRoomService;
    }());
    ums.ClassRoomService = ClassRoomService;
    ums.UMS.service("classRoomService", ClassRoomService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AttachmentService = (function () {
        function AttachmentService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        AttachmentService.prototype.fetchAttachments = function (applicationType, applicationId) {
            var url = "attachment/applicationType/" + applicationType + "/applicationId/" + applicationId;
            var defer = this.$q.defer();
            /*this.httpClient.get(url, this.appConstants.mimeTypeJson,
                (json: any, etag: string) => {
                  var attachments: any = {};
                  attachments = json.entries;
                  defer.resolve(attachments);
                },
                (response: ng.IHttpPromiseCallbackArg<any>) => {
                  console.error(response);
                  this.notify.error("Error in getting attachments");
                });*/
            return defer.promise;
        };
        AttachmentService.prototype.downloadFile = function (attachmentId, fileName) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get('attachment/downloadFile/attachmentId/' + attachmentId, undefined, function (data, etag) {
                /*var fileURL = this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                this.$window.open(fileURL);*/
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        AttachmentService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return AttachmentService;
    }());
    ums.AttachmentService = AttachmentService;
    ums.UMS.service("attachmentService", AttachmentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionCancellationInfoService = (function () {
        function AdmissionCancellationInfoService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        AdmissionCancellationInfoService.prototype.getAdmissionCancellationInfo = function (semesterId, programId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/admissionCancellationInfo/semesterId/" + semesterId + "/programId/" + programId, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                _this.notify.error("Error in fetching Admission cancellation info");
            });
            return defer.promise;
        };
        AdmissionCancellationInfoService.prototype.downloadAdmissionCancellationInfoReportExcelFile = function (programTypeName, semesterId, semesterName, programId, programName) {
            var _this = this;
            var semester = semesterName.replace(/[^\w]/gi, '_');
            var program = programName.replace(/[^\w]/gi, '_');
            var fileName = "AdmissionCancellationInfoReport_" + semester + "_" + programTypeName + "_" + program;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "/ums-webservice-academic/academic/admissionCancellationInfo/excelReport/semesterId/" + semesterId + "/programId/" + programId;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                _this.notify.success("Successfully downloaded");
            }, function (response) {
            }, 'arraybuffer');
        };
        AdmissionCancellationInfoService.$inject = ['$q', 'HttpClient', 'notify'];
        return AdmissionCancellationInfoService;
    }());
    ums.AdmissionCancellationInfoService = AdmissionCancellationInfoService;
    ums.UMS.service("AdmissionCancellationInfoService", AdmissionCancellationInfoService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MigratedStudentsInfoService = (function () {
        function MigratedStudentsInfoService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        MigratedStudentsInfoService.prototype.getMigratedStudentsInfo = function (semesterId, programId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/migratedStudentsInfo/semesterId/" + semesterId + "/programId/" + programId, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                _this.notify.error("Error in fetching Migrated students info");
            });
            return defer.promise;
        };
        MigratedStudentsInfoService.prototype.downloadMigratedStudentsInfoReportExcelFile = function (programTypeName, semesterId, semesterName, programId, programName) {
            var _this = this;
            var semester = semesterName.replace(/[^\w]/gi, '_');
            var program = programName.replace(/[^\w]/gi, '_');
            var fileName = "MigratedStudentsInfoReport_" + semester + "_" + programTypeName + "_" + program;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "/ums-webservice-academic/academic/migratedStudentsInfo/excelReport/semesterId/" + semesterId + "/programId/" + programId;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                _this.notify.success("Successfully downloaded");
            }, function (response) {
            }, 'arraybuffer');
        };
        MigratedStudentsInfoService.$inject = ['$q', 'HttpClient', 'notify'];
        return MigratedStudentsInfoService;
    }());
    ums.MigratedStudentsInfoService = MigratedStudentsInfoService;
    ums.UMS.service("MigratedStudentsInfoService", MigratedStudentsInfoService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmittedStudentsInfoService = (function () {
        function AdmittedStudentsInfoService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        AdmittedStudentsInfoService.prototype.getAdmittedStudentsInfo = function (semesterId, programId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/admittedStudentsInfo/semesterId/" + semesterId + "/programId/" + programId, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                _this.notify.error("Error in fetching Admitted students info");
            });
            return defer.promise;
        };
        AdmittedStudentsInfoService.prototype.downloadAdmittedStudentsInfoReportExcelFile = function (programTypeName, semesterId, semesterName, programId, programName) {
            var _this = this;
            var semester = semesterName.replace(/[^\w]/gi, '_');
            var program = programName.replace(/[^\w]/gi, '_');
            var fileName = "AdmittedStudentsInfoReport_" + semester + "_" + programTypeName + "_" + program;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "/ums-webservice-academic/academic/admittedStudentsInfo/excelReport/semesterId/" + semesterId + "/programId/" + programId;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                _this.notify.success("Successfully downloaded");
            }, function (response) {
                _this.notify.error("Error in downloading Admitted students info report");
            }, 'arraybuffer');
        };
        AdmittedStudentsInfoService.$inject = ['$q', 'HttpClient', 'notify'];
        return AdmittedStudentsInfoService;
    }());
    ums.AdmittedStudentsInfoService = AdmittedStudentsInfoService;
    ums.UMS.service("AdmittedStudentsInfoService", AdmittedStudentsInfoService);
})(ums || (ums = {}));
/**
 * Created by My Pc on 04-Jan-17.
 */
var ums;
(function (ums) {
    var ProgramService = (function () {
        function ProgramService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        ProgramService.prototype.fetchProgram = function (programType) {
            var url = "academic/program/programType/" + programType;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var programs = json.entries;
                defer.resolve(programs);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ProgramService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return ProgramService;
    }());
    ums.ProgramService = ProgramService;
    ums.UMS.service("programService", ProgramService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ProgramTypeService = (function () {
        function ProgramTypeService() {
        }
        return ProgramTypeService;
    }());
    ums.ProgramTypeService = ProgramTypeService;
    ums.UMS.service("ProgramTypeService", ProgramTypeService);
})(ums || (ums = {}));
/**
 * Created by My Pc on 04-Jan-17.
 */
var ums;
(function (ums) {
    var AdmissionTotalSeatService = (function () {
        function AdmissionTotalSeatService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        AdmissionTotalSeatService.prototype.fetchAdmissionTotalSeat = function (semesterId, programType, quota) {
            var url = "academic/admissionTotalSeat/semester/" + semesterId + "/programType/" + programType + "/quota/" + quota;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var seats = {};
                seats = json.entries;
                console.log("in service");
                console.log(seats);
                console.log("json");
                console.log(json);
                defer.resolve(seats);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionTotalSeatService.prototype.saveAdmissionTotalSeatInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "academic/admissionTotalSeat/save";
            this.httpClient.post(url, json, 'application/json')
                .success(function () {
                _this.notify.success("Data Saved Successfully");
                defer.resolve("success");
            }).error(function (data) {
                defer.resolve("error");
            });
            return defer.promise;
        };
        AdmissionTotalSeatService.prototype.updateAdmissionTotalSeat = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "academic/admissionTotalSeat/update";
            this.httpClient.put(url, json, 'application/json')
                .success(function () {
                _this.notify.success("Total Seat Updated Successfully");
                defer.resolve("success");
            }).error(function (data) {
                defer.resolve("error");
            });
            return defer.promise;
        };
        AdmissionTotalSeatService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return AdmissionTotalSeatService;
    }());
    ums.AdmissionTotalSeatService = AdmissionTotalSeatService;
    ums.UMS.service("admissionTotalSeatService", AdmissionTotalSeatService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DepartmentSelectionDeadlineService = (function () {
        function DepartmentSelectionDeadlineService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        DepartmentSelectionDeadlineService.prototype.saveOrUpdateDeadline = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "academic/department-selection-deadline";
            this.httpClient.post(url, json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve("success");
            }).error(function (data) {
                console.log("error in saving data");
                console.error(data);
                _this.notify.error("Error in saving data");
            });
            return defer.promise;
        };
        DepartmentSelectionDeadlineService.prototype.doDelete = function (id) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "academic/department-selection-deadline/delete/id/" + id;
            this.httpClient.doDelete(url)
                .success(function () {
                _this.notify.success("Successfully deleted");
                defer.resolve("success");
            })
                .error(function (data) {
                defer.resolve("error");
                console.log("Error in deleting data");
                console.error(data);
                _this.notify.error("Error in deleting data");
            });
            return defer.promise;
        };
        DepartmentSelectionDeadlineService.prototype.getDeadlines = function (semesterId, quota, unit) {
            var _this = this;
            var defer = this.$q.defer();
            var url = "academic/department-selection-deadline/semester/" + semesterId + "/quota/" + quota + "/unit/" + unit;
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var deadlines = json.entries;
                defer.resolve(deadlines);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in retrieving department selection deadline data");
            });
            return defer.promise;
        };
        DepartmentSelectionDeadlineService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return DepartmentSelectionDeadlineService;
    }());
    ums.DepartmentSelectionDeadlineService = DepartmentSelectionDeadlineService;
    ums.UMS.service("departmentSelectionDeadlineService", DepartmentSelectionDeadlineService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CourseService = (function () {
        function CourseService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        CourseService.prototype.getCourse = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            var courses = {};
            this.httpClient.get("/ums-webservice-academic/academic/course/semester/" +
                semesterId + "/program/" + programId + "/year/" + year + "/academicSemester/" + semester, 'application/json', function (json, etag) {
                courses = json.entries;
                defer.resolve(courses);
            }, function (response) {
                console.log(response);
            });
            return defer.promise;
        };
        CourseService.prototype.getCourseOfTeacher = function () {
            var _this = this;
            var defer = this.$q.defer();
            var courses = {};
            this.httpClient.get("/ums-webservice-academic/academic/course/coursedOfATeacher", 'application/json', function (json, etag) {
                courses = json.entries;
                defer.resolve(courses);
            }, function (response) {
                _this.notify.error("Error in fetching teacher's courses");
                console.log(response);
            });
            return defer.promise;
        };
        CourseService.prototype.getCourseOfStudent = function () {
            var _this = this;
            var defer = this.$q.defer();
            var courses = {};
            this.httpClient.get("/ums-webservice-academic/academic/course/registeredCourseOfStudent", 'application/json', function (json, etag) {
                courses = json.entries;
                defer.resolve(courses);
            }, function (response) {
                _this.notify.error("Error in fetching teacher's courses");
                console.log(response);
            });
            return defer.promise;
        };
        CourseService.prototype.getCourseBySemesterAndProgramType = function (semesterId, programType) {
            var _this = this;
            console.log(semesterId);
            var defer = this.$q.defer();
            var courses = {};
            this.httpClient.get('/ums-webservice-academic/academic/course/semester/' + semesterId + '/programType/' + programType, 'application/json', function (json, etag) {
                courses = json.entries;
                defer.resolve(courses);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching course data");
            });
            return defer.promise;
        };
        CourseService.prototype.getCourseBySemesterProgramTypeYearSemester = function (semesterId, programType, year, semester) {
            var _this = this;
            console.log(semesterId);
            var defer = this.$q.defer();
            var courses = {};
            this.httpClient.get('/ums-webservice-academic/academic/course/semesterId/' + semesterId + '/programType/' + programType + '/year/' + year + '/semester/' + semester, 'application/json', function (json, etag) {
                courses = json.entries;
                defer.resolve(courses);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching course data");
            });
            return defer.promise;
        };
        CourseService.prototype.getLikelyCourses = function (semesterId, programType, year, semester, courseNo) {
            var _this = this;
            console.log(semesterId);
            var defer = this.$q.defer();
            var courses = {};
            this.httpClient.get('/ums-webservice-academic/academic/course/similarCourses/semesterId/' + semesterId + '/programType/' + programType + '/year/' + year + '/semester/' + semester + '/courseNo/' + courseNo, 'application/json', function (json, etag) {
                courses = json.entries;
                defer.resolve(courses);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching course data");
            });
            return defer.promise;
        };
        CourseService.prototype.getLikelyCoursesBySemester = function (semesterId, courseNo, progType, examDate) {
            var _this = this;
            var defer = this.$q.defer();
            var courses = {};
            this.httpClient.get('/ums-webservice-academic/academic/course/similarCourses/semesterId/' + semesterId + '/courseNo/' + courseNo + '/progType/' + progType + '/examDate/' + examDate, 'application/json', function (json, etag) {
                courses = json.entries;
                defer.resolve(courses);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching course data");
            });
            return defer.promise;
        };
        CourseService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return CourseService;
    }());
    ums.CourseService = CourseService;
    ums.UMS.service("courseService", CourseService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentService = (function () {
        function StudentService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        StudentService.prototype.getStudentById = function (studentId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("academic/student/" + studentId, 'application/json', function (student, etag) {
                defer.resolve(student);
            }, function (response) {
                _this.notify.error("Error in getting student data");
            });
            return defer.promise;
        };
        StudentService.prototype.getStudentProfile = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("academic/student/profile", 'application/json', function (student, etag) {
                defer.resolve(student);
            }, function (response) {
                _this.notify.error("Error in getting student data");
            });
            return defer.promise;
        };
        StudentService.prototype.getActiveStudentsByDepartment = function () {
            var _this = this;
            var defer = this.$q.defer();
            var students = {};
            this.httpClient.get('/ums-webservice-academic/academic/student/getStudentsByDept', 'application/json', function (json, etag) {
                students = json.entries;
                defer.resolve(students);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting student data");
            });
            return defer.promise;
        };
        StudentService.prototype.getActiveStudentsByDepartmentId = function (departmentId) {
            var _this = this;
            var defer = this.$q.defer();
            var students = {};
            this.httpClient.get('/ums-webservice-academic/academic/student/getStudentsByDept/department-id/' + departmentId, 'application/json', function (json, etag) {
                students = json.entries;
                defer.resolve(students);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting student data");
            });
            return defer.promise;
        };
        StudentService.prototype.getAllStudentsByDepartmentId = function (departmentId) {
            var _this = this;
            var defer = this.$q.defer();
            var students = {};
            this.httpClient.get('/ums-webservice-academic/academic/student/getAllStudentsByDept/department-id/' + departmentId, 'application/json', function (json, etag) {
                students = json.entries;
                defer.resolve(students);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting student data");
            });
            return defer.promise;
        };
        StudentService.prototype.getActiveStudentsOfTheTeacher = function (teacherId) {
            var _this = this;
            var defer = this.$q.defer();
            var students = {};
            this.httpClient.get('academic/student/getStudents/adviser/' + teacherId, 'application/json', function (json, etag) {
                students = json.entries;
                defer.resolve(students);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting student data");
            });
            return defer.promise;
        };
        StudentService.prototype.updateStudentsAdviser = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            this.httpClient.put("/ums-webservice-academic/academic/student/adviser", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        StudentService.prototype.updateStudentsSection = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            this.httpClient.put("/ums-webservice-academic/academic/student/section", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        /**
         * @Date: 23-11-2021
         * @author: evana yasmin
         * @description: Student Profile Update
         * **/
        StudentService.prototype.updateStudentProfile = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            this.httpClient.put("/ums-webservice-academic/academic/student/updateStudentProfile", json, 'application/json')
                .success(function () {
                _this.notify.success("Profile Successfully Updated!");
                defer.resolve('success');
                /*
                $('#contactUs').click(function () {
                    $('#dialog').dialog('open');
                });

                 */
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in updating data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        /*
        * File-uploading for students
        * Date: 11/01/2022
        * */
        StudentService.prototype.uploadStudentDocument = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            this.httpClient.put("/ums-webservice-academic/academic/student/uploadStudentDocuments", json, 'application/json')
                .success(function () {
                //this.notify.success("File Uploaded Successfully!");
                // $("#imgTest").val("File Uploaded Successfully!");
                $("#uploadStatus").html("Your file has uploaded successfully!").fadeOut(3000);
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in uploading data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        /*
        * Submit student application
        * Date: 15/01/2022
        * */
        StudentService.prototype.submitStudentApplication = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            // alert("hello there..");
            // alert(JSON.stringify(json));
            this.httpClient.post("/ums-webservice-academic/academic/requestDetail/create", json, 'application/json')
                .success(function () {
                _this.notify.success("Your Application Submitted Successfully!");
                // $("#submitStatus").html("Your Application Submitted Successfully!").fadeOut("fast");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving application data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        /*
        * Update student application
        * Date: 21/06/2022
        * */
        StudentService.prototype.updateStudentApplication = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            // alert("hello there..");
            // alert(JSON.stringify(json));
            this.httpClient.put("/ums-webservice-academic/academic/requestDetail/update", json, 'application/json')
                .success(function () {
                _this.notify.success("Your application updated successfully!");
                // $("#submitStatus").html("Your Application Submitted Successfully!").fadeOut("fast");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving application data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        /***
         * Title: Change Request List of a Student
         * */
        StudentService.prototype.getChangeRequest = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/student/changeRequest", 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting student data");
            });
            return defer.promise;
        };
        /****
         * @author: evana
         * @Description: Existing application of a request
         ****/
        StudentService.prototype.getPreviousRequest = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/student/lastRequestStatus", 'application/json', function (cresult, etag) {
                defer.resolve(cresult);
            }, function (response) {
                _this.notify.error("Error in getting student data");
            });
            return defer.promise;
        };
        StudentService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return StudentService;
    }());
    ums.StudentService = StudentService;
    ums.UMS.service("studentService", StudentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PaymentAmendmentService = (function () {
        function PaymentAmendmentService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        PaymentAmendmentService.prototype.updatePaymentInformation = function (id, data) {
            var _this = this;
            console.log(id);
            var defer = this.$q.defer();
            this.httpClient.post('payment-amendment/update/' + id, data, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (data) {
                _this.notify.error(data);
                defer.resolve(null);
            });
            return defer.promise;
        };
        PaymentAmendmentService.prototype.splitPaymentInformation = function (data) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post('payment-amendment/split', data, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (data) {
                _this.notify.error(data);
                defer.resolve("error");
            });
            return defer.promise;
        };
        PaymentAmendmentService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return PaymentAmendmentService;
    }());
    ums.PaymentAmendmentService = PaymentAmendmentService;
    ums.UMS.service("paymentAmendmentService", PaymentAmendmentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentRecordService = (function () {
        function StudentRecordService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        StudentRecordService.prototype.getCurrentSemesterRecord = function () {
            var _this = this;
            var defer = this.$q.defer();
            console.log("recordService");
            this.httpClient.get('academic/studentrecord/current-semester', 'application/json', function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting student data");
            });
            return defer.promise;
        };
        StudentRecordService.prototype.getAttendedSemesters = function (studentId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("academic/studentrecord/attended-semesters/studentId/" + studentId, 'application/json', function (json) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting student data");
            });
            return defer.promise;
        };
        StudentRecordService.prototype.getCurrentSemesterStudentRecord = function () {
            var defer = this.$q.defer();
            this.httpClient.get('academic/studentrecord/student-current-semester', 'application/json', function (response) {
                defer.resolve(response.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        StudentRecordService.prototype.getStudentTypeBySemesterId = function (studentId, semesterId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("academic/studentrecord/studentTypeBySemesterId/student-id/" + studentId + "/semester-id/" + semesterId, 'application/json', function (json) {
                defer.resolve(json);
            }, function (response) {
                _this.notify.error("Error in getting student registration type");
            });
            return defer.promise;
        };
        StudentRecordService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return StudentRecordService;
    }());
    ums.StudentRecordService = StudentRecordService;
    ums.UMS.service("studentRecordService", StudentRecordService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TimeTracker = (function () {
        function TimeTracker(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        TimeTracker.prototype.reviewListLoaded = function () {
            /*We need to make a service, which stores Dates of the tests and the time taken.*/
        };
        TimeTracker.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return TimeTracker;
    }());
    ums.TimeTracker = TimeTracker;
    ums.UMS.service("timeTracker", TimeTracker);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TeacherService = (function () {
        function TeacherService(httpClient, $q) {
            this.httpClient = httpClient;
            this.$q = $q;
        }
        TeacherService.prototype.getByDepartment = function (departmentId) {
            var defer = this.$q.defer();
            this.httpClient.get("academic/teacher/department/" + departmentId, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data);
            });
            return defer.promise;
        };
        TeacherService.$inject = ['HttpClient', '$q'];
        return TeacherService;
    }());
    ums.TeacherService = TeacherService;
    ums.UMS.service("TeacherService", TeacherService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var QuotaType;
    (function (QuotaType) {
        QuotaType["FF"] = "FF";
        QuotaType["RA"] = "RA";
        QuotaType["EW"] = "EW";
        QuotaType["BW"] = "BW";
        QuotaType["SBW"] = "SBW";
        QuotaType["SSW"] = "SSW";
    })(QuotaType = ums.QuotaType || (ums.QuotaType = {}));
    var StudentWaiverService = (function () {
        function StudentWaiverService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        StudentWaiverService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return StudentWaiverService;
    }());
    ums.StudentWaiverService = StudentWaiverService;
    ums.UMS.service("StudentWaiverService", StudentWaiverService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionCertificateVerificationService = (function () {
        function AdmissionCertificateVerificationService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        AdmissionCertificateVerificationService.prototype.getCandidatesList = function (programType, semesterId, quota) {
            var url = "academic/admission/candidatesList/programType/" + programType + "/semester/" + semesterId + "/quota/" + quota;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudents = json.entries;
                defer.resolve(admissionStudents);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionCertificateVerificationService.prototype.getCandidate = function (programType, semesterId, receiptId, quota) {
            var url = "academic/admission/semester/" + semesterId + "/programType/" + programType + "/receiptId/" + receiptId + "/quota/" + quota;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var admissionStudents = json.entries;
                defer.resolve(admissionStudents);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionCertificateVerificationService.prototype.getAllTypesOfCertificates = function () {
            var url = "academic/admission/certificate/certificateLists";
            var defer = this.$q.defer();
            this.httpClient.get(url, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionCertificateVerificationService.prototype.getSubmittedCertificates = function (semesterId, receiptId) {
            var defer = this.$q.defer();
            this.httpClient.get("academic/students/certificateHistory/savedCertificates/semesterId/" + semesterId + "/receiptId/" + receiptId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdmissionCertificateVerificationService.prototype.getAllPreviousComments = function (semesterId, receiptId) {
            var defer = this.$q.defer();
            this.httpClient.get("academic/students/comment/savedComments/semesterId/" + semesterId + "/receiptId/" + receiptId, ums.HttpClient.MIME_TYPE_JSON, function (json) {
                defer.resolve(json.entries);
            }, function (response) {
                console.log(response);
            });
            return defer.promise;
        };
        AdmissionCertificateVerificationService.prototype.saveAll = function (json) {
            var _this = this;
            var url = "academic/admission/student/saveAll";
            var defer = this.$q.defer();
            this.httpClient.put(url, json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve("Saved");
            }).error(function (data) {
                _this.notify.error("Error in saving");
                defer.resolve("Error in saving");
            });
            return defer.promise;
        };
        AdmissionCertificateVerificationService.prototype.getUndertakenForm = function (programType, semesterId, receiptId, quota) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "UnderTaken Form " + receiptId;
            this.httpClient.get("academic/students/certificateHistory/underTaken/programType/" + programType + "/semesterId/" + semesterId + "/receiptId/" + receiptId + "/quota/" + quota, 'application/pdf', function (data, etag) {
                // var file = new Blob([data], {type: 'application/pdf'});
                // var fileURL = this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                // this.$window.open(fileURL);
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        AdmissionCertificateVerificationService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return AdmissionCertificateVerificationService;
    }());
    ums.AdmissionCertificateVerificationService = AdmissionCertificateVerificationService;
    ums.UMS.service('admissionCertificateVerificationService', AdmissionCertificateVerificationService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CourseType;
    (function (CourseType) {
        CourseType[CourseType["theory"] = 1] = "theory";
        CourseType[CourseType["sessional"] = 2] = "sessional";
        CourseType[CourseType["thesis_project"] = 3] = "thesis_project";
        CourseType[CourseType["none"] = 0] = "none";
    })(CourseType = ums.CourseType || (ums.CourseType = {}));
    var CourseTeacherService = (function () {
        function CourseTeacherService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.courseMapWithCourseTeachers = {};
            this.courseTeacherList = [];
            this.courseTeacherUrl = '/ums-webservice-academic/academic/courseTeacher';
        }
        CourseTeacherService.prototype.getCourseTeacherBySemesterAndCourseAndSection = function (semesterId, courseId, section) {
            var defer = this.$q.defer();
            this.httpClient.get(this.courseTeacherUrl + "/semesterId/" + semesterId + "/courseId/" + courseId + "/section/" + section, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        CourseTeacherService.prototype.getCourseTeacherByProgramAndSemesterAndYearAndAcademicSemester = function (semesterId, programId, section, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get(this.courseTeacherUrl + "/programId/" + programId + "/semesterId/" + semesterId + "/section/" + section + "/year/" + year + "/semester/" + semester, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        CourseTeacherService.prototype.getCourseTeacherBySemesterAndTeacher = function (semesterId, teacherId) {
            var defer = this.$q.defer();
            this.httpClient.get(this.courseTeacherUrl + "/semesterId/" + semesterId + "/teacherId/" + teacherId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        CourseTeacherService.prototype.getTotalCreditHourTakenByTeacher = function (semesterId, teacherId) {
            var defer = this.$q.defer();
            this.httpClient.get(this.courseTeacherUrl + "/credit-hour/semesterId/" + semesterId + "/teacherId/" + teacherId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                console.log("Response for credit hour");
                console.log(response);
                defer.resolve(response);
            });
            return defer.promise;
        };
        CourseTeacherService.prototype.getCourseTeacherBySemesterAndCourseList = function (semesterId, courseIdList) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post(this.courseTeacherUrl + "/semesterId/" + semesterId, courseIdList, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (response) {
                _this.notify.error("Error in saving data");
                console.error(response);
                defer.resolve(response);
            });
            return defer.promise;
        };
        CourseTeacherService.prototype.saveOrUpdateCourseTeacher = function (courseTeacherList) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put(this.courseTeacherUrl + "/saveOrUpdate", courseTeacherList, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (response) {
                _this.notify.error("Error in saving data");
                console.error(response);
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        CourseTeacherService.prototype.delete = function (id) {
            var _this = this;
            this.httpClient.doDelete(this.courseTeacherUrl + "/id/" + id)
                .success(function (response) { return ''; })
                .error(function (response) {
                _this.notify.error("Error in deleting data");
            });
        };
        CourseTeacherService.prototype.deleteTeacherList = function (courseTeacherList) {
            var _this = this;
            var defer = this.$q.defer();
            var teacherList = [];
            courseTeacherList.forEach(function (c) {
                if (c.id != undefined)
                    teacherList.push(c);
            });
            this.httpClient.put(this.courseTeacherUrl + "/delete", teacherList, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (response) {
                console.error(response);
                _this.notify.error("Error in deleting teacher list");
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        CourseTeacherService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return CourseTeacherService;
    }());
    ums.CourseTeacherService = CourseTeacherService;
    ums.UMS.service("courseTeacherService", CourseTeacherService);
})(ums || (ums = {}));
///<reference path="GenericModel.ts"/>
var ums;
(function (ums) {
    var FieldViewTypes;
    (function (FieldViewTypes) {
        FieldViewTypes[FieldViewTypes["selected"] = 0] = "selected";
        FieldViewTypes[FieldViewTypes["hidden"] = 1] = "hidden";
        FieldViewTypes[FieldViewTypes["readonly"] = 2] = "readonly";
        FieldViewTypes[FieldViewTypes["none"] = 3] = "none";
    })(FieldViewTypes = ums.FieldViewTypes || (ums.FieldViewTypes = {}));
    var ProgramSelectorModel = (function () {
        function ProgramSelectorModel(pAppConstants, pHtpClient, pEnableSemester, pEnableAllDepartment, pEnableAllProgram) {
            var appConstants = pAppConstants;
            var httpClient = pHtpClient;
            var programTypes = appConstants.programType;
            var departments = appConstants.initDept;
            var programs = appConstants.initProgram;
            var semesters = appConstants.initSemester;
            var fieldView = {
                programType: FieldViewTypes.none,
                department: FieldViewTypes.none,
                program: FieldViewTypes.none,
                semester: FieldViewTypes.none
            };
            this.getProgramTypes = function () {
                return programTypes;
            };
            this.getDepartments = function () {
                return departments;
            };
            this.getPrograms = function () {
                return programs;
            };
            this.getSemesters = function () {
                return semesters;
            };
            this.setProgramTypes = function () {
                return programTypes;
            };
            this.setDepartments = function (pDepartments) {
                departments = pDepartments;
            };
            this.setPrograms = function (pPrograms) {
                programs = pPrograms;
            };
            this.setSemesters = function (pSemesters) {
                semesters = pSemesters;
            };
            this.getAppConstants = function () {
                return appConstants;
            };
            this.getHttpClient = function () {
                return httpClient;
            };
            this.isSemesterEnabled = function () {
                return pEnableSemester;
            };
            this.isAllDepartmentEnabled = function () {
                return pEnableAllDepartment;
            };
            this.isAllProgramEnabled = function () {
                return pEnableAllProgram;
            };
            this.fieldView = function () {
                return fieldView;
            };
            this.fieldViewTypes = function () {
                return FieldViewTypes;
            };
            this.loadSemester();
        }
        ProgramSelectorModel.prototype.setDepartment = function (departmentId, fieldViewType) {
            this.departmentId = departmentId;
            if (fieldViewType) {
                this.fieldView()['department'] = fieldViewType;
            }
            this.loadPrograms();
        };
        ProgramSelectorModel.prototype.setProgram = function (programId, fieldViewType) {
            this.programId = programId;
            if (fieldViewType) {
                this.fieldView()['program'] = fieldViewType;
            }
        };
        ProgramSelectorModel.prototype.setProgramType = function (programTypeId, fieldViewType) {
            this.programTypeId = programTypeId;
            if (fieldViewType) {
                this.fieldView()['programType'] = fieldViewType;
            }
            this.loadDepartments();
            this.loadSemester();
        };
        ProgramSelectorModel.prototype.enableSemesterOption = function (enable) {
            this.enableSemester(enable);
        };
        ProgramSelectorModel.prototype.loadDepartments = function () {
            if (this.programTypeId === this.getAppConstants().programTypeEnum.UG) {
                this.setDepartments(this.getAppConstants().ugDept);
            }
            else if (this.programTypeId === this.getAppConstants().programTypeEnum.PG) {
                this.setDepartments(this.getAppConstants().pgDept);
            }
            else {
                this.setDepartments(this.getAppConstants().initDept);
            }
            if (this.isAllDepartmentEnabled()) {
                if (this.getDepartments()[this.getDepartments().length - 1].id != this.getAppConstants().deptAll.id) {
                    this.getDepartments().push({
                        id: this.getAppConstants().deptAll.id,
                        name: this.getAppConstants().deptAll.label
                    });
                }
            }
            this.loadPrograms();
        };
        ProgramSelectorModel.prototype.loadPrograms = function () {
            var _this = this;
            this.setPrograms(this.getAppConstants().initProgram);
            if (this.departmentId
                && this.departmentId !== this.getAppConstants().deptAll.id) {
                var programsArr;
                if (this.programTypeId === this.getAppConstants().programTypeEnum.UG) {
                    programsArr = this.getAppConstants().ugPrograms;
                }
                else if (this.programTypeId === this.getAppConstants().pgPrograms) {
                    programsArr = this.getAppConstants().pgPrograms;
                }
                if (programsArr && programsArr.length > 0) {
                    var programsJson = $.map(programsArr, function (el) {
                        return el;
                    });
                    var resultPrograms = $.grep(programsJson, function (e) {
                        return e.deptId == _this.departmentId;
                    });
                    this.setPrograms(resultPrograms[0].programs);
                }
            }
            this.programId = this.getPrograms()[0].id;
            if (this.isAllProgramEnabled() && this.departmentId === this.getAppConstants().deptAll.id) {
                if (this.getPrograms()[this.getPrograms().length - 1].id != this.getAppConstants().programAll.id) {
                    this.getPrograms().push({
                        id: this.getAppConstants().programAll.id,
                        longName: this.getAppConstants().programAll.label
                    });
                }
            }
        };
        ProgramSelectorModel.prototype.loadSemester = function () {
            var _this = this;
            if (this.programTypeId && this.programTypeId !== this.getAppConstants().Empty) {
                this.getHttpClient().get('academic/semester/program-type/' + this.programTypeId + "/limit/10/status/" + ums.Utils.SEMESTER_FETCH_ALL, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                    _this.setSemesters(json.entries);
                    if (_this.isSemesterEnabled() && json.entries.length > 0) {
                        _this.semesterId = (_this.getSemesters()[0]).id + '';
                    }
                }, function (response) {
                    console.error(response);
                });
            }
        };
        return ProgramSelectorModel;
    }());
    ums.ProgramSelectorModel = ProgramSelectorModel;
})(ums || (ums = {}));
///<reference path="ProgramSelectorModel.ts"/>
var ums;
(function (ums) {
    var NewStudentModel = (function () {
        function NewStudentModel(appConstants, httpClient) {
            this.programSelector = new ums.ProgramSelectorModel(appConstants, httpClient);
            this.id = '';
            this.fullName = '';
            this.fatherName = '';
            this.motherName = '';
            this.semesterId = '';
            this.dateOfBirth = '';
            this.gender = '';
            this.mobileNo = '';
            this.phoneNo = '';
            this.bloodGroup = '';
            this.email = '';
            this.presentAddress = '';
            this.permanentAddress = '';
            this.guardianName = '';
            this.guardianMobileNo = '';
            this.guardianPhoneNo = '';
            this.guardianEmail = '';
            this.imageData = '';
            this.getGenders = function () {
                return appConstants.gender;
            };
            this.getBloodGroups = function () {
                return appConstants.bloodGroup;
            };
        }
        return NewStudentModel;
    }());
    ums.NewStudentModel = NewStudentModel;
})(ums || (ums = {}));
///<reference path="../../../../../../ums-web-core/src/main/ts/lib/jquery-maskedinput.d.ts"/>
///<reference path="../../../../../../ums-web-core/src/main/ts/service/HttpClient.ts"/>
///<reference path="../../../../../../ums-web-core/src/main/ts/service/FileUpload.ts"/>
///<reference path="../../model/NewStudentModel.ts"/>
var ums;
(function (ums) {
    var NewStudent = (function () {
        function NewStudent(appConstants, $scope, httpClient, fileUpload, baseUri) {
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.fileUpload = fileUpload;
            this.baseUri = baseUri;
            $scope.newStudentModel = new ums.NewStudentModel(appConstants, httpClient);
            $scope.submit = this.submit.bind(this);
            //$('.datepicker-default').datepicker();
            $("#birthDate").mask("99/99/9999");
            $("#fileUpload").on('change', function () {
                if (typeof (FileReader) != "undefined") {
                    var image_holder = $("#image-holder");
                    image_holder.empty();
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var targetObject = e.target;
                        $("<img />", {
                            "src": targetObject.result,
                            "class": "thumb-image",
                            "height": "140px",
                            "width": "120px"
                        }).appendTo(image_holder);
                    };
                    image_holder.show();
                    var thisObject = $(this)[0];
                    reader.readAsDataURL(thisObject.files[0]);
                }
                else {
                    console.error("This browser does not support FileReader.");
                }
            });
        }
        NewStudent.prototype.submit = function () {
            var _this = this;
            console.debug("upload file....%o", this.$scope.newStudentModel.picture);
            var fileReader = new FileReader();
            console.debug("upload file....%o", fileReader);
            fileReader.onload = function () {
                console.debug("onload.....");
                var dataURL = fileReader.result;
                console.debug("data....%o", dataURL);
                _this.$scope.newStudentModel.imageData = dataURL;
                var newObject = jQuery.extend({}, _this.$scope.newStudentModel);
                console.debug("%o", newObject);
                _this.httpClient.post(_this.baseUri.toAbsolute('academic/student'), _this.$scope.newStudentModel, _this.appConstants.mimeTypeJson)
                    .success(function (data, status, headers) {
                    console.debug("Student created, resource location : " + headers('location'));
                    _this.resetModel();
                }).error(function (data) {
                    console.error(data);
                });
                //this.fileUpload.uploadFile(dataURL, $scope.fileUpload.type, $scope.fileUpload.name, this.baseUri.toAbsolute('academic/student/upload'));
            };
            fileReader.readAsDataURL(this.$scope.newStudentModel.picture);
        };
        NewStudent.prototype.resetModel = function () {
            for (var property in this.$scope.newStudentModel) {
                if (this.$scope.newStudentModel.hasOwnProperty(property)
                    && (typeof this.$scope.newStudentModel[property] === 'string')) {
                    delete this.$scope.newStudentModel[property];
                }
            }
        };
        NewStudent.$inject = ['appConstants', '$scope', 'HttpClient', 'FileUpload', 'BaseUri'];
        return NewStudent;
    }());
    ums.NewStudent = NewStudent;
    ums.UMS.controller('NewStudent', NewStudent);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var NewSemester = (function () {
        function NewSemester(appConstants, httpClient, $scope, notify) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.notify = notify;
            var currentYear = (new Date()).getFullYear();
            var nextYear = currentYear + 10;
            $scope.data = {
                programTypeOptions: appConstants.programType,
                semesterTypeOptions: appConstants.semesterType,
                semesterStatusOptions: [{ id: '2', name: 'Newly Created' }],
                year: [{ id: "", name: "Select a Year" }, { id: currentYear, name: currentYear }, { id: nextYear, name: nextYear }]
            };
            $('.datepicker-default').datepicker();
            $('.datepicker-default').on('change', function () {
                $('.datepicker').hide();
            });
            $scope.submit = this.submit.bind(this);
        }
        NewSemester.prototype.submit = function () {
            var _this = this;
            //$.notify("Access granted", { position:"top",autoHide:false });
            this.$scope.semester.semesterName = $("#semesterType option:selected").text() + ", " + this.$scope.semester.year;
            var semesterId = this.$scope.semester.programTypeId + this.$scope.semester.semesterTypeId + this.$scope.semester.year;
            this.$scope.semester.semesterId = +semesterId;
            this.$scope.semester.statusId = 2;
            var notify = this.notify;
            this.httpClient.post('academic/semester/', this.$scope.semester, 'application/json')
                .success(function () {
                //TODO: Move $.notific8 Common messaging service
                notify.success("Successfully created a new semester.");
                _this.$scope.semester.programTypeId = "";
                _this.$scope.semester.semesterTypeId = "";
                _this.$scope.semester.year = "";
                _this.$scope.semester.startDate = "";
                _this.$scope.semester.endDate = "";
            }).error(function (data) {
            });
        };
        NewSemester.$inject = ['appConstants', 'HttpClient', '$scope', 'notify'];
        return NewSemester;
    }());
    ums.NewSemester = NewSemester;
    ums.UMS.controller('NewSemester', NewSemester);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SemesterInfo = (function () {
        function SemesterInfo(appConstants, httpClient, $scope, notify, $location) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.notify = notify;
            this.$location = $location;
            this.loadData();
            $scope.manageAddButton = this.manageAddButton.bind(this);
        }
        SemesterInfo.prototype.initializeGrid = function () {
            ums.GridDecorator.decorate(this);
            ums.RowAttributeDecorator.decorate(this, this);
        };
        SemesterInfo.prototype.insert = function (rowData) {
            var _this = this;
            this.decorateScope().grid.api.toggleMessage('Saving...');
            this.httpClient.post('academic/semester/', rowData, ums.HttpClient.MIME_TYPE_JSON).success(function () {
                _this.decorateScope().grid.api.toggleMessage();
                _this.loadData();
            }).error(function (response) {
                _this.decorateScope().grid.api.removeLoadingMessage();
                _this.decorateScope().grid.api.toggleMessage();
            });
        };
        SemesterInfo.prototype.edit = function (rowData) {
            var _this = this;
            console.log(rowData);
            var gridId = this.decorateScope().grid.api.getGrid()[0].id;
            var rowId = $("#" + gridId).jqGrid('getGridParam', 'selrow');
            var oldRowData = $("#" + gridId).getRowData(rowId);
            console.log(oldRowData);
            if (oldRowData.status == 0) {
                this.notify.error("Edit not permitted for an inactive semester.");
                return;
            }
            this.decorateScope().grid.api.toggleMessage('Updating...');
            this.httpClient.put('academic/semester/' + rowData.id, rowData, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                _this.decorateScope().grid.api.toggleMessage();
                _this.notify.success("Semester info successfully updated.");
                _this.loadData();
            }).error(function (response) {
                console.error(response);
                _this.decorateScope().grid.api.toggleMessage();
            });
        };
        SemesterInfo.prototype.remove = function (rowData) {
            var notify = this.notify;
            notify.error("Semester delete not permitted.");
        };
        SemesterInfo.prototype.beforeShowEditForm = function (form, gridElement) {
            var rowId = gridElement.jqGrid('getGridParam', 'selrow');
            var rowData = gridElement.getRowData(rowId);
            this.makeReadOnly(gridElement, 'programTypeId', 'name');
            if (rowData["status"] == "0") {
                this.makeReadOnly(gridElement, 'status', 'startDate', 'endDate');
            }
        };
        //We should remove this method to jqGridCommon.ts file
        SemesterInfo.prototype.makeReadOnly = function (gridElement) {
            var fields = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                fields[_i - 1] = arguments[_i];
            }
            for (var i = 0; i < arguments.length; i++) {
                gridElement.jqGrid('setColProp', arguments[i], { editoptions: { readonly: "readonly" } });
            }
        };
        //We should remove this method to jqGridCommon.ts file
        SemesterInfo.prototype.removeReadOnly = function (gridElement) {
            var fields = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                fields[_i - 1] = arguments[_i];
            }
            for (var i = 0; i < arguments.length; i++) {
                gridElement.jqGrid('setColProp', arguments[i], { editoptions: { readonly: false } });
            }
        };
        SemesterInfo.prototype.afterShowEditForm = function (form, gridElement) {
            var rowId = gridElement.jqGrid('getGridParam', 'selrow');
            var rowData = gridElement.getRowData(rowId);
            this.removeReadOnly(gridElement, 'programTypeId', 'name', 'status');
        };
        SemesterInfo.prototype.decorateScope = function () {
            return this.$scope;
        };
        SemesterInfo.prototype.rowattr = function (rowData) {
            if (rowData.status == 1)
                return { "class": "activeSemesterBG" };
            else if (rowData.status == 2)
                return { "class": "newlyCreatedSemesterBG" };
        };
        SemesterInfo.prototype.getColumnModel = function () {
            return [
                {
                    label: 'Semester Id',
                    name: 'id',
                    hidden: true,
                    editable: true,
                    key: true
                },
                {
                    label: 'Program Type',
                    name: 'programTypeId',
                    editable: true,
                    formatter: 'select',
                    edittype: 'select',
                    width: 150,
                    editoptions: {
                        value: '11:Undergraduate;22:Postgraduate'
                    },
                    stype: 'select',
                    searchoptions: {
                        sopt: ['eq', 'ne'],
                        value: '11:Undergraduate;22:Postgraduate'
                    }
                },
                {
                    label: 'Semester Name',
                    name: 'name',
                    editable: true,
                    width: 250
                },
                {
                    label: 'Start Date',
                    name: 'startDate',
                    editable: true
                },
                {
                    label: 'End Date',
                    name: 'endDate',
                    width: 100,
                    editable: true
                },
                {
                    label: 'Status',
                    name: 'status',
                    editable: true,
                    width: 100,
                    formatter: 'select',
                    edittype: 'select',
                    editoptions: {
                        value: '0:Inactive;1:Active;2:Newly Created'
                    },
                    stype: 'select',
                    searchoptions: {
                        sopt: ['eq', 'ne'],
                        value: '0:Inactive;1:Active;2:Newly Created'
                    }
                }
            ];
        };
        SemesterInfo.prototype.loadData = function () {
            var _this = this;
            var that = this;
            this.httpClient.get("academic/semester/all", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.initializeGrid();
                _this.$scope.semesterData = response.entries;
                setTimeout(function () { that.manageAddButton(); }, 100);
            });
        };
        SemesterInfo.prototype.manageAddButton = function () {
            var location = this.$location;
            var scope = this.$scope;
            var gridId = this.decorateScope().grid.api.getGrid()[0].id;
            var $td = $('#add_' + gridId);
            $td.hide();
            $("#" + gridId).navButtonAdd('#semesterListPager', {
                caption: "",
                title: "Click here to add new record",
                buttonicon: "glyphicon glyphicon-plus",
                onClickButton: function () {
                    console.log(location);
                    location.path("/createSemester");
                    scope.$apply(); // this
                },
                position: "first"
            });
        };
        SemesterInfo.$inject = ['appConstants', 'HttpClient', '$scope', 'notify', '$location'];
        return SemesterInfo;
    }());
    ums.SemesterInfo = SemesterInfo;
    ums.UMS.controller('SemesterInfo', SemesterInfo);
})(ums || (ums = {}));
///<reference path="ProgramSelectorModel.ts"/>
var ums;
(function (ums) {
    var SemesterSyllabusMapModel = (function () {
        function SemesterSyllabusMapModel(appConstants, httpClient) {
            this.programSelector = new ums.ProgramSelectorModel(appConstants, httpClient);
            this.semesterId = '';
            this.mapId = '';
            this.syllabuses = '';
        }
        return SemesterSyllabusMapModel;
    }());
    ums.SemesterSyllabusMapModel = SemesterSyllabusMapModel;
})(ums || (ums = {}));
///<reference path="../../../../../../ums-web-core/src/main/ts/service/HttpClient.ts"/>
///<reference path="../../../../../../ums-web-core/src/main/ts/service/FileUpload.ts"/>
///<reference path="../../model/SemesterSyllabusMapModel.ts"/>
///<reference path="../../../../../../ums-web-core/src/main/ts/lib/jquery.notific8.d.ts"/>
var ums;
(function (ums) {
    var SemesterSyllabusMap = (function () {
        function SemesterSyllabusMap(appConstants, $scope, httpClient, semesterService) {
            var _this = this;
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.semesterService = semesterService;
            $scope.semesterSyllabusMapModel = new ums.SemesterSyllabusMapModel(appConstants, httpClient);
            //      $scope.semesterSyllabusMapModel.programTypes.pop();
            $scope.goNext = this.goNext.bind(this);
            $scope.copyMapping = this.copyMapping.bind(this);
            $scope.fetchSSmap = this.fetchSSmap.bind(this);
            $scope.editAction = this.editAction.bind(this);
            $scope.editSaveAction = this.editSaveAction.bind(this);
            $scope.mapTableVisibility = false;
            $scope.syllabusTextBoxVisibility = true;
            $scope.syllabusSelectBoxVisibility = false;
            $scope.noRecordVisibility = false;
            $scope.loadingVisibility1 = false;
            $scope.loadingVisibility2 = false;
            $scope.mapTableVisibility = false;
            $scope.mapDetailVisiblity = false;
            this.getSemesters();
            $scope.$watch(function () {
                return $scope.semesterSyllabusMapModel.programSelector.departmentId;
            }, function (newValue, oldValue) { if (newValue !== oldValue) {
                _this.clearMap();
            } });
            $scope.$watch(function () {
                return $scope.semesterSyllabusMapModel.programSelector.programId;
            }, function (newValue, oldValue) { if (newValue !== oldValue) {
                _this.clearMap();
            } });
            $scope.$watch('semesterSyllabusMapModel.semesters', function () { $scope.semesterSyllabusMapModel.semesterId = appConstants.Empty; }, true);
        }
        SemesterSyllabusMap.prototype.clearMap = function () {
            this.$scope.maps = null;
            this.$scope.mapTableVisibility = false;
            this.$scope.mapDetailVisiblity = false;
        };
        SemesterSyllabusMap.prototype.goNext = function () {
            var _this = this;
            //TODO: Make a common loading directive/service
            this.$scope.loadingVisibility1 = true;
            this.$scope.mapTableVisibility = false;
            this.$scope.mapDetailVisiblity = false;
            this.$scope.noRecordVisibility = false;
            this.$scope.copyDivVisiblity = false;
            this.httpClient.get('academic/ssmap/program/' + this.$scope.semesterSyllabusMapModel.programSelector.programId + '/semester/' + this.$scope.semesterSyllabusMapModel.semesterId + '', 'application/json', function (json, etag) {
                _this.$scope.loadingVisibility1 = false;
                _this.$scope.maps = json.entries;
                _this.$scope.mapTableVisibility = _this.$scope.maps.length == 0 ? false : true;
                _this.$scope.noRecordVisibility = _this.$scope.maps.length == 0 ? true : false;
                _this.$scope.mapMessage = _this.$scope.maps.length == 0 ? "No Mapping Found." : "";
                _this.$scope.copyDivVisiblity = _this.$scope.maps.length == 0 ? true : false;
            }, function (response) {
                console.error(response);
                _this.$scope.loadingVisibility1 = false;
            });
        };
        SemesterSyllabusMap.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 5, ums.UmsUtil.SEMESTER_FETCH_ALL_WITH_NEWLY_CREATED).then(function (res) {
                _this.$scope.semesters = res;
            });
        };
        SemesterSyllabusMap.prototype.copyMapping = function () {
            var postJson = {
                "semesterId": parseInt(this.$scope.semesterSyllabusMapModel.semesterId),
                "copySemesterId": parseInt(this.$scope.copySemesterId),
                "programId": parseInt(this.$scope.semesterSyllabusMapModel.programSelector.programId)
            };
            this.httpClient.post('academic/ssmap/', postJson, 'application/json')
                .success(function () {
                $.notific8('Successfully inserted new mapping.');
            }).error(function (data) {
            });
        };
        SemesterSyllabusMap.prototype.fetchSSmap = function (mapId) {
            var _this = this;
            this.$scope.loadingVisibility2 = true;
            this.$scope.mapDetailVisiblity = false;
            this.$scope.syllabusTextBoxVisibility = true;
            this.$scope.syllabusSelectBoxVisibility = false;
            this.httpClient.get('academic/ssmap/' + mapId, 'application/json', function (json, etag) {
                _this.$scope.loadingVisibility2 = false;
                _this.$scope.single = json;
                _this.$scope.mapDetailVisiblity = true;
            }, function (response) {
                _this.$scope.loadingVisibility2 = false;
                console.error(response);
            });
            this.httpClient.get('academic/syllabus/program-id/' + this.$scope.semesterSyllabusMapModel.programSelector.programId, 'application/json', function (json, etag) {
                var entries = json.entries;
                _this.$scope.syllabusOptions = entries;
                _this.$scope.single.syllabusId = entries[0].id;
            }, function (response) {
                alert(response);
            });
        };
        SemesterSyllabusMap.prototype.editAction = function () {
            this.$scope.syllabusTextBoxVisibility = false;
            this.$scope.syllabusSelectBoxVisibility = true;
        };
        SemesterSyllabusMap.prototype.editSaveAction = function () {
            this.httpClient.put('academic/ssmap/' + this.$scope.single.id, this.$scope.single, 'application/json')
                .success(function () {
                $.notific8('Successfully Updated Mapping Information.');
            }).error(function (data) {
            });
        };
        SemesterSyllabusMap.$inject = ['appConstants', '$scope', 'HttpClient', 'semesterService'];
        return SemesterSyllabusMap;
    }());
    ums.SemesterSyllabusMap = SemesterSyllabusMap;
    ums.UMS.controller('SemesterSyllabusMap', SemesterSyllabusMap);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExamSeatPlan = (function () {
        function ExamSeatPlan(appConstants, httpClient, $scope, $q, notify, $timeout, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$timeout = $timeout;
            this.$sce = $sce;
            this.$window = $window;
            var arr = {};
            $scope.splitButtonClickedStore = [];
            $scope.previousIterationNumber = 0;
            $scope.mergeIdList = [];
            $scope.loadingVisibilityForCCI = false;
            $scope.cciSelected = false;
            $scope.cciSelected = false;
            $scope.splitActionOccured = false;
            $scope.recreate = false;
            $scope.splitButtonClicked = false;
            $scope.reverseSplitButtonClicked = false;
            $scope.loadingVisibility = false;
            $scope.showGroupOrNot = false;
            $scope.groupSelected = false;
            $scope.showGroupSelectionPanel = true;
            $scope.showGroupSelection = false;
            $scope.subGroupSelected = false;
            $scope.subGroupFound = false;
            $scope.editSubGroup = false;
            $scope.cancelSubGroup = false;
            $scope.saveSubGroupInfo = false;
            $scope.editButtonClicked = false;
            $scope.recreateButtonClicked = false;
            $scope.customeMenu = false;
            $scope.pdfGenerator = false;
            $scope.deleteAndCreateNewSubGroup = false;
            $scope.showContextMenu = false;
            $scope.arr = arr;
            $scope.update = 0;
            $scope.selectedSubGroupNo = "";
            $scope.groupNumber = 1;
            $scope.group1List = [];
            $scope.group2List = [];
            $scope.group3List = [];
            $scope.totalStudentGroup1 = 0;
            $scope.totalStudentGroup2 = 0;
            $scope.totalStudentGroup3 = 0;
            $scope.groupList = [];
            $scope.subGroupList = [];
            $scope.subGroup1List = {};
            $scope.subGroup2List = {};
            $scope.subGroup3List = {};
            $scope.subGroup4List = {};
            $scope.subGroup5List = {};
            $scope.subGroup6List = {};
            $scope.mouseClickedObjectStore = [];
            $scope.subGroup1StudentNumber = 0;
            $scope.subGroup2StudentNumber = 0;
            $scope.subGroup3StudentNumber = 0;
            $scope.subGroup4StudentNumber = 0;
            $scope.subGroup5StudentNumber = 0;
            $scope.subGroup6StudentNumber = 0;
            $scope.subGroupWithDeptMap = {};
            $scope.subGroupTotalStudentNumber = {};
            $scope.getSemesterInfo = this.getSemesterInfo.bind(this);
            $scope.getSeatPlanGroupInfo = this.getSeatPlanGroupInfo.bind(this);
            $scope.getGroups = this.getGroups.bind(this);
            $scope.getRoomInfo = this.getRoomInfo.bind(this);
            $scope.getRoomList = this.getRoomList.bind(this);
            $scope.closeSubGroupOrRoomInfoWindow = this.closeSubGroupOrRoomInfoWindow.bind(this);
            $scope.createOrViewSeatPlan = this.createOrViewSeatPlan.bind(this);
            $scope.showGroups = this.showGroups.bind(this);
            $scope.createOrViewSubgroups = this.createOrViewSubgroups.bind(this);
            $scope.generateSubGroups = this.generateSubGroups.bind(this);
            $scope.saveSubGroup = this.saveSubGroup.bind(this);
            $scope.postSubGroup = this.postSubGroup.bind(this);
            $scope.getSubGroupInfo = this.getSubGroupInfo.bind(this);
            $scope.getSelectedGroupList = this.getSelectedGroupList.bind(this);
            $scope.getGroupInfoFromSelectedSubGroup = this.getGroupInfoFromSelectedSubGroup.bind(this);
            $scope.deleteExistingSubGroupInfo = this.deleteExistingSubGroupInfo.bind(this);
            $scope.editSavedSubGroup = this.editSavedSubGroup.bind(this);
            $scope.createNewSubGroup = this.createNewSubGroup.bind(this);
            $scope.getSeatPlanInfo = this.getSeatPlanInfo.bind(this);
            $scope.saveSubGroupIntoDb = this.saveSubGroupIntoDb.bind(this);
            $scope.cancelEditedSubGroup = this.cancelEditedSubGroup.bind(this);
            $scope.showGroups = this.showGroups.bind(this);
            $scope.splitACourseStudent = this.splitCourseStudent.bind(this);
            $scope.cancelSplitAction = this.cancelSplitAction.bind(this);
            $scope.getExamRoutineInfoForCCI = this.getExamRoutineCCIInfo.bind(this);
            $scope.getApplicationCCIInfoForSubGroup = this.getApplicationCCIInfoForSubGroup.bind(this);
            $scope.generateIterationNumberArray = this.generateIterationNumberArray.bind(this);
            $scope.getMouseClickEvent = this.getMouseClickEvent.bind(this);
            $scope.splitOut = this.splitOut.bind(this);
            $scope.createCCI = this.createCCI.bind(this);
            $scope.cancelSplit = this.cancelSplit.bind(this);
            $scope.showStatistics = this.showStatistics.bind(this);
            $scope.splitActionUpdate = this.splitActionUpdate.bind(this);
            $scope.mergeUpdate = this.mergeUpdate.bind(this);
            $scope.viewCCI = this.viewCCI.bind(this);
            $scope.getSeatPlanInfoCCi = this.getSeatPlanInfoCCi.bind(this);
            $scope.deleteAndRecreate = this.deleteAndRecreate.bind(this);
            $scope.cancelRecreation = this.cancelRecreation.bind(this);
            $scope.deleteExistingSubGroupCCI = this.deleteExistingSubGroupCCI.bind(this);
            this.initialize();
        }
        ExamSeatPlan.prototype.initialize = function () {
            this.getSemesterInfo().then(function (semesterArr) {
            });
        };
        ExamSeatPlan.prototype.generateIterationNumberArray = function (subGroupNo) {
            this.$scope.saveSubGroupInfo = true;
            if (this.$scope.previousIterationNumber == 0) {
                this.$scope.previousIterationNumber = subGroupNo;
            }
            else {
                if (subGroupNo < this.$scope.previousIterationNumber) {
                    for (var i = this.$scope.previousIterationNumber; i > subGroupNo; i--) {
                        if (this.$scope.subGroupWithDeptMap[i] != null) {
                            for (var j = 0; j < this.$scope.subGroupWithDeptMap[i].length; j++) {
                                this.$scope.tempGroupList.push(this.$scope.subGroupWithDeptMap[i][j]);
                            }
                            this.$scope.subGroupWithDeptMap[i] = null;
                            this.$scope.iterationNumbers.pop();
                        }
                        this.$scope.previousIterationNumber = subGroupNo;
                    }
                }
            }
            if (this.$scope.subGroupWithDeptMap == null) {
                this.$scope.subGroupWithDeptMap = {};
            }
            if (this.$scope.iterationNumbers == null) {
                this.$scope.iterationNumbers = [];
            }
            for (var i = 1; i <= subGroupNo; i++) {
                if (this.$scope.subGroupWithDeptMap[i] == null) {
                    this.$scope.iterationNumbers.push(i);
                    var subGroupWithDeptMap = [];
                    this.$scope.subGroupWithDeptMap[i] = subGroupWithDeptMap;
                }
            }
            this.$scope.sortableOptionsIfSubGroupNotFound = {};
            this.$scope.sortableOptionsIfSubGroupNotFound.connectWith = '.apps-container';
            var currentScope = this;
            this.$scope.sortableOptionsIfSubGroupNotFound = {
                connectWith: '.apps-container',
                update: function () {
                    currentScope.showStatistics();
                }
            };
            this.$scope.hideSelection = false;
            this.showStatistics();
        };
        ExamSeatPlan.prototype.mergeUpdate = function () {
            var studentNumberStore = this.$scope.mouseClickedObject.studentNumber;
            var studentNumber = 0;
            for (var i = 0; i < this.$scope.mouseClickedObjectStore.length; i++) {
                if (this.$scope.mouseClickedObject != this.$scope.mouseClickedObjectStore[i]) {
                    studentNumber += this.$scope.mouseClickedObjectStore[i].studentNumber;
                    //this.$scope.mouseClickedObjectStore[i]=null;
                    for (var j = 0; j < this.$scope.tempGroupList.length; j++) {
                        if (this.$scope.tempGroupList[j] == this.$scope.mouseClickedObjectStore[i]) {
                            this.$scope.tempGroupList.splice(j, 1);
                            break;
                        }
                    }
                    for (var j = 1; j <= this.$scope.iterationNumbers.length; j++) {
                        for (var k = 0; k < this.$scope.subGroupWithDeptMap[j].length; k++) {
                            if (this.$scope.subGroupWithDeptMap[j][k] == this.$scope.mouseClickedObjectStore[i]) {
                                this.$scope.subGroupWithDeptMap[j].splice(k, 1);
                                break;
                            }
                        }
                    }
                }
            }
            this.$scope.mouseClickedObject.studentNumber += studentNumber;
            this.$scope.mouseClickedObject.backgroundColor = "#EA8A8A";
            this.$scope.mouseClickedObjectStore = [];
            this.$scope.mouseClickedObjectStore.push(this.$scope.mouseClickedObject);
            this.showStatistics();
            this.$scope.customeMenu = false;
        };
        ExamSeatPlan.prototype.splitActionUpdate = function (object, splitNumecir) {
            var splitNumber = +splitNumecir;
            if (splitNumber > object.studentNumber) {
                this.$window.alert("Split number must be smaller than the current student number!");
            }
            else if (splitNumber < 0) {
                this.$window.alert("Split number cann't be negative");
            }
            else if (typeof splitNumber != "number") {
                this.$window.alert("Split number must be numeric");
            }
            else {
                var currentStudentNumber = angular.copy(object.studentNumber);
                object.studentNumber = +splitNumber;
                object.showSubPortion = false;
                object.backgroundColor = "#EA8A8A";
                var newObject = angular.copy(object);
                newObject.studentNumber = currentStudentNumber - object.studentNumber;
                var temporaryListHolder = angular.copy(this.$scope.tempGroupList);
                this.$scope.tempGroupList = [];
                this.$scope.tempGroupList.push(newObject);
                // this.$scope.tempGroupList.concat(temporaryListHolder);
                for (var x = 0; x < temporaryListHolder.length; x++) {
                    this.$scope.tempGroupList.push(temporaryListHolder[x]);
                }
                this.showStatistics();
            }
            this.$scope.customeMenu = false;
        };
        ExamSeatPlan.prototype.showStatistics = function () {
            for (var i = 1; i <= this.$scope.iterationNumbers.length; i++) {
                this.$scope.subGroupTotalStudentNumber[i] = 0;
                for (var j = 0; j < this.$scope.subGroupWithDeptMap[i].length; j++) {
                    this.$scope.subGroupTotalStudentNumber[i] += this.$scope.subGroupWithDeptMap[i][j].studentNumber;
                }
            }
        };
        ExamSeatPlan.prototype.getMouseClickEvent = function (object) {
            this.$scope.customeMenu = false;
            var checked = false;
            if (this.$scope.mouseClickedObject != object && this.$scope.editSubGroup == false) {
                checked = true;
                this.$scope.customeMenu = true;
                this.$scope.mouseClickedObject = {};
                this.$scope.mouseClickedObject = object;
                if (this.$scope.mouseClickedObjectStore.length == 0) {
                    this.$scope.mouseClickedObjectStore.push(object);
                }
                else {
                    var foundMisMatch = false;
                    var doNothing = false;
                    for (var i = 0; i < this.$scope.mouseClickedObjectStore.length; i++) {
                        if (this.$scope.cciSelected) {
                            if (this.$scope.mouseClickedObjectStore[i].courseId != object.courseId) {
                                foundMisMatch = true;
                                break;
                            }
                            else if (this.$scope.mouseClickedObjectStore[i] == object) {
                                doNothing = true;
                            }
                            else {
                            }
                        }
                        else {
                            if (this.$scope.mouseClickedObjectStore[i].id != object.id || this.$scope.mouseClickedObjectStore[i] == object) {
                                foundMisMatch = true;
                                break;
                            }
                        }
                    }
                    if (foundMisMatch) {
                        for (var i = 0; i < this.$scope.mouseClickedObjectStore.length; i++) {
                            this.$scope.mouseClickedObjectStore[i].backgroundColor = "#EA8A8A";
                        }
                        this.$scope.mouseClickedObjectStore = [];
                        this.$scope.mouseClickedObjectStore.push(object);
                    }
                    else {
                        if (doNothing == false) {
                            this.$scope.mouseClickedObjectStore.push(object);
                        }
                    }
                }
                object.backgroundColor = "red";
            }
            else {
                this.$scope.customeMenu = true;
            }
            // this.$scope.customeMenu=true;
        };
        ExamSeatPlan.prototype.viewCCI = function (examDate) {
            this.$scope.examDate = examDate;
            this.$scope.cciSelected = true;
            this.$scope.editSubGroup = true;
            this.$scope.recreate = true;
            this.createOrViewSubgroups(4);
        };
        ExamSeatPlan.prototype.createCCI = function (examDate) {
            var _this = this;
            this.$scope.hideSelection = false;
            // for application cci, examType=4;
            this.$scope.classBodyBackgroundColor = "#d9edf7"; //Active Color
            this.$scope.cciSelected = true;
            this.getApplicationCCIInfoForSubGroup(examDate).then(function (subGroupCCiArr) {
                _this.createOrViewSubgroups(4);
            });
        };
        ExamSeatPlan.prototype.splitOut = function () {
            if (this.$scope.mouseClickedObject != null) {
                this.$scope.mouseClickedObject.showSubPortion = true;
                if (this.$scope.splitButtonClickedStore.length == 0) {
                    this.$scope.splitButtonClickedStore.push(this.$scope.mouseClickedObject);
                }
                else {
                    for (var i = 0; i < this.$scope.splitButtonClickedStore.length; i++) {
                        if (this.$scope.splitButtonClickedStore[i] != this.$scope.mouseClickedObject) {
                            this.$scope.splitButtonClickedStore[i].showSubPortion = false;
                        }
                    }
                    this.$scope.splitButtonClickedStore = [];
                    this.$scope.splitButtonClickedStore.push(this.$scope.mouseClickedObject);
                }
            }
            this.$scope.customeMenu = false;
        };
        ExamSeatPlan.prototype.cancelSplit = function () {
            this.$scope.mouseClickedObject.showSubPortion = false;
            this.$scope.customeMenu = false;
        };
        ExamSeatPlan.prototype.showGroups = function () {
            var _this = this;
            if (this.$scope.semesterId != null && this.$scope.examType != null) {
                if (this.$scope.examType == 1) {
                    this.$scope.cciSelected = false;
                    this.$scope.groupList = [];
                    this.$scope.showGroupSelection = true;
                    this.$scope.getGroups();
                    $("#groupPanel").slideDown("slow");
                }
                else {
                    this.$scope.cciSelected = true;
                    this.getExamRoutineCCIInfo().then(function (examRoutineArr) {
                        _this.$scope.examRoutineCCIArr = [];
                        var weekday = {};
                        weekday[0] = "Sunday";
                        weekday[1] = "Monday";
                        weekday[2] = "Tuesday";
                        weekday[3] = "Wednesday";
                        weekday[4] = "Thursday";
                        weekday[5] = "Friday";
                        weekday[6] = "Saturday";
                        var d = new Date();
                        for (var i = 0; i < examRoutineArr.length; i++) {
                            var examRoutine = {};
                            examRoutine.examDate = examRoutineArr[i].examDate;
                            var d = new Date(examRoutineArr[i].examDate);
                            examRoutine.weekDay = weekday[new Date(examRoutineArr[i].examDate).getDay()];
                            examRoutine.totalStudent = examRoutineArr[i].totalStudent;
                            _this.$scope.examRoutineCCIArr.push(examRoutine);
                        }
                        _this.$scope.cciSelected = true;
                        _this.$scope.loadingVisibility = false;
                    });
                }
            }
        };
        ExamSeatPlan.prototype.getSelectedGroupList = function (group) {
            this.$scope.selectedGroupList = this.$scope.tempGroupListAll;
        };
        ExamSeatPlan.prototype.cancelSplitAction = function (splitId) {
            for (var i = 0; i < this.$scope.tempGroupList.length; i++) {
                if (this.$scope.tempGroupList[i].id == splitId) {
                    this.$scope.tempGroupList[i].showSubPortion = false;
                    break;
                }
            }
            //this.$scope.$apply();
            if (!this.$scope.$$phase) {
                this.$scope.$apply();
            }
        };
        ExamSeatPlan.prototype.findIdMatch = function (id) {
            var noMatch = true;
            for (var x = 0; x < this.$scope.tempGroupListAll.length; x++) {
                if (this.$scope.tempGroupListAll[x].id == id) {
                    noMatch = false;
                }
            }
            return noMatch;
        };
        ExamSeatPlan.prototype.splitCourseStudent = function (menuNumber) {
            //var currentScope = this;
            if (menuNumber == 1) {
                if (this.$scope.subGroupFound) {
                    for (var i = 0; i < this.$scope.tempGroupListAll.length; i++) {
                        if (this.$scope.tempGroupListAll[i].id == this.$scope.splitId) {
                            this.$scope.tempGroupListAll[i].showSubPortion = true;
                            break;
                        }
                    }
                }
                else {
                    for (var i = 0; i < this.$scope.tempGroupList.length; i++) {
                        if (this.$scope.tempGroupList[i].id == this.$scope.splitId) {
                            this.$scope.tempGroupList[i].showSubPortion = true;
                            break;
                        }
                    }
                }
            }
            else {
            }
            if (!this.$scope.$$phase) {
                this.$scope.$apply();
            }
        };
        ExamSeatPlan.prototype.getGroupInfoFromSelectedSubGroup = function (groupId, studentNumber) {
            var member;
            for (var j = 0; j < this.$scope.tempGroupListAll.length; j++) {
                if (this.$scope.tempGroupListAll[j].id == groupId) {
                    if (this.$scope.tempSubGropStudentList == null) {
                        this.$scope.tempSubGropStudentList = [];
                        this.$scope.tempGroupListAll[j].studentNumber = studentNumber;
                        this.$scope.tempGroupListAll[j].showSubPortion = false;
                        this.$scope.tempGroupListAll[j].splitOccuranceNumber = 0;
                        this.$scope.tempSubGropStudentList.push(this.$scope.tempGroupListAll[j]);
                        member = this.$scope.tempGroupListAll[j];
                    }
                    else {
                        var foundInTheTempStore = false;
                        for (var m = 0; m < this.$scope.tempSubGropStudentList.length; m++) {
                            if (this.$scope.tempSubGropStudentList[m].id == groupId) {
                                foundInTheTempStore = true;
                                this.$scope.tempSubGropStudentList[m].splitOccuranceNumber += 1;
                                var idStr = groupId.toString();
                                idStr = idStr + this.$scope.tempSubGropStudentList[m].splitOccuranceNumber;
                                var idInt = +idStr;
                                var newMember = {};
                                newMember.id = idInt;
                                newMember.baseId = groupId;
                                newMember.groupNo = this.$scope.tempGroupListAll[j].groupNo;
                                newMember.lastUpdated = this.$scope.tempGroupListAll[j].lastUpdated;
                                newMember.programId = this.$scope.tempGroupListAll[j].programId;
                                newMember.programName = this.$scope.tempGroupListAll[j].programName;
                                newMember.semester = this.$scope.tempGroupListAll[j].semester;
                                newMember.year = this.$scope.tempGroupListAll[j].year;
                                newMember.semesterId = this.$scope.tempGroupListAll[j].semesterId;
                                newMember.showSubPortion = false;
                                newMember.splitOccuranceNumber = 0;
                                newMember.studentNumber = studentNumber;
                                this.$scope.tempGroupListAll.push(newMember);
                                member = newMember;
                                break;
                            }
                        }
                        if (foundInTheTempStore == false) {
                            this.$scope.tempGroupListAll[j].studentNumber = studentNumber;
                            this.$scope.tempGroupListAll[j].showSubPortion = false;
                            this.$scope.tempGroupListAll[j].splitOccuranceNumber = 0;
                            this.$scope.tempSubGropStudentList.push(this.$scope.tempGroupListAll[j]);
                            member = this.$scope.tempGroupListAll[j];
                        }
                    }
                    break;
                }
            }
            return member;
        };
        ExamSeatPlan.prototype.viewGroups = function () {
            this.getGroups();
        };
        ExamSeatPlan.prototype.createOrViewSubgroups = function (group) {
            var _this = this;
            this.$scope.iterationNumbers = [];
            if (group == 4) {
                console.log("IN cci group section");
                this.$scope.groupNoForSeatPlanViewing = group;
                this.$scope.tempIdList = [];
                this.$scope.subGroupWithDeptMap = {};
                this.$scope.splittedGroupList = [];
                this.$scope.tempGroupListAll = angular.copy(this.$scope.tempGroupList);
            }
            else {
                console.log("IN group section");
                //************************************************************
                this.$scope.groupNoForSeatPlanViewing = group;
                this.$scope.tempIdList = [];
                this.$scope.subGroupWithDeptMap = {};
                this.$scope.tempGroupList = [];
                this.$scope.splittedGroupList = [];
                var temporaryList = [];
                for (var l = 0; l < this.$scope.groupList.length; l++) {
                    if (this.$scope.groupList[l].groupNumber == group) {
                        for (var i = 0; i < this.$scope.groupList[l].groupMembers.length; i++) {
                            this.$scope.groupList[l].groupMembers[i].baseId = this.$scope.groupList[l].groupMembers[i].id;
                            this.$scope.groupList[l].groupMembers[i].backgroundColor = "#EA8A8A";
                            temporaryList.push(this.$scope.groupList[l].groupMembers[i]);
                            if (i == 0) {
                                var id = this.$scope.groupList[l].groupMembers[i].id;
                                var idStr = id.toString();
                                this.$scope.groupIdLength = idStr.length;
                            }
                            /*this.$scope.tempGroupListAll.push(this.$scope.groupList[l].groupMembers[i]);
                             this.$scope.tempGroupList.push(this.$scope.groupList[l].groupMembers[i])*/ ;
                        }
                        break;
                    }
                }
                this.$scope.tempGroupListAll = [];
                this.$scope.tempGroupList = angular.copy(temporaryList);
                this.$scope.tempGroupListAll = angular.copy(temporaryList);
                this.$scope.tempGroupListForSplitInversion = [];
                this.$scope.tempGroupListForSplitInversion = angular.copy(temporaryList);
                for (var i = 0; i < this.$scope.groupList.length; i++) {
                    if (this.$scope.groupList[i].groupNumber == group) {
                        this.$scope.selectedGroupTotalStudent = this.$scope.groupList[i].totalStudentNumber;
                        break;
                    }
                }
                this.$scope.splitActionOccured = false;
                /* this.$scope.tempGroupListAll=[];*/
                var whichMenuClicked;
                this.$scope.selectedGroupNo = group;
                this.getSelectedGroupList(group);
                // ******************************************************
            }
            this.$scope.subGroupList = [];
            this.getSubGroupInfo().then(function (subGroupArr) {
                _this.$scope.classBodyBackgroundColor = "#FDEEF4"; //Inactive Color
                if (subGroupArr.length > 0 && _this.$scope.recreateButtonClicked == false) {
                    _this.$scope.hideSelection = true;
                    _this.$scope.tempGroupList = [];
                    _this.$scope.subGroupWithDeptMap = [];
                    _this.$scope.iterationNumbers = [];
                    var subGroupWithDeptMap = [];
                    var subGroupNumber = 0;
                    for (var i = 0; i < subGroupArr.length; i++) {
                        if (subGroupArr[i].subGroupNumber == 0) {
                            _this.$scope.tempGroupList.push(subGroupArr[i]);
                        }
                        else {
                            if (subGroupWithDeptMap.length == 0) {
                                subGroupWithDeptMap.push(subGroupArr[i]);
                                subGroupNumber = subGroupArr[i].subGroupNumber;
                            }
                            else {
                                if (subGroupNumber == subGroupArr[i].subGroupNumber) {
                                    subGroupWithDeptMap.push(subGroupArr[i]);
                                    if (i == subGroupArr.length - 1) {
                                        _this.$scope.subGroupWithDeptMap[subGroupNumber] = subGroupWithDeptMap;
                                    }
                                }
                                else {
                                    _this.$scope.subGroupWithDeptMap[subGroupNumber] = subGroupWithDeptMap;
                                    subGroupNumber = subGroupArr[i].subGroupNumber;
                                    subGroupWithDeptMap = [];
                                    subGroupWithDeptMap.push(subGroupArr[i]);
                                    if (i == subGroupArr.length - 1) {
                                        _this.$scope.subGroupWithDeptMap[subGroupNumber] = subGroupWithDeptMap;
                                    }
                                }
                            }
                        }
                    }
                    for (var i = 1; i <= subGroupNumber; i++) {
                        _this.$scope.iterationNumbers.push(i);
                    }
                    _this.$scope.sortableOptionsIfSubGroupNotFound = {};
                    _this.$scope.sortableOptionsIfSubGroupNotFound.disabled = true;
                    _this.$scope.editSubGroup = true;
                    _this.$scope.deleteAndCreateNewSubGroup = true;
                    //this.$scope.sortableOptionsIfSubGroupNotFound.
                    _this.showStatistics();
                    _this.$scope.saveSubGroupInfo = false;
                }
                else {
                    _this.$scope.hideSelection = false;
                    _this.$scope.deleteAndCreateNewSubGroup = false;
                    _this.$scope.editSubGroup = false;
                    _this.$scope.classBodyBackgroundColor = "#FAEBD7";
                    _this.$scope.sortableOptionsIfSubGroupNotFound = {};
                    _this.$scope.sortableOptionsIfSubGroupNotFound.placeholder = "item";
                    _this.$scope.sortableOptionsIfSubGroupNotFound.connectWith = '.apps-container';
                    //this.$scope.sortableOptionsIfSubGroupNotFound.appendTo=this.$scope.tempGroupList;
                    _this.$scope.showContextMenu = true;
                    _this.$scope.colForSubgroup = 0;
                    _this.$scope.subGroupList = [];
                    if (_this.$scope.recreateButtonClicked == false) {
                        _this.$scope.subGroupFound = false;
                    }
                    _this.$scope.showSubGroupSelectionNumber = true;
                }
            });
            this.$scope.subGroupSelected = true;
            this.$scope.showGroupSelectionPanel = false;
            if (!this.$scope.$$phase) {
                this.$scope.$apply();
            }
        };
        /*  private mouseClickEvent():void{
      
      
            setTimeout(myFunction, 2000)
            $("#ifti_div").on("contextmenu", function (event) {
              event.preventDefault();
      
            });
            //console.log($( "#subGroupPanel" ).find( "li" ));
      
      
      
            function myFunction() {
              // Trigger action when the contexmenu is about to be shown
              $("#subGroupPanel li").on("contextmenu", function (event) {
      
                // Avoid the real one
                event.preventDefault();
      
                // Show contextmenu
                $(".custom-menu").finish().toggle(100).
      
                // In the right position (the mouse)
                css({
      
                  top: event.pageY - $("#topbar").height()+"px" ,
                  left: event.pageX - $("#sidebar").width()+"px"
                });
      
              });
      
      
      // If the document is clicked somewhere
              $("#subGroupPanel").bind("mousedown", function (e) {
                // If the clicked element is not the menu
                if (!($(e.target).parents(".custom-menu").length > 0)) {
                  // Hide it
                  $(".custom-menu").hide(100);
                }
              });
      
              /!*with the mouse down jquery function, we are getting the event only of right button,
               * that's why the case is 3.
               * with the line: $(this).attr('id') , we are getting the id when the right mouse button click event is triggered.*!/
              var classScope = this;
              $("#subGroupPanel li").mousedown(function(event){
                switch(event.which){
                  case 1:
                    var ids = $(this).attr('id');
                    var idNum = +ids;
                    currentScope.mergeInitialization(ids);
                    break;
                  case 3:
                    var id = $(this).attr('id');
      
                    currentScope.$scope.splitId = +id;
                    break;
                }
              });
      
            }
      
      
      
      
      
      
      
      
      
            /!*Current scope will be used in replace of 'this' of angularjs, to jquery, else, jquery will not recognize that.*!/
            var currentScope = this;
      // If the menu element is clicked
            $(".custom-menu li").click(function(){
      
              // This is the triggered action name
              switch($(this).attr("data-action")) {
      
                case "split": currentScope.$scope.splitButtonClicked=true;
                  currentScope.splitCourseStudent(1);
                  break;
                case "revertSplit":
                  currentScope.$scope.reverseSplitButtonClicked=true;
                  currentScope.revertSplitAction();
                  break;
                case "merge":
                  currentScope.mergeGroups();
                  break;
              }
              $(".custom-menu").hide(100);
            });
      
          }*/
        ExamSeatPlan.prototype.createNewSubGroup = function () {
            this.$scope.confirmation = true;
            /* this.$scope.recreateButtonClicked=true;
             this.$scope.editSubGroup=false;
             this.$scope.saveSubGroupInfo=true;
             if(this.$scope.cciSelected){
               this.createCCI(this.$scope.examDate);
             }else{
               this.createOrViewSubgroups(this.$scope.selectedGroupNo);
             }*/
        };
        ExamSeatPlan.prototype.deleteAndRecreate = function () {
            this.$scope.confirmation = false;
            if (this.$scope.cciSelected) {
                this.deleteExistingSubGroupCCI();
            }
            else {
                var groupNo = +this.$scope.selectedGroupNo;
                this.deleteExistingSubGroupInfo(groupNo);
            }
            this.$scope.recreateButtonClicked = true;
            this.$scope.editSubGroup = false;
            this.$scope.saveSubGroupInfo = true;
            this.$scope.subGroupTotalStudentNumber = {};
            this.$scope.selectedSubGroupNo = "";
            this.$scope.subGroupWithDeptMap = {};
            if (this.$scope.cciSelected) {
                this.createCCI(this.$scope.examDate);
            }
            else {
                this.createOrViewSubgroups(this.$scope.selectedGroupNo);
            }
        };
        ExamSeatPlan.prototype.cancelRecreation = function () {
            this.$scope.confirmation = false;
        };
        ExamSeatPlan.prototype.unbindJqueryFunctionality = function () {
            $("#subGroupPanel").unbind("mousedown");
            $("#subGroupPanel li").unbind("contextmenu");
            $("#ifti_div").unbind("contextmenu");
        };
        ExamSeatPlan.prototype.cancelEditedSubGroup = function () {
            this.$scope.editButtonClicked = false;
            this.$scope.cancelSubGroup = false;
            this.$scope.saveSubGroupInfo = false;
            this.$scope.deleteAndCreateNewSubGroup = true;
            this.createOrViewSubgroups(this.$scope.selectedGroupNo);
        };
        ExamSeatPlan.prototype.editSavedSubGroup = function () {
            this.$scope.sortableOptionsIfSubGroupNotFound = {};
            var currentScope = this;
            this.$scope.sortableOptionsIfSubGroupNotFound = {
                connectWith: '.apps-container',
                update: function () {
                    currentScope.showStatistics();
                },
                disabled: false
            };
            this.$scope.classBodyBackgroundColor = "#d9edf7"; //Active Color
            this.$scope.editSubGroup = false;
            this.$scope.saveSubGroupInfo = true;
        };
        ExamSeatPlan.prototype.saveSubGroup = function () {
            var _this = this;
            var groupNo = this.$scope.groupNoForSeatPlanViewing;
            var json;
            if (this.$scope.cciSelected) {
                json = this.convertToJsonForSubGroupCCI();
            }
            else {
                json = this.convertToJsonForSubGroup();
            }
            var emptySubgroupFound = false;
            for (var i = 1; i <= this.$scope.iterationNumbers.length; i++) {
                if (this.$scope.subGroupWithDeptMap[i].length == 0) {
                    emptySubgroupFound = true;
                    break;
                }
            }
            if (emptySubgroupFound) {
                this.$window.alert("Sub group must not be empty");
            }
            else {
                this.saveSubGroupIntoDb(json).then(function (message) {
                    _this.$scope.mouseClickedObjectStore = [];
                    $.notific8(message);
                    _this.$scope.editButtonClicked = false;
                    /*if(this.$scope.subGroupFound==false){
                     this.createOrViewSubgroups(this.$scope.selectedGroupNo);
          
                     }*/
                    _this.$scope.showContextMenu = false;
                    _this.$scope.editSubGroup = true;
                    _this.$scope.deleteAndCreateNewSubGroup = true;
                    _this.$scope.saveSubGroupInfo = false;
                    _this.$scope.cancelSubGroup = false;
                    _this.$scope.recreateButtonClicked = false;
                    _this.$scope.selectedSubGroupNo = null;
                    if (_this.$scope.cciSelected) {
                        _this.createOrViewSubgroups(4);
                    }
                    else {
                        _this.createOrViewSubgroups(_this.$scope.selectedGroupNo);
                    }
                });
            }
        };
        ExamSeatPlan.prototype.generateSubGroups = function (group) {
            if (group != "") {
                this.$scope.colForSubgroup = +group;
                this.$scope.saveSubGroupInfo = true;
                this.$scope.editSubGroup = false;
                this.$scope.deleteAndCreateNewSubGroup = false;
                this.$scope.cancelSubGroup = true;
                //$("#sortable").sortable("enable");
                if (this.$scope.recreateButtonClicked == false) {
                    /* this.createDroppable();*/
                }
                else {
                }
            }
        };
        ExamSeatPlan.prototype.getGroups = function () {
            var _this = this;
            this.$scope.loadingVisibility = true;
            this.$scope.showGroupOrNot = false;
            this.getSeatPlanGroupInfo().then(function (groupArr) {
                _this.$scope.showGroupOrNot = true;
                _this.$scope.loadingVisibility = false;
                _this.$scope.seatPlanGroupList = groupArr;
                _this.$scope.seatPlanGroupListLength = _this.$scope.seatPlanGroupList.length;
                for (var i = 0; i < groupArr.length; i++) {
                    groupArr[i].showSubPortion = false;
                    groupArr[i].splitOccuranceNumber = 0;
                    if (_this.$scope.groupList.length == 0) {
                        var group = {};
                        group.groupNumber = 0;
                        group.groupNumber += groupArr[i].groupNo;
                        group.groupMembers = [];
                        group.groupMembers.push(groupArr[i]);
                        group.totalStudentNumber = 0;
                        group.totalStudentNumber += groupArr[i].studentNumber;
                        group.showSubPortion = false;
                        _this.$scope.groupList.push(group);
                    }
                    else {
                        var groupFound;
                        groupFound = false;
                        for (var j = 0; j < _this.$scope.groupList.length; j++) {
                            if (_this.$scope.groupList[j].groupNumber == groupArr[i].groupNo) {
                                group.groupMembers.push(groupArr[i]);
                                group.totalStudentNumber += groupArr[i].studentNumber;
                                groupFound = true;
                                break;
                            }
                        }
                        if (groupFound == false) {
                            var group = {};
                            group.groupNumber = 0;
                            group.groupNumber += groupArr[i].groupNo;
                            group.groupMembers = [];
                            group.groupMembers.push(groupArr[i]);
                            group.totalStudentNumber = 0;
                            group.totalStudentNumber += groupArr[i].studentNumber;
                            group.showSubPortion = false;
                            _this.$scope.groupList.push(group);
                        }
                    }
                }
            });
        };
        ExamSeatPlan.prototype.getRoomList = function () {
            this.getRoomInfo();
            this.$scope.groupSelected = true;
            this.$scope.showGroupSelectionPanel = false;
        };
        ExamSeatPlan.prototype.closeSubGroupOrRoomInfoWindow = function () {
            this.$scope.showStatistics();
            this.$scope.showGroupSelectionPanel = true;
            this.$scope.subGroupSelected = false;
            this.$scope.subGroupWithDeptMap = {};
            this.$scope.selectedSubGroupNo = "";
            this.$scope.iterationNumbers = [];
            this.$scope.subGroupTotalStudentNumber = {};
            this.$scope.previousIterationNumber = 0;
            this.$scope.tempGroupList = [];
            this.$scope.splitButtonClickedStore = [];
        };
        ExamSeatPlan.prototype.createOrViewSeatPlan = function (groupNo) {
            this.getSeatPlanInfo(groupNo);
        };
        ExamSeatPlan.prototype.getSeatPlanGroupInfo = function () {
            var defer = this.$q.defer();
            var seatPlanGroupList;
            this.httpClient.get('/ums-webservice-academic/academic/seatPlanGroup/semester/' + this.$scope.semesterId + '/type/' + this.$scope.examType + '/update/' + this.$scope.update, 'application/json', function (json, etag) {
                seatPlanGroupList = json.entries;
                defer.resolve(seatPlanGroupList);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamSeatPlan.prototype.getRoomInfo = function () {
            var _this = this;
            this.httpClient.get("academic/classroom/all", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.$scope.roomList = response.rows;
            });
        };
        ExamSeatPlan.prototype.getSemesterInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/semester/program-type/11/limit/12/status/3', 'application/json', function (json, etag) {
                _this.$scope.semesterList = json.entries;
                defer.resolve(_this.$scope.semesterList);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamSeatPlan.prototype.getSubGroupInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            var subGroupDb = [];
            if (this.$scope.cciSelected) {
                this.httpClient.get('/ums-webservice-academic/academic/subGroupCCI/semester/' + this.$scope.semesterId + '/examDate/' + this.$scope.examDate, 'application/json', function (json, etag) {
                    _this.$scope.selectedGroupTotalStudent = 0;
                    subGroupDb = json.entries;
                    for (var i = 0; i < subGroupDb.length; i++) {
                        subGroupDb[i].backgroundColor = "#EA8A8A";
                        subGroupDb[i].showSubPortion = false;
                        _this.$scope.selectedGroupTotalStudent += subGroupDb[i].studentNumber;
                    }
                    defer.resolve(subGroupDb);
                }, function (response) {
                    console.error(response);
                });
            }
            else {
                this.httpClient.get('/ums-webservice-academic/academic/subGroup/get/semesterId/' + this.$scope.semesterId + '/groupNo/' + this.$scope.selectedGroupNo + '/type/' + this.$scope.examType, 'application/json', function (json, etag) {
                    subGroupDb = json.entries;
                    for (var i = 0; i < subGroupDb.length; i++) {
                        subGroupDb[i].backgroundColor = "#EA8A8A";
                        subGroupDb[i].showSubPortion = false;
                    }
                    defer.resolve(subGroupDb);
                }, function (response) {
                    console.error(response);
                });
            }
            return defer.promise;
        };
        ExamSeatPlan.prototype.getSeatPlanInfo = function (groupNo) {
            var _this = this;
            var defer = this.$q.defer();
            var subGroupDb;
            this.$scope.pdfGenerator = true;
            if (this.$scope.examDate == null) {
                this.$scope.examDate = "null";
            }
            this.httpClient.get('/ums-webservice-academic/academic/seatplan/semesterId/' + this.$scope.semesterId + '/groupNo/' + groupNo + '/type/' + this.$scope.examType + '/examDate/null', 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                _this.$window.open(fileURL);
                _this.$scope.pdfGenerator = false;
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ExamSeatPlan.prototype.getSeatPlanInfoCCi = function (examDate) {
            var _this = this;
            var defer = this.$q.defer();
            var subGroupDb;
            this.$scope.loadingVisibilityForCCI = true;
            var groupNo = 0;
            this.httpClient.get('/ums-webservice-academic/academic/seatplan/semesterId/' + this.$scope.semesterId + '/groupNo/' + groupNo + '/type/' + this.$scope.examType + '/examDate/' + examDate, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                _this.$window.open(fileURL);
                _this.$scope.loadingVisibilityForCCI = false;
            }, function (response) {
                console.error(response);
                _this.$scope.loadingVisibilityForCCI = false;
            }, 'arraybuffer');
        };
        ExamSeatPlan.prototype.getExamRoutineCCIInfo = function () {
            var defer = this.$q.defer();
            var examRoutineArr = [];
            this.httpClient.get('/ums-webservice-academic/academic/examroutine/exam_routine_cci/semester/' + this.$scope.semesterId + '/examtype/' + this.$scope.examType, 'application/json', function (json, etag) {
                examRoutineArr = json.entries;
                defer.resolve(examRoutineArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamSeatPlan.prototype.getApplicationCCIInfoForSubGroup = function (examDate) {
            var _this = this;
            this.$scope.examDate = examDate;
            var defer = this.$q.defer();
            //this.$scope.selectedGroupTotalStudent=0;
            this.$scope.tempGroupList = [];
            var applicationArr = [];
            this.httpClient.get('/ums-webservice-academic/academic/applicationCCI/semester/' + this.$scope.semesterId + '/examDate/' + examDate, 'application/json', function (json, etag) {
                applicationArr = json.entries;
                _this.$scope.subGroupSelected = true;
                _this.$scope.selectedGroupTotalStudent = 0;
                for (var i = 0; i < applicationArr.length; i++) {
                    applicationArr[i].showSubPortion = false;
                    applicationArr[i].id = i + 1;
                    applicationArr[i].backgroundColor = "#EA8A8A";
                    _this.$scope.selectedGroupTotalStudent = _this.$scope.selectedGroupTotalStudent + applicationArr[i].studentNumber;
                    _this.$scope.tempGroupList.push(applicationArr[i]);
                }
                console.log("sub group total student");
                console.log(_this.$scope.selectedGroupTotalStudent);
                _this.$scope.cciTotalStudent = angular.copy(_this.$scope.selectedGroupTotalStudent);
                defer.resolve(_this.$scope.tempGroupList);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamSeatPlan.prototype.postSubGroup = function (json) {
            this.httpClient.post('academic/subGroup/', json, 'application/json')
                .success(function () {
            }).error(function (data) {
            });
        };
        ExamSeatPlan.prototype.postSeatPlanInfo = function (json) {
            this.httpClient.post('academic/', json, 'application/json')
                .success(function () {
                console.log("success");
            }).error(function (data) {
                console.log("Insertion failure");
                console.log(data);
            });
        };
        ExamSeatPlan.prototype.saveSubGroupIntoDb = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log(json);
            if (this.$scope.cciSelected) {
                var semesterId = +this.$scope.semesterId;
                this.httpClient.put('academic/subGroupCCI/put/semester/' + this.$scope.semesterId + '/examDate/' + this.$scope.examDate, json, 'application/json')
                    .success(function () {
                    for (var i = 0; i < _this.$scope.examRoutineCCIArr.length; i++) {
                        if (_this.$scope.examRoutineCCIArr[i].examDate == _this.$scope.examDate) {
                            _this.$scope.examRoutineCCIArr[i].totalStudent = 5;
                            break;
                        }
                    }
                    defer.resolve("Sucessfully Saved Sub Group Information!");
                })
                    .error(function (data) {
                    console.log(data);
                });
            }
            else {
                this.httpClient.put('academic/subGroup/save/semester/' + this.$scope.semesterId + '/groupNo/' + this.$scope.selectedGroupNo + '/type/' + this.$scope.examType, json, 'application/json')
                    .success(function () {
                    defer.resolve("Sucessfully Saved Sub Group Information!");
                })
                    .error(function (data) {
                    console.log(data);
                });
            }
            return defer.promise;
        };
        ExamSeatPlan.prototype.deleteExistingSubGroupInfo = function (groupNo) {
            this.httpClient.doDelete('academic/subGroup/semesterId/' + this.$scope.semesterId + '/groupNo/' + groupNo)
                .success(function () {
                console.log("Successfully deleted");
            }).error(function (data) {
                console.log("Deletion failure");
                console.log(data);
            });
        };
        ExamSeatPlan.prototype.deleteExistingSubGroupCCI = function () {
            var _this = this;
            this.httpClient.doDelete('academic/subGroupCCI/semesterId/' + this.$scope.semesterId + '/examDate/' + this.$scope.examDate)
                .success(function () {
                for (var i = 0; i < _this.$scope.examRoutineCCIArr.length; i++) {
                    if (_this.$scope.examRoutineCCIArr[i].examDate == _this.$scope.examDate) {
                        _this.$scope.examRoutineCCIArr[i].totalStudent = 0;
                        break;
                    }
                }
            }).error(function (data) {
                console.log(data);
            });
        };
        ExamSeatPlan.prototype.convertToJsonForSubGroup = function () {
            var completeJson = {};
            var jsonObj = [];
            if (this.$scope.tempGroupList.length > 0) {
                for (var i = 0; i < this.$scope.tempGroupList.length; i++) {
                    var item = {};
                    item["subGroupNo"] = 0;
                    /* if(this.$scope.tempGroupList[i].id!=null){
                       item["groupId"]=this.$scope.tempGroupList[i].id;
           
                     }else{
           
                     }*/
                    item["groupId"] = this.$scope.tempGroupList[i].groupId;
                    item["position"] = 1;
                    item["studentNumber"] = this.$scope.tempGroupList[i].studentNumber;
                    jsonObj.push(item);
                }
            }
            if (this.$scope.iterationNumbers.length > 0) {
                for (var i = 1; i <= this.$scope.iterationNumbers.length; i++) {
                    for (var j = 0; j < this.$scope.subGroupWithDeptMap[i].length; j++) {
                        var item = {};
                        var item = {};
                        item["subGroupNo"] = i;
                        /* if(this.$scope.subGroupWithDeptMap[i][j].id!=null)
                         {
                           item["groupId"]=this.$scope.subGroupWithDeptMap[i][j].id;
             
                         }
                         else{
                         }*/
                        item["groupId"] = this.$scope.subGroupWithDeptMap[i][j].groupId;
                        item["position"] = 1;
                        item["studentNumber"] = this.$scope.subGroupWithDeptMap[i][j].studentNumber;
                        jsonObj.push(item);
                    }
                }
            }
            completeJson["semesterId"] = this.$scope.semesterId;
            completeJson["groupNo"] = this.$scope.selectedGroupNo;
            completeJson["examType"] = this.$scope.examType;
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        ExamSeatPlan.prototype.convertToJsonForSubGroupCCI = function () {
            var completeJson = {};
            var jsonObject = [];
            if (this.$scope.tempGroupList.length > 0) {
                for (var i = 0; i < this.$scope.tempGroupList.length; i++) {
                    var item = {};
                    item["semesterId"] = this.$scope.semesterId;
                    item["subGroupNo"] = 0;
                    item["totalStudent"] = this.$scope.tempGroupList[i].studentNumber;
                    item["courseId"] = this.$scope.tempGroupList[i].courseId;
                    item["examDate"] = this.$scope.examDate;
                    jsonObject.push(item);
                }
            }
            if (this.$scope.iterationNumbers.length > 0) {
                for (var i = 1; i <= this.$scope.iterationNumbers.length; i++) {
                    for (var j = 0; j < this.$scope.subGroupWithDeptMap[i].length; j++) {
                        var item = {};
                        item["semesterId"] = this.$scope.semesterId;
                        item["subGroupNo"] = i;
                        item["courseId"] = this.$scope.subGroupWithDeptMap[i][j].courseId;
                        item["examDate"] = this.$scope.examDate;
                        item["totalStudent"] = this.$scope.subGroupWithDeptMap[i][j].studentNumber;
                        jsonObject.push(item);
                    }
                }
            }
            completeJson["entries"] = jsonObject;
            return completeJson;
        };
        ExamSeatPlan.prototype.convertToJsonForViewingSeatPlan = function () {
            var item = {};
            item["semesterId"] = this.$scope.semesterId;
            item["groupNo"] = this.$scope.groupNoForSeatPlanViewing;
            item["type"] = this.$scope.examType;
            return item;
        };
        ExamSeatPlan.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$timeout', '$sce', '$window'];
        return ExamSeatPlan;
    }());
    ums.ExamSeatPlan = ExamSeatPlan;
    ums.UMS.controller("ExamSeatPlan", ExamSeatPlan);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExamSeatPlanRoomWiseReport = (function () {
        function ExamSeatPlanRoomWiseReport(appConstants, classRoomService, studentService, semesterService, seatPlanService, examRoutineService, notify) {
            this.appConstants = appConstants;
            this.classRoomService = classRoomService;
            this.studentService = studentService;
            this.semesterService = semesterService;
            this.seatPlanService = seatPlanService;
            this.examRoutineService = examRoutineService;
            this.notify = notify;
            this.examRoutines = [];
            this.examTypes = [];
            this.slots = [1, 2, 3];
            this.semesters = [];
            this.roomWiseTotalStudentCounts = [];
            this.reportTypes = [
                { id: 2, name: 'Room Wise' }
            ];
            this.slotTypes = [
                { id: 1, name: 'Slot 1' },
                { id: 2, name: 'Slot 2' },
                { id: 3, name: 'Slot 3' }
            ];
            this.initialize();
        }
        ExamSeatPlanRoomWiseReport.prototype.initialize = function () {
            var _this = this;
            this.selectedReportType = this.reportTypes[1];
            this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 10, ums.UmsUtil.SEMESTER_FETCH_ALL)
                .then(function (res) {
                _this.semesters = [];
                res.forEach(function (s) {
                    if (s.status === 1) {
                        _this.semesters.push(s);
                        _this.selectedSemester = s;
                    }
                });
            });
            this.examTypes = this.appConstants.examType;
        };
        ExamSeatPlanRoomWiseReport.prototype.examTypeChanged = function (examType) {
            this.examDates = {};
            if (this.selectedSemester && examType.id == ums.Utils.EXAM_TYPE_CCI) {
                this.getExamDates();
            }
            this.regularExamDates = null;
            this.selectedExamDate = null;
            this.selectedSlotType = null;
            this.roomWiseTotalStudentCounts = [];
        };
        ExamSeatPlanRoomWiseReport.prototype.examDateChanged = function (examDate) {
            this.roomWiseTotalStudentCounts = [];
        };
        ExamSeatPlanRoomWiseReport.prototype.slotTypeChanged = function (slotType) {
            if (this.selectedSemester) {
                this.fetchExamRoutine();
            }
            this.roomWiseTotalStudentCounts = [];
        };
        ExamSeatPlanRoomWiseReport.prototype.getExamDates = function () {
            var _this = this;
            this.examRoutineService.getExamRoutineDates(this.selectedSemester.id, this.selectedExamType.id).then(function (examDateArr) {
                _this.examDates = {};
                if (examDateArr.length > 0) {
                    _this.examDates = examDateArr;
                }
                else {
                    _this.notify.warn("No Exam Routine Found");
                }
            });
        };
        ExamSeatPlanRoomWiseReport.prototype.search = function () {
            var _this = this;
            console.log('In search method');
            ums.Utils.expandRightDiv();
            //this.fetchExamRoutine();
            if (this.selectedExamType.id === 1 && this.selectedReportType.id === 2 && this.selectedSlotType) {
                this.seatPlanService.getRoomWiseStudentCount(this.selectedSemester.id, this.selectedExamType.id, this.selectedSlotType.id)
                    .then(function (res) {
                    _this.roomWiseTotalStudentCounts = [];
                    _this.roomWiseTotalStudentCounts = res;
                    console.log(_this.roomWiseTotalStudentCounts);
                });
            }
            else if (this.selectedExamType.id === 2 && this.selectedReportType.id === 2 && this.selectedExamDate) {
                this.seatPlanService.getRoomAndExamDateWiseStudentCount(this.selectedSemester.id, this.selectedExamType.id, this.selectedExamDate.examDate)
                    .then(function (res) {
                    _this.roomWiseTotalStudentCounts = [];
                    _this.roomWiseTotalStudentCounts = res;
                    console.log(_this.roomWiseTotalStudentCounts);
                });
            }
        };
        ExamSeatPlanRoomWiseReport.prototype.fetchExamRoutine = function () {
            var _this = this;
            console.log('In the fetch exam routine');
            if (this.selectedSemester && this.selectedExamType && this.selectedSlotType) {
                this.examRoutines = [];
                this.examRoutineService.getExamRoutine(this.selectedSemester.id, this.selectedExamType.id)
                    .then(function (res) {
                    _this.examRoutines = res;
                    _this.regularExamDates = _this.examRoutines.filter(function (f) { return f.examGroup == _this.selectedSlotType.id; }).map(function (f) { return f.examDate; })
                        .filter(function (x, i, a) { return a.indexOf(x) === i; }).join(", ").replace(/\//g, "-");
                });
            }
        };
        ExamSeatPlanRoomWiseReport.prototype.downloadRoomWiseExcelData = function (roomId, roomNo) {
            if (!this.selectedExamDate) {
                this.seatPlanService.getRoomWiseStudentReport(this.selectedSemester.id, this.selectedExamType.id, this.selectedSlotType.id, roomId + '', roomNo, this.selectedSemester.name, this.selectedExamType.name);
            }
            else {
                this.seatPlanService.getRoomAndExamDateWiseStudentReport(this.selectedSemester.id, this.selectedExamType.id, roomId + '', roomNo, this.selectedSemester.name, this.selectedExamType.name, this.selectedExamDate.examDate);
            }
        };
        ExamSeatPlanRoomWiseReport.$inject = ['appConstants', 'classRoomService', 'studentService', 'semesterService', 'seatPlanService', 'examRoutineService', 'notify'];
        return ExamSeatPlanRoomWiseReport;
    }());
    ums.ExamSeatPlanRoomWiseReport = ExamSeatPlanRoomWiseReport;
    ums.UMS.controller("ExamSeatPlanRoomWiseReport", ExamSeatPlanRoomWiseReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExamStudents = (function () {
        function ExamStudents(appConstants, classRoomService, studentService, semesterService, seatPlanService, examRoutineService, notify, ugRegistrationResultService, userService) {
            this.appConstants = appConstants;
            this.classRoomService = classRoomService;
            this.studentService = studentService;
            this.semesterService = semesterService;
            this.seatPlanService = seatPlanService;
            this.examRoutineService = examRoutineService;
            this.notify = notify;
            this.ugRegistrationResultService = ugRegistrationResultService;
            this.userService = userService;
            this.showLoader = false;
            this.examRoutines = [];
            this.examTypes = [];
            this.slots = [1, 2, 3];
            this.semesters = [];
            this.roomWiseTotalStudentCounts = [];
            this.reportTypes = [
                { id: 2, name: 'Room Wise' }
            ];
            this.slotTypes = [
                { id: 1, name: 'Slot 1' },
                { id: 2, name: 'Slot 2' },
                { id: 3, name: 'Slot 3' }
            ];
            this.programsAndDepartments = [
                { id: 110100, name: 'ARCH', deptId: '01' },
                { id: 110200, name: 'SOB', deptId: '02' },
                { id: 110300, name: 'CE', deptId: '03' },
                { id: 110400, name: 'CSE', deptId: '04' },
                { id: 110500, name: 'EEE', deptId: '05' },
                { id: 110600, name: 'TE', deptId: '06' },
                { id: 110707, name: 'IPE', deptId: '07' },
                { id: 110708, name: 'ME', deptId: '07' },
                { id: 15, name: 'AS', deptId: '15' }
            ];
            this.filteredProgramsAndDepartments = [];
            this.initialize();
        }
        ExamStudents.prototype.initialize = function () {
            var _this = this;
            this.selectedReportType = this.reportTypes[1];
            this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 10, ums.UmsUtil.SEMESTER_FETCH_ALL)
                .then(function (res) {
                _this.semesters = res;
            });
            this.examTypes = this.appConstants.examType;
            this.userService.fetchCurrentUserInfo().then(function (res) {
                _this.loggedInUser = res;
                console.log(_this.loggedInUser);
                _this.filteredProgramsAndDepartments = [];
                /*if(this.loggedInUser.id==='sadmin'){
                    this.filteredProgramsAndDepartments = this.programsAndDepartments;
                }else{
                    this.programsAndDepartments.forEach(p=>{
                        if(p.deptId===this.loggedInUser.departmentId)
                            this.filteredProgramsAndDepartments.push(p);
                    })
                }*/
                _this.filteredProgramsAndDepartments = _this.programsAndDepartments;
            });
            this.showExamDate = false;
        };
        ExamStudents.prototype.semesterChanged = function (semester) {
            this.selectedExamType = null;
            this.showExamDate = false;
            this.examDates = {};
            this.selectedExamDate = null;
        };
        ExamStudents.prototype.examTypeChanged = function (examType) {
            this.examDates = {};
            if (this.selectedSemester && examType.id == ums.Utils.EXAM_TYPE_CCI) {
                this.getExamDates();
                this.showExamDate = true;
            }
            else {
                this.showExamDate = false;
            }
            this.selectedExamDate = null;
        };
        ExamStudents.prototype.search = function () {
            var _this = this;
            console.log('In search method');
            ums.Utils.expandRightDiv();
            if (this.selectedExamType.id === 1 && this.selectedReportType.id === 2) {
                this.seatPlanService.getRoomWiseStudentCount(this.selectedSemester.id, this.selectedExamType.id, this.selectedSlotType.id)
                    .then(function (res) {
                    _this.roomWiseTotalStudentCounts = [];
                    _this.roomWiseTotalStudentCounts = res;
                    console.log(_this.roomWiseTotalStudentCounts);
                });
            }
        };
        ExamStudents.prototype.getExamDates = function () {
            var _this = this;
            this.examRoutineService.getExamRoutineDates(this.selectedSemester.id, this.selectedExamType.id).then(function (examDateArr) {
                _this.examDates = {};
                if (examDateArr.length > 0) {
                    _this.examDates = examDateArr;
                }
                else {
                    _this.notify.warn("No Exam Routine Found");
                }
            });
        };
        ExamStudents.prototype.fetchExamRoutine = function () {
            var _this = this;
            console.log('In the fetch exam routine');
            if (this.selectedSemester && this.selectedExamType) {
                this.examRoutines = [];
                this.examRoutineService.getExamRoutine(this.selectedSemester.id, this.selectedExamType.id)
                    .then(function (res) {
                    _this.examRoutines = res;
                });
            }
        };
        ExamStudents.prototype.showDownloadStudentsButton = function () {
            if (this.selectedSemester && this.selectedExamType && this.selectedProgram) {
                if (this.selectedExamType.id == ums.Utils.EXAM_TYPE_CCI && !this.selectedExamDate) {
                    return false;
                }
                else {
                    return true;
                }
            }
            return false;
        };
        ExamStudents.prototype.downloadData = function () {
            var _this = this;
            this.showLoader = true;
            if (this.selectedProgram.deptId === '15') {
                if (this.selectedExamDate) {
                    this.ugRegistrationResultService.getDepartmentAndExamDateWiseExamStudents(this.selectedSemester.id, this.selectedProgram.deptId, this.selectedExamType.id, this.selectedSemester.name, this.selectedExamType.name, this.selectedProgram.name, this.selectedExamDate.examDate)
                        .then(function (res) {
                        _this.showLoader = false;
                    });
                }
                else {
                    this.ugRegistrationResultService.getDepartmentWiseExamStudents(this.selectedSemester.id, this.selectedProgram.deptId, this.selectedExamType.id, this.selectedSemester.name, this.selectedExamType.name, this.selectedProgram.name)
                        .then(function (res) {
                        _this.showLoader = false;
                    });
                }
            }
            else {
                if (this.selectedExamDate) {
                    this.ugRegistrationResultService.getProgramAndExamDateWiseExamStudents(this.selectedSemester.id, this.selectedProgram.id, this.selectedExamType.id, this.selectedSemester.name, this.selectedExamType.name, this.selectedProgram.name, this.selectedExamDate.examDate)
                        .then(function (res) {
                        _this.showLoader = false;
                    });
                }
                else {
                    this.ugRegistrationResultService.getProgramWiseExamStudents(this.selectedSemester.id, this.selectedProgram.id, this.selectedExamType.id, this.selectedSemester.name, this.selectedExamType.name, this.selectedProgram.name)
                        .then(function (res) {
                        _this.showLoader = false;
                    });
                }
            }
        };
        ExamStudents.$inject = ['appConstants', 'classRoomService', 'studentService', 'semesterService', 'seatPlanService', 'examRoutineService', 'notify', 'UgRegistrationResultService', 'userService'];
        return ExamStudents;
    }());
    ums.ExamStudents = ExamStudents;
    ums.UMS.controller("ExamStudents", ExamStudents);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PublishSeatPlan = (function () {
        function PublishSeatPlan(appConstants, httpClient, $scope, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            $scope.showTable = false;
            $scope.getActiveSemesters = this.getAcrtiveSemesters.bind(this);
            $scope.getSeatPlanPublish = this.getSeatPlanPublish.bind(this);
            $scope.postSeatPlanPublish = this.postSeatPlanPublish.bind(this);
            $scope.putSeatPlanPublish = this.putSeatPlanPublish.bind(this);
            $scope.jsonConverter = this.jsonConverter.bind(this);
            $scope.showPublishInfo = this.showPublishInfo.bind(this);
            $scope.saveData = this.saveData.bind(this);
        }
        PublishSeatPlan.prototype.showPublishInfo = function () {
            var _this = this;
            this.$scope.showTable = true;
            this.getSeatPlanPublish().then(function (seatPlanPublishArr) {
                if (seatPlanPublishArr.length == 0) {
                    _this.$scope.seatPlanPublishArr = [];
                    var seatPlanPublish = {};
                    seatPlanPublish.published = false;
                    seatPlanPublish.semesterId = _this.$scope.semesterId;
                    seatPlanPublish.examDate = '11/11/2999';
                    seatPlanPublish.examType = 1;
                    _this.$scope.seatPlanPublishArr.push(seatPlanPublish);
                    _this.getCivilExamRoutine().then(function (civilExamInfoArr) {
                        _this.$scope.seatPlanPublishArr.push(civilExamInfoArr);
                        _this.getCCIExamRoutine().then(function (cciArr) {
                            for (var i = 0; i < cciArr.length; i++) {
                                _this.$scope.seatPlanPublishArr.push(cciArr[i]);
                            }
                        });
                    });
                }
                else if (seatPlanPublishArr.length == 2) {
                    _this.getCCIExamRoutine().then(function (cciArr) {
                        for (var i = 0; i < cciArr.length; i++) {
                            _this.$scope.seatPlanPublishArr.push(cciArr[i]);
                        }
                    });
                }
                else {
                    _this.$scope.seatPlanPublishArr = [];
                    for (var i = 0; i < seatPlanPublishArr.length; i++) {
                        _this.$scope.seatPlanPublishArr.push(seatPlanPublishArr[i]);
                    }
                }
            });
        };
        PublishSeatPlan.prototype.saveData = function () {
            var _this = this;
            console.log("in the dave data");
            this.jsonConverter().then(function (json) {
                _this.putSeatPlanPublish(json);
            });
        };
        PublishSeatPlan.prototype.getAcrtiveSemesters = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.$scope.semesterList = [];
            this.httpClient.get('/ums-webservice-academic/academic/semester/all', 'application/json', function (json, etag) {
                _this.$scope.semesterList = json.entries;
                // console.log(this.$scope.semesterList);
                defer.resolve(_this.$scope.semesterList);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        PublishSeatPlan.prototype.getCivilExamRoutine = function () {
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/examroutine/forPublish/civil/semester/" + this.$scope.semesterId, 'application/json', function (json, etag) {
                var seatPlanPublishArr = json.entries;
                console.log("~~~~~~~~~~~~~");
                console.log(seatPlanPublishArr);
                seatPlanPublishArr[0].examType = 3;
                seatPlanPublishArr[0].published = false;
                console.log("###############");
                console.log(seatPlanPublishArr);
                defer.resolve(seatPlanPublishArr[0]);
            });
            return defer.promise;
        };
        PublishSeatPlan.prototype.getCCIExamRoutine = function () {
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/examroutine/forPublish/cci/semester/" + this.$scope.semesterId, 'application/json', function (json, etag) {
                var seatPlanPublishArr = json.entries;
                for (var i = 0; i < seatPlanPublishArr.length; i++) {
                    seatPlanPublishArr[i].published = false;
                    seatPlanPublishArr[i].examType = 2;
                }
                defer.resolve(seatPlanPublishArr);
            });
            return defer.promise;
        };
        PublishSeatPlan.prototype.getSeatPlanPublish = function () {
            var _this = this;
            console.log(this.$scope.semesterId);
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/seatPlanPublish/semester/" + this.$scope.semesterId, 'application/json', function (json, etag) {
                var seatPlanPubLish = json.entries;
                console.log("**********************");
                console.log(seatPlanPubLish);
                for (var i = 0; i < seatPlanPubLish.length; i++) {
                    if (seatPlanPubLish[i].published == "true") {
                        seatPlanPubLish[i].published = true;
                    }
                    else {
                        seatPlanPubLish[i].published = false;
                    }
                }
                defer.resolve(seatPlanPubLish);
            }, function (response) {
                _this.$window.alert("Error in getting publish data");
            });
            return defer.promise;
        };
        PublishSeatPlan.prototype.postSeatPlanPublish = function () {
            var _this = this;
            var json = this.jsonConverter();
            this.httpClient.post('/ums-webservice-academic/academic/seatPlanPublish/semester/' + this.$scope.semesterId, json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully saved data");
            })
                .error(function () {
                _this.$window.alert("Error in saving data");
            });
        };
        PublishSeatPlan.prototype.putSeatPlanPublish = function (json) {
            var _this = this;
            this.httpClient.put('/ums-webservice-academic/academic/seatPlanPublish/semester/' + this.$scope.semesterId, json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully saved data");
            })
                .error(function () {
                _this.$window.alert("Error in saving data");
            });
        };
        PublishSeatPlan.prototype.jsonConverter = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            for (var i = 0; i < this.$scope.seatPlanPublishArr.length; i++) {
                var item = {};
                if (this.$scope.seatPlanPublishArr[i].id != null) {
                    item["id"] = this.$scope.seatPlanPublishArr[i].id;
                }
                else {
                    item["id"] = 0;
                }
                item["semesterId"] = this.$scope.semesterId;
                item["examType"] = this.$scope.seatPlanPublishArr[i].examType;
                if (this.$scope.seatPlanPublishArr[i].examDate != null)
                    item["examDate"] = this.$scope.seatPlanPublishArr[i].examDate;
                if (this.$scope.seatPlanPublishArr[i].published == false) {
                    item["published"] = 0;
                }
                else {
                    item["published"] = 1;
                }
                jsonObject.push(item);
            }
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        PublishSeatPlan.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window'];
        return PublishSeatPlan;
    }());
    ums.UMS.controller("PublishSeatPlan", PublishSeatPlan);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ModifySeatPlan = (function () {
        function ModifySeatPlan(classRoomService, studentService, semesterService, seatPlanService, examRoutineService, notify, userService) {
            this.classRoomService = classRoomService;
            this.studentService = studentService;
            this.semesterService = semesterService;
            this.seatPlanService = seatPlanService;
            this.examRoutineService = examRoutineService;
            this.notify = notify;
            this.userService = userService;
            this.slots = [1, 2, 3];
            this.initialize();
        }
        ModifySeatPlan.prototype.initialize = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (res) {
                _this.loggedUser = res;
            });
            this.classRoomService.getClassRoomsForSeatPlan().then(function (rooms) {
                console.log("Rooms");
                console.log(rooms);
                _this.roomList = rooms;
                _this.roomMapWithId = {};
                rooms.forEach(function (room) { return _this.roomMapWithId[room.id] = room; });
            });
            this.semesterService.fetchSemesters(11).then(function (semesters) {
                _this.semester = semesters.filter(function (s) { return s.status == 1; })[0];
                console.log(_this.semester);
            });
            this.student = {};
            this.selectedExamRoutine = {};
        };
        ModifySeatPlan.prototype.search = function () {
            var _this = this;
            if (!this.modifiedSelectedExamRoutine.examDate) {
                this.modifiedSelectedExamRoutine.examDate = '01-01-2099';
            }
            this.seatPlanService.getSeatPlanByStudent(this.semester.id, +this.examType, this.modifiedSelectedExamRoutine.examDate, this.student.id).then(function (seatPlans) {
                _this.seatPlans = [];
                _this.seatPlans = seatPlans;
                if (_this.seatPlans.length == 0)
                    _this.notify.error("No seat plan record found for the student");
                else {
                    _this.selectedSlot = _this.seatPlans[0].groupNo; // it's ok as more than one entry may be found for CCI exam,but in CCI, all group no is 0.
                    _this.seatPlans.forEach(function (s) {
                        s.room = _this.roomMapWithId[s.roomId];
                    });
                }
            });
        };
        ModifySeatPlan.prototype.examTypeChanged = function () {
            var _this = this;
            if (+this.examType == 2) {
                this.selectedExamRoutine = {};
                this.examRoutineService.getExamRoutine(this.semester.id, +this.examType).then(function (examRoutineList) {
                    _this.examRoutineList = examRoutineList;
                }).then(function () {
                    _this.getUniqueExamRoutineList();
                });
            }
            else {
                this.modifiedSelectedExamRoutine = {};
                this.modifiedSelectedExamRoutine.examDate = "01-01-2099";
            }
        };
        ModifySeatPlan.prototype.getUniqueExamRoutineList = function () {
            var _this = this;
            this.distinctExamRoutineList = [];
            this.distinctExamRoutineList = this.examRoutineList.filter(function (val, index) {
                return _this.examRoutineList.map(function (mapObj) { return mapObj['examDate']; }).indexOf(val['examDate']) === index;
            });
        };
        ModifySeatPlan.prototype.update = function (seatPlan) {
            console.log('seat plan to be updated');
            console.log(seatPlan);
            seatPlan.roomId = +seatPlan.room.id;
            seatPlan.studentId = this.student.id;
            seatPlan.examType = +this.examType;
            this.seatPlanService.updateSeatPlan(seatPlan);
        };
        ModifySeatPlan.prototype.modifyDateFormat = function () {
            this.modifiedSelectedExamRoutine = {};
            this.modifiedSelectedExamRoutine.examDate = this.selectedExamRoutine.examDate.split("/").join("-");
        };
        ModifySeatPlan.$inject = ['classRoomService', 'studentService', 'semesterService', 'seatPlanService', 'examRoutineService', 'notify', 'userService'];
        return ModifySeatPlan;
    }());
    ums.ModifySeatPlan = ModifySeatPlan;
    ums.UMS.controller("ModifySeatPlan", ModifySeatPlan);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SeatPlanReports = (function () {
        function SeatPlanReports(appConstants, httpClient, $scope, $q, notify, $sce, $window, semesterService, examRoutineService, seatPlanService, classRoomService, courseService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.examRoutineService = examRoutineService;
            this.seatPlanService = seatPlanService;
            this.classRoomService = classRoomService;
            this.courseService = courseService;
            $scope.examDate = "";
            $scope.programTypeRequired = true;
            $scope.semesterIdRequired = true;
            $scope.examTypeRequired = true;
            $scope.isShowReportButtonClicked = false;
            $scope.showLoader = false;
            $scope.isShowAlertFired = false;
            $scope.showMultipleExamsInfoButton = false;
            $scope.getSemesterInfo = this.getSemesterInfo.bind(this);
            $scope.showReports = this.showReports.bind(this);
            $scope.closeAlertDialog = this.closeAlertDialog.bind(this);
            $scope.getProgramInfo = this.getProgramInfo.bind(this);
            $scope.programTypeChanged = this.programTypeChanged.bind(this);
            $scope.semesterChanged = this.semesterChanged.bind(this);
            $scope.examTypeChanged = this.examTypeChanged.bind(this);
            $scope.getAttendenceSheetReport = this.getAttendenceSheetReport.bind(this);
            $scope.getTopSheetReport = this.getTopSheetReport.bind(this);
            $scope.getStickerReport = this.getStickerReport.bind(this);
            $scope.roomChanged = this.roomChanged.bind(this);
            $scope.getSittingArrangement = this.getSittingArrangement.bind(this);
            $scope.getSittingArrangementByCourse = this.getSittingArrangementByCourse.bind(this);
            $scope.getStudentCCIMultipleExamsInfoReport = this.getStudentCCIMultipleExamsInfoReport.bind(this);
            $scope.getCourses = this.getCourses.bind(this);
            $scope.courseSelect = this.courseSelect.bind(this);
            $scope.courseNo = "";
            $scope.isCourseSelected = true;
            $scope.getMismatch = this.getMismatch.bind(this);
            $scope.validate = this.validate.bind(this);
        }
        SeatPlanReports.prototype.roomChanged = function (rooNo) {
            this.$scope.classRoom = this.$scope.roomIdRoomMap[rooNo];
            console.log(this.$scope.classRoom);
        };
        SeatPlanReports.prototype.getClassRooms = function () {
            var _this = this;
            console.log("In get class rooms");
            console.log(this.$scope.examType);
            console.log(this.$scope.semesterId);
            this.classRoomService.getClassRoomsBasedOnSeatPlan(+this.$scope.semesterId, +this.$scope.examType).then(function (rooms) {
                console.log("Rooms");
                console.log(rooms);
                _this.$scope.classRooms = [];
                _this.$scope.roomIdRoomMap = {};
                for (var i = 0; i < rooms.length; i++) {
                    _this.$scope.classRooms.push(rooms[i]);
                    _this.$scope.roomIdRoomMap[rooms[i].roomNo] = rooms[i];
                }
            });
        };
        SeatPlanReports.prototype.closeAlertDialog = function () {
            this.$scope.isShowAlertFired = false;
        };
        SeatPlanReports.prototype.programTypeChanged = function () {
            this.$scope.programTypeRequired = false;
            this.getExamRoutineInfo();
            if (this.$scope.semesterId != null && this.$scope.programType != null && this.$scope.programType != "") {
                this.getClassRooms();
            }
        };
        SeatPlanReports.prototype.semesterChanged = function () {
            this.$scope.semesterIdRequired = false;
            this.getExamRoutineInfo();
            if (this.$scope.semesterId != null && this.$scope.examType != null && this.$scope.examType != "") {
                this.getClassRooms();
            }
        };
        SeatPlanReports.prototype.examTypeChanged = function () {
            this.$scope.examTypeRequired = false;
            this.getExamRoutineInfo();
            if (this.$scope.semesterId != null && this.$scope.examType != null && this.$scope.examType != "") {
                this.getClassRooms();
            }
            if (this.$scope.examType == ExamType.CARRY_CLEARANCE_IMPROVEMENT) {
                this.$scope.showMultipleExamsInfoButton = true;
            }
            else {
                this.$scope.showMultipleExamsInfoButton = false;
            }
        };
        SeatPlanReports.prototype.showReports = function () {
            if (this.$scope.semesterId == null) {
                this.$scope.isShowAlertFired = true;
                this.$scope.alertMessage = "Please select a semester!";
            }
            else if (this.$scope.examType == null || this.$scope.examType == "") {
                this.$scope.isShowAlertFired = true;
                this.$scope.alertMessage = "Please choose the exam type!";
            }
            else {
                this.$scope.examTypeNumeric = +this.$scope.examType;
                this.$scope.isShowReportButtonClicked = true;
            }
        };
        SeatPlanReports.prototype.getSemesterInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.semesterService.fetchSemesters(ums.Utils.UG).then(function (semesterArr) {
                _this.$scope.semesterList = semesterArr;
                defer.resolve(_this.$scope.semesterList);
            });
            return defer.promise;
        };
        SeatPlanReports.prototype.getCourses = function (courseNo) {
            var _this = this;
            var examDate;
            if (this.$scope.examDate == "") {
                examDate = "NULL";
            }
            else {
                examDate = this.$scope.examDate;
            }
            this.$scope.courseNo = courseNo;
            if (this.$scope.courseNo.length > 1) {
                this.$scope.courseList = [];
                this.$scope.selectedCourse = null;
                this.courseService.getLikelyCoursesBySemester(this.$scope.semesterId, this.$scope.courseNo, this.$scope.programType, examDate).then(function (data) {
                    _this.$scope.courseList = data;
                });
            }
        };
        SeatPlanReports.prototype.courseSelect = function (selCourse) {
            if (selCourse) {
                this.$scope.selectedCourse = selCourse;
                this.$scope.selectedCourseId = selCourse.id;
                this.$scope.selectedCourseNo = selCourse.no;
                this.$scope.isCourseSelected = false;
            }
        };
        SeatPlanReports.prototype.getAttendenceSheetReport = function () {
            var _this = this;
            console.log("In the seat plan reports");
            console.log(this.$scope.examDate);
            var semesterId = this.$scope.semesterId;
            var programType = +this.$scope.programType;
            var examType = +this.$scope.examType;
            var examDate;
            if (this.$scope.examDate == "") {
                examDate = "NULL";
            }
            else {
                examDate = this.$scope.examDate;
            }
            /*this.seatPlanService.getSeatPlanAttendanceSheetReport(programType,semesterId,examType,examDate).then((arr:any)=>{
              this.$scope.showLoader=false;
            });*/
            if (ums.Utils.isNullOrUndefined(this.$scope.programType) || ums.UmsUtil.isEmptyString(this.$scope.programType)
                || ums.Utils.isNullOrUndefined(this.$scope.semesterId)
                || ums.Utils.isNullOrUndefined(this.$scope.examType) || ums.UmsUtil.isEmptyString(this.$scope.examType)) {
                this.notify.warn("Program Type / Semester / Exam Type must be selected!");
            }
            else {
                this.$scope.showLoader = true;
                this.httpClient.get("academic/seatplan/programType/" + programType + "/semesterId/" + semesterId + "/examType/" + examType + "/examDate/" + examDate, 'application/pdf', function (data, etag) {
                    var file = new Blob([data], { type: 'application/pdf' });
                    var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                    _this.$window.open(fileURL);
                    _this.$scope.showLoader = false;
                }, function (response) {
                    console.error(response);
                    _this.$scope.showLoader = false;
                }, 'arraybuffer');
            }
        };
        SeatPlanReports.prototype.getTopSheetReport = function () {
            var _this = this;
            console.log("In the seat plan reports");
            console.log(this.$scope.examDate);
            var semesterId = this.$scope.semesterId;
            var programType = +this.$scope.programType;
            var examType = +this.$scope.examType;
            var examDate;
            if (this.$scope.examDate == "") {
                examDate = "NULL";
            }
            else {
                examDate = this.$scope.examDate;
            }
            /*this.seatPlanService.getSeatPlanAttendanceSheetReport(programType,semesterId,examType,examDate).then((arr:any)=>{
             this.$scope.showLoader=false;
             });*/
            if (ums.Utils.isNullOrUndefined(this.$scope.programType) || ums.UmsUtil.isEmptyString(this.$scope.programType)
                || ums.Utils.isNullOrUndefined(this.$scope.semesterId)
                || ums.Utils.isNullOrUndefined(this.$scope.examType) || ums.UmsUtil.isEmptyString(this.$scope.examType)) {
                this.notify.warn("Program Type / Semester / Exam Type must be selected!");
            }
            else {
                this.$scope.showLoader = true;
                this.httpClient.get("academic/seatplan/topsheet/programType/" + programType + "/semesterId/" + semesterId + "/examType/" + examType + "/examDate/" + examDate, 'application/pdf', function (data, etag) {
                    var file = new Blob([data], { type: 'application/pdf' });
                    var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                    _this.$window.open(fileURL);
                    _this.$scope.showLoader = false;
                }, function (response) {
                    console.error(response);
                    _this.$scope.showLoader = false;
                }, 'arraybuffer');
            }
        };
        SeatPlanReports.prototype.getStickerReport = function () {
            var _this = this;
            console.log("In the seat plan reports");
            console.log(this.$scope.examDate);
            var semesterId = this.$scope.semesterId;
            var programType = +this.$scope.programType;
            var examType = +this.$scope.examType;
            var examDate;
            if (this.$scope.examDate == "") {
                examDate = "NULL";
            }
            else {
                examDate = this.$scope.examDate;
            }
            /*this.seatPlanService.getSeatPlanAttendanceSheetReport(programType,semesterId,examType,examDate).then((arr:any)=>{
             this.$scope.showLoader=false;
             });*/
            if (ums.Utils.isNullOrUndefined(this.$scope.programType) || ums.UmsUtil.isEmptyString(this.$scope.programType)
                || ums.Utils.isNullOrUndefined(this.$scope.semesterId)
                || ums.Utils.isNullOrUndefined(this.$scope.examType) || ums.UmsUtil.isEmptyString(this.$scope.examType)) {
                this.notify.warn("Program Type / Semester / Exam Type must be selected!");
            }
            else {
                this.$scope.showLoader = true;
                this.httpClient.get("academic/seatplan/sticker/programType/" + programType + "/semesterId/" + semesterId + "/examType/" + examType + "/examDate/" + examDate + "/roomId/" + this.$scope.classRoom.id, 'application/pdf', function (data, etag) {
                    var file = new Blob([data], { type: 'application/pdf' });
                    var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                    _this.$window.open(fileURL);
                    _this.$scope.showLoader = false;
                }, function (response) {
                    console.error(response);
                    _this.$scope.showLoader = false;
                }, 'arraybuffer');
            }
        };
        SeatPlanReports.prototype.getSittingArrangement = function () {
            var _this = this;
            $('#mismatchModal').modal('hide');
            this.$scope.showLoader = true;
            this.httpClient.get("academic/seatplan/sittingArrangement/semesterId/" + (+this.$scope.semesterId) + "/examType/" + (+this.$scope.examType), 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                _this.$window.open(fileURL);
                _this.$scope.showLoader = false;
            }, function (response) {
                console.error('Sitting arrangement cannot be fetched');
                _this.$scope.showLoader = false;
            }, 'arraybuffer');
        };
        SeatPlanReports.prototype.getSittingArrangementByCourse = function () {
            var _this = this;
            $('#mismatchModalByCourse').modal('hide');
            var examDate;
            if (this.$scope.examDate == "") {
                examDate = "NULL";
            }
            else {
                examDate = this.$scope.examDate;
            }
            this.$scope.showLoader = true;
            this.httpClient.get("academic/seatplan/sittingArrangement/semesterId/" + this.$scope.semesterId + "/examType/" + this.$scope.examType + "/courseId/" + this.$scope.selectedCourseId + "/courseNo/" + this.$scope.selectedCourseNo + "/examDate/" + examDate, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                _this.$window.open(fileURL);
                _this.$scope.showLoader = false;
            }, function (response) {
                console.error(response);
                _this.$scope.showLoader = false;
            }, 'arraybuffer');
        };
        SeatPlanReports.prototype.getStudentCCIMultipleExamsInfoReport = function () {
            var _this = this;
            var programType = +this.$scope.programType;
            var semesterId = this.$scope.semesterId;
            var examDate = this.$scope.examDate;
            if (ums.Utils.isNullOrUndefined(this.$scope.programType) || ums.UmsUtil.isEmptyString(this.$scope.programType)
                || ums.Utils.isNullOrUndefined(this.$scope.semesterId)
                || ums.Utils.isNullOrUndefined(this.$scope.examDate) || ums.UmsUtil.isEmptyString(this.$scope.examDate)) {
                this.notify.warn("Program Type / Semester / Exam Date must be selected!");
            }
            else {
                this.$scope.showLoader = true;
                this.httpClient.get("academic/seatplan/studentCCIMultipleExamsInfo/programType/" + programType + "/semesterId/" + semesterId + "/examDate/" + examDate, 'application/pdf', function (data, etag) {
                    var file = new Blob([data], { type: 'application/pdf' });
                    var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                    _this.$window.open(fileURL);
                    _this.$scope.showLoader = false;
                }, function (response) {
                    console.error(response);
                    _this.$scope.showLoader = false;
                }, 'arraybuffer');
            }
        };
        SeatPlanReports.prototype.validate = function (cId) {
            if (ums.Utils.isNullOrUndefined(this.$scope.programType) || ums.UmsUtil.isEmptyString(this.$scope.programType)
                || ums.Utils.isNullOrUndefined(this.$scope.semesterId)
                || ums.Utils.isNullOrUndefined(this.$scope.examType) || ums.UmsUtil.isEmptyString(this.$scope.examType)
                || ((ums.Utils.isNullOrUndefined(this.$scope.selectedCourseId) || ums.UmsUtil.isEmptyString(this.$scope.selectedCourseId)) && cId != "NULL")) {
                if (cId == "NULL") {
                    this.notify.warn("Program Type / Semester / Exam Type must be selected!");
                }
                else {
                    this.notify.warn("Program Type / Semester / Exam Type / Course must be selected!");
                }
            }
            else {
                this.getMismatch(cId);
            }
        };
        SeatPlanReports.prototype.getMismatch = function (cId) {
            var _this = this;
            var defer = this.$q.defer();
            var examType = +this.$scope.examType;
            this.getMismatchList(cId).then(function (mmList) {
                _this.$scope.mismatch = mmList;
                if (cId == 'NULL')
                    if (_this.$scope.mismatch.length > 0)
                        $('#mismatchModal').modal('show');
                    else
                        _this.$scope.getSittingArrangement();
                else if (_this.$scope.mismatch.length > 0)
                    $('#mismatchModalByCourse').modal('show');
                else
                    _this.$scope.getSittingArrangementByCourse();
            });
            defer.resolve(this.$scope.mismatch);
            return defer.promise;
        };
        SeatPlanReports.prototype.getMismatchList = function (cId) {
            var defer = this.$q.defer();
            var mmList = [];
            this.httpClient.get('academic/seatplan/sittingArrangement/misMatch/semesterId/' + this.$scope.semesterId + "/examType/" + this.$scope.examType + "/courseId/" + cId, 'application/json', function (json, etag) {
                mmList = json.entries;
                defer.resolve(mmList);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SeatPlanReports.prototype.getProgramInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('academic/program/all', 'application/json', function (json, etag) {
                _this.$scope.programsArr = json.entries;
                defer.resolve(_this.$scope.programsArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SeatPlanReports.prototype.getExamRoutineInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            var examRoiutineList = [];
            var examType = +this.$scope.examType;
            console.log("In the exam routine info");
            if (this.$scope.programType != null && this.$scope.semesterId != null && this.$scope.examType != null) {
                console.log("into the main section");
                this.examRoutineService.getExamRoutineDates(this.$scope.semesterId, examType).then(function (examRoutineArr) {
                    _this.$scope.examRoutineArr = examRoutineArr;
                    console.log(examRoutineArr);
                });
                defer.resolve(this.$scope.examRoutineArr);
            }
            return defer.promise;
        };
        SeatPlanReports.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'semesterService', 'examRoutineService', 'seatPlanService', 'classRoomService', 'courseService'];
        return SeatPlanReports;
    }());
    ums.UMS.controller("SeatPlanReports", SeatPlanReports);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SemesterConfig = (function () {
        function SemesterConfig() {
        }
        return SemesterConfig;
    }());
    ums.SemesterConfig = SemesterConfig;
    ums.UMS.controller("SemesterConfig", SemesterConfig);
})(ums || (ums = {}));
///<reference path="../../model/master_data/Course.ts"/>
///<reference path="../../../../../../ums-web-core/src/main/ts/service/HttpClient.ts"/>
var ums;
(function (ums) {
    var NewCourseUg = (function () {
        function NewCourseUg(appConstants, httpClient, $scope, $http) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$http = $http;
            $scope.data = {
                courseTypeOptions: appConstants.courseType,
                courseCategoryOptions: appConstants.courseCategory,
                academicYearOptions: appConstants.academicYear,
                academicSemesterOptions: appConstants.academicSemester,
                ugDeptOptions: appConstants.ugDept
            };
            //$scope.programType="11";
            $scope.programs = appConstants.initProgram;
            $scope.syllabusOptions = appConstants.initSyllabus;
            $scope.getPrograms = function (deptId) {
                if (deptId != "") {
                    var ugProgramsArr = appConstants.ugPrograms;
                    var ugProgramsJson = $.map(ugProgramsArr, function (el) { return el; });
                    var resultPrograms = $.grep(ugProgramsJson, function (e) { return e.deptId == $scope.course.offerToDeptId; });
                    $scope.programs = resultPrograms[0].programs;
                    $scope.course.programId = $scope.programs[0].id;
                }
                else {
                    $scope.programs = appConstants.initProgram;
                    $scope.course.programId = appConstants.Empty;
                }
            };
            //TODO: A common changeListener for resetting changes.
            $scope.$watch('course.programId', function () {
                $scope.syllabusOptions = appConstants.initSyllabus;
                /**--------Program Load----------------**/
                if ($scope.course.programId != "") {
                    httpClient.get('academic/syllabus/program-id/' + $scope.course.programId, 'application/json', function (json, etag) {
                        var entries = json.entries;
                        $scope.syllabusOptions = entries;
                        $scope.course.syllabusId = entries[0].id;
                    }, function (response) {
                        alert(response);
                    });
                }
            });
            $scope.submit = this.submit.bind(this);
            $scope.pdfDownloadTest = this.pdfDownloadTest.bind(this);
        }
        NewCourseUg.prototype.submit = function () {
            //this.$scope. course.syllabusId= this.$scope. syllabus.semesterId+"_"+this.$scope. syllabus.programId;
            this.httpClient.post('academic/course/', this.$scope.course, 'application/json')
                .success(function () {
            }).error(function (data) {
            });
        };
        NewCourseUg.prototype.pdfDownloadTest = function () {
            //this.$http.post('https://localhost/ums-webservice-academic/report/password', {
            this.$http.post('ums-webservice-academic/report/password', {}, { cache: false, responseType: 'arraybuffer' }).success(function (data, $scope) {
                var blob = new Blob([data], { type: 'application/pdf' });
                var fileURL = URL.createObjectURL(blob);
                console.log(fileURL);
                window.open(fileURL);
            })
                .error(function () {
                console.info("fail on download");
            });
        };
        NewCourseUg.$inject = ['appConstants', 'HttpClient', '$scope', '$http'];
        return NewCourseUg;
    }());
    ums.NewCourseUg = NewCourseUg;
    ums.UMS.controller('NewCourseUg', NewCourseUg);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var NewCoursePg = (function () {
        function NewCoursePg(appConstants, $scope, $http) {
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.$http = $http;
            $scope.data = {
                courseTypeOptions: appConstants.courseType,
                courseCategoryOptions: appConstants.courseCategory,
                academicYearOptions: appConstants.academicYear,
                academicSemesterOptions: appConstants.academicSemester,
                ugDeptOptions: appConstants.ugDept
            };
        }
        NewCoursePg.$inject = ['appConstants', '$scope', '$http'];
        return NewCoursePg;
    }());
    ums.NewCoursePg = NewCoursePg;
    ums.UMS.controller('NewCoursePg', NewCoursePg);
})(ums || (ums = {}));
///<reference path="../../../../../../ums-web-core/src/main/ts/model/Student.ts"/>
///<reference path="../../model/PasswordReset.ts"/>
///<reference path="../../model/ProgramSelectorModel.ts"/>
///<reference path="../../model/ProgramSelectorModel.ts"/>
var ums;
(function (ums) {
    var PasswordReport = (function () {
        function PasswordReport(appConstants, $scope, httpClient, $window, $sce) {
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.$window = $window;
            this.$sce = $sce;
            $scope.bulkUserPasswordModel = new ums.ProgramSelectorModel(this.appConstants, this.httpClient);
            $scope.submit = this.submit.bind(this);
            $scope.generateSinglePdf = this.generateSinglePdf.bind(this);
            $scope.generateBulkPdf = this.generateBulkPdf.bind(this);
            $scope.viewTypeSingle = true;
            $scope.toggle = this.toggle.bind(this);
        }
        PasswordReport.prototype.submit = function () {
            var _this = this;
            //TODO: Now it only checks for students, make it to work for all users
            delete this.$scope.passwordResetUser;
            delete this.$scope.passwordResetUserError;
            this.httpClient.get('academic/student/' + this.$scope.passwordReset.userId, 'application/json', function (data, etag) {
                var user = {
                    userId: data.id,
                    userName: data.fullName,
                    department: ''
                };
                if (data.department) {
                    //TODO: This conversion of http to https to be done in backend
                    var uri = data.department.replace("http", "https");
                    console.debug(uri);
                    _this.httpClient.get(uri, 'application/json', function (data, etag) {
                        user.department = data.longName;
                        _this.$scope.passwordResetUser = user;
                    });
                }
            }, function (response) {
                delete _this.$scope.passwordResetUser;
                _this.$scope.passwordResetUserError = 'User not found';
                console.error(response);
            });
        };
        PasswordReport.prototype.generateSinglePdf = function (user) {
            var _this = this;
            this.httpClient.get('credentialReport/single/' + user.userId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                _this.$window.open(fileURL);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        PasswordReport.prototype.generateBulkPdf = function () {
            var _this = this;
            this.httpClient.get('credentialReport/bulk/' + this.$scope.bulkUserPasswordModel.programId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var fileURL = _this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                _this.$window.open(fileURL);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        PasswordReport.prototype.toggle = function () {
            this.$scope.viewTypeSingle = !this.$scope.viewTypeSingle;
        };
        PasswordReport.$inject = ['appConstants', '$scope', 'HttpClient', '$window', '$sce'];
        return PasswordReport;
    }());
    ums.PasswordReport = PasswordReport;
    ums.UMS.controller("PasswordReport", PasswordReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AssignRole = (function () {
        function AssignRole(additionalRolePermissionsService, $scope, httpClient, semesterService, appConstants, commonService, roleService, notify, employeeService) {
            this.additionalRolePermissionsService = additionalRolePermissionsService;
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.semesterService = semesterService;
            this.appConstants = appConstants;
            this.commonService = commonService;
            this.roleService = roleService;
            this.notify = notify;
            this.employeeService = employeeService;
            this.selectedAdditionalRoleListData = [];
            this.showTable = false;
            this.searchBy = 0;
            this.selectedStatus = "1";
            this.getSemesters();
            this.getAdditionalRole();
            /* this.additionalRoleList=[];
             this.additionalRoleList = this.appConstants.additionalRoleListCons;*/
            /*this.commonService.fetchCurrentUser().then((departmentJson: any) => {
                this.depts = [departmentJson];

            });*/
            this.employeeId = "";
            this.employeeDesignation = "";
            this.deptList = [];
            this.deptList = this.appConstants.departmentOffice;
            this.selectedDepartmentId = "";
            this.itemPerPage = 10;
            this.currentPageNumber = 1;
        }
        AssignRole.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 40).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = semesters[i].id;
            }).then(function (data) {
            });
        };
        AssignRole.prototype.changeStatusFilter = function () {
            console.log(this.selectedStatus);
        };
        AssignRole.prototype.getAdditionalRole = function () {
            var _this = this;
            this.roleService.getAllAdditional().then(function (roles) {
                _this.additionalRoleList = roles;
                _this.additionalRoleList.forEach(function (value) {
                    value.name = value.name.replace(/_/g, " ");
                    value.name = value.name.replace(/\w\S*/g, function (txt) {
                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                    });
                });
            }).then(function (data) {
            });
        };
        AssignRole.prototype.search = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.roleService.getbyRoleId(this.additionalRole.id).then(function (additionalRole) {
                _this.selectedAdditionalRoleListData = additionalRole;
                _this.totalRecord = _this.selectedAdditionalRoleListData.length;
                console.log(_this.selectedAdditionalRoleListData);
                var count = 0;
                _this.selectedAdditionalRoleListData.forEach(function (value) {
                    value.editData = false;
                    value.srl = count++;
                    value.startTmp = value.start;
                    value.endTmp = value.end;
                    value.statusTmp = value.status.toString();
                });
            });
            this.showTable = true;
            this.isInsertAvailable = false;
            this.selectedStatus = "1";
        };
        AssignRole.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            console.log("Semester-id: " + this.selectedSemesterId);
        };
        AssignRole.prototype.changeAdditionalRole = function (value) {
            this.additionalRoleName = value.name;
            this.showTable = false;
            this.isInsertAvailable = false;
            console.log("additionalRoleName: " + this.additionalRoleName);
        };
        AssignRole.prototype.departmentChanged = function () {
            console.log("selected department: " + this.selectedDepartmentId);
        };
        AssignRole.prototype.editData = function (srl, editId) {
            this.selectedAdditionalRoleListData[srl].editData = true;
        };
        AssignRole.prototype.cancel = function (srl, parameterId) {
            this.selectedAdditionalRoleListData[srl].editData = false;
        };
        AssignRole.prototype.updateData = function (additionalData) {
            var _this = this;
            var isActiveMultiple = 0;
            /*for (var i = 0; i < this.selectedAdditionalRoleListData.length; i++) {
                if (this.selectedAdditionalRoleListData[i].userId == additionalData.userId) {
                    if (additionalData.statusTmp == 1 && this.selectedAdditionalRoleListData[i].status == 1) {
                        this.notify.error("Error while updating!! A user can not be 'ACTIVE' more than one at a time!!");
                        isActiveMultiple = 1;
                        break;
                    }
                }
            }*/
            if (isActiveMultiple == 0) {
                this.selectedAdditionalRoleListData[additionalData.srl].start = additionalData.startTmp;
                this.selectedAdditionalRoleListData[additionalData.srl].end = additionalData.endTmp;
                this.selectedAdditionalRoleListData[additionalData.srl].status = additionalData.statusTmp;
                var json = this.convertToJsonForUpdate(this.selectedAdditionalRoleListData[additionalData.srl].id, this.selectedAdditionalRoleListData[additionalData.srl].status, this.selectedAdditionalRoleListData[additionalData.srl].start, this.selectedAdditionalRoleListData[additionalData.srl].end);
                this.additionalRolePermissionsService.update(json, this.selectedAdditionalRoleListData[additionalData.srl].id).then(function (response) {
                    if (ums.Utils.SUCCESS == response) {
                        _this.notify.success("Updated Successfully");
                    }
                    else {
                        _this.notify.error("Error while updating");
                    }
                });
                this.selectedAdditionalRoleListData[additionalData.srl].editData = false;
            }
        };
        AssignRole.prototype.convertToJsonForUpdate = function (id, statuss, start, end) {
            var item = {};
            item["id"] = id;
            item["start"] = start;
            item["end"] = end;
            item["status"] = statuss;
            return item;
        };
        AssignRole.prototype.enableInsert = function () {
            this.isInsertAvailable = true;
            this.showTable = false;
        };
        AssignRole.prototype.hideInsert = function () {
            this.isInsertAvailable = false;
            this.showTable = true;
        };
        /*        public  initializeKeyUpDelay(){
                    let tmp=this;
                    function delay(callback, ms) {
                        var timer = 0;
                        return function() {
                            var context = this, args = arguments;
                            clearTimeout(timer);
                            timer = setTimeout(function () {
                                callback.apply(context, args);
                            }, ms || 0);
                        };
                    }

                    $('#input').keyup(delay(function (e) {
                        tmp.getEmployees(this.value);
                    }, 500));
                }*/
        /*      private deptChanged(deptId:any){
                  this.isDeptSelected=true;
                  try{
                      this.selectedDepartmentId=deptId.id;
                      this.departmentName=deptId.name;
                      this.getEmployees(this.employeeId);
                  }catch (e){
                      this.selectedDepartmentId="";
                  }
                  console.log("Dept: "+this.selectedDepartmentId);
              }*/
        AssignRole.prototype.getEmployees = function (employeeId) {
            var _this = this;
            this.employeeId = employeeId;
            if (this.employeeId.length > 1) {
                console.log('[#####]Requesting Id:' + this.employeeId);
                this.employeeList = [];
                this.selectedEmployeeName = null;
                if (this.employeeId.match("[0-9]+")) {
                    this.employeeService.getEmployeeByLikelySearch(this.employeeId).then(function (data) {
                        _this.employeeList = data;
                        console.log("number2");
                        _this.setInfo();
                    });
                }
                else {
                    this.fullName = "";
                    this.employeeService.getEmployeeByName(this.employeeId).then(function (data) {
                        _this.employeeList = data;
                        console.log(_this.employeeList);
                        _this.setInfo();
                    });
                }
            }
        };
        AssignRole.prototype.setInfo = function () {
            var _this = this;
            if (this.selectedDepartmentId != "") {
                this.employeeList = this.employeeList.filter(function (f) { return f.department.id === _this.selectedDepartmentId; });
            }
            if (this.employeeList.length > 0) {
                for (var i = 0; i < this.employeeList.length; i++) {
                    this.employeeList[i].employeeName = this.employeeList[i].employeeName + " (" + this.employeeList[i].department.shortName + ")" + " (" + this.employeeList[i].designation.name + ")";
                }
                /* this.selectedEmployeeName = this.employeeList[0];
                 this.selectedEmployeeId = this.selectedEmployeeName.id;
                 this.fullName = this.selectedEmployeeName.employeeName;
                 this.employeeDesignation = this.selectedEmployeeName.designation.name;
                 this.employmentType = this.selectedEmployeeName.employmentType.id;*/
            }
        };
        AssignRole.prototype.addData = function () {
            var _this = this;
            var isAlreadyAdded = 0;
            for (var i = 0; i < this.selectedAdditionalRoleListData.length; i++) {
                if (this.selectedAdditionalRoleListData[i].userId == this.selectedEmployeeName.id) {
                    this.notify.error("Error while inserting!! User already exist!!");
                    isAlreadyAdded = 1;
                    break;
                }
            }
            if (isAlreadyAdded == 0) {
                var json = this.convertToJson();
                this.additionalRolePermissionsService.create(json).then(function (response) {
                    if (ums.Utils.SUCCESS == response) {
                        _this.notify.success("Successfully Inserted!!");
                        _this.search();
                    }
                    else {
                        _this.notify.error("Error while inserting!!");
                    }
                });
            }
        };
        AssignRole.prototype.convertToJson = function () {
            var item = {};
            item["start"] = this.selectedStartDate;
            item["end"] = this.selectedEndDate;
            item["user"] = this.selectedEmployeeName.id;
            item["status"] = "1";
            item["roleId"] = this.additionalRole.id;
            return item;
        };
        AssignRole.prototype.delete = function (id) {
            var _this = this;
            console.log("hi");
            this.additionalRolePermissionsService.delete(id).then(function (response) {
                if (ums.Utils.SUCCESS == response) {
                    _this.notify.success("Successfully deleted!!");
                    _this.search();
                }
                else {
                    _this.notify.error("Error while deleting!!");
                }
            });
        };
        AssignRole.$inject = ['additionalRolePermissionsService', '$scope', 'HttpClient', 'semesterService', 'appConstants', 'commonService', 'RoleService', 'notify', 'employeeService'];
        return AssignRole;
    }());
    ums.AssignRole = AssignRole;
    ums.UMS.controller("AssignRole", AssignRole);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TeacherAssignment = (function () {
        function TeacherAssignment(appConstants, httpClient, $scope, $q, notify, teacherService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.teacherService = teacherService;
            $scope.teacherSearchParamModel = new ums.TeacherAssignmentSearchParamModel(this.appConstants, this.httpClient, true);
            $scope.teacherSearchParamModel.programSelector.setProgramType(this.appConstants.programTypeEnum.UG, ums.FieldViewTypes.selected);
            $scope.data = {
                courseCategoryOptions: appConstants.courseCategory,
                academicYearOptions: appConstants.academicYear,
                academicSemesterOptions: appConstants.academicSemester
            };
            $scope.loadingVisibility = false;
            $scope.contentVisibility = false;
            $scope.fetchTeacherInfo = this.fetchTeacherInfo.bind(this);
            $scope.addTeacher = this.addTeacher.bind(this);
            $scope.editTeacher = this.editTeacher.bind(this);
            $scope.removeTeacher = this.removeTeacher.bind(this);
            $scope.saveTeacher = this.saveTeacher.bind(this);
            $scope.saveTeachers = this.saveTeachers.bind(this);
            $scope.isEmpty = ums.UmsUtil.isEmpty;
            this.teachersList = {};
            this.formattedMap = {};
            $scope.showRightSide = false;
            $scope.showSaveButton = false;
            // this.fetchTeacherInfo();
        }
        TeacherAssignment.prototype.fetchTeacherInfo = function () {
            var _this = this;
            $("#leftDiv").hide(100);
            $("#arrowDiv").show(50);
            this.$scope.loadingVisibility = true;
            this.$scope.contentVisibility = false;
            delete this.$scope.entries;
            if (ums.UmsUtil.isEmptyString(this.$scope.teacherSearchParamModel.courseId)) {
                this.renderHeader();
                this.formattedMap = {};
            }
            var fetchUri = this.uriBuilder(this.$scope.teacherSearchParamModel);
            this.httpClient.get(fetchUri, this.appConstants.mimeTypeJson, function (data, etag) {
                if (!ums.UmsUtil.isEmptyString(_this.$scope.teacherSearchParamModel.courseId)) {
                    _this.formattedMap[_this.$scope.teacherSearchParamModel.courseId].updated = true;
                    _this.formattedMap[_this.$scope.teacherSearchParamModel.courseId].modified = false;
                    _this.formatTeacher(data.entries, _this.$scope.teacherSearchParamModel['courseId']);
                    delete _this.$scope.teacherSearchParamModel['courseId'];
                }
                else {
                    _this.formatTeacher(data.entries);
                }
                _this.$scope.showSaveButton = _this.saveButtonVisibility();
                _this.$scope.loadingVisibility = false;
                _this.$scope.contentVisibility = true;
            });
            this.$scope.showRightSide = true;
        };
        //override
        TeacherAssignment.prototype.formatTeacher = function (teachers, courseId) {
            throw new Error("Method not implemented");
        };
        TeacherAssignment.prototype.populateTeachers = function (courseId) {
            if (this.$scope.entries.hasOwnProperty(courseId)) {
                this.getTeachers(this.$scope.entries[courseId]);
            }
        };
        TeacherAssignment.prototype.getTeachers = function (assignedTeacher) {
            var _this = this;
            this.decorateTeacher(assignedTeacher);
            assignedTeacher.teachers = [];
            this.getTeacherByDepartment(assignedTeacher.courseOfferedByDepartmentId)
                .then(function (teachers) {
                assignedTeacher.teachers.push.apply(assignedTeacher.teachers, teachers);
                if (assignedTeacher.courseOfferedByDepartmentId != assignedTeacher.courseOfferedToDepartmentId) {
                    _this.getTeacherByDepartment(assignedTeacher.courseOfferedToDepartmentId)
                        .then(function (teachers) {
                        assignedTeacher.teachers.push.apply(assignedTeacher.teachers, teachers);
                    });
                }
            });
        };
        TeacherAssignment.prototype.getTeacherByDepartment = function (departmentId) {
            var _this = this;
            if (!this.teachersList[departmentId]) {
                return this.listTeachers(departmentId)
                    .then(function (teachers) {
                    _this.teachersList[departmentId] = teachers;
                    return teachers.entries;
                });
            }
            else {
                return this.$q.when(this.teachersList[departmentId].entries);
            }
        };
        TeacherAssignment.prototype.listTeachers = function (departmentId) {
            if (this.teachersList[departmentId]) {
                return this.$q.when(this.teachersList[departmentId]);
            }
            else {
                var defer = this.$q.defer();
                this.teacherService
                    .getByDepartment(departmentId)
                    .then(function (response) {
                    defer.resolve(response);
                });
                return defer.promise;
            }
        };
        TeacherAssignment.prototype.decorateTeacher = function (assignedTeacher) {
            throw new Error("Method not implemented");
        };
        TeacherAssignment.prototype.addTeacher = function (courseId) {
            throw new Error("Method not implemented");
        };
        TeacherAssignment.prototype.editTeacher = function (courseId) {
            throw new Error("Method not implemented");
        };
        TeacherAssignment.prototype.removeTeacher = function (courseId, teacherId) {
            throw new Error("Method not implemented");
        };
        TeacherAssignment.prototype.saveTeacher = function (courseId) {
            throw new Error('Method not implemented');
        };
        TeacherAssignment.prototype.saveTeachers = function () {
            throw new Error('Method not implemented');
        };
        TeacherAssignment.prototype.postTeacher = function (save) {
            return this.httpClient.post(this.getPostUri(), save, 'application/json');
        };
        TeacherAssignment.prototype.renderHeader = function () {
            for (var i = 0; i < this.$scope.teacherSearchParamModel.programSelector.getPrograms().length; i++) {
                if (this.$scope.teacherSearchParamModel.programSelector.getPrograms()[i].id == this.$scope.teacherSearchParamModel.programSelector.programId) {
                    this.$scope.programName = this.$scope.teacherSearchParamModel.programSelector.getPrograms()[i].shortName;
                }
            }
            for (var i = 0; i < this.$scope.teacherSearchParamModel.programSelector.getSemesters().length; i++) {
                if (this.$scope.teacherSearchParamModel.programSelector.getSemesters()[i].id == this.$scope.teacherSearchParamModel.programSelector.semesterId) {
                    this.$scope.semesterName = this.$scope.teacherSearchParamModel.programSelector.getSemesters()[i].name;
                }
            }
            for (var i = 0; i < this.$scope.teacherSearchParamModel.programSelector.getDepartments().length; i++) {
                if (this.$scope.teacherSearchParamModel.programSelector.getDepartments()[i].id == this.$scope.teacherSearchParamModel.programSelector.departmentId) {
                    this.$scope.departmentName = this.$scope.teacherSearchParamModel.programSelector.getDepartments()[i].name;
                }
            }
            for (var i = 0; i < this.$scope.data.academicYearOptions.length; i++) {
                if (this.$scope.data.academicYearOptions[i].id == this.$scope.teacherSearchParamModel.academicYearId) {
                    this.$scope.academicYear = this.$scope.data.academicYearOptions[i].name.indexOf('Select') == 0 ? "" : this.$scope.data.academicYearOptions[i].name;
                }
            }
            for (var i = 0; i < this.$scope.data.academicSemesterOptions.length; i++) {
                if (this.$scope.data.academicSemesterOptions[i].id == this.$scope.teacherSearchParamModel.academicSemesterId) {
                    this.$scope.academicSemester = this.$scope.data.academicSemesterOptions[i].name.indexOf('Select') == 0 ? "" : this.$scope.data.academicSemesterOptions[i].name;
                }
            }
            for (var i = 0; i < this.$scope.data.courseCategoryOptions.length; i++) {
                if (this.$scope.data.courseCategoryOptions[i].id == this.$scope.teacherSearchParamModel.courseCategoryId) {
                    this.$scope.courseCategory = this.$scope.data.courseCategoryOptions[i].name.indexOf('Select') == 0 ? "All" : this.$scope.data.courseCategoryOptions[i].name;
                }
            }
        };
        TeacherAssignment.prototype.validate = function (modifiedVal, saved) {
            throw new Error("Method not implemented");
        };
        TeacherAssignment.prototype.uriBuilder = function (param) {
            // var fetchUri: string = this.getBaseUri() + "/programId/" + '110500' + "/semesterId/" + '11012016' + '/year/1';
            var fetchUri = this.getBaseUri() + "/programId/" + param.programSelector.programId + "/semesterId/" + param.programSelector.semesterId;
            if (!ums.UmsUtil.isEmptyString(param.courseId)) {
                fetchUri = fetchUri + "/courseId/" + param.courseId;
                return fetchUri;
            }
            if (!ums.UmsUtil.isEmptyString(param.academicYearId)) {
                fetchUri = fetchUri + "/year/" + param.academicYearId;
            }
            if (!ums.UmsUtil.isEmptyString(param.academicSemesterId)) {
                fetchUri = fetchUri + "/semester/" + param.academicSemesterId;
            }
            if (!ums.UmsUtil.isEmptyString(param.courseCategoryId)) {
                fetchUri = fetchUri + "/category/" + param.courseCategoryId;
            }
            return fetchUri;
        };
        TeacherAssignment.prototype.getBaseUri = function () {
            return "";
        };
        TeacherAssignment.prototype.getPostUri = function () {
            return "";
        };
        TeacherAssignment.prototype.saveButtonVisibility = function () {
            for (var courseId in this.$scope.entries) {
                if (this.$scope.entries.hasOwnProperty(courseId) && this.$scope.entries[courseId].editMode) {
                    return true;
                }
            }
            return false;
        };
        return TeacherAssignment;
    }());
    ums.TeacherAssignment = TeacherAssignment;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CourseTeacher = (function (_super) {
        __extends(CourseTeacher, _super);
        function CourseTeacher(appConstants, httpClient, $scope, $q, notify, teacherService) {
            var _this = _super.call(this, appConstants, httpClient, $scope, $q, notify, teacherService) || this;
            _this.newTeacherId = 0;
            return _this;
        }
        CourseTeacher.prototype.formatTeacher = function (courseTeachers, courseId) {
            for (var i = 0; i < courseTeachers.length; i++) {
                if (!this.formattedMap[courseTeachers[i].courseId] || this.formattedMap[courseTeachers[i].courseId].updated) {
                    this.formattedMap[courseTeachers[i].courseId] = courseTeachers[i];
                    this.formattedMap[courseTeachers[i].courseId].selectedTeachers = {};
                    this.formattedMap[courseTeachers[i].courseId].editMode = false;
                    this.formattedMap[courseTeachers[i].courseId].updated = false;
                }
                if (courseTeachers[i].teacherId) {
                    var teacher = {
                        id: courseTeachers[i].teacherId,
                        name: courseTeachers[i].teacherName,
                        sections: [],
                        selectedSections: []
                    };
                    if (!this.formattedMap[courseTeachers[i].courseId].selectedTeachers[courseTeachers[i].teacherId]) {
                        this.formattedMap[courseTeachers[i].courseId].selectedTeachers[courseTeachers[i].teacherId] = teacher;
                    }
                    var section = {
                        id: courseTeachers[i].section,
                        name: courseTeachers[i].section,
                        uniqueId: courseTeachers[i].id
                    };
                    this.formattedMap[courseTeachers[i].courseId].selectedTeachers[courseTeachers[i].teacherId].selectedSections.push(section);
                    this.formattedMap[courseTeachers[i].courseId].selectedTeachers[courseTeachers[i].teacherId].sections.push(section.id);
                }
            }
            //save the fetched copy, later on it will be used to decided whats are values has been created/update/removed
            this.savedCopy = $.extend(true, {}, this.formattedMap);
            this.$scope.entries = this.formattedMap;
        };
        CourseTeacher.prototype.decorateTeacher = function (assignedTeacher) {
            var sectionArray = [];
            // CourseType = 1 for Theory Course.
            sectionArray.push.apply(sectionArray, (assignedTeacher.courseType == 1) ? this.appConstants.theorySections : this.appConstants.sessionalSections);
            assignedTeacher.sections = sectionArray;
        };
        CourseTeacher.prototype.addTeacher = function (courseId) {
            this.populateTeachers(courseId);
            this.$scope.entries[courseId].editMode = true;
            this.$scope.entries[courseId].modified = true;
            this.newTeacherId = this.newTeacherId - 1;
            this.formattedMap[courseId].selectedTeachers[this.newTeacherId] = {};
            this.formattedMap[courseId].selectedTeachers[this.newTeacherId].id = this.newTeacherId + "";
            this.$scope.showSaveButton = this.saveButtonVisibility();
        };
        CourseTeacher.prototype.editTeacher = function (courseId) {
            this.populateTeachers(courseId);
            this.$scope.entries[courseId].editMode = true;
            this.$scope.showSaveButton = this.saveButtonVisibility();
        };
        CourseTeacher.prototype.removeTeacher = function (courseId, teacherId) {
            if (this.formattedMap[courseId].selectedTeachers[teacherId]) {
                delete this.formattedMap[courseId].selectedTeachers[teacherId];
            }
            else {
                for (var teacher in this.formattedMap[courseId].selectedTeachers) {
                    if (this.formattedMap[courseId].selectedTeachers.hasOwnProperty(teacher)) {
                        if (this.formattedMap[courseId].selectedTeachers[teacher].id == teacherId) {
                            delete this.formattedMap[courseId].selectedTeachers[teacher];
                        }
                    }
                }
            }
            this.$scope.showSaveButton = this.saveButtonVisibility();
        };
        CourseTeacher.prototype.saveTeachers = function () {
            var _this = this;
            var savedCourseTeacher = {};
            savedCourseTeacher.entries = [];
            for (var courseId in this.formattedMap) {
                if (this.formattedMap.hasOwnProperty(courseId)) {
                    savedCourseTeacher = this.buildSaveList(courseId, savedCourseTeacher);
                    if (!savedCourseTeacher) {
                        return;
                    }
                }
            }
            if (savedCourseTeacher.entries.length > 0) {
                this.postTeacher(savedCourseTeacher)
                    .success(function () {
                    _this.fetchTeacherInfo();
                })
                    .error(function (error) {
                    console.error(error);
                });
            }
        };
        CourseTeacher.prototype.saveTeacher = function (courseId) {
            var _this = this;
            var saveList = this.buildSaveList(courseId);
            if (saveList) {
                this.postTeacher(saveList)
                    .success(function () {
                    _this.$scope.teacherSearchParamModel.courseId = courseId;
                    _this.fetchTeacherInfo();
                })
                    .error(function (error) {
                    console.error(error);
                });
            }
        };
        CourseTeacher.prototype.buildSaveList = function (courseId, pSavedCourseTeacher) {
            //initialize what needs to be posted
            var savedCourseTeacher;
            if (pSavedCourseTeacher) {
                savedCourseTeacher = pSavedCourseTeacher;
            }
            else {
                savedCourseTeacher = {};
                savedCourseTeacher.entries = [];
            }
            var saved = this.savedCopy[courseId];
            var modified = this.formattedMap[courseId];
            if (!this.validate(modified, saved)) {
                return;
            }
            for (var teacherId in saved.selectedTeachers) {
                if (saved.selectedTeachers.hasOwnProperty(teacherId)) {
                    if (!modified.selectedTeachers.hasOwnProperty(teacherId)) {
                        var selectedSections = saved.selectedTeachers[teacherId].selectedSections;
                        for (var i = 0; i < selectedSections.length; i++) {
                            savedCourseTeacher.entries.push({
                                id: selectedSections[i].uniqueId,
                                courseId: courseId,
                                semesterId: this.$scope.teacherSearchParamModel.programSelector.semesterId + '',
                                teacherId: teacherId,
                                updateType: 'delete'
                            });
                        }
                    }
                    else {
                        var modifiedTeacher = modified.selectedTeachers[teacherId];
                        var savedTeacher = saved.selectedTeachers[teacherId];
                        if (teacherId != modifiedTeacher.id) {
                            var selectedSections = saved.selectedTeachers[teacherId].selectedSections;
                            for (var i = 0; i < selectedSections.length; i++) {
                                savedCourseTeacher.entries.push({
                                    id: selectedSections[i].uniqueId,
                                    courseId: courseId,
                                    semesterId: this.$scope.teacherSearchParamModel.programSelector.semesterId + '',
                                    teacherId: teacherId,
                                    updateType: 'delete'
                                });
                            }
                        }
                        for (var i = 0; i < savedTeacher.selectedSections.length; i++) {
                            var sectionFound = false;
                            for (var j = 0; j < modifiedTeacher.sections.length; j++) {
                                if (savedTeacher.selectedSections[i].id == modifiedTeacher.sections[j]) {
                                    sectionFound = true;
                                }
                            }
                            if (!sectionFound) {
                                savedCourseTeacher.entries.push({
                                    id: savedTeacher.selectedSections[i].uniqueId,
                                    courseId: courseId,
                                    semesterId: this.$scope.teacherSearchParamModel.programSelector.semesterId + '',
                                    teacherId: teacherId,
                                    section: '',
                                    updateType: 'delete'
                                });
                            }
                        }
                    }
                }
            }
            for (var teacherId in modified.selectedTeachers) {
                if (modified.selectedTeachers.hasOwnProperty(teacherId)) {
                    if (!saved.selectedTeachers.hasOwnProperty(teacherId)) {
                        var modifiedSelectedSections = modified.selectedTeachers[teacherId].sections;
                        for (var i = 0; i < modifiedSelectedSections.length; i++) {
                            savedCourseTeacher.entries.push({
                                courseId: courseId,
                                semesterId: this.$scope.teacherSearchParamModel.programSelector.semesterId + '',
                                teacherId: modified.selectedTeachers[teacherId].id,
                                updateType: 'insert',
                                section: modifiedSelectedSections[i]
                            });
                        }
                    }
                    else {
                        var modifiedTeacher = modified.selectedTeachers[teacherId];
                        var savedTeacher = saved.selectedTeachers[teacherId];
                        if (teacherId != modifiedTeacher.id) {
                            var modifiedSelectedSections = modified.selectedTeachers[teacherId].sections;
                            for (var i = 0; i < modifiedSelectedSections.length; i++) {
                                savedCourseTeacher.entries.push({
                                    courseId: courseId,
                                    semesterId: this.$scope.teacherSearchParamModel.programSelector.semesterId + '',
                                    teacherId: modifiedTeacher.id,
                                    updateType: 'insert',
                                    section: modifiedSelectedSections[i]
                                });
                            }
                        }
                        for (var i = 0; i < modifiedTeacher.sections.length; i++) {
                            var sectionFound = false;
                            for (var j = 0; j < savedTeacher.selectedSections.length; j++) {
                                if (modifiedTeacher.sections[i] == savedTeacher.selectedSections[j].id) {
                                    sectionFound = true;
                                }
                            }
                            if (!sectionFound) {
                                savedCourseTeacher.entries.push({
                                    courseId: courseId,
                                    semesterId: this.$scope.teacherSearchParamModel.programSelector.semesterId + '',
                                    teacherId: teacherId,
                                    section: modifiedTeacher.sections[i],
                                    updateType: 'insert'
                                });
                            }
                        }
                    }
                }
            }
            return savedCourseTeacher;
        };
        CourseTeacher.prototype.validate = function (modifiedVal, saved) {
            if (modifiedVal.modified) {
                if (ums.UmsUtil.isEmpty(modifiedVal.selectedTeachers)) {
                    if (ums.UmsUtil.isEmpty(saved.selectedTeachers)) {
                        this.notify.warn("Please select teacher/s for " + saved.courseNo);
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                for (var key in modifiedVal.selectedTeachers) {
                    if (modifiedVal.selectedTeachers.hasOwnProperty(key)) {
                        if (parseInt(key) < 0 && modifiedVal.selectedTeachers[key].id == null) {
                            this.notify.warn("Please select teacher/s" + modifiedVal.courseNo);
                            return false;
                        }
                        else {
                            var selectedSections = modifiedVal.selectedTeachers[key].sections;
                            if (!selectedSections || selectedSections.length == 0) {
                                this.notify.warn("Please select section/s for " + modifiedVal.courseNo);
                                return false;
                            }
                        }
                    }
                }
            }
            return true;
        };
        CourseTeacher.prototype.getBaseUri = function () {
            return "academic/courseTeacher";
        };
        CourseTeacher.prototype.getPostUri = function () {
            return 'academic/courseTeacher/';
        };
        CourseTeacher.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', 'TeacherService'];
        return CourseTeacher;
    }(ums.TeacherAssignment));
    ums.CourseTeacher = CourseTeacher;
    ums.UMS.controller('CourseTeacher', CourseTeacher);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Examiner = (function (_super) {
        __extends(Examiner, _super);
        function Examiner(appConstants, httpClient, $scope, $q, notify, teacherService) {
            var _this = _super.call(this, appConstants, httpClient, $scope, $q, notify, teacherService) || this;
            ums.Utils.setValidationOptions("form-horizontal");
            return _this;
        }
        Examiner.prototype.formatTeacher = function (examiners, courseId) {
            for (var i = 0; i < examiners.length; i++) {
                if (!this.formattedMap[examiners[i].courseId] || this.formattedMap[examiners[i].courseId].updated) {
                    this.formattedMap[examiners[i].courseId] = examiners[i];
                    this.formattedMap[examiners[i].courseId].editMode = false;
                    this.formattedMap[examiners[i].courseId].updated = false;
                    this.formattedMap[examiners[i].courseId].deleted = false;
                    this.formattedMap[examiners[i].courseId].modified = false;
                    // console.debug('%o',this.formattedMap[examiners[i].courseId]);
                }
                //save the fetched copy, later on it will be used to decided whats are values has been created/update/removed
                this.savedCopy = $.extend(true, {}, this.formattedMap);
                this.$scope.entries = this.formattedMap;
            }
        };
        Examiner.prototype.decorateTeacher = function (assignedTeacher) {
            // do nothing
        };
        Examiner.prototype.addTeacher = function (courseId) {
            this.populateTeachers(courseId);
            this.formattedMap[courseId].editMode = true;
            this.$scope.showSaveButton = this.saveButtonVisibility();
        };
        Examiner.prototype.editTeacher = function (courseId) {
            this.populateTeachers(courseId);
            this.formattedMap[courseId].editMode = true;
            this.formattedMap[courseId].modified = true;
            this.$scope.showSaveButton = this.saveButtonVisibility();
        };
        Examiner.prototype.removeTeacher = function (courseId) {
            this.formattedMap[courseId]['preparerId'] = '-1';
            delete this.formattedMap[courseId]['preparerName'];
            this.formattedMap[courseId]['scrutinizerId'] = '-1';
            delete this.formattedMap[courseId]['scrutinizerName'];
            this.formattedMap[courseId].deleted = true;
            this.$scope.showSaveButton = this.saveButtonVisibility();
        };
        Examiner.prototype.saveTeachers = function () {
            var _this = this;
            var savedExaminer = {};
            savedExaminer.entries = [];
            for (var courseId in this.formattedMap) {
                if (this.formattedMap.hasOwnProperty(courseId)) {
                    savedExaminer = this.buildSaveList(courseId, savedExaminer);
                    if (!savedExaminer) {
                        return;
                    }
                }
            }
            if (savedExaminer.entries.length > 0) {
                this.postTeacher(savedExaminer)
                    .success(function () {
                    _this.fetchTeacherInfo();
                })
                    .error(function (error) {
                    console.error(error);
                });
            }
        };
        Examiner.prototype.saveTeacher = function (courseId) {
            var _this = this;
            //initialize what needs to be posted
            var saveExaminer = this.buildSaveList(courseId);
            if (saveExaminer) {
                this.postTeacher(saveExaminer)
                    .success(function () {
                    _this.$scope.teacherSearchParamModel.courseId = courseId;
                    _this.fetchTeacherInfo();
                })
                    .error(function (error) {
                    console.error(error);
                });
            }
        };
        Examiner.prototype.buildSaveList = function (courseId, pSavedExaminer) {
            var savedExaminer;
            if (!pSavedExaminer) {
                savedExaminer = {};
                savedExaminer.entries = [];
            }
            else {
                savedExaminer = pSavedExaminer;
            }
            var saved = this.savedCopy[courseId];
            var modified = this.formattedMap[courseId];
            if (!this.validate(modified, saved)) {
                return;
            }
            if (modified.modified) {
                if (saved.id) {
                    var updateType = 'update';
                    if (modified.preparerId == '-1' && modified.scrutinizerId == '-1') {
                        updateType = 'delete';
                    }
                    savedExaminer.entries.push({
                        id: saved.id,
                        courseId: courseId,
                        programId: this.$scope.teacherSearchParamModel.programSelector.programId,
                        semesterId: this.$scope.teacherSearchParamModel.programSelector.semesterId + '',
                        preparerId: modified.preparerId,
                        scrutinizerId: modified.scrutinizerId,
                        updateType: updateType
                    });
                }
                else {
                    savedExaminer.entries.push({
                        courseId: courseId,
                        programId: this.$scope.teacherSearchParamModel.programSelector.programId,
                        semesterId: this.$scope.teacherSearchParamModel.programSelector.semesterId + '',
                        preparerId: modified.preparerId,
                        scrutinizerId: modified.scrutinizerId,
                        updateType: 'insert'
                    });
                }
            }
            return savedExaminer;
        };
        Examiner.prototype.validate = function (modifiedVal, saved) {
            if (modifiedVal.modified) {
                if (ums.UmsUtil.isEmptyString(modifiedVal.preparerId)) {
                    this.notify.warn("Please select Gradesheet Preparer for " + modifiedVal.courseNo);
                    return false;
                }
                if (ums.UmsUtil.isEmptyString(modifiedVal.scrutinizerId)) {
                    this.notify.warn("Please select Gradesheet Scrutinizer for " + modifiedVal.courseNo);
                    return false;
                }
            }
            return true;
        };
        Examiner.prototype.getBaseUri = function () {
            return "academic/examiner";
        };
        Examiner.prototype.getPostUri = function () {
            return 'academic/examiner/';
        };
        Examiner.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', 'TeacherService'];
        return Examiner;
    }(ums.TeacherAssignment));
    ums.Examiner = Examiner;
    ums.UMS.controller('Examiner', Examiner);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TeachersRoutine = (function () {
        function TeachersRoutine($q, notify, $sce, $window, classRoutineService, employeeService, semesterService, routineConfigService) {
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.classRoutineService = classRoutineService;
            this.employeeService = employeeService;
            this.semesterService = semesterService;
            this.routineConfigService = routineConfigService;
            this.fetchRoutineInformation();
        }
        TeachersRoutine.prototype.fetchRoutineInformation = function () {
            var _this = this;
            this.classRoutineService.showSectionWiseRoutine = false;
            this.classRoutineService.showRoomWiseRoutine = false;
            this.classRoutineService.showTeacherWiseRoutine = true;
            this.fetchActiveSemester().then(function (semester) {
                _this.semester = semester;
                _this.fetchRoutineConfig().then(function (routineConfig) {
                    _this.fetchUserInformation().then(function (teacher) {
                        _this.classRoutineService.getRoutineForTeacher(_this.classRoutineService.selectedTeacher.id, _this.classRoutineService.selectedSemester.id).then(function (routineList) {
                            _this.classRoutineService.routineData = routineList;
                            _this.showLoader = false;
                        });
                    });
                });
            });
        };
        TeachersRoutine.prototype.fetchActiveSemester = function () {
            var _this = this;
            var defer = this.$q.defer();
            var ACTIVE_STATUS = 1;
            this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE).then(function (semesters) {
                semesters.forEach(function (s) {
                    if (s.status == ACTIVE_STATUS)
                        _this.classRoutineService.selectedSemester = s;
                });
                defer.resolve(_this.classRoutineService.selectedSemester);
            });
            return defer.promise;
        };
        TeachersRoutine.prototype.fetchRoutineConfig = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.routineConfigService.getBySemesterAndProgramType(this.classRoutineService.selectedSemester.id, ums.UmsUtil.UNDERGRADUATE).then(function (routineConfig) {
                if (routineConfig.id == null)
                    _this.notify.error("Routine configuration is not yet set for the semester, please contact with registrar office");
                _this.routineConfigService.routineConfig = routineConfig;
                defer.resolve(routineConfig);
            });
            return defer.promise;
        };
        TeachersRoutine.prototype.fetchUserInformation = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.showLoader = true;
            this.employeeService.getLoggedEmployeeInfo().then(function (employee) {
                _this.classRoutineService.selectedTeacher = {};
                _this.classRoutineService.selectedTeacher = employee;
                console.log(employee);
                console.log(_this.classRoutineService.selectedTeacher);
                defer.resolve(_this.classRoutineService.selectedTeacher);
            });
            return defer.promise;
        };
        TeachersRoutine.prototype.downloadRoutineReport = function () {
            this.classRoutineService.getTeacherWiseReport(this.classRoutineService.selectedTeacher.id, this.classRoutineService.selectedSemester.id);
        };
        TeachersRoutine.$inject = ['$q', 'notify', '$sce', '$window', 'classRoutineService', 'employeeService', 'semesterService', 'routineConfigService'];
        return TeachersRoutine;
    }());
    ums.UMS.controller("TeachersRoutine", TeachersRoutine);
})(ums || (ums = {}));
/**
 * Created by Munna on 26-Oct-16.
 */
var ums;
(function (ums) {
    var RoomBasedRoutine = (function () {
        function RoomBasedRoutine(appConstants, httpClient, $scope, $q, notify, $sce, $window, classRoutineService, classRoomService, employeeService, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.classRoutineService = classRoutineService;
            this.classRoomService = classRoomService;
            this.employeeService = employeeService;
            this.semesterService = semesterService;
            $scope.programTypes = [
                { id: '', name: 'Select program type' },
                { id: '11', name: 'Undergraduate' },
                { id: '22', name: 'Post-graduate' }
            ];
            $scope.showById = false;
            $scope.showAll = false;
            $scope.getActiveSemester = this.getActiveSemester.bind(this);
            $scope.resetDivs = this.resetDivs.bind(this);
            $scope.getRooms = this.getRooms.bind(this);
            $scope.fetchAll = this.fetchAll.bind(this);
            $scope.fetchOne = this.fetchOne.bind(this);
        }
        RoomBasedRoutine.prototype.getCurrentLoggedEmployeeInfo = function () {
            var _this = this;
            this.employeeService.getLoggedEmployeeInfo().then(function (employee) {
                _this.$scope.loggedEmployee = {};
                _this.$scope.loggedEmployee = employee;
            });
        };
        RoomBasedRoutine.prototype.getActiveSemester = function (programType) {
            var _this = this;
            this.semesterService.fetchSemesters(Number(programType)).then(function (semesters) {
                for (var i = 0; i < semesters.length; i++) {
                    _this.$scope.semester = {};
                    if (semesters[i].status == 1) {
                        _this.$scope.semester = semesters[i];
                        break;
                    }
                }
            });
        };
        RoomBasedRoutine.prototype.getRooms = function () {
            var _this = this;
            this.classRoomService.getClassRoomsBasedOnRoutine(this.$scope.semester.id).then(function (rooms) {
                _this.$scope.rooms = [];
                _this.$scope.rooms = rooms;
                console.log(rooms);
            });
            $("#arrowDiv").show();
            $("#leftDiv").hide();
            $("#rightDiv").addClass("newRightClass").addClass("orgRightClass");
        };
        RoomBasedRoutine.prototype.fetchOne = function () {
            var _this = this;
            this.$scope.showAll = false;
            this.$scope.showById = false;
            console.log('Room Id');
            console.log(this.$scope.roomId);
            this.$scope.pdfFileByRoomId;
            this.classRoutineService.getRoomBasedClassRoutineInnerHtmlFormat(this.$scope.semester.id, this.$scope.roomId).then(function (file) {
                if (file != "failure") {
                    _this.$scope.showAll = false;
                    _this.$scope.showById = true;
                    var pdfFile = file;
                    _this.$scope.pdfFileByRoomId = pdfFile;
                }
                else {
                    _this.notify.error("Error in generating routine report");
                }
            });
        };
        RoomBasedRoutine.prototype.fetchAll = function (roomId) {
            var _this = this;
            this.$scope.showAll = false;
            this.$scope.showById = false;
            console.log("In the fetch all");
            if (!roomId) {
                roomId = 9999;
            }
            this.$scope.pdfFile;
            this.classRoutineService.getRoomBasedClassRoutineInnerHtmlFormat(this.$scope.semester.id).then(function (file) {
                if (file != "failure") {
                    _this.$scope.showById = false;
                    _this.$scope.showAll = true;
                    var pdfFile = file;
                    _this.$scope.pdfFile = pdfFile;
                }
                else {
                    _this.notify.error("Error in generating routine report");
                }
            });
        };
        RoomBasedRoutine.prototype.resetDivs = function () {
            $("#arrowDiv").hide();
            $("#leftDiv").show();
            $("#rightDiv").removeClass("newRightClass").addClass("orgRightClass");
            //this.decoratedScope.grid.api.resize();
        };
        RoomBasedRoutine.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'classRoutineService', 'classRoomService', 'employeeService', 'semesterService'];
        return RoomBasedRoutine;
    }());
    ums.UMS.controller("RoomBasedRoutine", RoomBasedRoutine);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentsRoutine = (function () {
        function StudentsRoutine(appConstants, $q, notify, $sce, $window, classRoutineService, employeeService, semesterService, routineConfigService, studentService, userService, $timeout, deviceDetector) {
            this.appConstants = appConstants;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.classRoutineService = classRoutineService;
            this.employeeService = employeeService;
            this.semesterService = semesterService;
            this.routineConfigService = routineConfigService;
            this.studentService = studentService;
            this.userService = userService;
            this.$timeout = $timeout;
            this.deviceDetector = deviceDetector;
            this.fetchRoutineInformation();
            this.showMobileRoutine = false;
            this.dayList = this.appConstants.weekday;
            // this.dayList.splice(this.dayList.length,0);  //removing saturday
            // this.dayList.splice(0,1); //removing friday
            if (this.userService.isDesktop == undefined)
                this.userService.isDesktop = this.deviceDetector.isDesktop;
            //this.detectWindowSize();
            this.$timeout(function () {
                var today = new Date();
                var currentDate = today.getDay() + 2;
                // angular.element('#accordion').attr("data-target", "#"+currentDate);
                angular.element("#" + currentDate + "btn").click();
            }, 500);
        }
        StudentsRoutine.prototype.detectWindowSize = function () {
            var _this = this;
            angular.element(this.$window).on('resize', function () {
                console.log("Inner width");
                console.log(_this.$window.innerWidth);
                console.log("Inner height");
                console.log(_this.$window.innerHeight);
                if (Number(_this.$window.innerWidth) > 700) {
                    _this.showMobileRoutine = false;
                }
                else
                    _this.showMobileRoutine = true;
                console.log("Show mobile routine--->" + _this.showMobileRoutine);
            });
        };
        StudentsRoutine.prototype.fetchRoutineConfig = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.routineConfigService.getByStudent().then(function (routineConfig) {
                if (routineConfig.id == null)
                    _this.notify.error("Routine configuration is not yet set for the semester, please contact with registrar office");
                _this.routineConfigService.routineConfig = routineConfig;
                defer.resolve(routineConfig);
            });
            return defer.promise;
        };
        StudentsRoutine.prototype.downloadRoutineReport = function () {
            this.classRoutineService.getStudentRoutineReport();
        };
        StudentsRoutine.prototype.fetchRoutineInformation = function () {
            var _this = this;
            this.classRoutineService.showSectionWiseRoutine = false;
            this.classRoutineService.showRoomWiseRoutine = false;
            this.classRoutineService.showTeacherWiseRoutine = true;
            this.fetchActiveSemester().then(function (semester) {
                _this.semester = semester;
                _this.fetchRoutineConfig().then(function (routineConfig) {
                    _this.routineConfig = routineConfig;
                    _this.studentService.getStudentProfile().then(function (student) {
                        _this.student = student;
                        _this.classRoutineService.getClassRoutineForStudents().then(function (routineList) {
                            _this.classRoutineService.routineData = routineList;
                            _this.createRoutineMapWithDay(routineList);
                            _this.showLoader = false;
                        });
                    });
                });
            });
        };
        StudentsRoutine.prototype.createRoutineMapWithDay = function (routineList) {
            this.dayMapWithRoutine = {};
            for (var i = 0; i < routineList.length; i++) {
                if (this.dayMapWithRoutine[routineList[i].day] == null) {
                    var routines = [];
                    routines.push(routineList[i]);
                    this.dayMapWithRoutine[routineList[i].day + ''] = routines;
                }
                else {
                    var routines = this.dayMapWithRoutine[routineList[i].day];
                    routines.push(routineList[i]);
                    this.dayMapWithRoutine[routineList[i].day] = routines;
                }
            }
        };
        StudentsRoutine.prototype.getRoutine = function (day) {
            if (this.dayMapWithRoutine[day] != undefined)
                return this.dayMapWithRoutine[day] != undefined ? this.dayMapWithRoutine[day] : null;
            else
                return null;
        };
        StudentsRoutine.prototype.getCourseDetails = function (routine) {
            this.selectedRoutine = routine;
            if (routine.type == ums.RoutineType.DISTRIBUTED) {
                this.courseTeacher = this.getCourseTeacher(routine.courseId, routine.section);
            }
            else if (routine.type == ums.RoutineType.LOADED) {
                this.courseTeacher = this.getLoadedCourseTeacher(routine.courseId, routine.startTime, routine.endTime, routine.section, routine.day);
            }
        };
        StudentsRoutine.prototype.getCourseTeacher = function (courseId, section) {
            var courseTeacherStr = "";
            if (this.classRoutineService.courseTeacherMapWithCourseIdAndSection[courseId + section] == undefined)
                courseTeacherStr = courseTeacherStr + "TBA";
            else {
                var courseTeacherList = this.classRoutineService.courseTeacherMapWithCourseIdAndSection[courseId + section];
                var courseTeacherInitials_1 = [];
                courseTeacherList.forEach(function (c) {
                    courseTeacherInitials_1.push(c.shortName);
                });
                courseTeacherStr = courseTeacherStr + courseTeacherInitials_1.join(",");
            }
            courseTeacherStr = courseTeacherStr + "";
            return courseTeacherStr;
        };
        StudentsRoutine.prototype.getLoadedCourseTeacher = function (courseId, startTime, endTime, section, day) {
            var courseTeacherStr = "";
            if (this.classRoutineService.routineTeacherLoadMap[day + courseId + startTime + endTime + section] == undefined) {
                courseTeacherStr = courseTeacherStr + "TBA";
            }
            else {
                var courseTeacherList = this.classRoutineService.routineTeacherLoadMap[day + courseId + startTime + endTime + section];
                var courseTeacherInitials_2 = [];
                courseTeacherList.forEach(function (c) {
                    courseTeacherInitials_2.push(c.teacherInitial);
                });
                courseTeacherStr = courseTeacherStr + courseTeacherInitials_2.join(",");
            }
            courseTeacherStr = courseTeacherStr + "";
            return courseTeacherStr;
        };
        StudentsRoutine.prototype.fetchActiveSemester = function () {
            var _this = this;
            var defer = this.$q.defer();
            var ACTIVE_STATUS = 1;
            this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE).then(function (semesters) {
                semesters.forEach(function (s) {
                    if (s.status == ACTIVE_STATUS)
                        _this.classRoutineService.selectedSemester = s;
                });
                defer.resolve(_this.classRoutineService.selectedSemester);
            });
            return defer.promise;
        };
        StudentsRoutine.$inject = ['appConstants', '$q', 'notify', '$sce', '$window', 'classRoutineService', 'employeeService', 'semesterService', 'routineConfigService', 'studentService', 'userService', '$timeout', 'deviceDetector'];
        return StudentsRoutine;
    }());
    ums.UMS.controller("StudentsRoutine", StudentsRoutine);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SemesterExtension = (function () {
        function SemesterExtension(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.isRightDivAvailable = false;
            this.studentId = "";
            this.getSemesters();
        }
        SemesterExtension.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.activeSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
            });
            this.hideInsertMode = this.selectedSemesterId == this.activeSemesterId ? true : false;
        };
        SemesterExtension.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.getSemesterExtensionInfo();
            this.hideInsertMode = this.selectedSemesterId == this.activeSemesterId ? true : false;
            this.isRightDivAvailable = false;
        };
        SemesterExtension.prototype.search = function () {
            this.isRightDivAvailable = true;
            ums.Utils.expandRightDiv();
            this.getSemesterExtensionInfo();
        };
        SemesterExtension.prototype.addRecords = function () {
            var _this = this;
            var isNoDuplicateStudentFound = this.extendedSemester.filter(function (f) { return f.studentId == _this.studentId; }).length > 0 ? false : true;
            if (isNoDuplicateStudentFound) {
                if (this.studentId != "") {
                    this.convertToJson().then(function (json) {
                        _this.httpClient.post('academic/semesterExtension/addRecords', json, 'application/json')
                            .success(function (data, status, header, config) {
                            _this.notify.success("Data Saved successfully");
                            _this.getSemesterExtensionInfo();
                            _this.studentId = "";
                        }).error(function (data) {
                            _this.notify.error("An error has stopped saving data");
                        });
                    });
                }
                else {
                    this.notify.warn("Please insert a valid Student Id");
                }
            }
            else {
                this.notify.error("This Student Id is already inserted");
            }
        };
        SemesterExtension.prototype.deleteInfo = function (app) {
            var _this = this;
            this.convertToJsonForDelete(app).then(function (data) {
                var value = confirm("Are you Confirm?");
                if (value == true) {
                    _this.httpClient.put("academic/semesterExtension/deleteRecords", data, 'application/json')
                        .success(function () {
                        _this.notify.success("Data deleted successfully");
                        _this.getSemesterExtensionInfo();
                    })
                        .error(function (data) {
                        _this.notify.error("Problem in deleting data");
                    });
                }
            });
        };
        SemesterExtension.prototype.getSemesterExtensionInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.extendedSemester = [];
            var result = [];
            this.httpClient.get('/ums-webservice-academic/academic/semesterExtension/getExtendedSemesterInfo/semester/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                result = json.entries;
                _this.extendedSemester = result;
                _this.totalRecord = result.length;
                defer.resolve(result);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SemesterExtension.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["studentId"] = this.studentId;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        SemesterExtension.prototype.convertToJsonForDelete = function (app) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["studentId"] = app.studentId;
            item["semesterId"] = app.semesterId;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        SemesterExtension.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService'];
        return SemesterExtension;
    }());
    ums.UMS.controller("SemesterExtension", SemesterExtension);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentPaymentSlip = (function () {
        function StudentPaymentSlip(appConstants, httpClient, $q, notify, $sce, $window, semesterService, studentService, feeReportService, employeeService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.studentService = studentService;
            this.feeReportService = feeReportService;
            this.employeeService = employeeService;
            this.feeList = [];
            this.feeList = this.appConstants.feeList;
            this.fees = this.feeList[0];
            this.feeCategoryId = this.fees.id;
            this.isRightDivAvailable = false;
            this.showDetails = false;
            this.remarks = "";
            this.studentId = "";
            this.accessToStudentInformation = true;
            this.employeeService.getLoggedEmployeeInfo().then(function (data) {
                _this.loggerUserDeptId = data.department.id;
            });
        }
        StudentPaymentSlip.prototype.search = function () {
            var _this = this;
            if (this.studentId.length > 0) {
                this.isRightDivAvailable = true;
                ums.Utils.expandRightDiv();
                this.sId = this.studentId;
                this.student = {};
                this.studentService.getStudentById(this.studentId).then(function (studentInfo) {
                    _this.student = studentInfo;
                    _this.accessToStudentInformation = _this.loggerUserDeptId == _this.student.departmentId ? true : false;
                }).then(function (data) {
                    _this.getPaymentHistory();
                });
            }
            else {
                this.notify.error("Invalid Student ID");
            }
        };
        StudentPaymentSlip.prototype.getPaymentHistory = function () {
            var _this = this;
            this.httpClient.get('student-payment/allPayments/student-id/' + this.studentId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.studentPaymentDetails = response.entries;
                _this.studentPaymentHistory = _this.studentPaymentDetails.filter(function (f) { return f.status != 'APPLIED'; });
                _this.studentPaymentDetails = _this.studentPaymentDetails.filter(function (f) { return f.status == 'APPLIED'; });
            });
        };
        StudentPaymentSlip.prototype.createNewSlip = function () {
            var _this = this;
            this.convertToJson().then(function (json) {
                _this.httpClient.post('student-payment/addRecords', json, 'application/json')
                    .success(function () {
                    _this.notify.success("Data inserted successfully");
                    _this.getPaymentHistory();
                })
                    .error(function (data) {
                    _this.notify.error("Problem in saving data");
                });
            });
        };
        StudentPaymentSlip.prototype.showMore = function () {
            this.showDetails = true;
        };
        StudentPaymentSlip.prototype.showLess = function () {
            this.showDetails = false;
        };
        StudentPaymentSlip.prototype.receipt = function (transactionId) {
            this.feeReportService.receipt(transactionId);
        };
        StudentPaymentSlip.prototype.generateSlip = function (studentId, transactionId) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "TemporaryPassword-" + studentId;
            var defer = this.$q.defer();
            this.httpClient.get('tmpPassword/pdf/studentId/' + studentId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        StudentPaymentSlip.prototype.changeFeeType = function (value) {
            this.feeCategoryId = value.id;
        };
        StudentPaymentSlip.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["studentId"] = this.sId;
            item["feeCategoryId"] = this.feeCategoryId;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        StudentPaymentSlip.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'studentService', 'FeeReportService', 'employeeService'];
        return StudentPaymentSlip;
    }());
    ums.UMS.controller("StudentPaymentSlip", StudentPaymentSlip);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var LoginAs = (function () {
        function LoginAs(appConstants, httpClient, $q, notify, employeeService, studentService, amsAttendanceInfoService, userService, $route, cookieService, $http, sadminAccessRuleService, commonBankService, bankService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.employeeService = employeeService;
            this.studentService = studentService;
            this.amsAttendanceInfoService = amsAttendanceInfoService;
            this.userService = userService;
            this.$route = $route;
            this.cookieService = cookieService;
            this.$http = $http;
            this.sadminAccessRuleService = sadminAccessRuleService;
            this.commonBankService = commonBankService;
            this.bankService = bankService;
            this.pagination = {};
            this.showLoader = false;
            console.log("==============");
            this.employeeId = "";
            this.searchBy = 0;
            this.showSummary = false;
            this.employeeDesignation = "";
            this.employeeDepartmentName = "";
            this.employeeType = "";
            this.deptList = [];
            this.deptList = this.appConstants.departmentOffice;
            this.selectedDepartmentId = "";
            this.isTeacher = true;
            this.employeeIdTmp = "";
            this.userService.fetchCurrentUserInfo().then(function (d) {
                _this.roleId = d.roleId;
                if (_this.roleId == 1021) {
                    _this.isTeacher = true;
                }
                else {
                    _this.isTeacher = false;
                }
                console.log(" Is Teacher :: " + _this.isTeacher);
            });
            this.initializeKeyUpDelay();
        }
        LoginAs.prototype.fetchStudents = function (departmentId) {
            var _this = this;
            this.showLoader = true;
            this.studentService.getAllStudentsByDepartmentId(departmentId).then(function (response) {
                _this.studentList = response;
                _this.filteredStudentList = angular.copy(_this.studentList);
                _this.showLoader = false;
            });
        };
        LoginAs.prototype.fetchEmployees = function (departmentId) {
            var _this = this;
            this.showLoader = true;
            this.employeeService.getEmployees(departmentId).then(function (res) {
                _this.employeeList = res;
                _this.filteredEmployeeList = angular.copy(_this.employeeList);
                _this.showLoader = false;
            });
        };
        LoginAs.prototype.fetchBranches = function () {
            var _this = this;
            this.commonBankService.getBranchList(1).then(function (res) {
                _this.branchList = res;
            });
        };
        LoginAs.prototype.fetchBranchUsers = function (branchId) {
            var _this = this;
            if (branchId) {
                this.showLoader = true;
                this.commonBankService.getBranchUsers(branchId).then(function (res) {
                    _this.branchUsers = res;
                    _this.showLoader = false;
                });
            }
        };
        LoginAs.prototype.userTypeSelected = function () {
            var _this = this;
            this.filteredDeptList = [];
            if (this.userType === 'STUDENT') {
                this.deptList.forEach(function (d) {
                    if (+d.id <= 7) {
                        _this.filteredDeptList.push(angular.copy(d));
                    }
                });
            }
            else if (this.userType === 'EMPLOYEES') {
                this.filteredDeptList = angular.copy(this.deptList);
            }
            else if (this.userType === 'BANK_USER') {
                this.fetchBranches();
            }
        };
        LoginAs.prototype.initializeKeyUpDelay = function () {
            var tmp = this;
            function delay(callback, ms) {
                var timer = 0;
                return function () {
                    var context = this, args = arguments;
                    clearTimeout(timer);
                    timer = setTimeout(function () {
                        callback.apply(context, args);
                    }, ms || 0);
                };
            }
            $('#input').keyup(delay(function (e) {
                tmp.showSummary = false;
                tmp.getEmployees(this.value);
            }, 500));
        };
        LoginAs.prototype.deptChanged = function (deptId) {
            console.log("Department Changed");
            this.isDeptSelected = true;
            try {
                this.selectedDepartmentId = deptId.id;
                this.departmentName = deptId.name;
                this.filteredStudentList = [];
                this.filteredEmployeeList = [];
                this.fetchEmployees(this.selectedDepartmentId);
                this.fetchStudents(this.selectedDepartmentId);
            }
            catch (e) {
                this.selectedDepartmentId = "";
            }
            console.log("Dept: " + this.selectedDepartmentId);
        };
        LoginAs.prototype.loginAsByUserId = function () {
            var _this = this;
            if (this.userId) {
                this.userService.getAccessToken(this.userId).then(function (res) {
                    _this.redirectToANewTab(res);
                });
            }
        };
        LoginAs.prototype.loginAsTheUser = function () {
            var _this = this;
            if (this.userType === 'EMPLOYEES') {
                this.userService.getAccessToken(this.selectedEmployee.id).then(function (res) {
                    _this.redirectToANewTab(res);
                });
            }
            else if (this.userType === 'STUDENT') {
                this.userService.getAccessToken(this.selectedStudent.id).then(function (res) {
                    _this.redirectToANewTab(res);
                });
            }
            else if (this.userType === 'BANK_USER') {
                this.userService.getAccessToken(this.selectedBranchUser.userId).then(function (res) {
                    _this.redirectToANewTab(res);
                });
            }
        };
        LoginAs.prototype.redirectToANewTab = function (userToken) {
            if (userToken) {
                if (this.userType === 'BANK_USER') {
                    if (location.hostname === 'iums.aust.edu') {
                        window.open('https://' + location.hostname + ':5002/ums-bank-web/login?token=' + userToken.token + '&expires=' + userToken.expires);
                    }
                    else {
                        window.open('https://' + location.hostname + '/ums-bank-web/login?token=' + userToken.token + '&expires=' + userToken.expires);
                    }
                }
                else {
                    window.open('https://' + location.hostname + '/ums-web/login?token=' + userToken.token + '&expires=' + userToken.expires);
                }
            }
        };
        LoginAs.prototype.getEmployees = function (employeeId) {
            var _this = this;
            this.employeeId = employeeId;
            if (this.employeeId.length > 2) {
                console.log('[#####]Requesting Id:' + this.employeeId);
                this.employeeList = [];
                this.selectedEmployeeName = null;
                if (this.searchBy == 0) {
                    this.employeeService.getEmployeeByLikelySearch(this.employeeId).then(function (data) {
                        _this.employeeList = data;
                        console.log(_this.employeeList);
                    });
                }
                else {
                    this.fullName = "";
                    this.employeeService.getEmployeeByName(this.employeeId).then(function (data) {
                        _this.employeeList = data;
                    });
                }
            }
        };
        //resutest
        // this is my resource test resouce
        LoginAs.prototype.loginAsNewUser = function (studentId, semesterId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('academic/deadlineExtension/getParameters/employeeId/' + this.selectedEmployeeId, 'application/json', function (response) {
                var res = JSON.stringify(response);
                console.log(" Response : " + res);
                _this.startApplication(res);
            });
            return defer.promise;
        };
        LoginAs.prototype.startApplication = function (tokens) {
            console.log("Token  #### :: " + tokens);
            sessionStorage.setItem("ums.token", tokens);
            console.log("Going to another profile");
            this.httpClient.resetAuthenticationHeader();
            window.location.href = this.getBaseAppUrl() + 'iums/#/';
        };
        LoginAs.prototype.getBaseAppUrl = function () {
            console.log("Base url : " + window.location);
            console.log("Base url pathname : " + window.location.pathname);
            console.log("Index of : " + window.location.pathname.indexOf('/', 1));
            console.log("output : " + window.location.pathname.substring(0, window.location.pathname.indexOf('/', 1) + 1));
            return window.location.pathname.substring(0, window.location.pathname.indexOf('/', 1) + 1);
        };
        LoginAs.$inject = ['appConstants', 'HttpClient', '$q', 'notify', 'employeeService', 'studentService', 'amsAttendanceInfoService', 'userService', '$route', 'CookieService', '$http', 'sadminAccessRuleService', 'commonBankService', 'BankService'];
        return LoginAs;
    }());
    ums.LoginAs = LoginAs;
    ums.UMS.controller("LoginAs", LoginAs);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var OptCourseOffer = (function () {
        function OptCourseOffer(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, commonService, optCourseOfferService, parameterSettingService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.commonService = commonService;
            this.optCourseOfferService = optCourseOfferService;
            this.parameterSettingService = parameterSettingService;
            this.EEE = "05";
            this.isMandatory = false;
            this.groupName = "";
            this.subGroupName = "";
            this.parentGrpName = "";
            this.optOfferedCourseList = [];
            this.connectWithList = [];
            this.preProcessResult = 0;
            this.downloadResult = 1;
            this.courseOfferedDeadLine = false;
            this.resultProcessDealLine = false;
            this.isRightDivAvailable = false;
            this.isOfferDateNotExists = false;
            this.checkDeadlineStatus = false;
            this.checkDeadlineStatusResultProcess = false;
            this.isOfferDateOver = false;
            this.isOfferDateExists = false;
            this.isProcessDateNotExists = false;
            this.isProcessDateOver = false;
            this.isProcessDateExists = false;
            this.commonService.fetchCurrentUser().then(function (departmentJson) {
                _this.departmentId = departmentJson.id;
                _this.isSubGroupAvailable = _this.departmentId == "05" ? true : false;
                _this.getSemesters();
            }).then(function (data) {
                _this.programService.fetchProgram(11).then(function (data) {
                    var app = [];
                    app = data;
                    _this.programs = app;
                    _this.programs = _this.programs.filter(function (f) { return f.departmentId == _this.departmentId; });
                    _this.program = _this.programs[0];
                    _this.programId = _this.program.id;
                }).then(function (data) {
                    _this.yearSemList = [];
                    _this.yearSemList = _this.appConstants.opYearSemester;
                    if (_this.departmentId == "04" || _this.departmentId == "03") {
                        //DEPT_ID: CSE(04),CE(03)
                        _this.yearSemList = _this.yearSemList.filter(function (f) { return f.id == "42"; });
                    }
                    _this.yearSem = _this.yearSemList[0];
                    _this.yearSemName = _this.yearSem.name;
                });
            });
            this.pushDataIntoList = false;
            this.selectedComponents1 = [];
            // this.initialization();
            this.drag();
            this.sortingLog = [];
            this.sortableOptions = {};
            this.sortableOptions1 = {};
        }
        OptCourseOffer.prototype.drag = function () {
            var tmpThis = this;
            var gpName = this;
            var checkSource = "draggable-element-container";
            var changeColorToGreen = 1;
            this.draggableOptions = {
                connectWith: this.connectWithList,
                stop: function (e, ui) {
                    // if the element is removed from the first container
                    if (ui.item.sortable.source.hasClass('draggable-element-container') &&
                        ui.item.sortable.droptarget &&
                        ui.item.sortable.droptarget != ui.item.sortable.source) {
                        // restore the removed item
                        //draggable-element-container
                        gpName.destinationDiv = ui.item.sortable.droptarget[0].classList[0].toString();
                        if (checkSource != gpName.destinationDiv) {
                            ui.item.sortable.sourceModel.push(ui.item.sortable.model);
                            tmpThis.insert(ui.item.sortable.model);
                            tmpThis.changeColor(ui.item.sortable.model.id, changeColorToGreen);
                        }
                        else {
                        }
                    }
                }
            };
        };
        OptCourseOffer.prototype.changeColor = function (courseId, setColor) {
            var parentIndex;
            for (var i = 0; i < this.draggables.length; i++) {
                for (var j = 0; j < this.draggables[i].courses.length; j++) {
                    if (this.draggables[i].courses[j].id == courseId) {
                        this.draggables[i].courses[j].statusId = setColor;
                        parentIndex = i;
                        break;
                    }
                }
            }
            this.draggables[parentIndex].courses.sort(function (a, b) {
                if (a.id > b.id) {
                    return 1;
                }
                if (a.id < b.id) {
                    return -1;
                }
                return 0;
            });
        };
        OptCourseOffer.prototype.insert = function (data) {
            var counter = 0;
            if (this.departmentId != this.EEE) {
                for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                    for (var j = 0; j < this.optOfferedCourseList[i].courses.length; j++) {
                        if (this.optOfferedCourseList[i].courses[j].id == data.id) {
                            counter = 1;
                            break;
                        }
                    }
                }
            }
            else {
                for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                    for (var j = 0; j < this.optOfferedCourseList[i].subGrpCourses.length; j++) {
                        for (var k = 0; k < this.optOfferedCourseList[i].subGrpCourses[j].courses.length; k++) {
                            if (this.optOfferedCourseList[i].subGrpCourses[j].courses[k].id == data.id) {
                                counter = 1;
                                break;
                            }
                        }
                    }
                }
            }
            if (counter != 1) {
                var items = {
                    id: data.id,
                    no: data.no,
                    title: data.title,
                    crHr: data.crHr,
                    courseType: data.courseType,
                    year: data.year,
                    semester: data.semester,
                    pairCourseId: data.pairCourseId,
                    statusId: data.statusId
                };
                var index = 0, parentIndex = 0, childIndex = 0;
                if (this.departmentId == this.EEE) {
                    for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                        for (var j = 0; j < this.optOfferedCourseList[i].subGrpCourses.length; j++) {
                            if (this.optOfferedCourseList[i].subGrpCourses[j].groupName == this.destinationDiv) {
                                parentIndex = i;
                                childIndex = j;
                                break;
                            }
                        }
                    }
                    this.optOfferedCourseList[parentIndex].subGrpCourses[childIndex].courses.push(items);
                    if (items.pairCourseId != null) {
                        this.insertPairCourse(items.pairCourseId, parentIndex, childIndex);
                    }
                }
                else {
                    index = this.optOfferedCourseList.map(function (e) { return e.groupName; }).indexOf(this.destinationDiv);
                    this.optOfferedCourseList[index].courses.push(items);
                    if (items.pairCourseId != null) {
                        this.insertPairCourse(items.pairCourseId, index);
                    }
                }
            }
            else {
                this.notify.error("This Course is Already Assigned");
            }
        };
        OptCourseOffer.prototype.insertPairCourse = function (courseId, parentIndex, childIndex) {
            var data = this.courseIdMap[courseId];
            var items = {
                id: data.id,
                no: data.no,
                title: data.title,
                crHr: data.crHr,
                courseType: data.courseType,
                year: data.year,
                semester: data.semester,
                pairCourseId: data.pairCourseId,
                statusId: data.statusId
            };
            if (this.departmentId != this.EEE) {
                this.optOfferedCourseList[parentIndex].courses.push(items);
            }
            else {
                this.optOfferedCourseList[parentIndex].subGrpCourses[childIndex].courses.push(items);
            }
            this.changeColor(courseId, 1);
        };
        OptCourseOffer.prototype.deleteItems = function (groupName, index, courseId) {
            var changeColor = 0, isCourseFound = 0, pairCourseId;
            var parentIndex = this.optOfferedCourseList.map(function (e) { return e.groupName; }).indexOf(groupName);
            this.optOfferedCourseList[parentIndex].courses.splice(index, 1);
            this.changeColor(courseId, changeColor);
            pairCourseId = this.pairCourseIdMapWithCourseId[courseId];
            if (pairCourseId != null) {
                this.deletePairCourses(pairCourseId, parentIndex);
            }
        };
        OptCourseOffer.prototype.deletePairCourses = function (pairCourseId, parentIndex, childIndex) {
            var isCourseFound = 0, index = 0, changeColor = 0;
            if (this.departmentId != this.EEE) {
                for (var i = 0; i < this.optOfferedCourseList[parentIndex].courses.length; i++) {
                    if (this.optOfferedCourseList[parentIndex].courses[i].id == pairCourseId) {
                        index = i;
                        break;
                    }
                }
                this.optOfferedCourseList[parentIndex].courses.splice(index, 1);
            }
            else {
                for (var k = 0; k < this.optOfferedCourseList[parentIndex].subGrpCourses[childIndex].courses.length; k++) {
                    if (this.optOfferedCourseList[parentIndex].subGrpCourses[childIndex].courses[k].id == pairCourseId) {
                        index = k;
                        break;
                    }
                }
                this.optOfferedCourseList[parentIndex].subGrpCourses[childIndex].courses.splice(index, 1);
            }
            this.changeColor(pairCourseId, changeColor);
        };
        OptCourseOffer.prototype.deleteSubItems = function (groupName, subGroupName, index, courseId) {
            var changeColor = 0, isCourseFound = 0, pairCourseId;
            var parentIndex = this.optOfferedCourseList.map(function (e) { return e.groupName; }).indexOf(groupName);
            var childIndex = this.optOfferedCourseList[parentIndex].subGrpCourses.map(function (e) { return e.groupName; }).indexOf(subGroupName);
            this.optOfferedCourseList[parentIndex].subGrpCourses[childIndex].courses.splice(index, 1);
            this.changeColor(courseId, changeColor);
            pairCourseId = this.pairCourseIdMapWithCourseId[courseId];
            if (pairCourseId != null) {
                this.deletePairCourses(pairCourseId, parentIndex, childIndex);
            }
        };
        OptCourseOffer.prototype.subGroup = function () {
            if (this.subGroupName.length > 0) {
                var name = this.subGroupName.replace(/[^\w]/gi, '');
                var isNameExists = 0;
                for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                    isNameExists = this.optOfferedCourseList[i].subGrpCourses.filter(function (f) { return f.groupName == name; }).length;
                    if (isNameExists == 1) {
                        break;
                    }
                }
                if (isNameExists == 0) {
                    this.optOfferedCourseList[this.indexValue].subGrpCourses.push({
                        groupId: null,
                        groupName: name,
                        totalApplied: 0,
                        totalSeats: 0,
                        courses: []
                    });
                    if (this.departmentId == this.EEE) {
                        this.connectWithList.push("." + name);
                    }
                }
                else {
                    this.notify.error("Name Already Exists");
                }
            }
            else {
                this.notify.warn("Name can not be Empty");
            }
            this.subGroupName = "";
        };
        OptCourseOffer.prototype.getParentGrpId = function (data, index, course) {
            this.parentGrpName = data;
            this.indexValue = this.optOfferedCourseList.indexOf(course);
        };
        OptCourseOffer.prototype.addOfferedCourse = function () {
            var items, isNameExists = 0;
            if (this.groupName.length > 0) {
                var name = this.groupName.replace(/[^\w]/gi, '');
                if (this.optOfferedCourseList.length > 0) {
                    isNameExists = this.optOfferedCourseList.filter(function (f) { return f.groupName == name; }).length;
                }
                if (isNameExists == 0) {
                    items =
                        { groupId: null,
                            groupName: name == null ? null : name,
                            isMandatory: this.isMandatory,
                            totalApplied: 0,
                            totalSeats: 0,
                            courses: [],
                            subGrpCourses: []
                        };
                    this.optOfferedCourseList.push(items);
                    if (this.departmentId != "05") {
                        this.connectWithList.push("." + name);
                    }
                }
                else {
                    this.notify.error("Name Already Exists");
                }
            }
            else {
                this.notify.warn("Name can not be Empty");
            }
            this.groupName = "";
            this.isMandatory = false;
        };
        OptCourseOffer.prototype.removeMainGroup = function (groupName) {
            var value = confirm("Are you Confirm?");
            if (value == true) {
                var parentIndex = this.optOfferedCourseList.map(function (e) { return e.groupName; }).indexOf(groupName);
                if (this.departmentId != this.EEE) {
                    for (var j = 0; j < this.optOfferedCourseList[parentIndex].courses.length; j++) {
                        this.changeColor(this.optOfferedCourseList[parentIndex].courses[j].id, 0);
                    }
                }
                else {
                    for (var j = 0; j < this.optOfferedCourseList[parentIndex].subGrpCourses.length; j++) {
                        for (var k = 0; k < this.optOfferedCourseList[parentIndex].subGrpCourses[j].courses.length; k++) {
                            this.changeColor(this.optOfferedCourseList[parentIndex].subGrpCourses[j].courses[k].id, 0);
                        }
                    }
                }
                this.optOfferedCourseList.splice(parentIndex, 1);
            }
        };
        OptCourseOffer.prototype.removeSubGroup = function (groupName, subGroupName) {
            var value = confirm("Are you Confirm?");
            if (value == true) {
                var parentIndex = this.optOfferedCourseList.map(function (e) { return e.groupName; }).indexOf(groupName);
                var childIndex = this.optOfferedCourseList[parentIndex].subGrpCourses.map(function (e) { return e.groupName; }).indexOf(subGroupName);
                for (var k = 0; k < this.optOfferedCourseList[parentIndex].subGrpCourses[childIndex].courses.length; k++) {
                    this.changeColor(this.optOfferedCourseList[parentIndex].subGrpCourses[childIndex].courses[k].id, 0);
                }
                this.optOfferedCourseList[parentIndex].subGrpCourses.splice(childIndex, 1);
            }
        };
        OptCourseOffer.prototype.initializeValue = function () {
            this.isOfferDateNotExists = false;
            this.checkDeadlineStatus = false;
            this.checkDeadlineStatusResultProcess = false;
            this.isOfferDateOver = false;
            this.isOfferDateExists = false;
            this.isProcessDateNotExists = false;
            this.isProcessDateOver = false;
            this.isProcessDateExists = false;
        };
        OptCourseOffer.prototype.search = function () {
            var _this = this;
            this.initializeValue();
            this.isRightDivAvailable = true;
            ums.Utils.expandRightDiv();
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            this.parameterSettingService.getExtendsParameterSettings("91", this.selectedSemesterId, this.programId).then(function (data) {
                if (data != undefined) {
                    _this.courseOfferParameterInfo = data[0];
                    _this.courseOfferParameterInfo.startDate = _this.formatDate(data[0].startDate);
                    _this.courseOfferParameterInfo.endDate = _this.formatDate(data[0].endDate);
                    if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                        _this.isOfferDateExists = true;
                    }
                    if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                        _this.isOfferDateOver = true;
                    }
                    if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                        _this.isOfferDateNotExists = true;
                    }
                }
                else {
                    _this.parameterSettingService.getParameterSettings("91", _this.selectedSemesterId).then(function (data) {
                        if (data != undefined) {
                            _this.courseOfferParameterInfo = data[0];
                            _this.courseOfferParameterInfo.startDate = _this.formatDate(data[0].startDate);
                            _this.courseOfferParameterInfo.endDate = _this.formatDate(data[0].endDate);
                            if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                _this.isOfferDateExists = true;
                            }
                            if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                                _this.isOfferDateOver = true;
                            }
                            if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                _this.isOfferDateNotExists = true;
                            }
                        }
                        else {
                            _this.checkDeadlineStatus = true;
                        }
                    });
                }
            });
            this.parameterSettingService.getExtendsParameterSettings("93", this.selectedSemesterId, this.programId).then(function (data) {
                if (data != undefined) {
                    _this.resultProcessParameterInfo = data[0];
                    _this.resultProcessParameterInfo.startDate = _this.formatDate(data[0].startDate);
                    _this.resultProcessParameterInfo.endDate = _this.formatDate(data[0].endDate);
                    if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                        _this.isProcessDateExists = true;
                    }
                    if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                        _this.isProcessDateOver = true;
                    }
                    if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                        _this.isProcessDateNotExists = true;
                    }
                }
                else {
                    _this.parameterSettingService.getParameterSettings("93", _this.selectedSemesterId).then(function (data) {
                        if (data != undefined) {
                            _this.resultProcessParameterInfo = data[0];
                            _this.resultProcessParameterInfo.startDate = _this.formatDate(data[0].startDate);
                            _this.resultProcessParameterInfo.endDate = _this.formatDate(data[0].endDate);
                            if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                _this.isProcessDateExists = true;
                            }
                            if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                                _this.isProcessDateOver = true;
                            }
                            if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                _this.isProcessDateNotExists = true;
                            }
                        }
                        else {
                            _this.checkDeadlineStatusResultProcess = true;
                        }
                    });
                }
            });
            this.optCourseOfferService.getOptCourses(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                _this.optCourseList = [];
                _this.tempList = [];
                _this.draggables = [];
                _this.optCourseList = data;
                _this.tempList = _this.optCourseList;
                _this.draggables = _this.optCourseList;
                _this.createMap(_this.draggables);
            }).then(function (a) {
                _this.getOfferedCoursesList(_this.selectedSemesterId);
                _this.optCourseOfferService.getParamDeadLineByProgram(_this.selectedSemesterId, "91", +_this.programId).then(function (data) {
                    _this.courseOfferedDeadLine = data;
                });
                _this.optCourseOfferService.getParamDeadLineByProgram(_this.selectedSemesterId, "93", +_this.programId).then(function (data) {
                    _this.resultProcessDealLine = data;
                });
            });
        };
        OptCourseOffer.prototype.groupSeatMap = function (data) {
            var map = {};
            if (this.departmentId == this.EEE) {
                console.log("EEE");
                for (var i = 0; i < data.length; i++) {
                    for (var j = 0; j < data[i].subGrpCourses.length; j++) {
                        map[data[i].subGrpCourses[j].groupId] = data[i].subGrpCourses[j].totalSeats;
                    }
                }
            }
            else {
                for (var i = 0; i < data.length; i++) {
                    map[data[i].groupId] = data[i].totalSeats;
                }
            }
            this.groupIdSeatNumberMap = map;
        };
        OptCourseOffer.prototype.getOfferedCoursesList = function (semesterId) {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            this.optCourseOfferService.getOfferedCourses(semesterId, this.programId, year, sem).then(function (data) {
                _this.optOfferedCourseList = [];
                _this.optOfferedCourseList = data;
                _this.groupSeatMap(_this.optOfferedCourseList);
            }).then(function (data) {
                if (_this.departmentId != _this.EEE) {
                    for (var i = 0; i < _this.optOfferedCourseList.length; i++) {
                        _this.connectWithList.push("." + _this.optOfferedCourseList[i].groupName);
                    }
                    for (var i = 0; i < _this.optOfferedCourseList.length; i++) {
                        for (var j = 0; j < _this.optOfferedCourseList[i].courses.length; j++) {
                            _this.changeColor(_this.optOfferedCourseList[i].courses[j].id, 1);
                        }
                    }
                }
                else {
                    for (var i = 0; i < _this.optOfferedCourseList.length; i++) {
                        for (var j = 0; j < _this.optOfferedCourseList[i].subGrpCourses.length; j++) {
                            _this.connectWithList.push("." + _this.optOfferedCourseList[i].subGrpCourses[j].groupName);
                        }
                    }
                    for (var i = 0; i < _this.optOfferedCourseList.length; i++) {
                        for (var j = 0; j < _this.optOfferedCourseList[i].subGrpCourses.length; j++) {
                            for (var k = 0; k < _this.optOfferedCourseList[i].subGrpCourses[j].courses.length; k++) {
                                _this.changeColor(_this.optOfferedCourseList[i].subGrpCourses[j].courses[k].id, 1);
                            }
                        }
                    }
                }
            });
        };
        OptCourseOffer.prototype.createMap = function (data) {
            var map = {};
            var pairCourseIdMap = {};
            for (var i = 0; i < data.length; i++) {
                for (var j = 0; j < data[i].courses.length; j++) {
                    map[data[i].courses[j].id] = data[i].courses[j];
                    pairCourseIdMap[data[i].courses[j].id] = data[i].courses[j].pairCourseId;
                }
            }
            this.courseIdMap = map;
            this.pairCourseIdMapWithCourseId = pairCourseIdMap;
        };
        OptCourseOffer.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.getPrevSemester(11).then(function (semesters) {
                _this.previousSemesterId = semesters[0].id;
            });
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = semesters[i].id;
            }).then(function (data) {
            });
        };
        OptCourseOffer.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
        };
        OptCourseOffer.prototype.changeYearSem = function (value) {
            this.yearSemName = value.name;
        };
        OptCourseOffer.prototype.changeProgram = function (data) {
            this.programId = data.id;
        };
        OptCourseOffer.prototype.allocateSeat = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            this.allocateSeatForGroups = [];
            if (this.departmentId == this.EEE) {
                this.optCourseOfferService.getSubGroupInfo(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                    _this.allocateSeatForSubGroups = data;
                    for (var i = 0; i < _this.allocateSeatForSubGroups.length; i++) {
                        var id = _this.allocateSeatForSubGroups[i].subGroupId;
                        _this.allocateSeatForSubGroups[i].seat = _this.groupIdSeatNumberMap[id];
                    }
                });
            }
            else {
                this.optCourseOfferService.getGroupInfo(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                    _this.allocateSeatForGroups = data;
                    for (var i = 0; i < _this.allocateSeatForGroups.length; i++) {
                        var id = _this.allocateSeatForGroups[i].id;
                        _this.allocateSeatForGroups[i].seat = _this.groupIdSeatNumberMap[id];
                    }
                });
            }
        };
        OptCourseOffer.prototype.insertSeatInfo = function () {
            var _this = this;
            if (this.departmentId == this.EEE) {
                var json = this.convertToJson(this.allocateSeatForSubGroups);
                this.optCourseOfferService.addRecord(json).then(function (data) {
                    _this.search();
                });
            }
            else {
                var json = this.convertToJson(this.allocateSeatForGroups);
                this.optCourseOfferService.addRecord(json).then(function (data) {
                    _this.search();
                });
            }
        };
        OptCourseOffer.prototype.convertToJson = function (result) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < result.length; i++) {
                var item = {};
                item["groupId"] = this.departmentId == "05" ? result[i].subGroupId : result[i].id;
                item["seat"] = result[i].seat;
                jsonObj.push(item);
            }
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        OptCourseOffer.prototype.save = function () {
            if (this.optOfferedCourseList.length > 0) {
                var courseCounter = true;
                if (this.departmentId != this.EEE) {
                    for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                        if (this.optOfferedCourseList[i].courses.length == 0) {
                            this.notify.error("No Courses Assigned In Group " + this.optOfferedCourseList[i].groupName);
                            courseCounter = false;
                            break;
                        }
                    }
                }
                else {
                    for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                        if (this.optOfferedCourseList[i].subGrpCourses.length == 0) {
                            this.notify.error("No SubGroups Created In Group " + this.optOfferedCourseList[i].groupName);
                            courseCounter = false;
                            break;
                        }
                    }
                    if (courseCounter == true) {
                        for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                            for (var j = 0; j < this.optOfferedCourseList[i].subGrpCourses.length; j++) {
                                if (this.optOfferedCourseList[i].subGrpCourses[j].courses.length == 0) {
                                    this.notify.error("No Courses Assigned In Group: " + this.optOfferedCourseList[i].groupName + " Subgroup: " + this.optOfferedCourseList[i].subGrpCourses[j].groupName);
                                    courseCounter = false;
                                    break;
                                }
                            }
                        }
                    }
                }
                if (courseCounter == true) {
                    var YS = this.yearSemName.split("-");
                    var year = +YS[0];
                    var sem = +YS[1];
                    var json = this.optOfferedCourseList;
                    this.optCourseOfferService.addInfo(this.programId, year, sem, json).then(function (data) {
                    });
                }
            }
            else {
                this.notify.error("No Records Found");
            }
        };
        OptCourseOffer.prototype.showResult = function (value) {
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var processResult = value;
            this.optCourseOfferService.getStudentListReport(this.selectedSemesterId, this.programId, year, sem, processResult).then(function (data) {
            });
        };
        OptCourseOffer.prototype.getStudentsChoiceReport = function () {
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            this.optCourseOfferService.getStudentChoiceReport(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
            });
        };
        OptCourseOffer.prototype.toTimestamp = function (strDate) {
            var datum = Date.parse(strDate);
            return datum / 1000;
        };
        OptCourseOffer.prototype.formatDate = function (dateVal) {
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"
            ];
            var newDate = new Date(dateVal);
            var sMonth = this.padValue(newDate.getMonth() + 1);
            var sDay = this.padValue(newDate.getDate());
            var sYear = newDate.getFullYear();
            var sHour = newDate.getHours();
            var sMinute = this.padValue(newDate.getMinutes());
            var sAMPM = "AM";
            var iHourCheck = +sHour;
            if (iHourCheck > 12) {
                sAMPM = "PM";
                sHour = iHourCheck - 12;
            }
            else if (iHourCheck === 0) {
                sHour = 12;
            }
            sHour = this.padValue(sHour);
            return sDay + "-" + monthNames[+sMonth - 1] + "-" + sYear + " " + sHour + ":" + sMinute + " " + sAMPM;
        };
        OptCourseOffer.prototype.padValue = function (value) {
            return (value < 10) ? "0" + value : value;
        };
        OptCourseOffer.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService',
            'programService', 'commonService', 'optCourseOfferService', 'parameterSettingService'];
        return OptCourseOffer;
    }());
    ums.UMS.controller("OptCourseOffer", OptCourseOffer);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var OptCourseOfferService = (function () {
        function OptCourseOfferService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        OptCourseOfferService.prototype.getOptCourses = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/course/optional/semester-id/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        OptCourseOfferService.prototype.addRecord = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            this.httpClient.post("academic/optSeatAllocation/addRecords", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        OptCourseOfferService.prototype.getOfferedCourses = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optOfferedGroup/getOfferedCourses/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        OptCourseOfferService.prototype.getGroupInfo = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optOfferedGroup/getGroupInfo/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                defer.resolve(response.entries);
            }, function (response) {
            });
            return defer.promise;
        };
        OptCourseOfferService.prototype.getStudentInfo = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optOfferedGroup/getStudentInfo/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        OptCourseOfferService.prototype.getSubGroupInfo = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optOfferedGroupSubGroupMap/getGroupInfo/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                defer.resolve(response.entries);
            }, function (response) {
            });
            return defer.promise;
        };
        OptCourseOfferService.prototype.getParamDeadLine = function (semesterId, paramId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optOfferedGroup/getSemesterParameter/semesterId/' + semesterId + '/parameterType/' + paramId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        OptCourseOfferService.prototype.getParamDeadLineByProgram = function (semesterId, paramId, programId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optOfferedGroup/getSemesterParameter/semesterId/' + semesterId + '/parameterType/' + paramId + '/program/' + programId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        OptCourseOfferService.prototype.addInfo = function (programId, year, semester, json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post('academic/optOfferedGroup/addRecords/programId/' + programId + '/year/' + year + '/semester/' + semester, json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        OptCourseOfferService.prototype.getStudentListReport = function (semesterId, programId, year, semester, processResult) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Optional Course Selection Report";
            this.httpClient.get('/ums-webservice-academic/academic/optOfferedGroup/getStudentListReport/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester + '/status/' + processResult, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
            }, 'arraybuffer');
            return defer.promise;
        };
        OptCourseOfferService.prototype.getStudentChoiceReport = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Students Optional Course Selection";
            this.httpClient.get('/ums-webservice-academic/academic/optOfferedGroup/getStudentChoiceReport/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
            }, 'arraybuffer');
            return defer.promise;
        };
        OptCourseOfferService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return OptCourseOfferService;
    }());
    ums.OptCourseOfferService = OptCourseOfferService;
    ums.UMS.service("optCourseOfferService", OptCourseOfferService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var OptStudentCourseSelection = (function () {
        function OptStudentCourseSelection(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, commonService, optCourseOfferService, studentService, StudentInfoService, optStudentCourseSelectionService, parameterSettingService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.commonService = commonService;
            this.optCourseOfferService = optCourseOfferService;
            this.studentService = studentService;
            this.StudentInfoService = StudentInfoService;
            this.optStudentCourseSelectionService = optStudentCourseSelectionService;
            this.parameterSettingService = parameterSettingService;
            this.BBA = "02";
            this.CE = "03";
            this.CSE = "04";
            this.TE = "06";
            this.EEE = "05";
            this.isSubGroupAvailable = false;
            this.isEligibleForApply = false;
            this.isApprovedGroupAvailable = false;
            this.studentCourseChoiceDeadLine = false;
            this.isDisabled = false;
            this.isStudentChoiceNeeded = false;
            this.isDateNotExists = false;
            this.isDateOver = false;
            this.isDateExists = false;
            this.checkDeadlineStatus = false;
            this.group = 1;
            this.subGroup = 2;
            this.StudentInfoService.getStudent().then(function (student) {
                _this.studentInfo = student;
                _this.studentId = _this.studentInfo.id;
                _this.programId = +_this.studentInfo.programId;
                _this.academicYear = _this.studentInfo.year;
                _this.academicSemester = _this.studentInfo.academicSemester;
                _this.departmentId = _this.studentInfo.departmentId;
                _this.selectedSemesterId = _this.studentInfo.currentEnrolledSemesterId;
                _this.departmentName = _this.studentInfo.departmentName;
                _this.semesterName = _this.studentInfo.currentEnrolledSemesterName;
                if (_this.departmentId == _this.EEE) {
                    _this.isSubGroupAvailable = true;
                }
                else {
                    _this.isSubGroupAvailable = false;
                }
                _this.setYearSemester(_this.academicYear, _this.academicSemester);
            }).then(function (data) {
                _this.parameterSettingService.getExtendsParameterSettingsForStudent("92", _this.selectedSemesterId).then(function (data) {
                    if (data != undefined) {
                        _this.studentParameterInfo = data[0];
                        _this.studentParameterInfo.startDate = _this.formatDate(data[0].startDate);
                        _this.studentParameterInfo.endDate = _this.formatDate(data[0].endDate);
                        if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                            _this.isDateExists = true;
                        }
                        if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                            _this.isDateOver = true;
                        }
                        if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                            _this.isDateNotExists = true;
                        }
                    }
                    else {
                        _this.parameterSettingService.getParameterSettings("92", _this.selectedSemesterId).then(function (data) {
                            if (data != undefined) {
                                _this.studentParameterInfo = data[0];
                                _this.studentParameterInfo.startDate = _this.formatDate(data[0].startDate);
                                _this.studentParameterInfo.endDate = _this.formatDate(data[0].endDate);
                                if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                    _this.isDateExists = true;
                                }
                                if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                                    _this.isDateOver = true;
                                }
                                if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                    _this.isDateNotExists = true;
                                }
                            }
                            else {
                                _this.checkDeadlineStatus = true;
                            }
                        });
                    }
                });
                if (_this.isEligibleForApply) {
                    _this.optOfferedCourseList = [];
                    _this.optStudentCourseSelectionService.getOfferedCourses(_this.selectedSemesterId, _this.programId, _this.opCourseYear, _this.opCourseSemester).then(function (data) {
                        _this.optOfferedCourseList = data;
                        _this.approvedOptOfferedCourseList = _this.optOfferedCourseList.filter(function (f) { return f.isMandatory == true; });
                        _this.optOfferedCourseList = _this.optOfferedCourseList.filter(function (f) { return f.isMandatory == false; });
                        _this.isApprovedGroupAvailable = _this.approvedOptOfferedCourseList.length > 0 ? true : false;
                        _this.optCourseOfferService.getParamDeadLine(_this.selectedSemesterId, "92").then(function (data) {
                            _this.studentCourseChoiceDeadLine = data;
                        });
                    });
                }
                if (_this.departmentId == _this.TE || _this.departmentId == _this.BBA) {
                    if (_this.academicYear == 4 && _this.academicSemester == 1) {
                        _this.isStudentChoiceNeeded = false;
                    }
                    else {
                        _this.isStudentChoiceNeeded = true;
                    }
                }
                else {
                    _this.isStudentChoiceNeeded = true;
                }
            });
        }
        OptStudentCourseSelection.prototype.setYearSemester = function (year, semester) {
            if (this.departmentId == this.CE || this.departmentId == this.CSE) {
                if (year == 4 && semester == 1) {
                    this.isEligibleForApply = true;
                }
            }
            else {
                if ((year == 3 && semester == 2) || (year == 4 && semester == 1)) {
                    this.isEligibleForApply = true;
                }
            }
            if (this.isEligibleForApply) {
                this.yearSemesterMap(year + "-" + semester);
            }
            else {
                // this.notify.error("You are not Allowed to Apply for Optional Course");
            }
        };
        OptStudentCourseSelection.prototype.yearSemesterMap = function (yearSem) {
            yearSem = (yearSem == "3-2") ? "4-1" : "4-2";
            var YS = yearSem.split("-");
            this.opCourseYear = +YS[0];
            this.opCourseSemester = +YS[1];
        };
        OptStudentCourseSelection.prototype.setSelection = function (id, choice, subGroupId) {
            if (this.departmentId != this.EEE) {
                for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                    if (this.optOfferedCourseList[i].choice == choice) {
                        this.optOfferedCourseList[i].choice = 0;
                    }
                }
                for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                    if (this.optOfferedCourseList[i].groupId == id) {
                        this.optOfferedCourseList[i].choice = choice;
                        break;
                    }
                }
            }
            else {
                for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                    if (this.optOfferedCourseList[i].groupId == id) {
                        for (var j = 0; j < this.optOfferedCourseList[i].subGrpCourses.length; j++) {
                            if (this.optOfferedCourseList[i].subGrpCourses[j].choice == choice) {
                                this.optOfferedCourseList[i].subGrpCourses[j].choice = 0;
                            }
                        }
                        break;
                    }
                }
                for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                    for (var j = 0; j < this.optOfferedCourseList[i].subGrpCourses.length; j++) {
                        if (this.optOfferedCourseList[i].subGrpCourses[j].groupId == subGroupId) {
                            this.optOfferedCourseList[i].subGrpCourses[j].choice = choice;
                            break;
                        }
                    }
                }
            }
        };
        ;
        OptStudentCourseSelection.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = semesters[i].id;
            });
            return this.selectedSemesterId;
        };
        OptStudentCourseSelection.prototype.insertData = function () {
            var _this = this;
            var isInsertPossible = true;
            if (this.departmentId != this.EEE) {
                for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                    if (this.optOfferedCourseList[i].choice == 0 || this.optOfferedCourseList[i].choice == null) {
                        isInsertPossible = false;
                        this.notify.warn("Select Your Choice From Group_Name: " + this.optOfferedCourseList[i].groupName);
                        break;
                    }
                }
            }
            else {
                for (var i = 0; i < this.optOfferedCourseList.length; i++) {
                    for (var j = 0; j < this.optOfferedCourseList[i].subGrpCourses.length; j++) {
                        if (this.optOfferedCourseList[i].subGrpCourses[j].choice == 0 || this.optOfferedCourseList[i].subGrpCourses[j].choice == null) {
                            isInsertPossible = false;
                            this.notify.warn("Select Your Choice From GROUP_NAME: " + this.optOfferedCourseList[i].groupName + "  SUB_GROUP_NAME: " +
                                this.optOfferedCourseList[i].subGrpCourses[j].groupName);
                            break;
                        }
                    }
                    if (!isInsertPossible) {
                        break;
                    }
                }
            }
            if (isInsertPossible) {
                var json = this.convertToJson(this.optOfferedCourseList);
                this.isDisabled = true;
                this.optStudentCourseSelectionService.addInfo(json).then(function (data) {
                    _this.isDisabled = false;
                });
            }
        };
        OptStudentCourseSelection.prototype.convertToJson = function (result) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            if (this.departmentId != this.EEE) {
                for (var i = 0; i < result.length; i++) {
                    var item = {};
                    item["studentId"] = this.studentId;
                    item["groupId"] = result[i].groupId.toString();
                    item["programId"] = this.programId;
                    item["year"] = this.academicYear;
                    item["semester"] = this.academicSemester;
                    item["choice"] = result[i].choice;
                    item["groupType"] = this.group;
                    jsonObj.push(item);
                }
            }
            else {
                for (var i = 0; i < result.length; i++) {
                    for (var j = 0; j < result[i].subGrpCourses.length; j++) {
                        var item = {};
                        item["studentId"] = this.studentId;
                        item["groupId"] = result[i].subGrpCourses[j].groupId.toString();
                        item["programId"] = this.programId;
                        item["year"] = this.academicYear;
                        item["semester"] = this.academicSemester;
                        item["choice"] = result[i].subGrpCourses[j].choice;
                        item["groupType"] = this.subGroup;
                        jsonObj.push(item);
                    }
                }
            }
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        OptStudentCourseSelection.prototype.toTimestamp = function (strDate) {
            var datum = Date.parse(strDate);
            return datum / 1000;
        };
        OptStudentCourseSelection.prototype.formatDate = function (dateVal) {
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"
            ];
            var newDate = new Date(dateVal);
            var sMonth = this.padValue(newDate.getMonth() + 1);
            var sDay = this.padValue(newDate.getDate());
            var sYear = newDate.getFullYear();
            var sHour = newDate.getHours();
            var sMinute = this.padValue(newDate.getMinutes());
            var sAMPM = "AM";
            var iHourCheck = +sHour;
            if (iHourCheck > 12) {
                sAMPM = "PM";
                sHour = iHourCheck - 12;
            }
            else if (iHourCheck === 0) {
                sHour = 12;
            }
            sHour = this.padValue(sHour);
            return sDay + "-" + monthNames[+sMonth - 1] + "-" + sYear + " " + sHour + ":" + sMinute + " " + sAMPM;
        };
        OptStudentCourseSelection.prototype.padValue = function (value) {
            return (value < 10) ? "0" + value : value;
        };
        OptStudentCourseSelection.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService',
            'programService', 'commonService', 'optCourseOfferService', 'studentService', 'StudentInfoService', 'optStudentCourseSelectionService', 'parameterSettingService'];
        return OptStudentCourseSelection;
    }());
    ums.UMS.controller("OptStudentCourseSelection", OptStudentCourseSelection);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var OptStudentCourseSelectionService = (function () {
        function OptStudentCourseSelectionService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        OptStudentCourseSelectionService.prototype.getOfferedCourses = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optOfferedGroup/getAvailableCourses/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptStudentCourseSelectionService.prototype.addInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Inside-Service");
            console.log(json);
            this.httpClient.post('academic/optStudentCourseSelection/addRecords', json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        OptStudentCourseSelectionService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return OptStudentCourseSelectionService;
    }());
    ums.OptStudentCourseSelectionService = OptStudentCourseSelectionService;
    ums.UMS.service("optStudentCourseSelectionService", OptStudentCourseSelectionService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var OptShiftStudent = (function () {
        function OptShiftStudent(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, commonService, optCourseOfferService, optShiftStudentService, optSectionService, parameterSettingService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.commonService = commonService;
            this.optCourseOfferService = optCourseOfferService;
            this.optShiftStudentService = optShiftStudentService;
            this.optSectionService = optSectionService;
            this.parameterSettingService = parameterSettingService;
            this.EEE = "05";
            this.commonService.fetchCurrentUser().then(function (departmentJson) {
                _this.departmentId = departmentJson.id;
                _this.isSubGroupAvailable = _this.departmentId == "05" ? true : false;
                _this.getSemesters();
            }).then(function (data) {
                _this.programService.fetchProgram(11).then(function (data) {
                    var app = [];
                    app = data;
                    _this.programs = app;
                    _this.programs = _this.programs.filter(function (f) { return f.departmentId == _this.departmentId; });
                    _this.program = _this.programs[0];
                    _this.programId = _this.program.id;
                }).then(function (data) {
                    _this.yearSemList = [];
                    _this.yearSemList = _this.appConstants.opYearSemester;
                    console.log(_this.yearSemList);
                    if (_this.departmentId == "04" || _this.departmentId == "03") {
                        //DEPT_ID: CSE(04),CE(03)
                        _this.yearSemList = _this.yearSemList.filter(function (f) { return f.id == "42"; });
                    }
                    _this.yearSem = _this.yearSemList[0];
                    _this.yearSemName = _this.yearSem.name;
                });
            });
            this.studentId = "";
            this.theorySection = "";
            this.sessionalSection = "";
            this.isAddSectionAvailable = false;
            this.selectedRow = null;
            this.isOptSectionSelected = false;
            this.isGroupMandatory = false;
            this.isRightDivAvailable = false;
            this.newStudentId = "";
            this.optOfferedCourseList = [];
            this.studentShiftDeadLine = false;
            this.destGroupName = "";
            this.isImportAvailable = false;
            this.previousSemesterId = null;
            this.isShiftDateNotExists = false;
            this.checkDeadlineStatus = false;
            this.isShiftDateOver = false;
            this.isShiftDateExists = false;
        }
        OptShiftStudent.prototype.migrate = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var isManuallyAddedFound = false, studentId;
            for (var i = 0; i < this.studentList.length; i++) {
                for (var j = 0; j < this.studentList[i].optSelectedStudentList.length; j++) {
                    if (this.studentList[i].optSelectedStudentList[j].appliedStatus == true) {
                        if (this.studentList[i].optSelectedStudentList[j].status == 2) {
                            studentId = this.studentList[i].optSelectedStudentList[j].studentId;
                            isManuallyAddedFound = true;
                            break;
                        }
                    }
                }
            }
            if (isManuallyAddedFound == false) {
                if (this.isOptSectionSelected) {
                    var completeJson = {};
                    var jsonObj = [];
                    for (var i = 0; i < this.studentList.length; i++) {
                        for (var j = 0; j < this.studentList[i].optSelectedStudentList.length; j++) {
                            var item = {};
                            if (this.studentList[i].optSelectedStudentList[j].shift == true) {
                                item["id"] = this.studentList[i].optSelectedStudentList[j].id;
                                item["groupId"] = this.destTmpGroupId;
                                if (this.departmentId == this.EEE) {
                                    item["subGroupId"] = this.destSubGroupId;
                                }
                                item["theorySection"] = this.destinationTheorySection;
                                item["sessionalSection"] = this.destinationSessionalSection;
                                item["status"] = 1;
                                jsonObj.push(item);
                            }
                        }
                    }
                    if (jsonObj.length > 0) {
                        completeJson["entries"] = jsonObj;
                        this.optShiftStudentService.updateGroupInfo(completeJson).then(function (info) {
                            _this.selectedRow = null;
                            _this.isOptSectionSelected = false;
                            _this.getResources(year, sem);
                        });
                    }
                    else {
                        this.notify.warn("No Student is selected for transfer");
                    }
                }
                else {
                    this.notify.error("Select destination from Current Section");
                }
            }
            else {
                this.notify.error("You can not shift a manually  added student (" + studentId + ")");
                this.selectedRow = null;
                this.isOptSectionSelected = false;
            }
        };
        OptShiftStudent.prototype.reset = function () {
            for (var i = 0; i < this.newlyAddedStudentList.length; i++) {
                for (var j = 0; j < this.newlyAddedStudentList[i].optSelectedStudentList.length; j++) {
                    this.newlyAddedStudentList[i].optSelectedStudentList[j].shift = false;
                }
            }
        };
        OptShiftStudent.prototype.getNewlyAddedStudents = function () {
            this.reset();
        };
        OptShiftStudent.prototype.deleteStudent = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < this.newlyAddedStudentList.length; i++) {
                for (var j = 0; j < this.newlyAddedStudentList[i].optSelectedStudentList.length; j++) {
                    var item = {};
                    if (this.newlyAddedStudentList[i].optSelectedStudentList[j].shift == true) {
                        item["id"] = this.newlyAddedStudentList[i].optSelectedStudentList[j].id;
                        jsonObj.push(item);
                    }
                }
            }
            if (jsonObj.length > 0) {
                completeJson["entries"] = jsonObj;
                console.log(completeJson);
                console.log("deleteStudent");
                this.optShiftStudentService.deleteStudent(completeJson).then(function (data) {
                    _this.reset();
                    _this.getResources(year, sem);
                    _this.selectedRow = null;
                    _this.isOptSectionSelected = false;
                });
            }
            else {
                this.notify.warn("No Student is selected for transfer");
            }
        };
        OptShiftStudent.prototype.addStudent = function () {
            var _this = this;
            if (this.newStudentId.length >= 9) {
                var isStudentFound = false;
                if (this.departmentId == this.EEE) {
                    isStudentFound = false;
                }
                else {
                    for (var i = 0; i < this.studentList.length; i++) {
                        for (var j = 0; j < this.studentList[i].optSelectedStudentList.length; j++) {
                            if (this.studentList[i].optSelectedStudentList[j].studentId == this.newStudentId) {
                                isStudentFound = true;
                                break;
                            }
                        }
                    }
                }
                if (isStudentFound) {
                    this.notify.error("Student is already in the list/group/subgroup.Try Shift the student");
                }
                else {
                    if (this.isOptSectionSelected) {
                        var YS = this.yearSemName.split("-");
                        var year_1 = +YS[0];
                        var sem_1 = +YS[1];
                        var completeJson = {};
                        var jsonObj = [];
                        var item = {};
                        item["studentId"] = this.newStudentId;
                        item["programId"] = this.programId;
                        item["groupId"] = this.destTmpGroupId;
                        if (this.departmentId == this.EEE) {
                            item["subGroupId"] = this.destSubGroupId;
                        }
                        item["year"] = year_1;
                        item["semesterId"] = this.selectedSemesterId;
                        item["semester"] = sem_1;
                        item["theorySection"] = this.destinationTheorySection;
                        item["sessionalSection"] = this.destinationSessionalSection;
                        item["status"] = 2;
                        jsonObj.push(item);
                        completeJson["entries"] = jsonObj;
                        this.optShiftStudentService.addNewStudent(completeJson).then(function (d) {
                            _this.selectedRow = null;
                            _this.newStudentId = "";
                            _this.isOptSectionSelected = false;
                            _this.getResources(year_1, sem_1);
                        });
                    }
                    else {
                        this.notify.error("Select destination from Current Section");
                    }
                }
            }
            else {
                this.notify.warn("Not a valid Student Id");
            }
        };
        OptShiftStudent.prototype.removeOptSectionStudents = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < this.optSectionWiseStudentList.length; i++) {
                for (var j = 0; j < this.optSectionWiseStudentList[i].optSelectedStudentList.length; j++) {
                    var item = {};
                    if (this.optSectionWiseStudentList[i].optSelectedStudentList[j].shift == true) {
                        item["id"] = this.optSectionWiseStudentList[i].optSelectedStudentList[j].id;
                        jsonObj.push(item);
                    }
                }
            }
            if (jsonObj.length > 0) {
                completeJson["entries"] = jsonObj;
                this.optShiftStudentService.updateSectionInfo(completeJson).then(function (info) {
                    _this.selectedRow = null;
                    _this.isOptSectionSelected = false;
                    _this.getResources(year, sem);
                });
            }
            else {
                this.notify.warn("No Student is selected");
            }
        };
        OptShiftStudent.prototype.setIndex = function (data, index) {
            console.log(data);
            this.selectedRow = index;
            this.destinationTheorySection = data.theorySection;
            this.destinationSessionalSection = data.sessionalSection;
            this.isOptSectionSelected = true;
        };
        OptShiftStudent.prototype.addSection = function () {
            this.isAddSectionAvailable = true;
        };
        OptShiftStudent.prototype.hideSection = function () {
            this.isAddSectionAvailable = false;
        };
        OptShiftStudent.prototype.insertSectionInfo = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var jsonObj = this.covertToJson();
            console.log(jsonObj);
            if ((this.theorySection.length > 1 && this.sessionalSection.length > 1) && (this.theorySection.length < 15 && this.sessionalSection.length < 15)) {
                this.optSectionService.addInfo(jsonObj).then(function (data) {
                    _this.theorySection = "";
                    _this.sessionalSection = "";
                    _this.selectedRow = null;
                    _this.isOptSectionSelected = false;
                    _this.optSectionService.getSectionInfo(_this.selectedSemesterId, _this.programId, year, sem).then(function (data) {
                        _this.sectionList = data;
                    });
                });
            }
            else {
                this.notify.warn("Require Minimum 2 to Max 15 Character for Theory/Sessional Section");
            }
        };
        OptShiftStudent.prototype.covertToJson = function () {
            var defer = this.$q.defer();
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["programId"] = this.programId;
            item["groupId"] = this.tmpGroupId;
            if (this.departmentId == this.EEE) {
                item["subGroupId"] = this.sourceSubGroupId;
            }
            item["year"] = year;
            item["semester"] = sem;
            item["theorySection"] = this.theorySection;
            item["sessionalSection"] = this.sessionalSection;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        OptShiftStudent.prototype.ss = function () {
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            this.optSectionService.getOptSectionList(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
            });
        };
        OptShiftStudent.prototype.initializeValue = function () {
            this.isShiftDateNotExists = false;
            this.checkDeadlineStatus = false;
            this.isShiftDateOver = false;
            this.isShiftDateExists = false;
        };
        OptShiftStudent.prototype.search = function () {
            var _this = this;
            this.initializeValue();
            ums.Utils.expandRightDiv();
            this.studentId = "";
            this.theorySection = "";
            this.sessionalSection = "";
            this.selectedRow = null;
            this.isOptSectionSelected = false;
            this.isRightDivAvailable = true;
            this.getGroupInfo();
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            if (this.departmentId == "02" || this.departmentId == "06") {
                if (year == 4 && sem == 2) {
                    this.isImportAvailable = true;
                }
            }
            this.parameterSettingService.getExtendsParameterSettings("94", this.selectedSemesterId, this.programId).then(function (data) {
                if (data != undefined) {
                    _this.shiftingParameterInfo = data[0];
                    _this.shiftingParameterInfo.startDate = _this.formatDate(data[0].startDate);
                    _this.shiftingParameterInfo.endDate = _this.formatDate(data[0].endDate);
                    if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                        _this.isShiftDateExists = true;
                    }
                    if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                        _this.isShiftDateOver = true;
                    }
                    if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                        _this.isShiftDateNotExists = true;
                    }
                }
                else {
                    _this.parameterSettingService.getParameterSettings("94", _this.selectedSemesterId).then(function (data) {
                        if (data != undefined) {
                            _this.shiftingParameterInfo = data[0];
                            _this.shiftingParameterInfo.startDate = _this.formatDate(data[0].startDate);
                            _this.shiftingParameterInfo.endDate = _this.formatDate(data[0].endDate);
                            if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                _this.isShiftDateExists = true;
                            }
                            if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                                _this.isShiftDateOver = true;
                            }
                            if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                _this.isShiftDateNotExists = true;
                            }
                        }
                        else {
                            _this.checkDeadlineStatus = true;
                        }
                    });
                }
            });
            this.optSectionService.getSectionInfo(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                _this.sectionList = data;
            });
            this.optCourseOfferService.getOfferedCourses(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                _this.optOfferedCourseList = [];
                _this.optOfferedCourseList = data;
            });
            this.optCourseOfferService.getParamDeadLineByProgram(this.selectedSemesterId, "94", +this.programId).then(function (data) {
                _this.studentShiftDeadLine = data;
            });
            this.optShiftStudentService.getOptUgRegStudents(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
            });
            this.getResources(year, sem);
        };
        OptShiftStudent.prototype.getResources = function (year, sem) {
            var _this = this;
            this.optShiftStudentService.getStudentInfo(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                _this.studentList = [];
                _this.newlyAddedStudentList = [];
                _this.studentList = data;
                _this.newlyAddedStudentList = data;
            });
            this.optSectionService.getOptionalSectionInfo(this.selectedSemesterId, this.programId, year, sem).then(function (info) {
                _this.optSectionWiseStudentList = [];
                _this.optSectionWiseStudentList = info;
            });
        };
        OptShiftStudent.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.selectedSemesterId = _this.semester.semesterId;
                        _this.activeSemesterId = semesters[i].id;
                        _this.getPrevSemester(semesters[i].id);
                        break;
                    }
                }
                _this.selectedSemesterId = semesters[i].id;
            }).then(function (data) {
            });
        };
        OptShiftStudent.prototype.getPrevSemester = function (semesterId) {
            var _this = this;
            this.semesterService.getPrevSemesterById(11, semesterId).then(function (semesters) {
                _this.previousSemesterId = semesters[0].id;
                console.log("prev semesterId: " + _this.previousSemesterId);
            });
        };
        OptShiftStudent.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.isImportAvailable = false;
            this.getPrevSemester(this.selectedSemesterId);
        };
        OptShiftStudent.prototype.changeYearSem = function (value) {
            this.yearSemName = value.name;
            this.isImportAvailable = false;
        };
        OptShiftStudent.prototype.changeProgram = function (data) {
            this.programId = data.id;
            this.isImportAvailable = false;
        };
        OptShiftStudent.prototype.showResult = function () {
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var showResult = 1;
            this.optCourseOfferService.getStudentListReport(this.selectedSemesterId, this.programId, year, sem, showResult).then(function (data) {
            });
        };
        OptShiftStudent.prototype.importStudents = function () {
            var _this = this;
            this.optCourseOfferService.getGroupInfo(this.previousSemesterId, this.programId, 4, 1).then(function (data) {
                _this.importGroupInfo = [];
                _this.importGroupInfo = data;
                _this.importGroup = _this.importGroupInfo[0];
                _this.importGroupId = _this.importGroup.id.toString();
                console.log(_this.importGroupInfo);
            }).then(function (data) {
                _this.optShiftStudentService.getOptShiftStudentsForImport(_this.previousSemesterId, _this.programId, 4, 1).then(function (data) {
                    _this.importStudentList = [];
                    _this.importStudentList = data;
                    for (var i = 0; i < _this.importStudentList.length; i++) {
                        for (var j = 0; j < _this.studentList.length; j++) {
                            for (var k = 0; k < _this.studentList[j].optSelectedStudentList.length; k++) {
                                if (_this.studentList[j].optSelectedStudentList[k].studentId == _this.importStudentList[i].studentId) {
                                    _this.importStudentList[i].status = 3;
                                }
                            }
                        }
                    }
                });
            });
        };
        OptShiftStudent.prototype.changeImportGroup = function (data) {
            this.importGroupId = data.id;
        };
        OptShiftStudent.prototype.removeFromBulkStudents = function (data) {
            var index = this.importStudentList.indexOf(data);
            this.importStudentList.splice(index, 1);
        };
        OptShiftStudent.prototype.importInfo = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var tempList = this.importStudentList.filter(function (f) { return f.groupId == _this.importGroupId && f.status != 3; });
            console.log(tempList);
            if (tempList.length > 0) {
                var completeJson = {};
                for (var i = 0; i < tempList.length; i++) {
                    tempList[i].groupId = this.destGroupId;
                    tempList[i].year = year;
                    tempList[i].semester = sem;
                    tempList[i].status = 3;
                    tempList[i].semesterId = this.selectedSemesterId;
                    tempList[i].importGroupId = this.importGroupId;
                }
                completeJson["entries"] = tempList;
                this.optShiftStudentService.saveImportStudents(completeJson).then(function (data) {
                    _this.optSectionService.getSectionInfo(_this.selectedSemesterId, _this.programId, year, sem).then(function (data) {
                        _this.sectionList = data;
                    });
                    _this.getResources(year, sem);
                });
            }
            else {
                this.notify.warn("No Student Found to Import");
            }
        };
        OptShiftStudent.prototype.getGroupInfo = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            if (this.departmentId == this.EEE) {
                this.optCourseOfferService.getSubGroupInfo(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                    _this.sourceSubGroupInfo = [];
                    _this.destSubGroupInfo = [];
                    _this.sourceSubGroupInfo = data;
                    _this.destSubGroupInfo = data;
                    _this.sourceSubGroupInfoTemp = _this.sourceSubGroupInfo;
                    _this.destSubGroupInfoTemp = _this.sourceSubGroupInfo;
                    _this.eeeSourceSubGroupInfo = [];
                    _this.destEeeSourceSubGroupInfo = [];
                    var _loop_1 = function (j) {
                        var len = _this.eeeSourceSubGroupInfo.filter(function (f) { return f.groupId == _this.sourceSubGroupInfo[j].groupId; }).length;
                        if (len > 0) {
                        }
                        else {
                            _this.eeeSourceSubGroupInfo.push(_this.sourceSubGroupInfo[j]);
                        }
                    };
                    for (var j = 0; j < _this.sourceSubGroupInfo.length; j++) {
                        _loop_1(j);
                    }
                    var _loop_2 = function (j) {
                        var len = _this.destEeeSourceSubGroupInfo.filter(function (f) { return f.groupId == _this.destSubGroupInfo[j].groupId; }).length;
                        if (len > 0) {
                        }
                        else {
                            _this.destEeeSourceSubGroupInfo.push(_this.destSubGroupInfo[j]);
                        }
                    };
                    //dest
                    for (var j = 0; j < _this.destSubGroupInfo.length; j++) {
                        _loop_2(j);
                    }
                    _this.eeeSourceSubGroup = _this.eeeSourceSubGroupInfo[0];
                    _this.eeeSourceSubGroupId = +_this.eeeSourceSubGroup.groupId;
                    _this.tmpGroupId = _this.eeeSourceSubGroupId.toString();
                    _this.sourceSubGroupInfo = _this.sourceSubGroupInfoTemp.filter(function (f) { return f.groupId == _this.eeeSourceSubGroupId.toString(); });
                    _this.sourceSubGroup = _this.sourceSubGroupInfo[0];
                    _this.sourceSubGroupId = _this.sourceSubGroup.subGroupId.toString();
                    //dest
                    _this.destEeeSourceSubGroup = _this.destEeeSourceSubGroupInfo[0];
                    _this.destEeeSourceSubGroupId = +_this.destEeeSourceSubGroup.groupId;
                    _this.destTmpGroupId = _this.destEeeSourceSubGroupId.toString();
                    _this.destSubGroupInfo = _this.destSubGroupInfoTemp.filter(function (f) { return f.groupId == _this.destEeeSourceSubGroupId.toString(); });
                    _this.destSubGroup = _this.destSubGroupInfo[0];
                    _this.destSubGroupId = _this.destSubGroup.subGroupId.toString();
                });
            }
            else {
                this.optCourseOfferService.getGroupInfo(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                    _this.sourceGroupInfo = [];
                    _this.destGroupInfo = [];
                    _this.sourceGroupInfo = data;
                    _this.sourceGroup = _this.sourceGroupInfo[0];
                    _this.sourceGroupId = _this.sourceGroup.id.toString();
                    _this.tmpGroupId = _this.sourceGroupId;
                    _this.isGroupMandatory = _this.sourceGroup.isMandatory == 1 ? true : false;
                    //dest
                    _this.destGroupInfo = data;
                    _this.destGroup = _this.sourceGroupInfo[0];
                    _this.destGroupId = _this.sourceGroup.id.toString();
                    _this.destGroupName = _this.sourceGroup.groupName;
                    _this.destTmpGroupId = _this.sourceGroupId;
                });
            }
        };
        OptShiftStudent.prototype.changeGroup = function (data) {
            this.sourceGroupId = data.id;
            this.tmpGroupId = this.sourceGroupId;
            this.isGroupMandatory = this.sourceGroup.isMandatory == 1 ? true : false;
        };
        OptShiftStudent.prototype.changeDestGroup = function (data) {
            this.destGroupId = data.id;
            this.destGroupName = data.groupName;
            this.destTmpGroupId = this.destGroupId;
            this.selectedRow = null;
            this.isOptSectionSelected = false;
        };
        OptShiftStudent.prototype.changeSubGroup = function (data) {
            this.sourceSubGroupId = data.subGroupId;
        };
        OptShiftStudent.prototype.changeDestSubGroup = function (data) {
            this.destSubGroupId = data.subGroupId;
            this.selectedRow = null;
            this.isOptSectionSelected = false;
        };
        OptShiftStudent.prototype.changeEeeSourceSubGroup = function (data) {
            var _this = this;
            this.eeeSourceSubGroupId = data.groupId;
            this.sourceSubGroupInfo = this.sourceSubGroupInfoTemp.filter(function (f) { return f.groupId == _this.eeeSourceSubGroupId.toString(); });
            this.sourceSubGroup = this.sourceSubGroupInfo[0];
            this.sourceSubGroupId = this.sourceSubGroup.subGroupId.toString();
            this.tmpGroupId = this.eeeSourceSubGroupId.toString();
        };
        OptShiftStudent.prototype.changeDestEeeSourceSubGroup = function (data) {
            var _this = this;
            this.destEeeSourceSubGroupId = data.groupId;
            this.destSubGroupInfo = this.destSubGroupInfoTemp.filter(function (f) { return f.groupId == _this.destEeeSourceSubGroupId.toString(); });
            this.destSubGroup = this.destSubGroupInfo[0];
            this.destSubGroupId = this.destSubGroup.subGroupId.toString();
            this.destTmpGroupId = this.destEeeSourceSubGroupId.toString();
        };
        OptShiftStudent.prototype.toTimestamp = function (strDate) {
            var datum = Date.parse(strDate);
            return datum / 1000;
        };
        OptShiftStudent.prototype.formatDate = function (dateVal) {
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"
            ];
            var newDate = new Date(dateVal);
            var sMonth = this.padValue(newDate.getMonth() + 1);
            var sDay = this.padValue(newDate.getDate());
            var sYear = newDate.getFullYear();
            var sHour = newDate.getHours();
            var sMinute = this.padValue(newDate.getMinutes());
            var sAMPM = "AM";
            var iHourCheck = +sHour;
            if (iHourCheck > 12) {
                sAMPM = "PM";
                sHour = iHourCheck - 12;
            }
            else if (iHourCheck === 0) {
                sHour = 12;
            }
            sHour = this.padValue(sHour);
            return sDay + "-" + monthNames[+sMonth - 1] + "-" + sYear + " " + sHour + ":" + sMinute + " " + sAMPM;
        };
        OptShiftStudent.prototype.padValue = function (value) {
            return (value < 10) ? "0" + value : value;
        };
        OptShiftStudent.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService',
            'programService', 'commonService', 'optCourseOfferService', 'optShiftStudentService', 'optSectionService', 'parameterSettingService'];
        return OptShiftStudent;
    }());
    ums.UMS.controller("OptShiftStudent", OptShiftStudent);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var OptShiftStudentService = (function () {
        function OptShiftStudentService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        OptShiftStudentService.prototype.addNewStudent = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("add new student ");
            console.log(json);
            this.httpClient.post('academic/shiftStudent/addNewStudent', json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                _this.notify.error(data);
                defer.resolve('failure');
            });
            return defer.promise;
        };
        OptShiftStudentService.prototype.saveImportStudents = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Inside-Service");
            console.log(json);
            this.httpClient.post('academic/shiftStudent/importStudents', json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        OptShiftStudentService.prototype.updateSectionInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Inside-Service");
            console.log(json);
            this.httpClient.post('academic/shiftStudent/updateSectionInfo', json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        OptShiftStudentService.prototype.updateGroupInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Inside-Service");
            console.log(json);
            this.httpClient.post('academic/shiftStudent/updateGroupInfo', json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        OptShiftStudentService.prototype.deleteStudent = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Inside-Service");
            console.log(json);
            this.httpClient.post('academic/shiftStudent/deleteStudent', json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        OptShiftStudentService.prototype.getStudentInfo = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/shiftStudent/getOptStudentInfo/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptShiftStudentService.prototype.getOptUgRegStudents = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/shiftStudent/getOptUgRegStudents/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                console.log(response.entries);
                defer.resolve(response.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptShiftStudentService.prototype.getOptShiftStudentsForImport = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/shiftStudent/getOptShiftStudents/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                console.log(response.entries);
                defer.resolve(response.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptShiftStudentService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return OptShiftStudentService;
    }());
    ums.OptShiftStudentService = OptShiftStudentService;
    ums.UMS.service("optShiftStudentService", OptShiftStudentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var OptSection = (function () {
        function OptSection(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, commonService, optCourseOfferService, optShiftStudentService, optSectionService, parameterSettingService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.commonService = commonService;
            this.optCourseOfferService = optCourseOfferService;
            this.optShiftStudentService = optShiftStudentService;
            this.optSectionService = optSectionService;
            this.parameterSettingService = parameterSettingService;
            this.EEE = "05";
            this.commonService.fetchCurrentUser().then(function (departmentJson) {
                _this.departmentId = departmentJson.id;
                _this.isSubGroupAvailable = _this.departmentId == "05" ? true : false;
                _this.getSemesters();
            }).then(function (data) {
                _this.programService.fetchProgram(11).then(function (data) {
                    var app = [];
                    app = data;
                    _this.programs = app;
                    _this.programs = _this.programs.filter(function (f) { return f.departmentId == _this.departmentId; });
                    _this.program = _this.programs[0];
                    _this.programId = _this.program.id;
                }).then(function (data) {
                    _this.yearSemList = [];
                    _this.yearSemList = _this.appConstants.opYearSemester;
                    console.log(_this.yearSemList);
                    if (_this.departmentId == "04" || _this.departmentId == "03") {
                        //DEPT_ID: CSE(04),CE(03)
                        _this.yearSemList = _this.yearSemList.filter(function (f) { return f.id == "42"; });
                    }
                    _this.yearSem = _this.yearSemList[0];
                    _this.yearSemName = _this.yearSem.name;
                });
            });
            this.studentId = "";
            this.theorySection = "";
            this.sessionalSection = "";
            this.isAddSectionAvailable = false;
            this.selectedRow = null;
            this.isOptSectionSelected = false;
            this.isGroupMandatory = false;
            this.isRightDivAvailable = false;
            this.resultProcessDealLine = false;
            this.isShiftDateNotExists = false;
            this.isShiftDateOver = false;
            this.isShiftDateExists = false;
            this.isProcessDateNotExists = false;
            this.isProcessDateOver = false;
            this.isProcessDateExists = false;
            this.checkDeadlineStatus = false;
            this.checkDeadlineStatusResultProcess = false;
        }
        OptSection.prototype.migrateStudents = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            if (this.isOptSectionSelected) {
                var completeJson = {};
                var jsonObj = [];
                for (var i = 0; i < this.studentList.length; i++) {
                    for (var j = 0; j < this.studentList[i].optSelectedStudentList.length; j++) {
                        var item = {};
                        if (this.studentList[i].optSelectedStudentList[j].shift == true) {
                            item["id"] = this.studentList[i].optSelectedStudentList[j].id;
                            item["theorySection"] = this.destinationTheorySection;
                            item["sessionalSection"] = this.destinationSessionalSection;
                            jsonObj.push(item);
                        }
                    }
                }
                if (jsonObj.length > 0) {
                    completeJson["entries"] = jsonObj;
                    this.optShiftStudentService.updateSectionInfo(completeJson).then(function (info) {
                        _this.selectedRow = null;
                        _this.isOptSectionSelected = false;
                        _this.getResources(year, sem);
                    });
                }
                else {
                    this.notify.warn("No Student is selected for transfer");
                }
            }
            else {
                this.notify.error("Select destination from Current Section");
            }
        };
        OptSection.prototype.removeOptSectionStudents = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < this.optSectionWiseStudentList.length; i++) {
                for (var j = 0; j < this.optSectionWiseStudentList[i].optSelectedStudentList.length; j++) {
                    var item = {};
                    if (this.optSectionWiseStudentList[i].optSelectedStudentList[j].shift == true) {
                        item["id"] = this.optSectionWiseStudentList[i].optSelectedStudentList[j].id;
                        jsonObj.push(item);
                    }
                }
            }
            if (jsonObj.length > 0) {
                completeJson["entries"] = jsonObj;
                this.optShiftStudentService.updateSectionInfo(completeJson).then(function (info) {
                    _this.selectedRow = null;
                    _this.isOptSectionSelected = false;
                    _this.getResources(year, sem);
                });
            }
            else {
                this.notify.warn("No Student is selected");
            }
        };
        OptSection.prototype.setIndex = function (data, index) {
            this.selectedRow = index;
            this.destinationTheorySection = data.theorySection;
            this.destinationSessionalSection = data.sessionalSection;
            this.isOptSectionSelected = true;
        };
        OptSection.prototype.addSection = function () {
            this.isAddSectionAvailable = true;
        };
        OptSection.prototype.hideSection = function () {
            this.isAddSectionAvailable = false;
        };
        OptSection.prototype.insertSectionInfo = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            if ((this.theorySection.length > 1 && this.sessionalSection.length > 1) && (this.theorySection.length < 39 && this.sessionalSection.length < 39)) {
                var jsonObj = this.covertToJson();
                this.optSectionService.addInfo(jsonObj).then(function (data) {
                    _this.theorySection = "";
                    _this.sessionalSection = "";
                    _this.selectedRow = null;
                    _this.isOptSectionSelected = false;
                    _this.optSectionService.getSectionInfo(_this.selectedSemesterId, _this.programId, year, sem).then(function (data) {
                        _this.sectionList = data;
                    });
                });
            }
            else {
                this.notify.warn("Require Minimum 2 to Max 39 Character for Theory/Sessional Section");
            }
        };
        OptSection.prototype.covertToJson = function () {
            var defer = this.$q.defer();
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var sessional = this.sessionalSection.replace(/\s/g, '');
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["programId"] = this.programId;
            item["groupId"] = this.tmpGroupId;
            item["semesterId"] = this.selectedSemesterId;
            if (this.departmentId == "05") {
                item["subGroupId"] = this.sourceSubGroupId;
            }
            item["year"] = year;
            item["semester"] = sem;
            item["theorySection"] = this.theorySection;
            item["sessionalSection"] = sessional;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        OptSection.prototype.deleteInfo = function (data) {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["id"] = data.id;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            this.optSectionService.deleteInfo(completeJson).then(function (data) {
                _this.selectedRow = null;
                _this.isOptSectionSelected = false;
                _this.optSectionService.getSectionInfo(_this.selectedSemesterId, _this.programId, year, sem).then(function (data) {
                    _this.sectionList = data;
                });
            });
        };
        OptSection.prototype.ss = function () {
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            this.optSectionService.getOptSectionList(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
            });
        };
        OptSection.prototype.initializeValue = function () {
            this.isShiftDateNotExists = false;
            this.isShiftDateOver = false;
            this.isShiftDateExists = false;
            this.isProcessDateNotExists = false;
            this.isProcessDateOver = false;
            this.isProcessDateExists = false;
            this.checkDeadlineStatus = false;
            this.checkDeadlineStatusResultProcess = false;
        };
        OptSection.prototype.search = function () {
            var _this = this;
            this.initializeValue();
            ums.Utils.expandRightDiv();
            this.studentId = "";
            this.theorySection = "";
            this.sessionalSection = "";
            this.selectedRow = null;
            this.isOptSectionSelected = false;
            this.isRightDivAvailable = true;
            this.getGroupInfo();
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            console.log("-------");
            this.parameterSettingService.getExtendsParameterSettings("94", this.selectedSemesterId, this.programId).then(function (data) {
                if (data != undefined) {
                    _this.sectionParameterInfo = data[0];
                    _this.sectionParameterInfo.startDate = _this.formatDate(data[0].startDate);
                    _this.sectionParameterInfo.endDate = _this.formatDate(data[0].endDate);
                    if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                        _this.isShiftDateExists = true;
                    }
                    if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                        _this.isShiftDateOver = true;
                    }
                    if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                        _this.isShiftDateNotExists = true;
                    }
                }
                else {
                    _this.parameterSettingService.getParameterSettings("94", _this.selectedSemesterId).then(function (data) {
                        if (data != undefined) {
                            _this.sectionParameterInfo = data[0];
                            _this.sectionParameterInfo.startDate = _this.formatDate(data[0].startDate);
                            _this.sectionParameterInfo.endDate = _this.formatDate(data[0].endDate);
                            if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                _this.isShiftDateExists = true;
                            }
                            if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                                _this.isShiftDateOver = true;
                            }
                            if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                _this.isShiftDateNotExists = true;
                            }
                        }
                        else {
                            _this.checkDeadlineStatus = true;
                        }
                    });
                }
            });
            this.parameterSettingService.getExtendsParameterSettings("93", this.selectedSemesterId, this.programId).then(function (data) {
                if (data != undefined) {
                    _this.resultProcessParameterInfo = data[0];
                    _this.resultProcessParameterInfo.startDate = _this.formatDate(data[0].startDate);
                    _this.resultProcessParameterInfo.endDate = _this.formatDate(data[0].endDate);
                    if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                        _this.isProcessDateExists = true;
                    }
                    if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                        _this.isProcessDateOver = true;
                    }
                    if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                        _this.isProcessDateNotExists = true;
                    }
                }
                else {
                    _this.parameterSettingService.getParameterSettings("93", _this.selectedSemesterId).then(function (data) {
                        if (data != undefined) {
                            _this.resultProcessParameterInfo = data[0];
                            _this.resultProcessParameterInfo.startDate = _this.formatDate(data[0].startDate);
                            _this.resultProcessParameterInfo.endDate = _this.formatDate(data[0].endDate);
                            if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                _this.isProcessDateExists = true;
                            }
                            if (_this.toTimestamp(data[0].startDate) < _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) < _this.toTimestamp(data[0].NowDate)) {
                                _this.isProcessDateOver = true;
                            }
                            if (_this.toTimestamp(data[0].startDate) > _this.toTimestamp(data[0].NowDate) && _this.toTimestamp(data[0].endDate) > _this.toTimestamp(data[0].NowDate)) {
                                _this.isProcessDateNotExists = true;
                            }
                        }
                        else {
                            _this.checkDeadlineStatusResultProcess = true;
                        }
                    });
                }
            });
            this.optSectionService.getSectionInfo(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                _this.sectionList = data;
            });
            this.optCourseOfferService.getParamDeadLineByProgram(this.selectedSemesterId, "94", +this.programId).then(function (data) {
                _this.studentShiftDeadLine = data;
            });
            this.optCourseOfferService.getParamDeadLineByProgram(this.selectedSemesterId, "93", +this.programId).then(function (data) {
                _this.resultProcessDealLine = data;
            });
            this.getResources(year, sem);
        };
        OptSection.prototype.getResources = function (year, sem) {
            var _this = this;
            this.optShiftStudentService.getStudentInfo(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                _this.studentList = [];
                _this.studentList = data;
            });
            this.optSectionService.getOptionalSectionInfo(this.selectedSemesterId, this.programId, year, sem).then(function (info) {
                _this.optSectionWiseStudentList = [];
                _this.optSectionWiseStudentList = info;
            });
        };
        OptSection.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = semesters[i].id;
            }).then(function (data) {
            });
        };
        OptSection.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
        };
        OptSection.prototype.changeYearSem = function (value) {
            this.yearSemName = value.name;
        };
        OptSection.prototype.changeProgram = function (data) {
            this.programId = data.id;
        };
        OptSection.prototype.showResult = function () {
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            var showResult = 1;
            this.optCourseOfferService.getStudentListReport(this.selectedSemesterId, this.programId, year, sem, showResult).then(function (data) {
            });
        };
        OptSection.prototype.getGroupInfo = function () {
            var _this = this;
            var YS = this.yearSemName.split("-");
            var year = +YS[0];
            var sem = +YS[1];
            if (this.departmentId == this.EEE) {
                this.optCourseOfferService.getSubGroupInfo(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                    _this.sourceSubGroupInfo = data;
                    _this.sourceSubGroupInfoTemp = _this.sourceSubGroupInfo;
                    _this.eeeSourceSubGroupInfo = [];
                    var _loop_3 = function (j) {
                        var len = _this.eeeSourceSubGroupInfo.filter(function (f) { return f.groupId == _this.sourceSubGroupInfo[j].groupId; }).length;
                        if (len > 0) {
                        }
                        else {
                            _this.eeeSourceSubGroupInfo.push(_this.sourceSubGroupInfo[j]);
                        }
                    };
                    for (var j = 0; j < _this.sourceSubGroupInfo.length; j++) {
                        _loop_3(j);
                    }
                    _this.eeeSourceSubGroup = _this.eeeSourceSubGroupInfo[0];
                    _this.eeeSourceSubGroupId = _this.eeeSourceSubGroup.groupId;
                    _this.tmpGroupId = _this.eeeSourceSubGroupId;
                    _this.sourceSubGroupInfo = _this.sourceSubGroupInfoTemp.filter(function (f) { return f.groupId == _this.eeeSourceSubGroupId; });
                    _this.sourceSubGroup = _this.sourceSubGroupInfo[0];
                    _this.sourceSubGroupId = _this.sourceSubGroup.subGroupId.toString();
                });
            }
            else {
                this.optCourseOfferService.getGroupInfo(this.selectedSemesterId, this.programId, year, sem).then(function (data) {
                    _this.sourceGroupInfo = data;
                    _this.sourceGroup = _this.sourceGroupInfo[0];
                    _this.sourceGroupId = _this.sourceGroup.id.toString();
                    _this.tmpGroupId = _this.sourceGroupId;
                    _this.isGroupMandatory = _this.sourceGroup.isMandatory == 1 ? true : false;
                });
            }
        };
        OptSection.prototype.changeGroup = function (data) {
            this.sourceGroupId = data.id;
            this.tmpGroupId = this.sourceGroupId;
            this.selectedRow = null;
            this.isOptSectionSelected = false;
            this.isGroupMandatory = this.sourceGroup.isMandatory == 1 ? true : false;
        };
        OptSection.prototype.changeSubGroup = function (data) {
            this.sourceSubGroupId = data.subGroupId;
            this.selectedRow = null;
            this.isOptSectionSelected = false;
        };
        OptSection.prototype.changeEeeSourceSubGroup = function (data) {
            var _this = this;
            this.eeeSourceSubGroupId = data.groupId;
            this.sourceSubGroupInfo = this.sourceSubGroupInfoTemp.filter(function (f) { return f.groupId == _this.eeeSourceSubGroupId.toString(); });
            this.sourceSubGroup = this.sourceSubGroupInfo[0];
            this.sourceSubGroupId = this.sourceSubGroup.subGroupId.toString();
            this.tmpGroupId = this.eeeSourceSubGroupId.toString();
            this.selectedRow = null;
            this.isOptSectionSelected = false;
        };
        OptSection.prototype.toTimestamp = function (strDate) {
            var datum = Date.parse(strDate);
            return datum / 1000;
        };
        OptSection.prototype.formatDate = function (dateVal) {
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"
            ];
            var newDate = new Date(dateVal);
            var sMonth = this.padValue(newDate.getMonth() + 1);
            var sDay = this.padValue(newDate.getDate());
            var sYear = newDate.getFullYear();
            var sHour = newDate.getHours();
            var sMinute = this.padValue(newDate.getMinutes());
            var sAMPM = "AM";
            var iHourCheck = +sHour;
            if (iHourCheck > 12) {
                sAMPM = "PM";
                sHour = iHourCheck - 12;
            }
            else if (iHourCheck === 0) {
                sHour = 12;
            }
            sHour = this.padValue(sHour);
            return sDay + "-" + monthNames[+sMonth - 1] + "-" + sYear + " " + sHour + ":" + sMinute + " " + sAMPM;
        };
        OptSection.prototype.padValue = function (value) {
            return (value < 10) ? "0" + value : value;
        };
        OptSection.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService',
            'programService', 'commonService', 'optCourseOfferService', 'optShiftStudentService', 'optSectionService', 'parameterSettingService'];
        return OptSection;
    }());
    ums.UMS.controller("OptSection", OptSection);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var OptSectionService = (function () {
        function OptSectionService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        OptSectionService.prototype.addInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("academic/optSection/addRecords", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        OptSectionService.prototype.deleteInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            console.log("Delete: GitHub Account issue check resolved");
            console.log(json);
            this.httpClient.put("academic/optSection/deleteRecords", json, 'application/json')
                .success(function () {
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        OptSectionService.prototype.getSectionInfo = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optSection/getSectionInfo/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                console.log(response.entries);
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        OptSectionService.prototype.getSectionNames = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optSection/getSectionNames/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        OptSectionService.prototype.getSectionNamesWithSection = function (semesterId, programId, year, semester, section) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optSection/getSectionNames/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester + '/section/' + section, 'application/json', function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        OptSectionService.prototype.getOptionalSectionInfo = function (semesterId, programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/optSection/getOptionalSectionInfo/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptSectionService.prototype.getOptSectionList = function (semesterId, programId, year, semester) {
            console.log("in");
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Optional Course Section List";
            this.httpClient.get('/ums-webservice-academic/academic/optSection/getSectionList/semesterId/' + semesterId + '/program/' + programId + '/year/' + year + '/semester/' + semester, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        OptSectionService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return OptSectionService;
    }());
    ums.OptSectionService = OptSectionService;
    ums.UMS.service("optSectionService", OptSectionService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ParameterSettingService = (function () {
        function ParameterSettingService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        ParameterSettingService.prototype.getParameterSettings = function (parameterId, semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/parameterSetting/parameter/' + parameterId + '/semester/' + semesterId, 'application/json', function (response) {
                defer.resolve(response.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ParameterSettingService.prototype.getExtendsParameterSettings = function (parameterId, semesterId, programId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/OptionalCourse/parameter/' + parameterId + '/semester/' + semesterId + '/program/' + programId, 'application/json', function (response) {
                defer.resolve(response.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ParameterSettingService.prototype.getExtendsParameterSettingsForStudent = function (parameterId, semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/OptionalCourse/parameter/' + parameterId + '/semester/' + semesterId, 'application/json', function (response) {
                defer.resolve(response.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ParameterSettingService.prototype.getParameterSettingsByActiveSemester = function (parameterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/parameterSetting/by-active-semester/parameter/' + parameterId, 'application/json', function (response) {
                defer.resolve(response.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ParameterSettingService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return ParameterSettingService;
    }());
    ums.ParameterSettingService = ParameterSettingService;
    ums.UMS.service("parameterSettingService", ParameterSettingService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ParameterService = (function () {
        function ParameterService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        ParameterService.prototype.getAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get('academic/academicCalenderParameter/all', 'application/json', function (response) {
                defer.resolve(response.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ParameterService.$inject = ['HttpClient', '$q', 'notify'];
        return ParameterService;
    }());
    ums.ParameterService = ParameterService;
    ums.UMS.service("parameterService", ParameterService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ClassRoomInfo = (function () {
        function ClassRoomInfo(appConstants, httpClient, $scope, departmentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.departmentService = departmentService;
            this.loadData();
        }
        ClassRoomInfo.prototype.initializeGrid = function () {
            ums.GridDecorator.decorate(this);
        };
        ClassRoomInfo.prototype.insert = function (rowData) {
            var _this = this;
            this.decorateScope().grid.api.toggleMessage('Saving...');
            console.log("Row data");
            console.log(rowData);
            this.httpClient.post('academic/classroom', rowData, ums.HttpClient.MIME_TYPE_JSON).success(function () {
                _this.decorateScope().grid.api.toggleMessage();
                _this.loadData();
            }).error(function (response) {
                _this.decorateScope().grid.api.toggleMessage();
                console.error(response);
                _this.loadData();
                _this.decorateScope().grid.api.toggleMessage();
            });
        };
        ClassRoomInfo.prototype.edit = function (rowData) {
            var _this = this;
            console.log('rowData');
            console.log(rowData);
            this.decorateScope().grid.api.toggleMessage('Saving...');
            this.httpClient.put('academic/classroom', rowData, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                _this.decorateScope().grid.api.toggleMessage();
            }).error(function (response) {
                console.error(response);
                _this.decorateScope().grid.api.toggleMessage();
                _this.loadData();
            });
        };
        ClassRoomInfo.prototype.remove = function (rowData) {
            this.httpClient.doDelete('academic/classroom/' + rowData)
                .success(function () {
                $.notific8("Removed entry");
            }).error(function (data) {
                console.error(data);
            });
        };
        ClassRoomInfo.prototype.beforeShowEditForm = function (formId, gridElement) {
        };
        ClassRoomInfo.prototype.afterShowEditForm = function (formId, gridElement) {
        };
        ClassRoomInfo.prototype.decorateScope = function () {
            return this.$scope;
        };
        ClassRoomInfo.prototype.getColumnModel = function () {
            return [
                {
                    label: 'Room Id',
                    name: 'id',
                    hidden: true,
                    key: true
                },
                {
                    label: 'Room Number',
                    name: 'roomNo',
                    editable: true
                },
                {
                    label: 'Description',
                    name: 'description',
                    editable: true,
                    width: 200
                },
                {
                    label: 'Row',
                    name: 'totalRow',
                    editable: true
                },
                {
                    label: 'Column',
                    name: 'totalColumn',
                    width: 50,
                    editable: true
                },
                {
                    label: 'Capacity',
                    name: 'capacity',
                    editable: true
                },
                {
                    label: 'Room Type',
                    name: 'roomType',
                    editable: true,
                    align: 'center',
                    formatter: 'select',
                    edittype: 'select',
                    editoptions: {
                        value: '1:Theory;2:Sessional;0:Others',
                        defaultValue: 'Theory'
                    },
                    stype: 'select',
                    searchoptions: {
                        sopt: ['eq', 'ne'],
                        value: '1:Theory;2:Sessional;0:Others'
                    }
                },
                {
                    label: 'Dept./School',
                    name: 'dept_id',
                    editable: true,
                    width: 100, align: 'center', formatter: 'select',
                    edittype: 'select',
                    editoptions: {
                        value: this.appConstants.dept4JqGridSelectBox,
                        defaultValue: 'None'
                    },
                    stype: 'select',
                    searchoptions: {
                        sopt: ['eq', 'ne'],
                        value: this.appConstants.dept4JqGridSelectBox
                    }
                },
                {
                    label: 'Seat Plan',
                    name: 'examSeatPlan',
                    editable: true,
                    width: 80, align: 'center', formatter: 'checkbox',
                    edittype: 'checkbox', editoptions: { value: '1:0', defaultValue: '1' },
                    stype: 'select',
                    searchoptions: {
                        sopt: ['eq', 'ne'],
                        value: 'true:Yes;false:No'
                    }
                }
            ];
        };
        ClassRoomInfo.prototype.loadData = function () {
            var _this = this;
            this.httpClient.get("academic/classroom/all", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.initializeGrid();
                _this.$scope.classRoomData = response.rows;
            });
        };
        ClassRoomInfo.prototype.loadComplete = function () {
            alert("ifti");
        };
        ClassRoomInfo.$inject = ['appConstants', 'HttpClient', '$scope', 'departmentService'];
        return ClassRoomInfo;
    }());
    ums.ClassRoomInfo = ClassRoomInfo;
    ums.UMS.controller('ClassRoomInfo', ClassRoomInfo);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExamRoutine = (function () {
        function ExamRoutine(appConstants, httpClient, $scope, $q, notify, semesterService, examRoutineReportInfoService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.semesterService = semesterService;
            this.examRoutineReportInfoService = examRoutineReportInfoService;
            this.validationErrorMessage = "Please provide all information.";
            this.clearLocalStorage();
            $scope.data = {
                examTimeOptions: appConstants.examTime,
                ugPrograms: appConstants.ugPrograms
            };
            $scope.routine = {
                date_times: Array(),
                semester: 0,
                examType: 0,
                addButtonDisable: true,
                saveButtonDisable: true
            };
            $scope.reportParams = {
                examMethod: ums.Utils.EXAM_METHOD_OFFLINE,
                documentNo: "",
                examRoutinePublishDate: "",
                introduction: "",
                conclusion: "",
                signedByCoe: false,
                signedByAssistantCoe: false,
                copyInformationNecessaryAction: "",
                copyInformation: ""
            };
            $scope.loadingVisibility = false;
            $scope.addNewDateTime = this.addNewDateTime.bind(this);
            $scope.removeDateTime = this.removeDateTime.bind(this);
            $scope.addNewProgram = this.addNewProgram.bind(this);
            $scope.removeProgram = this.removeProgram.bind(this);
            $scope.addNewCourse = this.addNewCourse.bind(this);
            $scope.removeCourse = this.removeCourse.bind(this);
            $scope.programSelectionChanged = this.programSelectionChanged.bind(this);
            $scope.courseSelectionChanged = this.courseSelectionChanged.bind(this);
            $scope.saveByProgram = this.saveByProgram.bind(this);
            $scope.saveByDateTime = this.saveByDateTime.bind(this);
            $scope.saveAll = this.saveAll.bind(this);
            $scope.saveReportParameters = this.saveReportParameters.bind(this);
            $scope.editDateTime = this.editDateTime.bind(this);
            $scope.fetchSavedRoutine = this.fetchSavedRoutine.bind(this);
            $scope.downloadExamRoutine = this.downloadExamRoutine.bind(this);
            this.loadSemesters();
        }
        ExamRoutine.prototype.loadSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(ums.Utils.UG, 5).then(function (semesters) {
                _this.$scope.data.semesters = semesters;
                _this.$scope.routine.semester = semesters[0].id;
                _this.$scope.routine.examType = ums.Utils.EXAM_TYPE_REGULAR;
                _this.fetchSavedRoutine();
            });
        };
        ExamRoutine.prototype.fetchSavedRoutine = function () {
            var _this = this;
            this.clearCreateReportParametersModalData();
            this.$scope.routine.date_times = new Array();
            if (this.$scope.routine.semester == 0 || this.$scope.routine.examType == 0)
                return;
            this.$scope.loadingVisibility = true;
            this.getRoutine(this.$scope.routine.semester, this.$scope.routine.examType).then(function (dateTimeArr) {
                _this.$scope.routine.date_times = dateTimeArr;
                _this.$scope.loadingVisibility = false;
                _this.$scope.routine.addButtonDisable = false;
                _this.$scope.routine.saveButtonDisable = false;
                setTimeout(function () {
                    $('.select2-size').select2({
                        placeholder: "Select an option",
                        allowClear: true
                    });
                }, 1000);
            });
        };
        ExamRoutine.prototype.getRoutine = function (semester_id, exam_type) {
            var _this = this;
            this.examRoutineReportInfoService.getBySemesterIdAndExamType(semester_id, exam_type).then(function (res) {
                var reportParameter = {};
                reportParameter = res;
                if (!ums.Utils.isEmptyObject(reportParameter)) {
                    _this.$scope.reportParams.examMethod = reportParameter.examMethod;
                    _this.$scope.reportParams.documentNo = reportParameter.documentNo;
                    _this.$scope.reportParams.examRoutinePublishDate = reportParameter.examRoutinePublishDate;
                    _this.$scope.reportParams.introduction = reportParameter.introduction;
                    _this.$scope.reportParams.conclusion = reportParameter.conclusion;
                    _this.$scope.reportParams.signedByCoe = reportParameter.signedByCoe;
                    _this.$scope.reportParams.signedByAssistantCoe = reportParameter.signedByAssistantCoe;
                    _this.$scope.reportParams.copyInformationNecessaryAction = reportParameter.copyInformationNecessaryAction;
                    _this.$scope.reportParams.copyInformation = reportParameter.copyInformation;
                }
            });
            var semester = this.$scope.data.semesters[ums.Utils.findIndex(this.$scope.data.semesters, String(semester_id))];
            if (semester.status == ums.Utils.SEMESTER_STATUS_ACTIVE)
                this.$scope.data.editable = true;
            else
                this.$scope.data.editable = false;
            var defer = this.$q.defer();
            this.httpClient.get("academic/examroutine/semester/" + this.$scope.routine.semester + "/examtype/" + exam_type, this.appConstants.mimeTypeJson, function (json, etag) {
                var tempVar = json;
                if (tempVar.entries[0] == ']') {
                    var dateTimeArr = [];
                }
                else {
                    var dateTimeArr = eval(json.entries);
                }
                defer.resolve(dateTimeArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamRoutine.prototype.addNewDateTime = function () {
            var index = this.getAttributeMaxValueFromArray(this.$scope.routine.date_times);
            var item = this.getNewDateTimeRow(index);
            this.$scope.routine.date_times.splice(0, 0, item);
            var index = this.$scope.routine.date_times.length;
            index = index - 1;
            setTimeout(function () {
                $('#date_' + index).datepicker({ autoclose: true });
            }, 200);
        };
        ExamRoutine.prototype.removeDateTime = function (index) {
            var date_time_Arr = eval(this.$scope.routine.date_times);
            var targetIndex = this.findIndex(date_time_Arr, index);
            this.$scope.routine.date_times.splice(targetIndex, 1);
        };
        ExamRoutine.prototype.addNewProgram = function (index) {
            var date_time_Arr = eval(this.$scope.routine.date_times);
            var targetIndex = this.findIndex(date_time_Arr, index);
            var index = this.getAttributeMaxValueFromArray(this.$scope.routine.date_times[targetIndex].programs);
            var item = this.getNewProgramRow(index);
            this.$scope.routine.date_times[targetIndex].programs.splice(0, 0, item);
        };
        ExamRoutine.prototype.removeProgram = function (date_time_index, program_index) {
            var date_time_Arr = eval(this.$scope.routine.date_times);
            var dateTimeTargetIndex = this.findIndex(date_time_Arr, date_time_index);
            var program_Arr = eval(this.$scope.routine.date_times[dateTimeTargetIndex].programs);
            var programTargetIndex = this.findIndex(program_Arr, program_index);
            this.$scope.routine.date_times[dateTimeTargetIndex].programs.splice(programTargetIndex, 1);
        };
        ExamRoutine.prototype.addNewCourse = function (date_time_row_obj, program_row_obj) {
            var _this = this;
            var date_time_Arr = eval(this.$scope.routine.date_times);
            var dateTimeTargetIndex = this.findIndex(date_time_Arr, date_time_row_obj.index);
            var program_Arr = eval(this.$scope.routine.date_times[dateTimeTargetIndex].programs);
            var programTargetIndex = this.findIndex(program_Arr, program_row_obj.index);
            var index = this.getAttributeMaxValueFromArray(this.$scope.routine.date_times[dateTimeTargetIndex].programs[programTargetIndex].courses);
            var courseRow = this.getNewCourseRow(index);
            this.$scope.routine.date_times[dateTimeTargetIndex].programs[programTargetIndex].courses.splice(0, 0, courseRow);
            if (program_row_obj.programId == null)
                return;
            if (localStorage.getItem("program_courses_" + program_row_obj.programId) != null) {
                var courseArr = JSON.parse(localStorage.getItem("program_courses_" + program_row_obj.programId));
                this.$scope.routine.date_times[dateTimeTargetIndex].programs[programTargetIndex].courseArr = courseArr;
                setTimeout(function () {
                    $('#' + 'course_' + date_time_row_obj.index + program_row_obj.index + courseRow.index).select2({
                        placeholder: "Select an option",
                        allowClear: true
                    });
                }, 10);
                return;
            }
            this.getCourseArr(program_row_obj.programId).then(function (courseResponse) {
                _this.$scope.routine.date_times[dateTimeTargetIndex].programs[programTargetIndex].courseArr = courseResponse.courseArr;
                setTimeout(function () {
                    $('#' + 'course_' + date_time_row_obj.index + program_row_obj.index + courseRow.index).select2({
                        placeholder: "Select an option",
                        allowClear: true
                    });
                }, 10);
            });
        };
        ExamRoutine.prototype.removeCourse = function (date_time_index, program_index, course_index) {
            var date_time_Arr = eval(this.$scope.routine.date_times);
            var dateTimeTargetIndex = this.findIndex(date_time_Arr, date_time_index);
            var program_Arr = eval(this.$scope.routine.date_times[dateTimeTargetIndex].programs);
            var programTargetIndex = this.findIndex(program_Arr, program_index);
            var course_Arr = eval(this.$scope.routine.date_times[dateTimeTargetIndex].programs[programTargetIndex].courses);
            var courseTargetIndex = this.findIndex(course_Arr, course_index);
            this.$scope.routine.date_times[dateTimeTargetIndex].programs[programTargetIndex].courses.splice(courseTargetIndex, 1);
        };
        ExamRoutine.prototype.programSelectionChanged = function (program_obj_row, date_time) {
            var programName = (this.appConstants.ugProgramMap[program_obj_row.programId])[0];
            program_obj_row.programName = programName;
            for (var ind in program_obj_row.courses) {
                var course = program_obj_row.courses[ind];
                course.year = null;
                course.semester = null;
                course.title = null;
                course.no = null;
            }
            program_obj_row.courseArr = null;
            this.getCourseArr(program_obj_row.programId, program_obj_row).then(function (courseResponse) {
                localStorage["program_courses_" + courseResponse.program.programId] = JSON.stringify(courseResponse.courseArr);
                program_obj_row.courseArr = courseResponse.courseArr;
            });
            setTimeout(function () {
                for (var ind in program_obj_row.courses) {
                    $("#course_" + date_time.index + program_obj_row.index + ind).select2("destroy").select2("val", "");
                    $("#course_" + date_time.index + program_obj_row.index + ind).select2({
                        placeholder: "Select an option",
                        allowClear: true
                    });
                }
            }, 100);
        };
        ExamRoutine.prototype.findIndex = function (source_arr, target_index) {
            var targetIndex = -1;
            for (var i = 0; i < source_arr.length; i++) {
                if (source_arr[i].index == target_index) {
                    targetIndex = i;
                    break;
                }
            }
            return targetIndex;
        };
        ExamRoutine.prototype.getNewDateTimeRow = function (index) {
            var dateTimeRow = {
                readOnly: false,
                index: index,
                examDate: '',
                appDeadLineStr: '',
                examTime: '9:30 a.m. to 12:30 p.m',
                examGroup: 1,
                programs: Array()
            };
            return dateTimeRow;
        };
        ExamRoutine.prototype.getNewProgramRow = function (index) {
            var programRow = {
                readOnly: true,
                index: index,
                programId: null,
                programName: '',
                courses: Array(),
                courseArr: Array()
            };
            return programRow;
        };
        ExamRoutine.prototype.getNewCourseRow = function (index) {
            var courseRow = {
                readOnly: false,
                index: index,
                id: '',
                no: '',
                title: '',
                year: null,
                semester: null,
                pairCourseId: ''
            };
            return courseRow;
        };
        ExamRoutine.prototype.getCourseArr = function (program_id, program) {
            var _this = this;
            var defer = this.$q.defer();
            var courseArr;
            if (localStorage.getItem("program_courses_" + program_id) != null) {
                var courseArr = JSON.parse(localStorage.getItem("program_courses_" + program_id));
                defer.resolve({ program: program, courseArr: courseArr });
                return defer.promise;
            }
            this.httpClient.get('academic/course/semester/' + this.$scope.routine.semester + '/program/' + program_id, 'application/json', function (json, etag) {
                courseArr = json.entries;
                _this.$scope.courseArr = courseArr;
                localStorage["program_courses_" + program_id] = JSON.stringify(courseArr);
                defer.resolve({ program: program, courseArr: courseArr });
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ExamRoutine.prototype.courseSelectionChanged = function (program_row, course_row, selected_course_id) {
            var courseArr = JSON.parse(localStorage.getItem("program_courses_" + program_row.programId));
            var course = this.arrayLookup(courseArr, 'id', selected_course_id);
            course_row.year = course.year;
            course_row.semester = course.semester;
            course_row.title = course.title;
            course_row.id = course.id;
            course_row.no = course.no;
        };
        ExamRoutine.prototype.arrayLookup = function (array, prop, val) {
            for (var i = 0, len = array.length; i < len; i++) {
                if (array[i].hasOwnProperty(prop) && array[i][prop] === val) {
                    return array[i];
                }
            }
            return null;
        };
        ExamRoutine.prototype.saveByDateTime = function (date_time) {
            var _this = this;
            console.log(date_time);
            var validate = true;
            validate = this.validateExamRoutine([date_time]);
            if (validate == false) {
                this.notify.error(this.validationErrorMessage);
                return;
            }
            var json = this.convertToJson([date_time], "byDateTime");
            this.saveRoutine(json).then(function (message) {
                _this.notify.success(message);
                _this.readOnlyRow([date_time]);
            });
        };
        ExamRoutine.prototype.saveByProgram = function (date_time, program) {
            var _this = this;
            var dateTimeRow = {
                readOnly: false,
                index: date_time.index,
                examDate: date_time.examDate,
                appDeadLineStr: date_time.appDeadLineStr,
                examTime: date_time.examTime,
                examGroup: date_time.examGroup,
                programs: [program]
            };
            var validate = true;
            validate = this.validateExamRoutine([dateTimeRow]);
            if (validate == false) {
                this.notify.error(this.validationErrorMessage);
                return;
            }
            var json = this.convertToJson([dateTimeRow], "byProgram");
            this.saveRoutine(json).then(function (message) {
                _this.notify.success(message);
                _this.readOnlyRow([date_time]);
            });
        };
        ExamRoutine.prototype.saveAll = function () {
            var _this = this;
            var validate = true;
            var validate = this.validateExamRoutine(this.$scope.routine.date_times);
            if (validate == false) {
                this.notify.error(this.validationErrorMessage);
                return;
            }
            var json = this.convertToJson(this.$scope.routine.date_times, "all");
            this.saveRoutine(json).then(function (message) {
                _this.notify.success(message);
                _this.readOnlyRow(_this.$scope.routine.date_times);
            });
        };
        ExamRoutine.prototype.saveReportParameters = function () {
            var _this = this;
            var json = this.convertToJsonForReportParamsSubmit();
            if (this.validateReportParamFields()) {
                this.examRoutineReportInfoService.saveExamRoutineReportParameters(json, this.$scope.routine.semester, this.$scope.routine.examType, this.$scope.reportParams.examMethod).then(function (data) {
                    _this.clearCreateReportParametersModalData();
                });
            }
            else {
                this.notify.error(this.validationErrorMessage);
            }
        };
        ExamRoutine.prototype.validateReportParamFields = function () {
            if (this.$scope.routine.semester != 0 && this.$scope.routine.examType != 0 && this.$scope.reportParams.examMethod != 0 &&
                this.$scope.reportParams.documentNo.length > 0 && this.$scope.reportParams.examRoutinePublishDate.length > 0 && this.$scope.reportParams.introduction.length > 0
                && this.$scope.reportParams.conclusion.length > 0 && this.$scope.reportParams.copyInformationNecessaryAction.length > 0
                && this.$scope.reportParams.copyInformation.length > 0) {
                return true;
            }
            return false;
        };
        ExamRoutine.prototype.clearCreateReportParametersModalData = function () {
            this.$scope.reportParams.examMethod = ums.Utils.EXAM_METHOD_OFFLINE;
            this.$scope.reportParams.documentNo = "";
            this.$scope.reportParams.examRoutinePublishDate = "";
            this.$scope.reportParams.introduction = "";
            this.$scope.reportParams.conclusion = "";
            this.$scope.reportParams.signedByCoe = false;
            this.$scope.reportParams.signedByAssistantCoe = false;
            this.$scope.reportParams.copyInformationNecessaryAction = "";
            this.$scope.reportParams.copyInformation = "";
        };
        ExamRoutine.prototype.saveRoutine = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put('academic/examroutine/semester/' + this.$scope.routine.semester + '/examtype/' + this.$scope.routine.examType, json, 'application/json')
                .success(function () {
                defer.resolve('Successfully Saved Exam Routine.');
            }).error(function (data) {
            });
            return defer.promise;
        };
        ExamRoutine.prototype.readOnlyRow = function (date_time_arr) {
            for (var ind in date_time_arr) {
                var date_time_row_obj = date_time_arr[ind];
                date_time_row_obj.readOnly = true;
            }
        };
        ExamRoutine.prototype.convertToJson = function (dateTimeArr, insertType) {
            var jsonObj = [];
            for (var indx_date_time in dateTimeArr) {
                for (var indx_program in dateTimeArr[indx_date_time].programs) {
                    var program = dateTimeArr[indx_date_time].programs[indx_program];
                    for (var indx_course in program.courses) {
                        var course = program.courses[indx_course];
                        var item = {};
                        item["date"] = dateTimeArr[indx_date_time].examDate;
                        item["time"] = dateTimeArr[indx_date_time].examTime;
                        item["group"] = dateTimeArr[indx_date_time].examGroup;
                        item["program"] = Number(program.programId);
                        item["course"] = course.id;
                        item["appDeadLineStr"] = dateTimeArr[indx_date_time].appDeadLineStr;
                        jsonObj.push(item);
                    }
                }
            }
            var complete_json = {};
            complete_json["entries"] = jsonObj;
            complete_json["semesterId"] = this.$scope.routine.semester;
            complete_json["examType"] = this.$scope.routine.examType;
            complete_json["insertType"] = insertType;
            return complete_json;
        };
        ExamRoutine.prototype.convertToJsonForReportParamsSubmit = function () {
            var jsonObj = [];
            var item = {};
            item["semesterId"] = this.$scope.routine.semester;
            item["examType"] = this.$scope.routine.examType;
            item["examMethod"] = this.$scope.reportParams.examMethod;
            item["documentNo"] = this.$scope.reportParams.documentNo;
            item["examRoutinePublishDate"] = this.$scope.reportParams.examRoutinePublishDate;
            item["introduction"] = this.$scope.reportParams.introduction;
            item["conclusion"] = this.$scope.reportParams.conclusion;
            item["signedByCoe"] = this.$scope.reportParams.signedByCoe;
            item["signedByAssistantCoe"] = this.$scope.reportParams.signedByAssistantCoe;
            item["copyInformationNecessaryAction"] = this.$scope.reportParams.copyInformationNecessaryAction;
            item["copyInformation"] = this.$scope.reportParams.copyInformation;
            jsonObj.push(item);
            var complete_json = {};
            complete_json["entries"] = jsonObj;
            return complete_json;
        };
        ExamRoutine.prototype.validateExamRoutine = function (dateTimeArr) {
            var validate = true;
            for (var ind_date_time in dateTimeArr) {
                var dateTimeRow = dateTimeArr[ind_date_time];
                if (dateTimeRow.programs.length == 0) {
                    validate = false;
                    validate = this.validateFields("date", dateTimeRow, dateTimeRow.index, null, null) && validate;
                }
                else {
                    validate = this.validateDateTime(dateTimeRow) && validate;
                }
            }
            return validate;
        };
        ExamRoutine.prototype.validateDateTime = function (dateTime) {
            var validate = true;
            var indx_date_time = dateTime.index;
            validate = this.validateFields("date", dateTime.examDate, indx_date_time, null, null) && validate;
            for (var ind in dateTime.programs) {
                var program = dateTime.programs[ind];
                validate = this.validateFields("program", program.programId, indx_date_time, program.index, null) && validate;
                if (program.courses.length == 0) {
                    validate = false;
                }
                else {
                    for (var ind in program.courses) {
                        var course = program.courses[ind];
                        validate = this.validateFields("year", course.year, indx_date_time, program.index, course.index) && validate;
                        validate = this.validateFields("semester", course.semester, indx_date_time, program.index, course.index) && validate;
                        validate = this.validateFields("course", course.id, indx_date_time, program.index, course.index) && validate;
                    }
                }
            }
            return validate;
        };
        ExamRoutine.prototype.validateFields = function (field_prefix, value, indx_date_time, indx_program, indx_course) {
            var element;
            var validate = true;
            if (field_prefix == "date") {
                element = $("#" + field_prefix + "_" + indx_date_time);
                if (value == "") {
                    this.putKoColor(element);
                    validate = false;
                }
                else {
                    this.putOkColor(element);
                    validate = true;
                }
            }
            else if (field_prefix == "program") {
                element = $("#" + field_prefix + "_" + indx_date_time + indx_program);
                if (value == null) {
                    this.putKoColor(element);
                    validate = false;
                }
                else {
                    this.putOkColor(element);
                    validate = true;
                }
            }
            else if (field_prefix == "year") {
                element = $("#" + field_prefix + "_" + indx_date_time + indx_program + indx_course);
                if (value == null) {
                    this.putKoColor(element);
                    validate = false;
                }
                else {
                    this.putOkColor(element);
                    validate = true;
                }
            }
            else if (field_prefix == "semester") {
                element = $("#" + field_prefix + "_" + indx_date_time + indx_program + indx_course);
                if (value == null) {
                    this.putKoColor(element);
                    validate = false;
                }
                else {
                    this.putOkColor(element);
                    validate = true;
                }
            }
            else if (field_prefix == "course") {
                element = $("#" + field_prefix + "_" + indx_date_time + indx_program + indx_course);
                if (value == "") {
                    this.putKoColor(element);
                    validate = false;
                }
                else {
                    this.putOkColor(element);
                    validate = true;
                }
            }
            return validate;
        };
        ExamRoutine.prototype.putOkColor = function (element) {
            element.parent().css("background-color", "transparent");
        };
        ExamRoutine.prototype.putKoColor = function (element) {
            element.parent().css("background-color", "#E6A9EC");
        };
        ExamRoutine.prototype.getAttributeMaxValueFromArray = function (array) {
            var val = 0;
            if (array.length != 0)
                val = Math.max.apply(Math, array.map(function (o) {
                    return o.index;
                })) + 1;
            return val;
        };
        ExamRoutine.prototype.editDateTime = function (date_time_row_obj) {
            this.showOverlay(date_time_row_obj.index);
            var that = this;
            setTimeout(function () {
                date_time_row_obj.readOnly = false;
                for (var ind in date_time_row_obj.programs) {
                    var program = date_time_row_obj.programs[ind];
                    that.getCourseArr(program.programId, program).then(function (courseResponse) {
                        var courseArr = courseResponse.courseArr;
                        courseResponse.program.courseArr = courseArr;
                    });
                }
                setTimeout(function () {
                    that.setSelect2Courses(date_time_row_obj);
                }, 500);
            }, 500);
        };
        ExamRoutine.prototype.setSelect2Courses = function (date_time_row_obj) {
            for (var ind1 in date_time_row_obj.programs) {
                var program = date_time_row_obj.programs[ind1];
                $("#program_" + date_time_row_obj.index + program.index).val(program.programId + '');
                for (var ind2 in program.courses) {
                    var course = program.courses[ind2];
                    $("#course_" + date_time_row_obj.index + program.index + course.index).val(course.id).trigger("change");
                }
            }
            this.hideOverlay(date_time_row_obj);
        };
        ExamRoutine.prototype.showOverlay = function (rowIndex) {
            var $divOverlay = $('#divOverlay');
            var bottomWidth = $("#row" + rowIndex).css('width');
            var bottomHeight = $("#row" + rowIndex).css('height');
            var rowPos = $("#row" + rowIndex).position();
            var bottomTop = rowPos.top;
            var bottomLeft = rowPos.left;
            $divOverlay.css({
                position: 'absolute',
                top: bottomTop,
                left: bottomLeft,
                width: '95%',
                height: bottomHeight
            });
            $('#info').text('Top: ' + bottomTop + ' Left: ' + bottomLeft);
            $divOverlay.delay(100).slideDown('fast');
        };
        ExamRoutine.prototype.hideOverlay = function (date_time_row_obj) {
            var $divOverlay = $('#divOverlay');
            $divOverlay.hide(100);
        };
        ExamRoutine.prototype.clearLocalStorage = function () {
            for (var indx in this.appConstants.ugPrograms) {
                localStorage.removeItem("program_courses_" + this.appConstants.ugPrograms[indx].programs[0].programId);
            }
        };
        ExamRoutine.prototype.downloadExamRoutine = function (fileType) {
            var fileName = "Exam_Routine_" + this.$scope.routine.semester + "_" + this.$scope.routine.examType;
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get("ugExamRoutineReport/pdf/semester/" + this.$scope.routine.semester + "/examType/" + this.$scope.routine.examType + "/examMethod/" + this.$scope.reportParams.examMethod, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ExamRoutine.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', 'semesterService', 'examRoutineReportInfoService'];
        return ExamRoutine;
    }());
    ums.ExamRoutine = ExamRoutine;
    ums.UMS.controller('ExamRoutine', ExamRoutine);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExamRoutineReportInfoService = (function () {
        function ExamRoutineReportInfoService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        ExamRoutineReportInfoService.prototype.saveExamRoutineReportParameters = function (json, semesterId, examType, examMethod) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put("academic/examRoutineReportInfo/semesterId/" + semesterId + "/examType/" + examType + "/examMethod/" + examMethod, json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved Exam Routine Report Parameters");
                defer.resolve('success');
            })
                .error(function (data) {
                _this.notify.error("Problem in saving Exam Routine Report Parameters data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        ExamRoutineReportInfoService.prototype.getBySemesterIdAndExamType = function (semesterId, examType) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("academic/examRoutineReportInfo/getBySemesterIdAndExamType/semesterId/" + semesterId + "/examType/" + examType, "application/json", function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                _this.notify.error("Problem in fetching Report Parameters data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        ExamRoutineReportInfoService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return ExamRoutineReportInfoService;
    }());
    ums.ExamRoutineReportInfoService = ExamRoutineReportInfoService;
    ums.UMS.service("examRoutineReportInfoService", ExamRoutineReportInfoService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExamRoutineStudent = (function () {
        function ExamRoutineStudent($scope, httpClient, deviceDetector, userService, $q, $location, studentService, examRoutineService, semesterService) {
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.deviceDetector = deviceDetector;
            this.userService = userService;
            this.$q = $q;
            this.$location = $location;
            this.studentService = studentService;
            this.examRoutineService = examRoutineService;
            this.semesterService = semesterService;
            this.examRoutine = [];
            this.show_table = false;
            this.enroleStudent = false;
        }
        ExamRoutineStudent.prototype.fetchStudentInformation = function () {
            var _this = this;
            this.studentService.getStudentProfile().then(function (student) {
                _this.student = student;
                _this.semesterService.getActiveSemester(Number(_this.programId)).then(function (semesters) {
                    _this.activeSemester = semesters.id;
                    _this.semesterfinal_error_message = false;
                    _this.semester_name = _this.student.currentEnrolledSemesterName;
                    _this.semesterId = _this.student.currentEnrolledSemesterId;
                    _this.programId = _this.student.programId;
                    _this.year = _this.student.year;
                    _this.semester = _this.student.academicSemester;
                    if (_this.semesterId == _this.activeSemester) {
                        if (_this.exam_type == ums.Utils.EXAM_TYPE_REGULAR) {
                            if (_this.student.status == '1') {
                                _this.examRoutineService.getSemesterfinalExamRoutineForStudent(_this.activeSemester, _this.exam_type, Number(_this.programId), _this.year, _this.semester).then(function (examRoutine) {
                                    _this.examRoutine = examRoutine;
                                    _this.exam_name = 'Semester Final';
                                    if (_this.examRoutine.length == 0) {
                                        _this.error_message_show = true;
                                        _this.cci_error_message = false;
                                        _this.semesterfinal_error_message = false;
                                        _this.semesterfinal_error_message = false;
                                    }
                                    else {
                                        _this.error_message_show = false;
                                        _this.show_table = true;
                                        _this.cci_error_message = false;
                                        _this.semesterfinal_error_message = false;
                                    }
                                });
                            }
                            else {
                                _this.error_message_show = false;
                                _this.show_table = false;
                                _this.cci_error_message = false;
                                _this.semesterfinal_error_message = true;
                            }
                        }
                        else if (_this.exam_type == ums.Utils.EXAM_TYPE_CCI) {
                            _this.examRoutineService.CCIExamRoutineForStudent(_this.student.id, _this.activeSemester, ums.Utils.EXAM_TYPE_CCI, Number(_this.programId), _this.year, _this.semester).then(function (examRoutine) {
                                _this.examRoutine = examRoutine;
                                _this.exam_name = 'Carry/Clearance/Improvement ';
                                if (_this.examRoutine.length == 0) {
                                    _this.error_message_show = false;
                                    _this.cci_error_message = true;
                                    _this.show_table = false;
                                    _this.semesterfinal_error_message = false;
                                }
                                else {
                                    _this.error_message_show = false;
                                    _this.cci_error_message = false;
                                    _this.show_table = true;
                                    _this.semesterfinal_error_message = false;
                                }
                            });
                        }
                    }
                    else {
                        _this.error_message_show = false;
                        _this.cci_error_message = false;
                        _this.show_table = false;
                        _this.semesterfinal_error_message = false;
                        _this.enroleStudent = true;
                        console.log(_this.enroleStudent);
                    }
                });
            });
        };
        ExamRoutineStudent.prototype.downloadRoutineReport = function () {
            this.examRoutineService.getStudentExamRoutineReport(this.exam_type);
        };
        ExamRoutineStudent.prototype.examtypeselect = function (id) {
            this.exam_type = id;
            if (this.exam_type == 1) {
                this.fetchStudentInformation();
            }
            else if (this.exam_type == 2) {
                this.fetchStudentInformation();
            }
            else {
                this.error_message_show = false;
                this.cci_error_message = false;
                this.show_table = false;
                this.semesterfinal_error_message = false;
            }
        };
        ExamRoutineStudent.$inject = ['$scope', 'HttpClient', 'deviceDetector', 'userService', '$q', '$location', 'studentService', 'examRoutineService', 'semesterService'];
        return ExamRoutineStudent;
    }());
    ums.ExamRoutineStudent = ExamRoutineStudent;
    ums.UMS.controller('ExamRoutineStudent', ExamRoutineStudent);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentAdviser = (function () {
        function StudentAdviser(appConstants, httpClient, $scope, $q, $window, notify, semesterService, employeeService, studentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.$window = $window;
            this.notify = notify;
            this.semesterService = semesterService;
            this.employeeService = employeeService;
            this.studentService = studentService;
            this.anchorPrefix = ".btn.btn-xs.btn-default.";
            $scope.showLoader = false;
            $scope.bulkShowStudentId = true;
            $scope.bulkShowStudentName = false;
            $scope.shiftShowStudentId = true;
            $scope.shiftShowStudentName = false;
            $scope.showAdviserName = false;
            $scope.shiftOptionSelected = false;
            $scope.changeOptionSelected = false;
            $scope.bulkAssignmentOptionSelected = false;
            $scope.showShiftUI = this.showShiftUI.bind(this);
            $scope.showSingleStudentUI = this.showSingleStudentUI.bind(this);
            $scope.showBulkAssignmentUI = this.showBulkAssignmentUI.bind(this);
            $scope.getActiveTeachers = this.getActiveTeachers.bind(this);
            $scope.getActiveStudentsOfDept = this.getActiveStudentsOfDept.bind(this);
            $scope.addAStudent = this.addAStudent.bind(this);
            $scope.removeFromAddedList = this.removeFromAddedList.bind(this);
            $scope.removeFromBulkStudents = this.removeFromBulkStudents.bind(this);
            $scope.addStudents = this.addStudents.bind(this);
            $scope.viewStudentById = this.viewStudentById.bind(this);
            $scope.viewStudentByIdAndName = this.viewStudentByIdAndName.bind(this);
            $scope.clearBulkStudents = this.clearBulkStudents.bind(this);
            $scope.saveSingleStudentAdvisor = this.saveSingleStudentAdvisor.bind(this);
            $scope.saveAdvisorForBulkStudents = this.saveAdvisorForBulkStudents.bind(this);
            $scope.getStudentsOfTheFirstTeacher = this.getStudentsOfTheFirstTeacher.bind(this);
            $scope.getStudentsOfTheSecondTeacher = this.getStudentsOfTheSecondTeacher.bind(this);
            $scope.changeColor = this.changeColor.bind(this);
            $scope.saveAdvisorShifting = this.saveAdvisorShifting.bind(this);
            $scope.resetShiftStudentSelection = this.resetShiftStudentSelection.bind(this);
            $scope.viewStudentByYearSemester = this.viewStudentByYearSemester.bind(this);
            $scope.viewStudentWithoutYearSemester = this.viewStudentWithoutYearSemester.bind(this);
            $scope.getExistingStudentsOfAdviser = this.getExistingStudentsOfAdviser.bind(this);
            $scope.toggleAdvisorInfo = this.toggleAdvisorInfo.bind(this);
            $scope.searchSingleStudent = this.searchSingleStudent.bind(this);
            $scope.initializeShiftingStudents = this.initializeShiftingStudents.bind(this);
            $scope.redirectToViewDownloadPage = this.redirectToViewDownloadPage.bind(this);
            $scope.redirectToSectionViewDownloadPage = this.redirectToSectionViewDownloadPage.bind(this);
            $scope.categorizedFormStudents = [];
            $scope.categorizedToStudents = [];
            $('.selectpicker').selectpicker({
                iconBase: 'fa',
                tickIcon: 'fa-check'
            });
            $("#shift").hide();
            $("#change").hide();
            $("#bulk").hide();
            this.initialize();
            setTimeout(this.$scope.showBulkAssignmentUI(), 500);
        }
        StudentAdviser.prototype.initializeSelect2 = function (selectBoxId, studentIds) {
            var data = studentIds;
            $("#" + selectBoxId).select2({
                minimumInputLength: 2,
                query: function (options) {
                    var pageSize = 100;
                    var startIndex = (options.page - 1) * pageSize;
                    var filteredData = data;
                    if (options.term && options.term.length > 0) {
                        if (!options.context) {
                            var term = options.term.toLowerCase();
                            options.context = data.filter(function (metric) {
                                return (metric.id.indexOf(term) !== -1);
                            });
                        }
                        filteredData = options.context;
                    }
                    options.callback({
                        context: filteredData,
                        results: filteredData.slice(startIndex, startIndex + pageSize),
                        more: (startIndex + pageSize) < filteredData.length
                    });
                },
                placeholder: "Select a Student"
            });
            // Her is the exmaple code for select2 with pagination.....
            //http://jsfiddle.net/Z7bDG/1/
        };
        StudentAdviser.prototype.showSingleStudentUI = function () {
            this.activateUI(1);
            this.resetMainSelections();
            this.setSelection("singleAnchor", "singleIcon");
            this.$scope.selectedOptionTitle = "View/Change Student's Advisor Information";
        };
        StudentAdviser.prototype.showBulkAssignmentUI = function () {
            this.activateUI(2);
            this.resetMainSelections();
            this.setSelection("bulkAnchor", "bulkIcon");
            this.$scope.selectedOptionTitle = "Bulk Advisor Assignment";
        };
        StudentAdviser.prototype.showShiftUI = function () {
            this.activateUI(3);
            this.resetMainSelections();
            this.setSelection("shiftingAnchor", "shiftingIcon");
            this.$scope.selectedOptionTitle = "Shift Students' Advisor Information";
            this.$scope.showStudentsByYearSemester = false;
        };
        StudentAdviser.prototype.setSelection = function (icon1, icon2) {
            $(this.anchorPrefix + icon1).css({ "background-color": "black" });
            $(".fa." + icon2).css({ "color": "white" });
        };
        StudentAdviser.prototype.resetMainSelections = function () {
            $(this.anchorPrefix + "singleAnchor").css({ "background-color": "white" });
            $(this.anchorPrefix + "bulkAnchor").css({ "background-color": "white" });
            $(this.anchorPrefix + "shiftingAnchor").css({ "background-color": "white" });
            $(".fa.singleIcon").css({ "color": "black" });
            $(".fa.bulkIcon").css({ "color": "black" });
            $(".fa.shiftingIcon").css({ "color": "black" });
        };
        StudentAdviser.prototype.resetSubSelection = function (type) {
            if (type == "bulk_id_name") {
                $(this.anchorPrefix + "bulkStudentIdAnchor").css({ "background-color": "white" });
                $(".fa.fa-user.bulkStudentIdIcon").css({ "color": "black" });
                $(this.anchorPrefix + "bulkStudentNameAnchor").css({ "background-color": "white" });
                $(".fa.fa-indent.bulkStudentNameIcon").css({ "color": "black" });
            }
            else if (type == "shift_id_name") {
                $(this.anchorPrefix + "shiftStudentIdAnchor").css({ "background-color": "white" });
                $(".fa.fa-user.shiftStudentIdIcon").css({ "color": "black" });
                $(this.anchorPrefix + "shiftStudentNameAnchor").css({ "background-color": "white" });
                $(".fa.fa-indent.shiftStudentNameIcon").css({ "color": "black" });
            }
            else if (type == "year_semester") {
                $(this.anchorPrefix + "yearSemesterAnchor").css({ "background-color": "white" });
                $(".fa-th.yearSemesterIcon").css({ "color": "black" });
                $(this.anchorPrefix + "yearSemesterClearAnchor").css({ "background-color": "white" });
                $(".fa-align-justify.yearSemesterClearIcon").css({ "color": "black" });
            }
            else if (type == "advisor") {
                $(this.anchorPrefix + "showAdvisorAnchor").css({ "background-color": "white" });
                $(".fa.fa-sa.showAdvisorIcon").css({ "color": "black" });
                $(this.anchorPrefix + "hideAdvisorAnchor").css({ "background-color": "white" });
                $(".fa.fa-ha.hideAdvisorIcon").css({ "color": "black" });
            }
        };
        StudentAdviser.prototype.activateUI = function (activateNumber) {
            var _this = this;
            this.disableAllUI().then(function (message) {
                if (activateNumber == 1) {
                    _this.$scope.changeOptionSelected = true;
                    $("#shift").hide();
                    $("#change").show();
                    $("#bulk").hide();
                }
                else if (activateNumber == 2) {
                    _this.$scope.bulkAssignmentOptionSelected = true;
                    $("#shift").hide();
                    $("#change").hide();
                    $("#bulk").show();
                }
                else {
                    _this.$scope.shiftOptionSelected = true;
                    $("#shift").show();
                    $("#change").hide();
                    $("#bulk").hide();
                }
            });
        };
        StudentAdviser.prototype.initialize = function () {
            this.$scope.addedBulkStudentMap = {};
            this.$scope.addedShiftStudentMap = {};
            this.$scope.existingStudentsOfAdivser = [];
            this.$scope.bulkSelectedStudents = [];
            this.$scope.shiftSelectedStudents = [];
            this.$scope.selectedTeacher = "";
            this.$scope.fromStudents = [];
            this.$scope.toStudents = [];
            this.$scope.fromTeacherId = "";
            this.$scope.toTeacherId = "";
            this.$scope.teacherId = "";
            this.$scope.singleTeacher = {};
        };
        StudentAdviser.prototype.viewStudentById = function (prefix) {
            if (prefix == "bulk") {
                this.$scope.bulkShowStudentId = true;
                this.$scope.bulkShowStudentName = false;
            }
            else if (prefix == "shift") {
                this.$scope.shiftShowStudentId = true;
                this.$scope.shiftShowStudentName = false;
                this.$scope.showStudentsByYearSemester = false;
            }
            this.resetSubSelection(prefix + "_id_name");
            this.setSelection(prefix + "StudentIdAnchor", "fa-user." + prefix + "StudentIdIcon");
        };
        StudentAdviser.prototype.viewStudentByIdAndName = function (prefix) {
            if (prefix == "bulk") {
                this.$scope.bulkShowStudentId = false;
                this.$scope.bulkShowStudentName = true;
            }
            else if (prefix == "shift") {
                this.$scope.shiftShowStudentId = false;
                this.$scope.shiftShowStudentName = true;
                //this.$scope.showStudentsByYearSemester=false;
            }
            this.resetSubSelection(prefix + "_id_name");
            this.setSelection(prefix + "StudentNameAnchor", "fa-indent." + prefix + "StudentNameIcon");
        };
        StudentAdviser.prototype.viewStudentByYearSemester = function () {
            this.$scope.showStudentsByYearSemester = true;
            this.resetSubSelection("year_semester");
            this.setSelection("yearSemesterAnchor", "fa-th.yearSemesterIcon");
        };
        StudentAdviser.prototype.viewStudentWithoutYearSemester = function () {
            this.$scope.showStudentsByYearSemester = false;
            this.resetSubSelection("year_semester");
            this.setSelection("yearSemesterClearAnchor", "fa-align-justify.yearSemesterClearIcon");
        };
        StudentAdviser.prototype.toggleAdvisorInfo = function (action) {
            if (action == "show") {
                this.$scope.showAdviserName = true;
                this.resetSubSelection("advisor");
                this.setSelection("showAdvisorAnchor", "fa-sa.showAdvisorIcon");
            }
            else {
                this.$scope.showAdviserName = false;
                this.resetSubSelection("advisor");
                this.setSelection("hideAdvisorAnchor", "fa-ha.hideAdvisorIcon");
            }
        };
        StudentAdviser.prototype.changeColor = function (student) {
            if (student.backgroundColor == ums.Utils.SELECTED_COLOR)
                student.backgroundColor = ums.Utils.DEFAULT_COLOR;
            else
                student.backgroundColor = ums.Utils.SELECTED_COLOR;
        };
        StudentAdviser.prototype.saveSingleStudentAdvisor = function () {
            var _this = this;
            this.convertToJson([this.$scope.singleStudent], this.$scope.singleTeacher.id).then(function (jsonData) {
                _this.studentService.updateStudentsAdviser(jsonData).then(function (data) {
                    if (data == "success")
                        _this.$scope.singleStudent.adviser = _this.$scope.singleTeacher.id;
                    _this.$scope.singleTeacher.id = "";
                });
            });
        };
        StudentAdviser.prototype.saveAdvisorForBulkStudents = function () {
            var _this = this;
            if (this.$scope.bulkTeacher.id == null) {
                this.notify.error("Please select an advisor.");
                return;
            }
            this.convertToJson(this.$scope.bulkSelectedStudents, this.$scope.bulkTeacher.id).then(function (jsonData) {
                _this.studentService.updateStudentsAdviser(jsonData).then(function (data) {
                    if (data == "success") {
                        for (var i = 0; i < _this.$scope.bulkSelectedStudents.length; i++)
                            _this.$scope.bulkSelectedStudents[i].adviser = _this.$scope.bulkTeacher.id;
                    }
                    _this.clearBulkStudents();
                    _this.getExistingStudentsOfAdviser(_this.$scope.bulkTeacher.id);
                });
            });
        };
        StudentAdviser.prototype.initializeShiftingStudents = function (teacherType) {
            var defer = this.$q.defer();
            if (teacherType == "from") {
                this.$scope.fromStudents = [];
                this.$scope.categorizedFormStudents = [];
            }
            else if (teacherType == "to") {
                this.$scope.toStudents = [];
                this.$scope.categorizedToStudents = [];
            }
            defer.resolve("success");
            return defer.promise;
        };
        StudentAdviser.prototype.resetShiftStudentSelection = function () {
            for (var i = 0; i < this.$scope.fromStudents.length; i++) {
                if (this.$scope.fromStudents[i].backgroundColor == ums.Utils.SELECTED_COLOR) {
                    this.$scope.fromStudents[i].backgroundColor = ums.Utils.DEFAULT_COLOR;
                }
            }
        };
        StudentAdviser.prototype.addFromStudentsAndAssignTeacher = function () {
            var defer = this.$q.defer();
            var shiftSelectedStudents = [];
            for (var i = 0; i < this.$scope.fromStudents.length; i++) {
                if (this.$scope.fromStudents[i].backgroundColor == ums.Utils.SELECTED_COLOR) {
                    shiftSelectedStudents.push(this.$scope.fromStudents[i]);
                }
            }
            defer.resolve(shiftSelectedStudents);
            return defer.promise;
        };
        StudentAdviser.prototype.removeFromAddedList = function (student) {
            for (var i = 0; i < this.$scope.bulkSelectedStudents.length; i++) {
                if (this.$scope.bulkSelectedStudents[i] == student) {
                    this.$scope.bulkSelectedStudents.splice(i, 1);
                }
            }
        };
        StudentAdviser.prototype.removeFromBulkStudents = function (student) {
            for (var i = 0; i < this.$scope.bulkSelectedStudents.length; i++) {
                if (this.$scope.bulkSelectedStudents[i] == student) {
                    this.$scope.addedBulkStudentMap[student.id] = null;
                    this.$scope.bulkSelectedStudents.splice(i, 1);
                }
            }
        };
        StudentAdviser.prototype.getStudentsOfTheFirstTeacher = function (teacherId) {
            var _this = this;
            if (teacherId == null || teacherId == "")
                return;
            this.$scope.fromTeacherId = teacherId;
            if (this.$scope.fromStudents.length == 0) {
                this.getStudentsOfTeacher(teacherId, 1).then(function (students) {
                });
            }
            else {
                this.initializeShiftingStudents("from").then(function (data) {
                    _this.getStudentsOfTeacher(teacherId, 1).then(function (students) {
                    });
                });
            }
        };
        StudentAdviser.prototype.insertIntoFromStudentsWithYearSemester = function (student) {
            var header = student.year + " Year," + student.academicSemester + " Semester";
            var key = Number(String(student.year) + "" + (String(student.academicSemester)));
            if (this.$scope.categorizedFormStudents.length == 0) {
                this.$scope.categorizedFormStudents.push(this.pushNewValueIntoCategorizedStudents(student, header, key));
            }
            else {
                var foundKey = false;
                for (var i = 0; i < this.$scope.categorizedFormStudents.length; i++) {
                    if (this.$scope.categorizedFormStudents[i].key == key) {
                        this.pushStudentIntoExistingCategorizedStudents(student, this.$scope.categorizedFormStudents[i]);
                        foundKey = true;
                        break;
                    }
                }
                if (foundKey == false) {
                    this.$scope.categorizedFormStudents.push(this.pushNewValueIntoCategorizedStudents(student, header, key));
                }
            }
            this.$scope.categorizedFormStudents.sort(function (a, b) {
                return Number(a.key) - Number(b.key);
            });
        };
        StudentAdviser.prototype.pushNewValueIntoCategorizedStudents = function (student, header, key) {
            var categorizedFromStudents = {};
            categorizedFromStudents.header = header;
            categorizedFromStudents.key = key;
            categorizedFromStudents.students = [];
            categorizedFromStudents.students.push(student);
            return categorizedFromStudents;
        };
        StudentAdviser.prototype.pushStudentIntoExistingCategorizedStudents = function (student, categorizedStudents) {
            categorizedStudents.students.push(student);
        };
        StudentAdviser.prototype.insertIntoToStudentsWithYearSemester = function (student) {
            var header = student.year + " Year," + student.academicSemester + " Semester";
            var key = Number(String(student.year) + "" + (String(student.academicSemester)));
            if (this.$scope.categorizedToStudents.length == 0) {
                this.$scope.categorizedToStudents.push(this.pushNewValueIntoCategorizedStudents(student, header, key));
            }
            else {
                var foundKey = false;
                for (var i = 0; i < this.$scope.categorizedToStudents.length; i++) {
                    if (this.$scope.categorizedToStudents[i].key == key) {
                        this.pushStudentIntoExistingCategorizedStudents(student, this.$scope.categorizedToStudents[i]);
                        foundKey = true;
                        break;
                    }
                }
                if (foundKey == false) {
                    this.$scope.categorizedToStudents.push(this.pushNewValueIntoCategorizedStudents(student, header, key));
                }
            }
            this.$scope.categorizedToStudents.sort(function (a, b) {
                return Number(a.key) - Number(b.key);
            });
        };
        StudentAdviser.prototype.getStudentsOfTeacher = function (teacherId, type) {
            var _this = this;
            var defer = this.$q.defer();
            this.studentService.getActiveStudentsOfTheTeacher(teacherId).then(function (students) {
                _this.$scope.assignedStudentsOfTheAdviser = angular.copy(students.length);
                for (var i = 0; i < students.length; i++) {
                    students[i].backgroundColor = ums.Utils.DEFAULT_COLOR;
                    if (type == 1) {
                        _this.$scope.fromStudents.push(students[i]);
                        _this.insertIntoFromStudentsWithYearSemester(students[i]);
                    }
                    else if (type == 2) {
                        _this.$scope.toStudents.push(students[i]);
                        _this.insertIntoToStudentsWithYearSemester(students[i]);
                    }
                    else {
                        _this.$scope.existingStudentsOfAdivser.push(students[i]);
                    }
                }
                defer.resolve(students);
            });
            return defer.promise;
        };
        StudentAdviser.prototype.getStudentsOfTheSecondTeacher = function (teacherId) {
            var _this = this;
            if (teacherId == null || teacherId == "")
                return;
            this.$scope.toTeacherId = teacherId;
            if (this.$scope.toStudents.length == 0) {
                this.getStudentsOfTeacher(teacherId, 2).then(function (students) {
                });
            }
            else {
                this.initializeShiftingStudents("to").then(function (data) {
                    _this.getStudentsOfTeacher(teacherId, 2).then(function (students) {
                    });
                });
            }
        };
        StudentAdviser.prototype.disableAllUI = function () {
            var defer = this.$q.defer();
            this.$scope.changeOptionSelected = false;
            this.$scope.bulkAssignmentOptionSelected = false;
            this.$scope.shiftOptionSelected = false;
            defer.resolve("done");
            return defer.promise;
        };
        StudentAdviser.prototype.getActiveTeachers = function () {
            var _this = this;
            this.employeeService.getActiveTeacherByDept().then(function (teachers) {
                _this.$scope.teachers = [];
                _this.$scope.teacherIdWithTeacherMap = {};
                for (var i = 0; i < teachers.length; i++) {
                    _this.$scope.teachers.push(teachers[i]);
                    _this.$scope.teacherIdWithTeacherMap[teachers[i].id] = teachers[i];
                }
            });
        };
        StudentAdviser.prototype.getActiveStudentsOfDept = function () {
            var _this = this;
            this.$scope.showLoader = true;
            this.studentService.getActiveStudentsByDepartment().then(function (students) {
                _this.$scope.students = [];
                _this.$scope.studentIds = [];
                _this.$scope.studentIdWithStudentMap = {};
                for (var i = 0; i < students.length; i++) {
                    students[i].backgroundColor = ums.Utils.DEFAULT_COLOR;
                    students[i].text = students[i].id;
                    _this.$scope.students.push(students[i]);
                    _this.$scope.studentIds.push(students[i].id);
                    _this.$scope.studentIdWithStudentMap[_this.$scope.students[i].id] = _this.$scope.students[i];
                }
                _this.initializeSelect2("singleStudentList", _this.$scope.students);
                _this.initializeSelect2("fromStudentList", _this.$scope.students);
                _this.initializeSelect2("toStudentList", _this.$scope.students);
                _this.$scope.students = students;
                _this.$scope.showLoader = false;
            });
        };
        StudentAdviser.prototype.searchSingleStudent = function () {
            this.$scope.singleStudent = this.$scope.studentIdWithStudentMap[this.$scope.singleStudentId];
        };
        StudentAdviser.prototype.addAStudent = function () {
            var fromStudentId = this.$scope.fromStudentId;
            if (this.$scope.addedBulkStudentMap[fromStudentId] == null && this.$scope.studentIdWithStudentMap[fromStudentId] != null) {
                this.$scope.bulkSelectedStudents.push(this.$scope.studentIdWithStudentMap[fromStudentId]);
                this.$scope.addedBulkStudentMap[fromStudentId] = 'added';
            }
        };
        StudentAdviser.prototype.addStudents = function () {
            var _this = this;
            this.$scope.showLoader = true;
            this.addStudentOfRange().then(function (data) {
                _this.$scope.showLoader = false;
            });
        };
        StudentAdviser.prototype.clearBulkStudents = function () {
            this.$scope.bulkSelectedStudents = [];
            this.$scope.addedBulkStudentMap = {};
        };
        StudentAdviser.prototype.addStudentOfRange = function () {
            var defer = this.$q.defer();
            for (var i = +this.$scope.fromStudentId; i <= +this.$scope.toStudentId; i++) {
                if (this.$scope.studentIdWithStudentMap[i.toString()] != null && this.$scope.addedBulkStudentMap[i.toString()] == null) {
                    this.$scope.bulkSelectedStudents.push(this.$scope.studentIdWithStudentMap[i.toString()]);
                }
            }
            defer.resolve('success');
            return defer.promise;
        };
        StudentAdviser.prototype.saveAdvisorShifting = function () {
            var _this = this;
            this.addFromStudentsAndAssignTeacher().then(function (shiftSelectedStudents) {
                _this.$scope.shiftSelectedStudents = shiftSelectedStudents;
                if (_this.$scope.shiftSelectedStudents.length > 0) {
                    _this.convertToJson(_this.$scope.shiftSelectedStudents, _this.$scope.toTeacherId).then(function (jsonData) {
                        _this.studentService.updateStudentsAdviser(jsonData).then(function (data) {
                            if (data == "success") {
                                for (var i = 0; i < shiftSelectedStudents.length; i++) {
                                    _this.$scope.shiftSelectedStudents[i].adviser = _this.$scope.toTeacherId;
                                    _this.$scope.studentIdWithStudentMap[_this.$scope.shiftSelectedStudents[i].id] = _this.$scope.shiftSelectedStudents[i];
                                    _this.searchSingleStudent();
                                }
                                _this.initializeShiftingStudents("from").then(function (data) {
                                    _this.getStudentsOfTheFirstTeacher(_this.$scope.fromTeacherId);
                                });
                                _this.initializeShiftingStudents("to").then(function (data) {
                                    _this.getStudentsOfTheSecondTeacher(_this.$scope.toTeacherId);
                                });
                            }
                        });
                    });
                }
            });
        };
        StudentAdviser.prototype.initializeExistingStudentsOfAdviser = function () {
            var defer = this.$q.defer();
            this.$scope.existingStudentsOfAdivser = [];
            defer.resolve("success");
            return defer.promise;
        };
        StudentAdviser.prototype.getExistingStudentsOfAdviser = function (teacherId) {
            var _this = this;
            if (teacherId == null || teacherId == "")
                return;
            this.initializeExistingStudentsOfAdviser().then(function (data) {
                _this.getStudentsOfTeacher(teacherId, 3);
            });
        };
        StudentAdviser.prototype.initializeTeachersStudentForBulkAssignment = function () {
            this.$scope.toStudents = [];
        };
        StudentAdviser.prototype.convertToJson = function (studentArray, teacherId) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            for (var i = 0; i < studentArray.length; i++) {
                var item = {};
                var student = studentArray[i];
                item['id'] = student.id;
                item['adviser'] = teacherId;
                jsonObject.push(item);
            }
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        StudentAdviser.prototype.redirectToViewDownloadPage = function () {
            this.$window.open('https://' + location.hostname + '/ums-web/iums/#/advisingStudentInfoReport', '_self');
        };
        StudentAdviser.prototype.redirectToSectionViewDownloadPage = function () {
            this.$window.open('https://' + location.hostname + '/ums-web/iums/#/sectionWiseStudentInfoReport', '_self');
        };
        StudentAdviser.$inject = ['appConstants', 'HttpClient', '$scope', '$q', '$window', 'notify', 'semesterService', 'employeeService', 'studentService'];
        return StudentAdviser;
    }());
    ums.UMS.controller("StudentAdviser", StudentAdviser);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdvisingStudents = (function () {
        function AdvisingStudents(appConstants, httpClient, $scope, $q, notify, semesterService, employeeService, studentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.semesterService = semesterService;
            this.employeeService = employeeService;
            this.studentService = studentService;
            this.advisingStudentSearchParamModel = new ums.ProgramSelectorModel(this.appConstants, this.httpClient);
            this.advisingStudentSearchParamModel.setProgramType(this.appConstants.programTypeEnum.UG, ums.FieldViewTypes.selected);
            this.advisingStudentSearchParamModel.setDepartment(null, ums.FieldViewTypes.hidden);
            this.advisingStudentSearchParamModel.setProgram(null, ums.FieldViewTypes.hidden);
            this.$scope.advisingStudentSearchParamModel = this.advisingStudentSearchParamModel;
            $scope.students = [];
            $scope.backgroundColor = ums.Utils.DEFAULT_COLOR;
            $scope.showStudentsByYearSemester = true;
            $scope.yearSemesterMapWithIStudentsByYearSemester = {};
            $scope.studentsByYearSemester = [];
            $scope.showStudentId = true;
            $scope.showStudentName = false;
            $scope.fetchAdvisingStudents = this.fetchAdvisingStudents.bind(this);
            $scope.viewStudentById = this.viewStudentById.bind(this);
            $scope.viewStudentByIdAndName = this.viewStudentByName.bind(this);
            $scope.fetchStudentInfo = this.fetchStudentInfo.bind(this);
        }
        AdvisingStudents.prototype.getTeacherInfo = function () {
        };
        AdvisingStudents.prototype.viewStudentById = function () {
            this.$scope.showStudentId = true;
            this.$scope.showStudentName = false;
            $(".btn.btn-xs.btn-default.studentIdAnchor").css({ "background-color": "white" });
            $(".fa.fa-user.studentIdIcon").css({ "color": "black" });
            $(".btn.btn-xs.btn-default.studentNameAnchor").css({ "background-color": "white" });
            $(".fa.fa-indent.studentNameIcon").css({ "color": "black" });
            $(".btn.btn-xs.btn-default.studentIdAnchor").css({ "background-color": "black" });
            $(".fa.fa-user.studentIdIcon").css({ "color": "white" });
        };
        AdvisingStudents.prototype.viewStudentByName = function () {
            this.$scope.showStudentId = false;
            this.$scope.showStudentName = true;
            $(".btn.btn-xs.btn-default.studentIdAnchor").css({ "background-color": "white" });
            $(".fa.fa-user.studentIdIcon").css({ "color": "black" });
            $(".btn.btn-xs.btn-default.studentNameAnchor").css({ "background-color": "white" });
            $(".fa.fa-indent.studentNameIcon").css({ "color": "black" });
            $(".btn.btn-xs.btn-default.studentNameAnchor").css({ "background-color": "black" });
            $(".fa.fa-indent.studentNameIcon").css({ "color": "white" });
        };
        AdvisingStudents.prototype.fetchAdvisingStudents = function () {
            var _this = this;
            $("#leftDiv").hide();
            $("#arrowDiv").show();
            this.employeeService.getLoggedEmployeeInfo().then(function (employee) {
                _this.studentService.getActiveStudentsOfTheTeacher(employee.id).then(function (students) {
                    _this.$scope.students = students;
                    for (var i = 0; i < students.length; i++) {
                        _this.insertStudentsByYearAndSemester(students[i]);
                    }
                });
            });
        };
        AdvisingStudents.prototype.insertStudentsByYearAndSemester = function (student) {
            if (this.$scope.studentsByYearSemester.length == 0) {
                this.createNewStudentsByYearSemester(student);
            }
            else {
                if (this.$scope.yearSemesterMapWithIStudentsByYearSemester[student.year + "" + student.academicSemester] == null) {
                    this.createNewStudentsByYearSemester(student);
                }
                else {
                    this.insertIntoExistingStudentsByYearSemester(student);
                }
            }
        };
        AdvisingStudents.prototype.sortStudentsWithYearSemester = function () {
            this.$scope.studentsByYearSemester.sort(function (a, b) {
                return Number(a.key) - Number(b.key);
            });
        };
        AdvisingStudents.prototype.insertIntoExistingStudentsByYearSemester = function (student) {
            var studentsByYearSemester = this.$scope.yearSemesterMapWithIStudentsByYearSemester[student.year + "" + student.academicSemester];
            studentsByYearSemester.students.push(student);
            this.sortStudentsWithYearSemester();
        };
        AdvisingStudents.prototype.createNewStudentsByYearSemester = function (student) {
            var studentsByYearSemester = {};
            studentsByYearSemester.year = student.year;
            studentsByYearSemester.semester = student.academicSemester;
            studentsByYearSemester.students = [];
            studentsByYearSemester.key = +(student.year + "" + student.academicSemester);
            studentsByYearSemester.students.push(student);
            this.$scope.studentsByYearSemester.push(studentsByYearSemester);
            this.$scope.yearSemesterMapWithIStudentsByYearSemester[student.year + "" + student.academicSemester] = studentsByYearSemester;
            this.sortStudentsWithYearSemester();
        };
        AdvisingStudents.prototype.fetchStudentInfo = function (studentId) {
            console.log(studentId);
            this.$scope.studentId = studentId;
        };
        AdvisingStudents.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', 'semesterService', 'employeeService', 'studentService'];
        return AdvisingStudents;
    }());
    ums.UMS.controller("AdvisingStudents", AdvisingStudents);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var map = {};
    map["statistics_url"] = "academic/optional/application/stat/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}";
    map["crhr_url"] = "academic/optional/application/CrHr/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}/year/{YEAR}/semester/{SEMESTER}";
    map["optional_url"] = "academic/course/optional/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}/year/{YEAR}/semester/{SEMESTER}";
    map["application_url"] = "academic/course/call4Application/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}/year/{YEAR}/semester/{SEMESTER}";
    map["approved_url"] = "academic/course/approved/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}/year/{YEAR}/semester/{SEMESTER}";
    map["approved_call4Application_url"] = "academic/course/approved-call-for-application/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}/year/{YEAR}/semester/{SEMESTER}";
    map["save_optional"] = "academic/optional/application/settings/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}/year/{YEAR}/semester/{SEMESTER}";
    map["fetch_students"] = "academic/optional/application/students/semester-id/{SEMESTER-ID}/course/{COURSE-ID}/status/{STATUS-ID}";
    map["fetch_applications"] = "academic/optional/application/students/semester-id/{SEMESTER-ID}/course/{COURSE-ID}/status/all";
    map["save_application_status"] = "academic/optional/application/status/semester-id/{SEMESTER-ID}/course/{COURSE-ID}";
    map["fetch_applications_for_single_student"] = "academic/optional/application/applied-courses/student-id/{STUDENT-ID}/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}";
    map["save_application_status_for_single_student"] = "academic/optional/application/status/semester-id/{SEMESTER-ID}student/{STUDENT-ID}";
    map["save_application_shifting"] = "academic/optional/application/shift/semester-id/{SEMESTER-ID}/source-course/{SOURCE-COURSE-ID}/target-course/{TARGET-COURSE-ID}";
    map["section_nonAssignedStudents_for_course"] = "academic/optional/application/non-assigned-section/students/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}/course/{COURSE-ID}";
    map["sections_info_of_course"] = "academic/optional/application/assigned-section/students/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}/course/{COURSE-ID}";
    map["delete_section"] = "academic/optional/application/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}/course/{COURSE-ID}/section/{SECTION-NAME}";
    map["save_section"] = "academic/optional/application/semester-id/{SEMESTER-ID}/program/{PROGRAM-ID}/course/{COURSE-ID}/section/{SECTION-NAME}";
    var OptionalCoursesOffer = (function () {
        function OptionalCoursesOffer(appConstants, httpClient, $scope, $q, notify, semesterService, commonService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.semesterService = semesterService;
            this.commonService = commonService;
            $scope.optional = {
                approvedCallForApplicationCourses: Array(),
                appliedCoursesForSingleStudent: Array(),
                nonAssignedStudents: Array(),
                applicationStudents: Array(),
                approvedStudents: Array(),
                applicationCourses: Array(),
                rejectedStudents: Array(),
                approvedCourses: Array(),
                optionalCourses: Array(),
                sections: Array(),
                statistics: Array(),
                targetCourseIdForStudentShifting: '',
                courseIdForRejectedStudents: '',
                allStudentCourseId: '',
                sectionCourseId: '',
                semesterId: '',
                deptId: '',
                semester: '',
                program: '',
                studentId: '',
                year: '',
                semesters: Array(),
                depts: Array(),
                yearSemesters: Array(),
                yearSemester: ''
            };
            $scope.saveApplicationStatusForSingleStudent = this.saveApplicationStatusForSingleStudent.bind(this);
            $scope.applicationSelectionChange = this.applicationSelectionChange.bind(this);
            $scope.showApplicationForStudent = this.showApplicationForStudent.bind(this);
            $scope.approvedSelectionChange = this.approvedSelectionChange.bind(this);
            $scope.removeApplicationCourse = this.removeApplicationCourse.bind(this);
            $scope.removeApprovedCourse = this.removeApprovedCourse.bind(this);
            $scope.fetchSectionInformation = this.fetchSectionInformation.bind(this);
            $scope.saveApplicationShifting = this.saveApplicationShifting.bind(this);
            $scope.showAppliedStudents = this.showAppliedStudents.bind(this);
            $scope.saveApplicationStatus = this.saveApplicationStatus.bind(this);
            $scope.fetchApplicationForSingleStudent = this.fetchApplicationForSingleStudent.bind(this);
            $scope.fetchApplications = this.fetchApplications.bind(this);
            $scope.addNewSection = this.addNewSection.bind(this);
            $scope.removeSection = this.removeSection.bind(this);
            $scope.fetchStudents = this.fetchStudents.bind(this);
            $scope.showCourses = this.showCourses.bind(this);
            $scope.saveCourses = this.saveCourses.bind(this);
            $scope.resetChanges = this.resetChanges.bind(this);
            $scope.saveSection = this.saveSection.bind(this);
            $scope.goToTab = this.goToTab.bind(this);
            this.loadSemesters();
        }
        OptionalCoursesOffer.prototype.goToTab = function (tabIndex) {
            $('.nav-tabs li:eq(' + tabIndex + ') a').tab('show');
        };
        OptionalCoursesOffer.prototype.loadSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(ums.Utils.UG).then(function (semesters) {
                if (semesters.length == 0) {
                    semesters.splice(0, 0, _this.appConstants.initSemester[0]);
                }
                _this.$scope.optional.semesters = semesters;
                _this.$scope.optional.semesterId = semesters[0].id;
            });
            this.commonService.fetchCurrentUser().then(function (departmentJson) {
                _this.$scope.optional.depts = [departmentJson];
                _this.$scope.optional.deptId = departmentJson.id;
                _this.loadPrograms();
            });
        };
        OptionalCoursesOffer.prototype.loadPrograms = function () {
            var programArr;
            var controllerScope = this.$scope;
            programArr = this.appConstants.ugPrograms;
            var programJson = $.map(programArr, function (el) {
                return el;
            });
            var resultPrograms = $.grep(programJson, function (e) {
                return e.deptId == controllerScope.optional.deptId;
            });
            if (resultPrograms[0] == undefined) {
                this.$scope.optional.programs = null;
                this.$scope.optional.programId = null;
            }
            else {
                this.$scope.optional.programs = resultPrograms[0].programs;
                this.$scope.optional.programId = resultPrograms[0].programs[0].id;
            }
            var yearSemesterList = (this.appConstants.optionalCourseYearSemester[this.$scope.optional.programId]);
            for (var ind in yearSemesterList) {
                var yearSemester = yearSemesterList[ind];
                var yearSemesterStr = yearSemester.year + " - " + yearSemester.semester;
                var option = { "id": yearSemesterStr, "name": yearSemesterStr };
                this.$scope.optional.yearSemesters[ind] = option;
            }
            this.$scope.optional.yearSemester = this.$scope.optional.yearSemesters[0].id;
        };
        OptionalCoursesOffer.prototype.showCourses = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.getStatistics(this.urlPlaceholderReplace(map["statistics_url"])).then(function (statArr) {
                console.log("Statistical");
                console.log(statArr);
                _this.$scope.optional.statistics = statArr;
            });
            this.getCrHrInfo(this.urlPlaceholderReplace(map["crhr_url"])).then(function (CrHr) {
                console.log("CrHr");
                console.log(CrHr);
                _this.$scope.CrHr = CrHr;
            });
            this.getCourses(this.urlPlaceholderReplace(map["approved_call4Application_url"])).then(function (optCourseArr) {
                console.log("approvedCallForApplicationCourses");
                console.log(optCourseArr);
                _this.$scope.optional.approvedCallForApplicationCourses = optCourseArr;
            });
            this.getCourses(this.urlPlaceholderReplace(map["application_url"])).then(function (optCourseArr) {
                console.log("call for application");
                console.log(optCourseArr);
                _this.$scope.optional.applicationCourses = optCourseArr;
            });
            this.getCourses(this.urlPlaceholderReplace(map["approved_url"])).then(function (optCourseArr) {
                console.log("approved-Courses");
                console.log(optCourseArr);
                _this.$scope.optional.approvedCourses = optCourseArr;
                _this.getOptCourses(_this.urlPlaceholderReplace(map["optional_url"])).then(function (optCourseArr) {
                    console.log("*******Optional Courses*******");
                    console.log(optCourseArr);
                    _this.$scope.optional.optionalCourses = optCourseArr;
                    console.log(_this.$scope.optional.optionalCourses);
                    for (var ind in _this.$scope.optional.optionalCourses) {
                        var course = _this.$scope.optional.optionalCourses[ind];
                        course.approved = false;
                        course.application = false;
                    }
                    for (var ind1 in _this.$scope.optional.applicationCourses) {
                        var course1 = _this.$scope.optional.applicationCourses[ind1];
                        for (var ind2 in _this.$scope.optional.optionalCourses) {
                            var course2 = _this.$scope.optional.optionalCourses[ind2];
                            if (course1.id == course2.id) {
                                course2.application = true;
                                course2.bgColor = ums.Utils.APPLICATION;
                            }
                        }
                    }
                    for (var ind1 in _this.$scope.optional.approvedCourses) {
                        var course1 = _this.$scope.optional.approvedCourses[ind1];
                        for (var ind2 in _this.$scope.optional.optionalCourses.courses) {
                            var course2 = _this.$scope.optional.optionalCourses[ind2];
                            if (course1.id == course2.id) {
                                course2.approved = true;
                                if (course2.application == true)
                                    course2.bgColor = ums.Utils.APPROVED_APPLICATION;
                                else
                                    course2.bgColor = ums.Utils.APPROVED;
                            }
                        }
                    }
                });
            });
        };
        OptionalCoursesOffer.prototype.getCourses = function (url) {
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var courseArr = eval(json.entries);
                defer.resolve(courseArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptionalCoursesOffer.prototype.getOptCourses = function (url) {
            var defer = this.$q.defer();
            this.httpClient.get(url, 'application/json', function (response) {
                defer.resolve(response);
                console.log("Response");
                console.log(response);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptionalCoursesOffer.prototype.getStatistics = function (url) {
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var statArr = json.entries;
                console.log(statArr);
                defer.resolve(statArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptionalCoursesOffer.prototype.getCrHrInfo = function (url) {
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var CrHr = json.CrHr;
                defer.resolve(CrHr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptionalCoursesOffer.prototype.applicationSelectionChange = function (index, course) {
            console.log("courseList");
            console.log(course);
            this.manageSelectionChange(this.$scope.optional.applicationCourses, "application", index, course, course.application);
        };
        OptionalCoursesOffer.prototype.approvedSelectionChange = function (index, course) {
            this.manageSelectionChange(this.$scope.optional.approvedCourses, "approved", index, course, course.approved);
        };
        OptionalCoursesOffer.prototype.manageSelectionChange = function (courses, columnType, index, course, operation) {
            var courseIndex = -1;
            var pairCourseIndex = -1;
            if (operation == true) {
                courseIndex = ums.Utils.arrayMaxIndex(courses);
                var item = course;
                item.index = courseIndex;
                courses.splice(0, 0, item);
                if (item.pairCourseId != "") {
                    pairCourseIndex = ums.Utils.findIndex(this.$scope.optional.optionalCourses, item.pairCourseId);
                    if (columnType == "application")
                        this.$scope.optional.optionalCourses[pairCourseIndex].application = true;
                    if (columnType == "approved")
                        this.$scope.optional.optionalCourses[pairCourseIndex].approved = true;
                    courses.splice(0, 0, this.$scope.optional.optionalCourses[pairCourseIndex]);
                }
            }
            else {
                var application_course_arr = courses;
                courseIndex = ums.Utils.findIndex(application_course_arr, course.id);
                this.$scope.optional.applicationCourses.splice(courseIndex, 1);
                if (course.pairCourseId != "") {
                    pairCourseIndex = ums.Utils.findIndex(this.$scope.optional.optionalCourses, course.pairCourseId);
                    if (columnType == "application")
                        this.$scope.optional.optionalCourses[pairCourseIndex].application = false;
                    if (columnType == "approved")
                        this.$scope.optional.optionalCourses[pairCourseIndex].approved = false;
                    pairCourseIndex = ums.Utils.findIndex(courses, course.pairCourseId);
                    courses.splice(pairCourseIndex, 1);
                }
            }
            this.manageRowColor(index, pairCourseIndex);
        };
        OptionalCoursesOffer.prototype.removeApplicationCourse = function (course) {
            this.manageRemoveCourse(this.$scope.optional.applicationCourses, "application", course);
        };
        OptionalCoursesOffer.prototype.removeApprovedCourse = function (course) {
            this.manageRemoveCourse(this.$scope.optional.approvedCourses, "approved", course);
        };
        OptionalCoursesOffer.prototype.manageRemoveCourse = function (courses, columnType, course) {
            var courseIndex = ums.Utils.findIndex(courses, course.id);
            courses.splice(courseIndex, 1);
            var optionalCourseIndex = ums.Utils.findIndex(this.$scope.optional.optionalCourses, course.id);
            if (columnType == "application")
                this.$scope.optional.optionalCourses[optionalCourseIndex].application = false;
            if (columnType == "approved")
                this.$scope.optional.optionalCourses[optionalCourseIndex].approved = false;
            this.manageRowColor(optionalCourseIndex);
            if (course.pairCourseId != "") {
                courseIndex = ums.Utils.findIndex(courses, course.pairCourseId);
                courses.splice(courseIndex, 1);
                optionalCourseIndex = ums.Utils.findIndex(this.$scope.optional.optionalCourses, course.pairCourseId);
                if (columnType == "application")
                    this.$scope.optional.optionalCourses[optionalCourseIndex].application = false;
                if (columnType == "approved")
                    this.$scope.optional.optionalCourses[optionalCourseIndex].approved = false;
                this.manageRowColor(optionalCourseIndex);
            }
        };
        OptionalCoursesOffer.prototype.manageRowColor = function () {
            var rowIndexArr = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                rowIndexArr[_i] = arguments[_i];
            }
            for (var i = 0; i < rowIndexArr.length; i++) {
                var rowIndex = rowIndexArr[i];
                if (rowIndex != -1) {
                    if (this.$scope.optional.optionalCourses[rowIndex].approved == true && this.$scope.optional.optionalCourses[rowIndex].application == true)
                        this.$scope.optional.optionalCourses[rowIndex].bgColor = ums.Utils.APPROVED_APPLICATION;
                    else if (this.$scope.optional.optionalCourses[rowIndex].approved == false && this.$scope.optional.optionalCourses[rowIndex].application == false)
                        this.$scope.optional.optionalCourses[rowIndex].bgColor = ums.Utils.NONE;
                    else if (this.$scope.optional.optionalCourses[rowIndex].approved == true)
                        this.$scope.optional.optionalCourses[rowIndex].bgColor = ums.Utils.APPROVED;
                    else if (this.$scope.optional.optionalCourses[rowIndex].application == true)
                        this.$scope.optional.optionalCourses[rowIndex].bgColor = ums.Utils.APPLICATION;
                }
            }
        };
        OptionalCoursesOffer.prototype.saveCourses = function () {
            var complete_json = {};
            complete_json["approved"] = this.$scope.optional.approvedCourses;
            complete_json["callForApplication"] = this.$scope.optional.applicationCourses;
            this.httpClient.put(this.urlPlaceholderReplace(map["save_optional"]), complete_json, 'application/json')
                .success(function () {
                $.notific8("Successfully Saved");
            }).error(function (data) {
            });
        };
        OptionalCoursesOffer.prototype.fetchApplications = function () {
            var _this = this;
            var url = this.urlPlaceholderReplace(map["fetch_applications"]);
            url = url.replace("{COURSE-ID}", this.$scope.optional.allStudentCourseId);
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var appliedStudentArr = json.entries;
                for (var ind in appliedStudentArr) {
                    var student = appliedStudentArr[ind];
                    student.newStatusId = -1;
                }
                _this.$scope.optional.applicationStudents = appliedStudentArr;
            }, function (response) {
                console.error(response);
            });
        };
        OptionalCoursesOffer.prototype.resetChanges = function (student_or_course) {
            student_or_course.newStatusId = -1;
        };
        OptionalCoursesOffer.prototype.saveApplicationStatus = function () {
            var _this = this;
            var complete_json = {};
            var approveStudentList = Array();
            var rejectStudentList = Array();
            var removeStudentList = Array();
            var statusChangedStudentList = new Array();
            for (var ind in this.$scope.optional.applicationStudents) {
                var student = this.$scope.optional.applicationStudents[ind];
                if (student.statusId != student.newStatusId && student.newStatusId != -1) {
                    statusChangedStudentList.push(student);
                }
            }
            for (var ind in statusChangedStudentList) {
                var student = statusChangedStudentList[ind];
                if (student.newStatusId == ums.Utils.SCODE_APPROVED) {
                    approveStudentList.push(student);
                }
                else if (student.newStatusId == ums.Utils.SCODE_REJECTED && student.applicationTypeId == ums.Utils.SCODE_APPROVED) {
                    removeStudentList.push(student);
                }
                else if (student.newStatusId == ums.Utils.SCODE_REJECTED) {
                    rejectStudentList.push(student);
                }
            }
            complete_json["approve"] = approveStudentList;
            complete_json["reject"] = rejectStudentList;
            complete_json["remove"] = removeStudentList;
            var url = this.urlPlaceholderReplace(map["save_application_status"]);
            url = url.replace("{COURSE-ID}", this.$scope.optional.allStudentCourseId);
            this.httpClient.put(url, complete_json, 'application/json')
                .success(function (data) {
                _this.notify.show(data);
            }).error(function (data) {
            });
        };
        OptionalCoursesOffer.prototype.showAppliedStudents = function (course_id) {
            //$('.nav-tabs li:eq(1) a').tab('show')
        };
        OptionalCoursesOffer.prototype.showApplicationForStudent = function (student) {
            $('.nav-tabs li:eq(2) a').tab('show');
            this.$scope.optional.studentId = student.studentId;
            this.fetchApplicationForSingleStudent();
        };
        OptionalCoursesOffer.prototype.fetchApplicationForSingleStudent = function () {
            var _this = this;
            var url = this.urlPlaceholderReplace(map["fetch_applications_for_single_student"]);
            url = url.replace("{STUDENT-ID}", this.$scope.optional.studentId);
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var courseArr = json.entries;
                for (var ind in courseArr) {
                    var course = courseArr[ind];
                    course.newStatusId = -1;
                }
                _this.$scope.optional.appliedCoursesForSingleStudent = courseArr;
            }, function (response) {
                console.error(response);
            });
        };
        OptionalCoursesOffer.prototype.saveApplicationStatusForSingleStudent = function () {
            var complete_json = {};
            var approveCourseList = Array();
            var rejectCourseList = Array();
            var removeCourseList = Array();
            var statusChangedCourseList = new Array();
            for (var ind in this.$scope.optional.appliedCoursesForSingleStudent) {
                var course = this.$scope.optional.appliedCoursesForSingleStudent[ind];
                if (course.statusId != course.newStatusId && course.newStatusId != -1) {
                    statusChangedCourseList.push(course);
                }
            }
            for (var ind in statusChangedCourseList) {
                var course = statusChangedCourseList[ind];
                if (course.newStatusId == ums.Utils.SCODE_APPROVED) {
                    approveCourseList.push(course);
                }
                else if (course.newStatusId == ums.Utils.SCODE_REJECTED && course.applicationTypeId == ums.Utils.SCODE_APPROVED) {
                    removeCourseList.push(course);
                }
                else if (course.newStatusId == ums.Utils.SCODE_REJECTED) {
                    rejectCourseList.push(course);
                }
            }
            complete_json["approve"] = approveCourseList;
            complete_json["reject"] = rejectCourseList;
            complete_json["remove"] = removeCourseList;
            var url = this.urlPlaceholderReplace(map["save_application_status_for_single_student"]);
            url = url.replace("{STUDENT-ID}", this.$scope.optional.semesterId);
            this.httpClient.put(url, complete_json, 'application/json')
                .success(function () {
                $.notific8("Successfully Saved");
            }).error(function (data) {
            });
        };
        OptionalCoursesOffer.prototype.fetchStudents = function (course_id, status_id, type) {
            var _this = this;
            var url = this.urlPlaceholderReplace(map["fetch_students"]);
            url = url.replace("{COURSE-ID}", course_id);
            url = url.replace("{STATUS-ID}", status_id);
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var studentArr = eval(json.entries);
                _this.$scope.optional[type] = studentArr;
                /*
                if(type=='rejectedStudents')
                  //$.plugin_dragndrop('.dragndrop').duration(150);
                else if(type=='approvedStudents'){
    
                }*/
                /*
                  if(this.$scope.optional.courseIdForRejectedStudents==this.$scope.optional.targetCourseIdForStudentShifting){
                      alert("For shifting source and target course id should be different.");
                      return;
                  }*/
                $.plugin_dragndrop('.dragndrop').duration(150);
            }, function (response) {
                console.error(response);
            });
        };
        OptionalCoursesOffer.prototype.saveApplicationShifting = function () {
            this.validateShifting();
            var complete_json = {};
            var shiftedStudentArray = [];
            $(".jqdragndrop-drop.D > .jqselection-selectable > .dragableObject").each(function () { shiftedStudentArray.push($(this).html()); });
            if (shiftedStudentArray.length == 0)
                return;
            complete_json["students"] = shiftedStudentArray;
            var url = this.urlPlaceholderReplace(map["save_application_shifting"]);
            url = url.replace("{SOURCE-COURSE-ID}", this.$scope.optional.courseIdForRejectedStudents);
            url = url.replace("{TARGET-COURSE-ID}", this.$scope.optional.targetCourseIdForStudentShifting);
            this.httpClient.put(url, complete_json, 'application/json')
                .success(function () {
                $.notific8("Successfully Saved");
                $(".jqdragndrop-drop.D").html("");
            }).error(function (data) {
            });
        };
        OptionalCoursesOffer.prototype.validateShifting = function () {
            var targetCourseStudentArray = [];
            $(".badge.badge-default").each(function () { targetCourseStudentArray.push($(this).html()); });
            var shiftedStudentArray = [];
            $(".jqdragndrop-drop.D > .jqselection-selectable > .dragableObject").each(function () { shiftedStudentArray.push($(this).html()); });
            var quotedP1 = '"' + targetCourseStudentArray.join('", "') + '"';
            var quotedP2 = '"' + shiftedStudentArray.join('", "') + '"';
            console.log(quotedP1);
            console.log(quotedP2);
            var duplicateStudentArr = this.intersect(targetCourseStudentArray, shiftedStudentArray);
            console.log(duplicateStudentArr);
            if (duplicateStudentArr.length > 0) {
                for (var ind in duplicateStudentArr) {
                    var studentId = duplicateStudentArr[ind];
                    $("#" + studentId).css({ 'background-color': 'pink' });
                }
                //        alert("We found some duplicate student in a same course. Duplicate students are not allowed. Press ok to return back the duplicate students.");
                for (var ind in duplicateStudentArr) {
                    var studentId = duplicateStudentArr[ind];
                    document.getElementById(studentId + '').style.backgroundColor = '';
                    var cloneVersion = $("#" + studentId)[0].outerHTML;
                    $("#" + studentId).remove();
                    $('.jqdragndrop-drop.C').html($('.jqdragndrop-drop.C').html() + cloneVersion);
                }
                $.plugin_dragndrop('.dragndrop').duration(150);
            }
            return false;
        };
        OptionalCoursesOffer.prototype.intersect = function (arr1, arr2) {
            var results = new Array();
            for (var i = 0; i < arr1.length; i++) {
                if (arr2.indexOf(arr1[i]) !== -1) {
                    results.push(arr1[i]);
                }
            }
            return results;
        };
        OptionalCoursesOffer.prototype.fetchSectionInformation = function (avc) {
            var _this = this;
            var courseId = $("#sectionCourseId").val();
            if (courseId == "")
                return;
            var url = this.urlPlaceholderReplace(map["section_nonAssignedStudents_for_course"]);
            url = url.replace("{COURSE-ID}", courseId);
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var nonAssignedStudentsArr = json.entries;
                _this.$scope.optional.nonAssignedStudents = nonAssignedStudentsArr;
                $.plugin_dragndrop('.dragndrop1').duration(150);
            }, function (response) {
                console.error(response);
            });
            url = this.urlPlaceholderReplace(map["sections_info_of_course"]);
            url = url.replace("{COURSE-ID}", courseId);
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var sectionArr = json.entries;
                for (var ind in sectionArr) {
                    sectionArr[ind].index = parseInt(ind);
                    sectionArr[ind].id = parseInt(ind);
                    sectionArr[ind].type = "saved";
                }
                _this.$scope.optional.sections = sectionArr;
                $.plugin_dragndrop('.dragndrop1').duration(150);
            }, function (response) {
                console.error(response);
            });
        };
        OptionalCoursesOffer.prototype.addNewSection = function () {
            if ($("#sectionCourseId").val() == "")
                return;
            var index = ums.Utils.arrayMaxIndex(this.$scope.optional.sections);
            var item = this.addNewSectionRow(index);
            this.$scope.optional.sections.splice(0, 0, item);
            $.plugin_dragndrop('.dragndrop1').duration(150);
            $.plugin_dragndrop('.dragndrop2').duration(150);
        };
        OptionalCoursesOffer.prototype.addNewSectionRow = function (index) {
            var sectionRow;
            sectionRow = {
                index: index,
                id: index,
                courseId: '',
                sectionName: '',
                type: 'new',
                students: Array()
            };
            return sectionRow;
        };
        OptionalCoursesOffer.prototype.removeSection = function (index) {
            var section_arr = this.$scope.optional.sections;
            var targetIndex = ums.Utils.findIndex(section_arr, index.toString());
            //alert(targetIndex);
            var courseId = $("#sectionCourseId").val();
            var url = this.urlPlaceholderReplace(map["delete_section"]);
            url = url.replace("{COURSE-ID}", courseId);
            url = url.replace("{SECTION-NAME}", this.$scope.optional.sections[targetIndex].sectionName);
            if (this.$scope.optional.sections[targetIndex].type != "new") {
                this.httpClient.doDelete(url)
                    .success(function () {
                    $.notific8("Removed Section");
                }).error(function (data) {
                });
            }
            this.$scope.optional.sections.splice(targetIndex, 1);
        };
        OptionalCoursesOffer.prototype.saveSection = function (section) {
            var courseId = $("#sectionCourseId").val();
            var url = this.urlPlaceholderReplace(map["delete_section"]);
            url = url.replace("{COURSE-ID}", courseId);
            url = url.replace("{SECTION-NAME}", section.sectionName);
            var sectionStudents = [];
            $("#section" + section.index + " > .jqselection-selectable > .dragableObject").each(function () { sectionStudents.push($(this).html()); });
            var students = sectionStudents.join(',');
            //alert(students);
            var complete_json = {};
            complete_json["students"] = students;
            console.log(complete_json);
            this.httpClient.put(url, complete_json, 'application/json')
                .success(function () {
                //alert("ifti1");
            }).error(function (data) {
            });
        };
        OptionalCoursesOffer.prototype.urlPlaceholderReplace = function (inputUrl) {
            var url = inputUrl.replace("{SEMESTER-ID}", this.$scope.optional.semesterId);
            url = url.replace("{PROGRAM-ID}", this.$scope.optional.programId);
            url = url.replace("{YEAR}", this.$scope.optional.yearSemester.split(" - ")[0]);
            url = url.replace("{SEMESTER}", this.$scope.optional.yearSemester.split(" - ")[1]);
            return url;
        };
        OptionalCoursesOffer.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', 'semesterService', 'commonService'];
        return OptionalCoursesOffer;
    }());
    ums.OptionalCoursesOffer = OptionalCoursesOffer;
    ums.UMS.controller('OptionalCoursesOffer', OptionalCoursesOffer);
})(ums || (ums = {}));
///<reference path="../../model/ParameterSetting.ts"/>
///<reference path="../../model/master_data/Parameter.ts"/>
var ums;
(function (ums) {
    var DummySemesterSetting = (function () {
        function DummySemesterSetting() {
        }
        return DummySemesterSetting;
    }());
    var SemesterSettingParameter = (function () {
        function SemesterSettingParameter(appConstants, httpClient, $scope, $q, notify) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            $scope.contentEdit = false;
            $scope.addRow = false;
            $scope.showTable = false;
            $scope.rightDivShow = false;
            $scope.programTypeSelector = appConstants.programType;
            $scope.programType = $scope.programTypeSelector[0];
            $scope.getSemesterInfo = this.getSemesterInfo.bind(this);
            $scope.searchAndEdit = this.searchAndEdit.bind(this);
            $scope.addNewRow = this.addNewRow.bind(this);
            $scope.getParameterSettingData = this.getParameterSettingData.bind(this);
            $scope.getParameterInfo = this.getParameterInfo.bind(this);
            $scope.editData = this.editData.bind(this);
            $scope.addDate = this.addDate.bind(this);
            $scope.toTimestamp = this.toTimestamp.bind(this);
            $scope.addData = this.addData.bind(this);
            $scope.showValue = this.showValue.bind(this);
            $scope.cancel = this.cancel.bind(this);
            $scope.getAllData = this.getAllData.bind(this);
            $scope.addAndReloadData = this.addAndReloadData.bind(this);
            $scope.saveAll = this.saveAll.bind(this);
            $scope.getDummyParameterSetting = this.getDummyParameterSetting.bind(this);
            $scope.data = {
                startDate: "",
                endDate: "",
                foundData: false
            };
            this.getSemesterInfo();
            $scope.showParameterValue = this.showParameterValue.bind(this);
        }
        SemesterSettingParameter.prototype.addAndReloadData = function (parameter) {
            console.log("add and reloead data");
            console.log(parameter);
            this.addData(parameter);
        };
        SemesterSettingParameter.prototype.getAllData = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.$scope.rightDivShow = true;
            console.log("get ALL data");
            this.getParameterSettingData().then(function (parameterSettingArr) {
                _this.getDummyParameterSetting();
            });
        };
        SemesterSettingParameter.prototype.cancel = function (srl, parameterId) {
            this.$scope.semesterSettingStore[srl].editData = false;
        };
        SemesterSettingParameter.prototype.getDummyParameterSetting = function () {
            this.$scope.showTable = true;
            var gotValue;
            var parameterSettingArr = [];
            gotValue = false;
            console.log("Get Dummy Parameter settings");
            console.log(this.$scope.parameterSelector);
            console.log("Semester setting parameter data");
            console.log(this.$scope.semesterSettingParameterData);
            var count = 0;
            for (var i = 0; i < this.$scope.parameterSelector.length; i++) {
                gotValue = false;
                for (var j = 0; j < this.$scope.semesterSettingParameterData.length; j++) {
                    if (this.$scope.semesterSettingParameterData[j].parameterId == this.$scope.parameterSelector[i].id) {
                        gotValue = true;
                        var inners = new DummySemesterSetting();
                        inners.srl = count;
                        inners.id = this.$scope.semesterSettingParameterData[j].id;
                        inners.parameterId = this.$scope.semesterSettingParameterData[j].parameterId;
                        inners.semesterId = +this.$scope.semesterType.id;
                        inners.longDescription = this.$scope.parameterSelector[i].longDescription;
                        inners.startDate = this.$scope.semesterSettingParameterData[j].startDate;
                        inners.endDate = this.$scope.semesterSettingParameterData[j].endDate;
                        inners.startDateTmp = this.$scope.semesterSettingParameterData[j].startDate;
                        inners.endDateTmp = this.$scope.semesterSettingParameterData[j].endDate;
                        inners.editData = false;
                        inners.updatable = true;
                        parameterSettingArr.push(inners);
                        count++;
                    }
                }
                if (gotValue == false) {
                    var inners = new DummySemesterSetting();
                    inners.srl = count;
                    inners.id = '';
                    inners.parameterId = this.$scope.parameterSelector[i].id;
                    inners.semesterId = this.$scope.semesterTypeId;
                    inners.longDescription = this.$scope.parameterSelector[i].longDescription;
                    inners.startDate = '';
                    inners.endDate = '';
                    inners.startDateTmp = '';
                    inners.endDateTmp = '';
                    inners.editData = false;
                    inners.updatable = false;
                    parameterSettingArr.push(inners);
                    count++;
                }
            }
            this.$scope.semesterSettingStore = parameterSettingArr;
        };
        SemesterSettingParameter.prototype.addDate = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 200);
            //BEGIN PLUGINS DATETIME PICKER
            //$('.datetimepicker-default').datetimepicker();
        };
        SemesterSettingParameter.prototype.showParameterValue = function () {
            console.log(this.$scope.getParameterSettingData);
        };
        SemesterSettingParameter.prototype.showValue = function () {
            /*  console.log('MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM-----------');
              console.log(this.$scope.data.startDate + "@@@@@");*/
        };
        SemesterSettingParameter.prototype.showData = function () {
            this.$scope.showTable = true;
        };
        SemesterSettingParameter.prototype.editData = function (srl, editId) {
            this.$scope.editId = editId;
            this.$scope.contentEdit = true;
            this.$scope.semesterSettingStore[srl].editData = true;
        };
        SemesterSettingParameter.prototype.getParameterSettingData = function () {
            var _this = this;
            var defer = this.$q.defer();
            //this.$scope.showTable= true;
            var semesterSettingParameterArr;
            this.httpClient.get('academic/parameterSetting/semester/' + (+this.$scope.semesterType.id), 'application/json', function (json, etag) {
                semesterSettingParameterArr = json.entries;
                console.log("========Parameter Settings data by Me==========");
                console.log(semesterSettingParameterArr);
                _this.$scope.semesterSettingSize = semesterSettingParameterArr.length;
                _this.$scope.semesterSettingParameterData = semesterSettingParameterArr;
                _this.$scope.semesterSettingParameterData.forEach(function (s) {
                });
                defer.resolve(semesterSettingParameterArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SemesterSettingParameter.prototype.getSemesterInfo = function () {
            var _this = this;
            var semesterArr;
            this.httpClient.get('academic/semester/program-type/' + this.$scope.programType.id + '/limit/40/status/3', 'application/json', function (json, etag) {
                semesterArr = json.entries;
                _this.$scope.semesterSelector = semesterArr;
                _this.$scope.semesterType = _this.$scope.semesterSelector[0];
                _this.getParameterInfo();
            }, function (response) {
                console.error(response);
            });
        };
        SemesterSettingParameter.prototype.getParameterInfo = function () {
            var _this = this;
            var parameterArr;
            this.httpClient.get('academic/academicCalenderParameter/all', 'application/json', function (json, etag) {
                parameterArr = json.entries;
                _this.$scope.parameterSelector = parameterArr;
            }, function (response) {
                console.error(response);
            });
        };
        SemesterSettingParameter.prototype.searchAndEdit = function () {
            this.$scope.showTable = true;
        };
        SemesterSettingParameter.prototype.addNewRow = function () {
            if (this.$scope.addRow == true) {
                this.$scope.addRow = false;
                console.log(this.$scope.addRow);
            }
            this.$scope.addRow = true;
            console.log(this.$scope.addRow);
        };
        SemesterSettingParameter.prototype.addData = function (parameter) {
            var _this = this;
            if (parameter.updatable == true) {
                if (this.$scope.toTimestamp(parameter.startDateTmp) >= this.$scope.toTimestamp(parameter.endDateTmp)) {
                    this.notify.warn("End Date Must Be Bigger Than Start date.");
                }
                else {
                    this.$scope.semesterSettingStore[parameter.srl].startDate = parameter.startDateTmp;
                    this.$scope.semesterSettingStore[parameter.srl].endDate = parameter.endDateTmp;
                    var json = this.convertToJsonForUpdate(this.$scope.semesterSettingStore[parameter.srl].id, +this.$scope.semesterType.id, parameter.parameterId, parameter.startDate, parameter.endDate);
                    this.httpClient.put('academic/parameterSetting/' + this.$scope.semesterSettingStore[parameter.srl].id, json, 'application/json')
                        .success(function () {
                        _this.notify.success("Successfully Updated!!");
                    }).error(function (data) {
                    });
                    this.$scope.semesterSettingStore[parameter.srl].startDate = parameter.startDateTmp;
                    this.$scope.semesterSettingStore[parameter.srl].endDate = parameter.endDateTmp;
                    this.$scope.semesterSettingStore[parameter.srl].updatable = true;
                    this.$scope.semesterSettingStore[parameter.srl].editData = false;
                }
            }
            else {
                if (parameter.startDateTmp == '' || parameter.endDateTmp == '') {
                    this.notify.warn("Please select both dates.");
                }
                if (this.$scope.toTimestamp(parameter.startDateTmp) >= this.$scope.toTimestamp(parameter.endDateTmp)) {
                    this.notify.warn("End Date Must Be Bigger Than Start date.");
                }
                else {
                    var jsons = this.convertToJson(+this.$scope.semesterType.id, parameter.parameterId, parameter.startDateTmp, parameter.endDateTmp);
                    console.log("----------------Post Request----------------");
                    console.log(jsons);
                    this.$scope.semesterSettingStore[parameter.srl].editData = false;
                    this.httpClient.post('academic/parameterSetting/', jsons, 'application/json')
                        .success(function () {
                        _this.getParameterSettingData().then(function (parameterSettingArr) {
                            _this.getDummyParameterSetting();
                            _this.notify.success("Successfully inserted!!");
                        });
                    }).error(function (data) {
                    });
                }
            }
        };
        SemesterSettingParameter.prototype.convertToJson = function (semesterTypeId, parameterId, startDate, endDate) {
            var jsonObj = [];
            var item = {};
            item["semesterId"] = +this.$scope.semesterType.id;
            item["parameterId"] = parameterId;
            item["startDate"] = startDate;
            item["endDate"] = endDate;
            jsonObj.push(item);
            console.log("*******");
            console.log(startDate);
            console.log(endDate);
            console.log(item);
            return item;
        };
        SemesterSettingParameter.prototype.convertToJsonForUpdate = function (id, semesterTypeId, parameterId, startDate, endDate) {
            var item = {};
            item["id"] = id;
            item["semesterId"] = +this.$scope.semesterType.id;
            item["parameterId"] = parameterId;
            item["startDate"] = startDate;
            item["endDate"] = endDate;
            return item;
        };
        SemesterSettingParameter.prototype.saveAll = function () {
            var finished = false;
            console.log(this.$scope.semesterSettingStore);
            var count = 0;
            var store = [];
            for (var i = 0; i < this.$scope.semesterSettingStore.length; i++) {
                store.push(this.$scope.semesterSettingStore[i]);
            }
            var length = this.$scope.semesterSettingStore.length;
            for (var i = 0; i < store.length; i++) {
                this.addData(store[i]);
                console.log("----");
                console.log(store[i]);
                count++;
            }
        };
        SemesterSettingParameter.prototype.toTimestamp = function (strDate) {
            var datum = Date.parse(strDate);
            return datum / 1000;
        };
        SemesterSettingParameter.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify'];
        return SemesterSettingParameter;
    }());
    ums.SemesterSettingParameter = SemesterSettingParameter;
    ums.UMS.controller("SemesterSettingParameter", SemesterSettingParameter);
})(ums || (ums = {}));
///<reference path="../../model/OptionalCourse.ts"/>
var ums;
(function (ums) {
    var OptionalCourseSetting = (function () {
        function OptionalCourseSetting() {
        }
        return OptionalCourseSetting;
    }());
    var OptionalCourseDatelineSet = (function () {
        function OptionalCourseDatelineSet(appConstants, httpClient, $scope, $q, notify, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.semesterService = semesterService;
            $scope.contentEdit = false;
            $scope.addRow = false;
            $scope.showTable = false;
            $scope.rightDivShow = false;
            $scope.programTypeSelector = appConstants.programType;
            $scope.AdditionalRoleType = appConstants.mstParameterAdditionalRole;
            $scope.programType = $scope.programTypeSelector[0];
            $scope.getSemesterInfo = this.fatchUserProgramAndSemester.bind(this);
            $scope.fatchUser = this.getSemesterInfo.bind(this);
            $scope.searchAndEdit = this.searchAndEdit.bind(this);
            $scope.addNewRow = this.addNewRow.bind(this);
            $scope.getOptionalCourseData = this.getOptionalCourseData.bind(this);
            $scope.getParameterSettingDateline = this.getParameterSettingDateline.bind(this);
            $scope.getParameterInfo = this.getParameterInfo.bind(this);
            $scope.editData = this.editData.bind(this);
            $scope.addDate = this.addDate.bind(this);
            $scope.addData = this.addData.bind(this);
            $scope.cancel = this.cancel.bind(this);
            $scope.getAllData = this.getAllData.bind(this);
            $scope.addAndReloadData = this.addAndReloadData.bind(this);
            $scope.getHistory = this.getHistory.bind(this);
            $scope.toTimestamp = this.toTimestamp.bind(this);
            $scope.saveAll = this.saveAll.bind(this);
            $scope.getDummyOptionalCourse = this.getDummyOptionalCourse.bind(this);
            $scope.data = {
                startDate: "",
                endDate: "",
                foundData: false
            };
            //this.getSemesterInfo();
            this.fatchUserProgramAndSemester();
            $scope.showParameterValue = this.showParameterValue.bind(this);
        }
        OptionalCourseDatelineSet.prototype.fatchUserProgramAndSemester = function () {
            var _this = this;
            this.httpClient.get('/ums-webservice-academic/users/current', 'application/json', function (user) {
                _this.httpClient.get('academic/program/programType/' + 11, 'application/json', function (program) {
                    if (user.roleId == '9999') {
                        _this.$scope.programsAndDepartments = program.entries;
                        _this.$scope.selectedProgram = _this.$scope.programsAndDepartments[0];
                        _this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 10, ums.UmsUtil.SEMESTER_FETCH_ALL)
                            .then(function (res) {
                            _this.$scope.semesterSelector = [];
                            res.forEach(function (s) {
                                _this.$scope.semesterSelector.push(s);
                                _this.$scope.semesterType = _this.$scope.semesterSelector[0];
                            });
                        }, function (response) {
                            console.error(response);
                        });
                    }
                    else {
                        var filteredProgram = [];
                        for (var _i = 0, _a = program.entries; _i < _a.length; _i++) {
                            var data = _a[_i];
                            if (data.departmentId == user.departmentId) {
                                filteredProgram.push(data);
                            }
                        }
                        _this.$scope.programsAndDepartments = filteredProgram;
                        _this.$scope.selectedProgram = _this.$scope.programsAndDepartments[0];
                        _this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 10, ums.UmsUtil.SEMESTER_FETCH_ALL)
                            .then(function (res) {
                            _this.$scope.semesterSelector = [];
                            res.forEach(function (s) {
                                if (s.status === 1) {
                                    _this.$scope.semesterSelector.push(s);
                                    _this.$scope.semesterType = s;
                                }
                            });
                        }, function (response) {
                            console.error(response);
                        });
                    }
                }, function (response) {
                    console.error(response);
                });
            }, function (response) {
                console.error(response);
            });
        };
        OptionalCourseDatelineSet.prototype.getSemesterInfo = function () {
            var _this = this;
            this.httpClient.get('/ums-webservice-academic/users/current', 'application/json', function (user) {
                _this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 10, ums.UmsUtil.SEMESTER_FETCH_ALL)
                    .then(function (res) {
                    _this.$scope.semesterSelector = [];
                    if (user.roleId == '9999') {
                        res.forEach(function (s) {
                            _this.$scope.semesterSelector.push(s);
                            _this.$scope.semesterType = _this.$scope.semesterSelector[0];
                        });
                    }
                    else {
                        res.forEach(function (s) {
                            if (s.status === 1) {
                                _this.$scope.semesterSelector.push(s);
                                _this.$scope.semesterType = s;
                            }
                        });
                    }
                }, function (response) {
                    console.error(response);
                });
            }, function (response) {
                console.error(response);
            });
        };
        OptionalCourseDatelineSet.prototype.getParameterInfo = function () {
            var _this = this;
            var parameterArr;
            var defer = this.$q.defer();
            this.httpClient.get('academic/academicCalenderParameter/parameter/' + 3, 'application/json', function (json, etag) {
                parameterArr = json.entries;
                _this.$scope.parameterSelector = parameterArr;
                // this.getParameterSettingDateline();
                defer.resolve(parameterArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptionalCourseDatelineSet.prototype.getParameterSettingDateline = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('academic/parameterSetting/semester/' + (+this.$scope.semesterType.id), 'application/json', function (json, etag) {
                _this.$scope.parameterSettingDateline = json.entries;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        OptionalCourseDatelineSet.prototype.getAllData = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.getParameterInfo().then(function () {
                _this.getParameterSettingDateline().then(function () {
                    _this.getOptionalCourseData().then(function (parameterSettingArr) {
                        _this.getDummyOptionalCourse();
                        _this.$scope.rightDivShow = true;
                        _this.$scope.showTable = true;
                    });
                });
            });
        };
        OptionalCourseDatelineSet.prototype.getOptionalCourseData = function () {
            var _this = this;
            var defer = this.$q.defer();
            if (this.$scope.selectedProgram.id == '') {
                this.notify.warn("Please select program.");
            }
            else {
                var semesterSettingParameterArr;
                this.httpClient.get('academic/OptionalCourse/semester/' + (+this.$scope.semesterType.id) + '/program/' + (+this.$scope.selectedProgram.id), 'application/json', function (json, etag) {
                    semesterSettingParameterArr = json.entries;
                    _this.$scope.semesterSettingSize = semesterSettingParameterArr.length;
                    _this.$scope.optionalCourseParameterData = semesterSettingParameterArr;
                    _this.$scope.optionalCourseParameterData.forEach(function (s) {
                    });
                    defer.resolve(semesterSettingParameterArr);
                }, function (response) {
                    console.error(response);
                });
                /*this.$scope.showTable= true;*/
                return defer.promise;
            }
        };
        OptionalCourseDatelineSet.prototype.getDummyOptionalCourse = function () {
            // this.$scope.showTable = true;
            var gotValue;
            var parameterSettingArr = [];
            gotValue = false;
            var count = 0;
            for (var i = 0; i < this.$scope.parameterSelector.length; i++) {
                gotValue = false;
                if (this.$scope.parameterSelector[i].additionalRoleId === this.$scope.AdditionalRoleType['OPTIONAL_COURSE_DATELINE']) {
                    for (var j = 0; j < this.$scope.optionalCourseParameterData.length; j++) {
                        if (this.$scope.optionalCourseParameterData[j].parameterId == this.$scope.parameterSelector[i].id) {
                            gotValue = true;
                            var inners = new OptionalCourseSetting();
                            inners.srl = count;
                            inners.id = this.$scope.optionalCourseParameterData[j].id;
                            inners.parameterId = this.$scope.optionalCourseParameterData[j].parameterId;
                            inners.semesterId = +this.$scope.semesterType.id;
                            inners.longDescription = this.$scope.parameterSelector[i].longDescription;
                            inners.startDate = this.$scope.optionalCourseParameterData[j].startDate;
                            inners.endDate = this.$scope.optionalCourseParameterData[j].endDate;
                            inners.startDateTmp = this.$scope.optionalCourseParameterData[j].startDate;
                            inners.endDateTmp = this.$scope.optionalCourseParameterData[j].endDate;
                            inners.editData = false;
                            inners.updatable = true;
                            parameterSettingArr.push(inners);
                            count++;
                        }
                    }
                    if (gotValue == false) {
                        if (this.$scope.parameterSettingDateline.length == 0) {
                            var inners = new OptionalCourseSetting();
                            inners.srl = count;
                            inners.id = '';
                            inners.parameterId = this.$scope.parameterSelector[i].id;
                            inners.semesterId = this.$scope.semesterTypeId;
                            inners.longDescription = this.$scope.parameterSelector[i].longDescription;
                            inners.startDate = '';
                            inners.endDate = '';
                            inners.startDateTmp = '';
                            inners.endDateTmp = '';
                            inners.editData = false;
                            inners.updatable = false;
                            parameterSettingArr.push(inners);
                            count++;
                        }
                        else {
                            for (var k = 0; k < this.$scope.parameterSettingDateline.length; k++) {
                                if (this.$scope.parameterSettingDateline[k].parameterId == this.$scope.parameterSelector[i].id) {
                                    var inners = new OptionalCourseSetting();
                                    inners.srl = count;
                                    inners.id = '';
                                    inners.parameterId = this.$scope.parameterSelector[i].id;
                                    inners.semesterId = this.$scope.semesterTypeId;
                                    inners.longDescription = this.$scope.parameterSelector[i].longDescription;
                                    inners.startDate = this.$scope.parameterSettingDateline[k].startDate;
                                    inners.endDate = this.$scope.parameterSettingDateline[k].endDate;
                                    inners.startDateTmp = this.$scope.parameterSettingDateline[k].startDate;
                                    inners.endDateTmp = this.$scope.parameterSettingDateline[k].endDate;
                                    inners.editData = false;
                                    inners.updatable = false;
                                    parameterSettingArr.push(inners);
                                    count++;
                                }
                            }
                        }
                    }
                }
            }
            this.$scope.semesterSettingStore = parameterSettingArr;
            /*this.$scope.semesterSettingStore.$apply();*/
            /* this.$scope.showTable= true;*/
        };
        OptionalCourseDatelineSet.prototype.addAndReloadData = function (parameter) {
            this.addData(parameter);
        };
        OptionalCourseDatelineSet.prototype.cancel = function (srl, parameterId) {
            this.$scope.semesterSettingStore[srl].editData = false;
        };
        OptionalCourseDatelineSet.prototype.addDate = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 10);
            //BEGIN PLUGINS DATETIME PICKER
            //$('.datetimepicker-default').datetimepicker();
        };
        OptionalCourseDatelineSet.prototype.showParameterValue = function () {
        };
        OptionalCourseDatelineSet.prototype.showData = function () {
            this.$scope.showTable = true;
        };
        OptionalCourseDatelineSet.prototype.editData = function (srl, editId) {
            this.$scope.editId = editId;
            this.$scope.contentEdit = true;
            this.$scope.semesterSettingStore[srl].editData = true;
        };
        OptionalCourseDatelineSet.prototype.searchAndEdit = function () {
            this.$scope.showTable = true;
        };
        OptionalCourseDatelineSet.prototype.addNewRow = function () {
            if (this.$scope.addRow == true) {
                this.$scope.addRow = false;
            }
            this.$scope.addRow = true;
        };
        OptionalCourseDatelineSet.prototype.addData = function (parameter) {
            var _this = this;
            if (parameter.updatable == true) {
                if (this.$scope.toTimestamp(parameter.startDateTmp) >= this.$scope.toTimestamp(parameter.endDateTmp)) {
                    this.notify.warn("End Date Must Be Bigger Than Start date.");
                }
                else {
                    this.$scope.semesterSettingStore[parameter.srl].startDate = parameter.startDateTmp;
                    this.$scope.semesterSettingStore[parameter.srl].endDate = parameter.endDateTmp;
                    var json = this.convertToJsonForUpdate(this.$scope.semesterSettingStore[parameter.srl].id, +this.$scope.semesterType.id, parameter.parameterId, parameter.startDate, parameter.endDate);
                    var parameterSettingLogJsons_1 = this.convertToJsonForLog(+this.$scope.semesterType.id, parameter.parameterId, parameter.startDateTmp, parameter.endDateTmp);
                    this.httpClient.put('academic/OptionalCourse/' + this.$scope.semesterSettingStore[parameter.srl].id, json, 'application/json')
                        .success(function (tes) {
                        _this.notify.success("Successfully Updated!!");
                        _this.httpClient.post('academic/parameterSettingLog/', parameterSettingLogJsons_1, 'application/json')
                            .success(function () {
                        }).error(function (data) {
                        });
                    }).error(function (response) {
                        _this.notify.error(response);
                        _this.editData(parameter.srl, parameter.parameterId);
                    });
                    this.$scope.semesterSettingStore[parameter.srl].startDate = parameter.startDateTmp;
                    this.$scope.semesterSettingStore[parameter.srl].endDate = parameter.endDateTmp;
                    this.$scope.semesterSettingStore[parameter.srl].updatable = true;
                    this.$scope.semesterSettingStore[parameter.srl].editData = false;
                }
            }
            else {
                if (parameter.startDateTmp == '' || parameter.endDateTmp == '') {
                    this.notify.warn("Please select both dates.");
                }
                if (this.$scope.toTimestamp(parameter.startDateTmp) >= this.$scope.toTimestamp(parameter.endDateTmp)) {
                    this.notify.warn("End Date Must Be Bigger Than Start date.");
                }
                else {
                    var jsons = this.convertToJson(+this.$scope.semesterType.id, parameter.parameterId, parameter.startDateTmp, parameter.endDateTmp);
                    var parameterSettingLogJsons_2 = this.convertToJsonForLog(+this.$scope.semesterType.id, parameter.parameterId, parameter.startDateTmp, parameter.endDateTmp);
                    this.$scope.semesterSettingStore[parameter.srl].editData = false;
                    this.httpClient.post('academic/OptionalCourse/', jsons, 'application/json')
                        .success(function (tes) {
                        _this.getOptionalCourseData().then(function (parameterSettingArr) {
                            _this.getDummyOptionalCourse();
                            _this.notify.success("Successfully inserted!!");
                            _this.httpClient.post('academic/parameterSettingLog/', parameterSettingLogJsons_2, 'application/json')
                                .success(function () {
                            }).error(function (data) {
                                console.log("Data Errors---->");
                                console.log(data);
                            });
                        });
                    }).error(function (response) {
                        _this.notify.error(response);
                        _this.editData(parameter.srl, parameter.parameterId);
                    });
                }
            }
        };
        OptionalCourseDatelineSet.prototype.convertToJson = function (semesterTypeId, parameterId, startDate, endDate) {
            var jsonObj = [];
            var item = {};
            item["semesterId"] = +this.$scope.semesterType.id;
            item["programId"] = +this.$scope.selectedProgram.id;
            item["parameterId"] = parameterId;
            item["startDate"] = startDate;
            item["endDate"] = endDate;
            jsonObj.push(item);
            return item;
        };
        OptionalCourseDatelineSet.prototype.convertToJsonForLog = function (semesterTypeId, parameterId, startDate, endDate) {
            var jsonObj = [];
            var item = {};
            item["semesterId"] = +this.$scope.semesterType.id;
            item["programId"] = +this.$scope.selectedProgram.id;
            item["parameterId"] = parameterId;
            item["additionalRoleId"] = +this.$scope.AdditionalRoleType['OPTIONAL_COURSE_DATELINE'];
            item["startDate"] = startDate;
            item["endDate"] = endDate;
            jsonObj.push(item);
            return item;
        };
        OptionalCourseDatelineSet.prototype.convertToJsonForUpdate = function (id, semesterTypeId, parameterId, startDate, endDate) {
            var item = {};
            item["id"] = id;
            item["semesterId"] = +this.$scope.semesterType.id;
            item["programId"] = +this.$scope.selectedProgram.id;
            item["parameterId"] = parameterId;
            item["startDate"] = startDate;
            item["endDate"] = endDate;
            return item;
        };
        OptionalCourseDatelineSet.prototype.saveAll = function () {
            var finished = false;
            var count = 0;
            var store = [];
            for (var i = 0; i < this.$scope.semesterSettingStore.length; i++) {
                store.push(this.$scope.semesterSettingStore[i]);
            }
            var length = this.$scope.semesterSettingStore.length;
            for (var i = 0; i < store.length; i++) {
                this.addData(store[i]);
                count++;
            }
        };
        OptionalCourseDatelineSet.prototype.getHistory = function (parameterId, semesterId, programId) {
            var _this = this;
            this.httpClient.get("academic/parameterSettingLog/semester/" + semesterId + "/program/" + programId + "/parameter/" + parameterId, 'application/json', function (json, etag) {
                _this.$scope.historyList = json.entries;
            }, function (response) {
                console.error(response);
            });
        };
        OptionalCourseDatelineSet.prototype.toTimestamp = function (strDate) {
            var datum = Date.parse(strDate);
            return datum / 1000;
        };
        OptionalCourseDatelineSet.prototype.formatDate = function (dateVal) {
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"
            ];
            var newDate = new Date(dateVal);
            var sMonth = this.padValue(newDate.getMonth() + 1);
            var sDay = this.padValue(newDate.getDate());
            var sYear = newDate.getFullYear();
            var sHour = newDate.getHours();
            var sMinute = this.padValue(newDate.getMinutes());
            var sAMPM = "AM";
            var iHourCheck = +sHour;
            if (iHourCheck > 12) {
                sAMPM = "PM";
                sHour = iHourCheck - 12;
            }
            else if (iHourCheck === 0) {
                sHour = 12;
            }
            sHour = this.padValue(sHour);
            return sDay + "-" + monthNames[+sMonth - 1] + "-" + sYear + " " + sHour + ":" + sMinute + " " + sAMPM;
        };
        OptionalCourseDatelineSet.prototype.padValue = function (value) {
            return (value < 10) ? "0" + value : value;
        };
        OptionalCourseDatelineSet.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', 'semesterService'];
        return OptionalCourseDatelineSet;
    }());
    ums.OptionalCourseDatelineSet = OptionalCourseDatelineSet;
    ums.UMS.controller("OptionalCourseDatelineSet", OptionalCourseDatelineSet);
})(ums || (ums = {}));
///<reference path="../../model/TeacherEvaluation.ts"/>
var ums;
(function (ums) {
    var TeacherEvaluationSetting = (function () {
        function TeacherEvaluationSetting() {
        }
        return TeacherEvaluationSetting;
    }());
    var TeacherEvaluationDatelineSet = (function () {
        function TeacherEvaluationDatelineSet(appConstants, httpClient, $scope, $q, notify, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.semesterService = semesterService;
            $scope.contentEdit = false;
            $scope.addRow = false;
            $scope.showTable = false;
            $scope.programShow = false;
            $scope.rightDivShow = false;
            $scope.programTypeSelector = appConstants.programType;
            $scope.AdditionalRoleType = appConstants.mstParameterAdditionalRole;
            $scope.programsAndDepartments = appConstants.deptShort;
            $scope.selectedProgram = $scope.programsAndDepartments[0];
            $scope.programType = $scope.programTypeSelector[0];
            $scope.getSemesterInfo = this.getSemesterInfo.bind(this);
            $scope.searchAndEdit = this.searchAndEdit.bind(this);
            $scope.addNewRow = this.addNewRow.bind(this);
            $scope.getTeacherEvaluationData = this.getTeacherEvaluationData.bind(this);
            $scope.getParameterSettingDateline = this.getParameterSettingDateline.bind(this);
            $scope.getParameterInfo = this.getParameterInfo.bind(this);
            $scope.editData = this.editData.bind(this);
            $scope.addDate = this.addDate.bind(this);
            $scope.addData = this.addData.bind(this);
            $scope.showValue = this.showValue.bind(this);
            $scope.cancel = this.cancel.bind(this);
            $scope.getAllData = this.getAllData.bind(this);
            $scope.toTimestamp = this.toTimestamp.bind(this);
            $scope.getHistory = this.getHistory.bind(this);
            $scope.addAndReloadData = this.addAndReloadData.bind(this);
            $scope.saveAll = this.saveAll.bind(this);
            $scope.getDummyTeacherEvaluation = this.getDummyTeacherEvaluation.bind(this);
            $scope.data = {
                startDate: "",
                endDate: "",
                foundData: false
            };
            //this.getSemesterInfo();
            this.fatchUserProgramAndSemester();
            $scope.showParameterValue = this.showParameterValue.bind(this);
        }
        TeacherEvaluationDatelineSet.prototype.fatchUserProgramAndSemester = function () {
            var _this = this;
            this.httpClient.get('/ums-webservice-academic/users/current', 'application/json', function (user) {
                _this.loggedUser = user;
                if (user.departmentId == 15)
                    _this.$scope.programShow = true;
                _this.httpClient.get('academic/program/programType/' + 11, 'application/json', function (program) {
                    if (user.roleId == '9999') {
                        _this.$scope.programsAndDepartments = program.entries;
                        _this.$scope.selectedProgram = _this.$scope.programsAndDepartments[0];
                        _this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 10, ums.UmsUtil.SEMESTER_FETCH_ALL)
                            .then(function (res) {
                            _this.$scope.semesterSelector = [];
                            res.forEach(function (s) {
                                _this.$scope.semesterSelector.push(s);
                                _this.$scope.semesterType = _this.$scope.semesterSelector[0];
                            });
                        }, function (response) {
                            console.error(response);
                        });
                    }
                    else {
                        var filteredProgram = [];
                        for (var _i = 0, _a = program.entries; _i < _a.length; _i++) {
                            var data = _a[_i];
                            if (data.departmentId == user.departmentId) {
                                filteredProgram.push(data);
                            }
                        }
                        _this.$scope.programsAndDepartments = filteredProgram;
                        _this.$scope.selectedProgram = _this.$scope.programsAndDepartments[0];
                        _this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 10, ums.UmsUtil.SEMESTER_FETCH_ALL)
                            .then(function (res) {
                            _this.$scope.semesterSelector = [];
                            res.forEach(function (s) {
                                if (s.status === 1) {
                                    _this.$scope.semesterSelector.push(s);
                                    _this.$scope.semesterType = s;
                                }
                            });
                        }, function (response) {
                            console.error(response);
                        });
                    }
                }, function (response) {
                    console.error(response);
                });
            }, function (response) {
                console.error(response);
            });
        };
        TeacherEvaluationDatelineSet.prototype.getSemesterInfo = function () {
            var _this = this;
            this.httpClient.get('/ums-webservice-academic/users/current', 'application/json', function (user) {
                _this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 10, ums.UmsUtil.SEMESTER_FETCH_ALL)
                    .then(function (res) {
                    _this.$scope.semesterSelector = [];
                    if (user.roleId == '9999') {
                        res.forEach(function (s) {
                            _this.$scope.semesterSelector.push(s);
                            _this.$scope.semesterType = _this.$scope.semesterSelector[0];
                            _this.getParameterInfo();
                        });
                    }
                    else {
                        res.forEach(function (s) {
                            if (s.status === 1) {
                                _this.$scope.semesterSelector.push(s);
                                _this.$scope.semesterType = s;
                                _this.getParameterInfo();
                            }
                        });
                    }
                }, function (response) {
                    console.error(response);
                });
            }, function (response) {
                console.error(response);
            });
        };
        TeacherEvaluationDatelineSet.prototype.getParameterInfo = function () {
            var _this = this;
            var parameterArr;
            var defer = this.$q.defer();
            this.httpClient.get('academic/academicCalenderParameter/parameter/' + 2, 'application/json', function (json, etag) {
                parameterArr = json.entries;
                _this.$scope.parameterSelector = parameterArr;
                //this.getParameterSettingDateline();
                defer.resolve(parameterArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        TeacherEvaluationDatelineSet.prototype.getParameterSettingDateline = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('academic/parameterSetting/semester/' + (+this.$scope.semesterType.id), 'application/json', function (json, etag) {
                _this.$scope.parameterSettingDateline = json.entries;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        TeacherEvaluationDatelineSet.prototype.getAllData = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.getParameterInfo().then(function () {
                _this.getParameterSettingDateline().then(function () {
                    _this.getTeacherEvaluationData().then(function (parameterSettingArr) {
                        _this.getDummyTeacherEvaluation();
                        _this.$scope.rightDivShow = true;
                        _this.$scope.showTable = true;
                    });
                });
            });
        };
        TeacherEvaluationDatelineSet.prototype.getTeacherEvaluationData = function () {
            var _this = this;
            /*  if(this.$scope.selectedProgram.id == '') {
                  this.notify.warn("Please select program.");
              } else {*/
            var programId = 0;
            if (this.loggedUser.departmentId == "15") {
                programId = 15;
            }
            else {
                programId = +this.$scope.selectedProgram.id;
            }
            var defer = this.$q.defer();
            /* this.$scope.showTable= true;*/
            var semesterSettingParameterArr;
            this.httpClient.get('academic/TeacherEvaluation/semester/' + (+this.$scope.semesterType.id) + '/program/' + programId, 'application/json', function (json, etag) {
                semesterSettingParameterArr = json.entries;
                _this.$scope.semesterSettingSize = semesterSettingParameterArr.length;
                for (var i = 0; i < semesterSettingParameterArr.length; i++) {
                }
                _this.$scope.teacherEvaluationParameterData = semesterSettingParameterArr;
                _this.$scope.teacherEvaluationParameterData.forEach(function (s) {
                });
                defer.resolve(semesterSettingParameterArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
            /*  }*/
        };
        TeacherEvaluationDatelineSet.prototype.getDummyTeacherEvaluation = function () {
            /*       this.$scope.showTable = true;*/
            var gotValue;
            var parameterSettingArr = [];
            gotValue = false;
            var count = 0;
            for (var i = 0; i < this.$scope.parameterSelector.length; i++) {
                gotValue = false;
                if (this.$scope.parameterSelector[i].additionalRoleId === this.$scope.AdditionalRoleType['TEACHING_EVALUATION_DATELINE']) {
                    for (var j = 0; j < this.$scope.teacherEvaluationParameterData.length; j++) {
                        if (this.$scope.teacherEvaluationParameterData[j].parameterId == this.$scope.parameterSelector[i].id) {
                            gotValue = true;
                            var inners = new TeacherEvaluationSetting();
                            inners.srl = count;
                            inners.id = this.$scope.teacherEvaluationParameterData[j].id;
                            inners.parameterId = this.$scope.teacherEvaluationParameterData[j].parameterId;
                            inners.semesterId = +this.$scope.semesterType.id;
                            inners.longDescription = this.$scope.parameterSelector[i].longDescription;
                            inners.startDate = this.$scope.teacherEvaluationParameterData[j].startDate;
                            inners.endDate = this.$scope.teacherEvaluationParameterData[j].endDate;
                            inners.startDateTmp = this.$scope.teacherEvaluationParameterData[j].startDate;
                            inners.endDateTmp = this.$scope.teacherEvaluationParameterData[j].endDate;
                            inners.editData = false;
                            inners.updatable = true;
                            parameterSettingArr.push(inners);
                            count++;
                        }
                    }
                    if (gotValue == false) {
                        if (this.$scope.parameterSettingDateline.length == 0) {
                            var inners = new TeacherEvaluationSetting();
                            inners.srl = count;
                            inners.id = '';
                            inners.parameterId = this.$scope.parameterSelector[i].id;
                            inners.semesterId = this.$scope.semesterTypeId;
                            inners.longDescription = this.$scope.parameterSelector[i].longDescription;
                            inners.startDate = '';
                            inners.endDate = '';
                            inners.startDateTmp = '';
                            inners.endDateTmp = '';
                            inners.editData = false;
                            inners.updatable = false;
                            parameterSettingArr.push(inners);
                            count++;
                        }
                        else {
                            for (var k = 0; k < this.$scope.parameterSettingDateline.length; k++) {
                                if (this.$scope.parameterSettingDateline[k].parameterId == this.$scope.parameterSelector[i].id) {
                                    var inners = new TeacherEvaluationSetting();
                                    inners.srl = count;
                                    inners.id = '';
                                    inners.parameterId = this.$scope.parameterSelector[i].id;
                                    inners.semesterId = this.$scope.semesterTypeId;
                                    inners.longDescription = this.$scope.parameterSelector[i].longDescription;
                                    inners.startDate = this.$scope.parameterSettingDateline[k].startDate;
                                    inners.endDate = this.$scope.parameterSettingDateline[k].endDate;
                                    inners.startDateTmp = this.$scope.parameterSettingDateline[k].startDate;
                                    inners.endDateTmp = this.$scope.parameterSettingDateline[k].endDate;
                                    inners.editData = false;
                                    inners.updatable = false;
                                    parameterSettingArr.push(inners);
                                    count++;
                                }
                            }
                        }
                    }
                }
            }
            this.$scope.semesterSettingStore = parameterSettingArr;
        };
        TeacherEvaluationDatelineSet.prototype.addAndReloadData = function (parameter) {
            this.addData(parameter);
        };
        TeacherEvaluationDatelineSet.prototype.cancel = function (srl, parameterId) {
            this.$scope.semesterSettingStore[srl].editData = false;
        };
        TeacherEvaluationDatelineSet.prototype.addDate = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 200);
            //BEGIN PLUGINS DATETIME PICKER
            //$('.datetimepicker-default').datetimepicker();
        };
        TeacherEvaluationDatelineSet.prototype.showParameterValue = function () {
            console.log(this.$scope.getTeacherEvaluationData);
        };
        TeacherEvaluationDatelineSet.prototype.showValue = function () {
            /*  console.log('MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM-----------');
              console.log(this.$scope.data.startDate + "@@@@@");*/
        };
        TeacherEvaluationDatelineSet.prototype.showData = function () {
            this.$scope.showTable = true;
        };
        TeacherEvaluationDatelineSet.prototype.editData = function (srl, editId) {
            this.$scope.editId = editId;
            this.$scope.contentEdit = true;
            this.$scope.semesterSettingStore[srl].editData = true;
        };
        TeacherEvaluationDatelineSet.prototype.searchAndEdit = function () {
            this.$scope.showTable = true;
        };
        TeacherEvaluationDatelineSet.prototype.addNewRow = function () {
            if (this.$scope.addRow == true) {
                this.$scope.addRow = false;
            }
            this.$scope.addRow = true;
        };
        TeacherEvaluationDatelineSet.prototype.addData = function (parameter) {
            var _this = this;
            if (parameter.updatable == true) {
                if (this.$scope.toTimestamp(parameter.startDateTmp) >= this.$scope.toTimestamp(parameter.endDateTmp)) {
                    this.notify.warn("End Date Must Be Bigger Than Start date.");
                }
                else {
                    this.$scope.semesterSettingStore[parameter.srl].startDate = parameter.startDateTmp;
                    this.$scope.semesterSettingStore[parameter.srl].endDate = parameter.endDateTmp;
                    var json = this.convertToJsonForUpdate(this.$scope.semesterSettingStore[parameter.srl].id, +this.$scope.semesterType.id, parameter.parameterId, parameter.startDate, parameter.endDate);
                    var parameterSettingLogJsons_3 = this.convertToJsonForLog(+this.$scope.semesterType.id, parameter.parameterId, parameter.startDateTmp, parameter.endDateTmp);
                    this.httpClient.put('academic/TeacherEvaluation/' + this.$scope.semesterSettingStore[parameter.srl].id, json, 'application/json')
                        .success(function () {
                        _this.notify.success("Successfully Updated!!");
                        _this.httpClient.post('academic/parameterSettingLog/', parameterSettingLogJsons_3, 'application/json')
                            .success(function () {
                        }).error(function (data) {
                            console.log("Data Errors---->");
                            console.log(data);
                        });
                    }).error(function (response) {
                        _this.notify.error(response);
                        _this.editData(parameter.srl, parameter.parameterId);
                    });
                    this.$scope.semesterSettingStore[parameter.srl].startDate = parameter.startDateTmp;
                    this.$scope.semesterSettingStore[parameter.srl].endDate = parameter.endDateTmp;
                    this.$scope.semesterSettingStore[parameter.srl].updatable = true;
                    this.$scope.semesterSettingStore[parameter.srl].editData = false;
                }
            }
            else {
                if (parameter.startDateTmp == '' || parameter.endDateTmp == '') {
                    this.notify.warn("Please select both dates.");
                }
                if (this.$scope.toTimestamp(parameter.startDateTmp) >= this.$scope.toTimestamp(parameter.endDateTmp)) {
                    this.notify.warn("End Date Must Be Bigger Than Start date.");
                }
                else {
                    var jsons = this.convertToJson(+this.$scope.semesterType.id, parameter.parameterId, parameter.startDateTmp, parameter.endDateTmp);
                    var parameterSettingLogJsons_4 = this.convertToJsonForLog(+this.$scope.semesterType.id, parameter.parameterId, parameter.startDateTmp, parameter.endDateTmp);
                    this.$scope.semesterSettingStore[parameter.srl].editData = false;
                    this.httpClient.post('academic/TeacherEvaluation/', jsons, 'application/json')
                        .success(function () {
                        _this.getTeacherEvaluationData().then(function (parameterSettingArr) {
                            _this.getDummyTeacherEvaluation();
                            _this.notify.success("Successfully inserted!!");
                            _this.httpClient.post('academic/parameterSettingLog/', parameterSettingLogJsons_4, 'application/json')
                                .success(function () {
                            }).error(function (data) {
                                console.log("Data Errors---->");
                                console.log(data);
                            });
                        });
                    }).error(function (response) {
                        console.log("Data Errors---->");
                        _this.notify.error(response);
                        _this.editData(parameter.srl, parameter.parameterId);
                    });
                }
            }
        };
        TeacherEvaluationDatelineSet.prototype.convertToJson = function (semesterTypeId, parameterId, startDate, endDate) {
            var jsonObj = [];
            var item = {};
            item["semesterId"] = +this.$scope.semesterType.id;
            if (this.loggedUser.departmentId == "15") {
                item["programId"] = 15;
            }
            else {
                item["programId"] = +this.$scope.selectedProgram.id;
            }
            item["parameterId"] = parameterId;
            item["startDate"] = startDate;
            item["endDate"] = endDate;
            jsonObj.push(item);
            return item;
        };
        TeacherEvaluationDatelineSet.prototype.convertToJsonForLog = function (semesterTypeId, parameterId, startDate, endDate) {
            var jsonObj = [];
            var item = {};
            item["semesterId"] = +this.$scope.semesterType.id;
            if (this.loggedUser.departmentId == "15") {
                item["programId"] = 15;
            }
            else {
                item["programId"] = +this.$scope.selectedProgram.id;
            }
            item["parameterId"] = parameterId;
            item["additionalRoleId"] = +this.$scope.AdditionalRoleType['TEACHING_EVALUATION_DATELINE'];
            item["startDate"] = startDate;
            item["endDate"] = endDate;
            jsonObj.push(item);
            return item;
        };
        TeacherEvaluationDatelineSet.prototype.convertToJsonForUpdate = function (id, semesterTypeId, parameterId, startDate, endDate) {
            var item = {};
            item["id"] = id;
            item["semesterId"] = +this.$scope.semesterType.id;
            if (this.loggedUser.departmentId == "15") {
                item["programId"] = 15;
            }
            else {
                item["programId"] = +this.$scope.selectedProgram.id;
            }
            item["parameterId"] = parameterId;
            item["startDate"] = startDate;
            item["endDate"] = endDate;
            return item;
        };
        TeacherEvaluationDatelineSet.prototype.saveAll = function () {
            var finished = false;
            var count = 0;
            var store = [];
            for (var i = 0; i < this.$scope.semesterSettingStore.length; i++) {
                store.push(this.$scope.semesterSettingStore[i]);
            }
            var length = this.$scope.semesterSettingStore.length;
            for (var i = 0; i < store.length; i++) {
                this.addData(store[i]);
                count++;
            }
        };
        TeacherEvaluationDatelineSet.prototype.getHistory = function (parameterId, semesterId, programId) {
            var _this = this;
            if (programId == undefined)
                programId = 15;
            this.httpClient.get("academic/parameterSettingLog/semester/" + semesterId + "/program/" + programId + "/parameter/" + parameterId, 'application/json', function (json, etag) {
                _this.$scope.historyList = json.entries;
            }, function (response) {
                console.error(response);
            });
            /*this.httpClient.get('user/view/id/sadmin', 'application/json',
                (json: any, etag: string) => {
                    console.log(json.entries)
                    this.$scope.historyList = json.entries;
                },
                (response: ng.IHttpPromiseCallbackArg<any>) => {
                    console.error(response);
                });*/
        };
        TeacherEvaluationDatelineSet.prototype.toTimestamp = function (strDate) {
            var datum = Date.parse(strDate);
            return datum / 1000;
        };
        TeacherEvaluationDatelineSet.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', 'semesterService'];
        return TeacherEvaluationDatelineSet;
    }());
    ums.TeacherEvaluationDatelineSet = TeacherEvaluationDatelineSet;
    ums.UMS.controller("TeacherEvaluationDatelineSet", TeacherEvaluationDatelineSet);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ClassRoutineController = (function () {
        function ClassRoutineController(appConstants, $q, notify, semesterService, classRoomService, classRoutineService, userService, routineConfigService, $state, employeeService, employeeSearchService) {
            this.appConstants = appConstants;
            this.$q = $q;
            this.notify = notify;
            this.semesterService = semesterService;
            this.classRoomService = classRoomService;
            this.classRoutineService = classRoutineService;
            this.userService = userService;
            this.routineConfigService = routineConfigService;
            this.$state = $state;
            this.employeeService = employeeService;
            this.employeeSearchService = employeeSearchService;
            this.ACTIVE_STATUS = 1;
            this.NEWLY_CREATED_STATUS = 2;
            this.UNDERGRADUATE = '11';
            this.POSTGRADUATE = '22';
            this.counter = 1;
            this.routineTemplateFile = {};
            this.init();
        }
        ClassRoutineController.prototype.init = function () {
            var _this = this;
            this.showRoutineChart = false;
            this.classRoutineService.showSectionWiseRoutine = true;
            this.classRoutineService.showTeacherWiseRoutine = false;
            this.classRoutineService.showRoomWiseRoutine = false;
            this.classRoutineService.sectionSpecific = true;
            this.state = this.$state;
            this.showRoutineSection = false;
            this.programType = this.UNDERGRADUATE;
            this.theorySectionList = this.appConstants.theorySections;
            this.classRoutineService.selectedTheorySection = this.theorySectionList[0];
            this.classRoutineService.studentsYear = '1';
            this.classRoutineService.studentsSemester = '1';
            this.deptList = this.appConstants.deptShort;
            this.deptMapWithId = {};
            this.deptList.forEach(function (d) { return _this.deptMapWithId[d.id] = d; });
            this.deptProgramList = this.appConstants.ugPrograms;
            this.deptProgramMapWithDept = {};
            this.deptProgramList.forEach(function (d) { return _this.deptProgramMapWithDept[d.deptId] = d; });
            this.fetchSemesters();
            this.fetchCurrentUser();
            this.searchButtonClicked = false;
            this.classRoutineService.enableEdit = true;
            this.showEmployeeSearchTab();
        };
        ClassRoutineController.prototype.allYearSemesterReport = function () {
            console.log("requested for all semester wise routine report");
            this.classRoutineService.getAllSemesterWiseRoutineReport(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id);
        };
        ClassRoutineController.prototype.uploadFile = function () {
            var _this = this;
            this.classRoutineService.exceptions = [];
            var formData = new FormData();
            formData.append("file", this.routineTemplateFile);
            formData.append("semesterId", this.classRoutineService.selectedSemester.id.toString());
            formData.append("programId", this.classRoutineService.selectedProgram.id.toString());
            this.exceptions = [];
            this.showLoader = true;
            if (this.routineTemplateFile == null) {
                this.notify.warn("No file chosen");
                this.showLoader = false;
            }
            else {
                this.classRoutineService.uploadFile(formData).then(function (exceptions) {
                    _this.classRoutineService.exceptions = exceptions;
                    _this.createExceptionsMapWithYearSemesterSectionDayAndTime(exceptions).then(function (response) {
                        _this.showLoader = false;
                    });
                });
            }
        };
        ClassRoutineController.prototype.createExceptionsMapWithYearSemesterSectionDayAndTime = function (exceptions) {
            var defer = this.$q.defer();
            this.exceptionListForNavigation = [];
            this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime = {};
            for (var i = 0; i < exceptions.length; i++) {
                var exception = exceptions[i];
                exception.routine = {};
                exception.routine.startTime = exception.startTime;
                exception.routine.endTime = exception.endTime;
                exception.routine.section = exception.section;
                exception.routine.color = "red";
                exception.routine.day = exception.day.toString();
                exception.routine.slotGroup = Math.floor(Math.random() * 10000);
                exception.routine.message = exception.errorMessage;
                exception.routine.semester = this.classRoutineService.selectedSemester;
                exception.routine.semesterId = this.classRoutineService.selectedSemester.id;
                exception.routine.academicYear = exception.year;
                exception.routine.academicSemester = exception.semester;
                exception.routine.program = this.classRoutineService.selectedProgram;
                exception.routine.programId = this.classRoutineService.selectedProgram.id.toString();
                var sectionstr = exception.section.length == 1 ? exception.section : exception.section.substring(0, 1);
                if (this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime[exception.year + '' + exception.semester + '' + sectionstr] != undefined && this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime[exception.year + '' + exception.semester + '' + sectionstr].length > 0) {
                    var existingExceptions = this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime[exception.year + '' + exception.semester + '' + sectionstr];
                    existingExceptions.push(exception);
                    this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime[exception.year + '' + exception.semester + '' + sectionstr] = existingExceptions;
                    this.exceptionRoutineList.push(exception.routine);
                }
                else {
                    var existingExceptions = [];
                    this.exceptionRoutineList = [];
                    this.exceptionListForNavigation.push(exception);
                    existingExceptions.push(exception);
                    this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime[exception.year + '' + exception.semester + '' + sectionstr] = existingExceptions;
                    this.exceptionRoutineList.push(exception.routine);
                }
            }
            defer.resolve(this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime);
            return defer.promise;
        };
        ClassRoutineController.prototype.navigate = function (year, semester, section) {
            this.classRoutineService.studentsYear = year.toString();
            this.classRoutineService.studentsSemester = semester.toString();
            for (var i = 0; i < this.theorySectionList.length; i++) {
                if (this.theorySectionList[i].id == section) {
                    this.classRoutineService.selectedTheorySection = this.theorySectionList[i];
                    this.searchForRoutineData();
                    break;
                }
            }
        };
        ClassRoutineController.prototype.showEmployeeSearchTab = function () {
            this.employeeSearchActive = true;
            this.employeeSearchReportActive = false;
        };
        ClassRoutineController.prototype.showEmployeeSearchReportTab = function () {
            this.employeeSearchActive = false;
            this.employeeSearchReportActive = true;
        };
        ClassRoutineController.prototype.downloadSemesterWiseReport = function () {
            this.classRoutineService.getSemesterWiseRoutineReport(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id, +this.classRoutineService.studentsYear, +this.classRoutineService.studentsSemester, this.classRoutineService.selectedTheorySection.id);
        };
        ClassRoutineController.prototype.downloadTeacherWiseReport = function () {
            if (this.classRoutineService.selectedTeacher.id != undefined)
                this.classRoutineService.getTeacherWiseReport(this.classRoutineService.selectedTeacher.id, this.classRoutineService.selectedSemester.id);
            else
                this.notify.error("No teacher is selected");
        };
        ClassRoutineController.prototype.downloadRoomWiseReport = function () {
            if (this.selectedRoom.id != null || this.selectedRoom.id != undefined)
                this.classRoutineService.getRoomWiseRoutine(+this.selectedRoom.id, this.classRoutineService.selectedSemester.id);
            else
                this.notify.error("No room is selected");
        };
        ClassRoutineController.prototype.downloadAllRoomBasedReport = function () {
            this.classRoutineService.getAllRoomWiseRoutine(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id);
        };
        ClassRoutineController.prototype.downloadAllTeacherBasedReport = function () {
            this.classRoutineService.getAllTeacherWiseReport(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id);
        };
        ClassRoutineController.prototype.fetchCurrentUser = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (user) {
                _this.loggedUser = {};
                _this.loggedUser = user;
                _this.selectedDeptProgram = {};
                _this.selectedDeptProgram = _this.deptProgramMapWithDept[user.departmentId];
                _this.selectedDept = {};
                _this.selectedDept = _this.deptMapWithId[user.departmentId];
                _this.selectedSearchDepartment = angular.copy(_this.selectedDept);
                _this.selectPrograms();
            });
        };
        ClassRoutineController.prototype.downloadTeacherReport = function () {
            var deptIdList = [];
            deptIdList.push(this.selectedSearchDepartment.id);
            var employeeTypeList = [];
            employeeTypeList.push(ums.Utils.TEACHER_TYPE);
            this.employeeSearchService.getEmployeeListPdf(deptIdList, employeeTypeList, 1, 1, [1, 2, 4, 5]);
        };
        ClassRoutineController.prototype.selectPrograms = function () {
            this.classRoutineService.selectedProgram = this.selectedDeptProgram.programs[0];
            this.programList = this.selectedDeptProgram.programs;
        };
        ClassRoutineController.prototype.fetchSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.programType, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesterList) {
                console.log("Semester list");
                console.log(semesterList);
                _this.semesterList = [];
                _this.selectedSemester = {};
                for (var i = 0; i < semesterList.length; i++) {
                    if (semesterList[i].status == _this.NEWLY_CREATED_STATUS) {
                        _this.classRoutineService.selectedSemester = semesterList[i];
                    }
                    else if (_this.classRoutineService.selectedSemester == null && semesterList[i].status == _this.ACTIVE_STATUS)
                        _this.classRoutineService.selectedSemester = semesterList[i];
                    _this.semesterList.push(semesterList[i]);
                }
            });
        };
        ClassRoutineController.prototype.fetchRoutineConfig = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.routineConfigService.getBySemesterAndProgramType(this.classRoutineService.selectedSemester.id, +this.classRoutineService.selectedSemester.programTypeId).then(function (routineConfig) {
                if (routineConfig.id == null)
                    _this.notify.error("Routine configuration is not yet set for the semester, please contact with registrar office");
                _this.routineConfigService.routineConfig = routineConfig;
                defer.resolve(_this.routineConfig = routineConfig);
            });
            return defer.promise;
        };
        ClassRoutineController.prototype.showSectionWiseRoutinePortion = function () {
            this.classRoutineService.showSectionWiseRoutine = true;
            this.classRoutineService.showTeacherWiseRoutine = false;
            this.classRoutineService.showRoomWiseRoutine = false;
            this.classRoutineService.sectionSpecific = true;
            this.fetchRoutineData();
        };
        ClassRoutineController.prototype.showTeacherWiseRoutinePortion = function () {
            this.classRoutineService.showSectionWiseRoutine = false;
            this.classRoutineService.showTeacherWiseRoutine = true;
            this.classRoutineService.showRoomWiseRoutine = false;
            this.showRoutineChart = false;
            this.classRoutineService.selectedTeacher = {};
            this.classRoutineService.sectionSpecific = false;
            this.fetchActiveTeachers();
        };
        ClassRoutineController.prototype.fetchActiveTeachers = function () {
            var _this = this;
            this.courseTeacherList = [];
            this.employeeService.getActiveTeachers().then(function (employees) {
                _this.courseTeacherList = employees;
            });
        };
        ClassRoutineController.prototype.courseTeacherSelected = function () {
            this.classRoutineService.sectionSpecific = false;
            this.fetchRoutineData();
        };
        ClassRoutineController.prototype.showRoomWiseRoutinePortion = function () {
            this.classRoutineService.showSectionWiseRoutine = false;
            this.classRoutineService.showTeacherWiseRoutine = false;
            this.classRoutineService.showRoomWiseRoutine = true;
            this.showRoutineChart = false;
            this.classRoutineService.sectionSpecific = false;
            this.selectedRoom = {};
            this.fetchClassRooms();
        };
        ClassRoutineController.prototype.fetchClassRooms = function () {
            var _this = this;
            this.roomList = [];
            this.classRoomService.getClassRooms().then(function (rooms) {
                _this.roomList = rooms;
            });
        };
        ClassRoutineController.prototype.roomSelected = function () {
            this.classRoutineService.sectionSpecific = false;
            this.fetchRoutineData();
        };
        ClassRoutineController.prototype.fetchRoutineData = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.showRoutineChart = false;
            this.classRoutineService.showChartLoader = true;
            this.fetchRoutineConfig().then(function (routineConfig) {
                if (_this.routineConfig == null || _this.routineConfig == undefined) {
                    _this.notify.error("Routine of the semester is not yet configured, please contact with the registrar office");
                    defer.resolve(undefined);
                }
                else {
                    _this.extractFromExceptions().then(function (routine) {
                        _this.fetchRoutineInfo().then(function (routineData) {
                            console.log("Routine data");
                            console.log(routineData);
                            if (routine.length > 0)
                                routineData.push.apply(routineData, routine);
                            _this.classRoutineService.routineData = [];
                            _this.classRoutineService.dayAndTimeMapWithRoutine = {};
                            routineData.forEach(function (r) {
                                r.startTimeObj = moment(r.startTime, "hh:mm A").toDate();
                                r.endTimeObj = moment(r.endTime, "hh:mm A").toDate();
                            });
                            _this.classRoutineService.routineData = routineData;
                            _this.showRoutineChart = true;
                            defer.resolve(routineData);
                        });
                    });
                }
            });
            return defer.promise;
        };
        ClassRoutineController.prototype.extractFromExceptions = function () {
            var defer = this.$q.defer();
            var routine = [];
            if (this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime != undefined && this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime[this.classRoutineService.studentsYear + '' + this.classRoutineService.studentsSemester + '' + this.classRoutineService.selectedTheorySection.id] != undefined && this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime[this.classRoutineService.studentsYear + '' + this.classRoutineService.studentsSemester + '' + this.classRoutineService.selectedTheorySection.id].length > 0) {
                var routineExceptions = this.classRoutineService.exceptionsMapWithYearSemesterSectionDayAndTime[this.classRoutineService.studentsYear + '' + this.classRoutineService.studentsSemester + '' + this.classRoutineService.selectedTheorySection.id];
                for (var i = 0; i < routineExceptions.length; i++) {
                    routine.push(routineExceptions[i].routine);
                }
            }
            defer.resolve(routine);
            return defer.promise;
        };
        ClassRoutineController.prototype.fetchRoutineInfo = function () {
            var defer = this.$q.defer();
            if (this.classRoutineService.showSectionWiseRoutine)
                this.fetchSectionWiseRoutineData().then(function (routineData) { return defer.resolve(routineData); });
            else if (this.classRoutineService.showTeacherWiseRoutine)
                this.fetchTeacherWiseRoutineData().then(function (routineData) { return defer.resolve(routineData); });
            else if (this.classRoutineService.showRoomWiseRoutine)
                this.fetchRoomWiseRoutineData().then(function (routineData) { return defer.resolve(routineData); });
            return defer.promise;
        };
        ClassRoutineController.prototype.fetchSectionWiseRoutineData = function () {
            var defer = this.$q.defer();
            this.classRoutineService.getClassRoutineForEmployee(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id, +this.classRoutineService.studentsYear, +this.classRoutineService.studentsSemester, this.classRoutineService.selectedTheorySection.id).then(function (routineData) {
                defer.resolve(routineData);
            });
            return defer.promise;
        };
        ClassRoutineController.prototype.fetchTeacherWiseRoutineData = function () {
            var defer = this.$q.defer();
            this.classRoutineService.getRoutineForTeacher(this.classRoutineService.selectedTeacher.id, this.classRoutineService.selectedSemester.id).then(function (routineData) {
                defer.resolve(routineData);
            });
            return defer.promise;
        };
        ClassRoutineController.prototype.fetchRoomWiseRoutineData = function () {
            var defer = this.$q.defer();
            this.classRoutineService.getRoomBasedClassRoutine(this.classRoutineService.selectedSemester.id, +this.selectedRoom.id).then(function (routineData) {
                defer.resolve(routineData);
            });
            return defer.promise;
        };
        ClassRoutineController.prototype.searchForRoutineData = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.counter += 1;
            this.searchButtonClicked = true;
            this.showRoutineChart = false;
            this.fetchRoutineData().then(function (routineData) {
                _this.showRoutineChart = true;
                //this.$state.go('classRoutine.classRoutineChart', {}, {reload: 'classRoutine.classRoutineChart'});
            });
        };
        ClassRoutineController.$inject = ['appConstants', '$q', 'notify', 'semesterService', 'classRoomService', 'classRoutineService',
            'userService', 'routineConfigService', '$state', 'employeeService', 'employeeSearchService'];
        return ClassRoutineController;
    }());
    ums.ClassRoutineController = ClassRoutineController;
    ums.UMS.controller("ClassRoutine", ClassRoutineController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ClassAttendance = (function () {
        function ClassAttendance($scope, $stateParams, appConstants, httpClient, hotRegisterer, notify, $window, $sce) {
            var _this = this;
            this.$scope = $scope;
            this.$stateParams = $stateParams;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.hotRegisterer = hotRegisterer;
            this.notify = notify;
            this.$window = $window;
            this.$sce = $sce;
            $scope.loadingVisibility = false;
            $scope.contentVisibility = false;
            $scope.addNewColumnDisable = false;
            //$scope.downloadSectionWiseXls=this.downloadSectionWiseXls.bind(this);
            $scope.insertNewAttendanceColumn = this.insertNewAttendanceColumn.bind(this);
            $scope.showAttendanceSheet = this.showAttendanceSheet.bind(this);
            this.columnHeader = [];
            this.$scope.colWidthArray = [80, 230]; // Student Id and Student Name column width
            var that = this;
            $scope.data = {
                settings: {
                    colWidths: this.$scope.colWidthArray,
                    colHeaders: true,
                    rowHeaders: true,
                    fixedColumnsLeft: 2,
                    fixedRowsTop: 1,
                    width: $(".page-content").width(),
                    height: $(window).height() - 140,
                    currentRowClassName: 'currentRow',
                    currentColClassName: 'currentCol',
                    fillHandle: false
                },
                items: [],
                columns: []
            };
            this.$scope.selectedCourse = new ums.CourseTeacherModel();
            this.httpClient.get("users/current", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.attendanceSearchParamModel = new ums.ProgramSelectorModel(_this.appConstants, _this.httpClient, true);
                _this.attendanceSearchParamModel.setProgramType(_this.appConstants.programTypeEnum.UG, ums.FieldViewTypes.selected);
                _this.attendanceSearchParamModel.setDepartment(response.departmentId, ums.FieldViewTypes.hidden);
                _this.attendanceSearchParamModel.setProgram(null, ums.FieldViewTypes.hidden);
                _this.currentUser = response;
                _this.$scope.attendanceSearchParamModel = _this.attendanceSearchParamModel;
            });
            this.$scope.fetchCourseInfo = this.fetchCourseInfo.bind(this);
            this.$scope.attendanceColumnOperation = this.attendanceColumnOperation.bind(this);
            this.$scope.showCalendar = this.showCalendar.bind(this);
            this.$scope.setDate = this.setDate.bind(this);
            this.$scope.saveAttendance = this.saveAttendance.bind(this);
            this.$scope.deleteAttendance = this.deleteAttendance.bind(this);
            this.$scope.changeCheckboxValue = this.changeCheckboxValue.bind(this);
            this.$scope.fetchAttendanceSheet = this.fetchAttendanceSheet.bind(this);
            this.$scope.refreshAttendanceSheet = this.refreshAttendanceSheet.bind(this);
            $scope.downloadAttendanceSheet = this.downloadAttendanceSheet.bind(this);
            $scope.showAttendanceSheetByStudentCategory = this.showAttendanceSheetByStudentCategory.bind(this);
        }
        ClassAttendance.prototype.refreshAttendanceSheet = function () {
            this.fetchAttendanceSheet(this.$scope.selectedCourse, this.$scope.selectedStudentCategory);
        };
        ClassAttendance.prototype.fetchAttendanceSheet = function (course, studentCategory) {
            var _this = this;
            console.log(course);
            console.log(studentCategory);
            //Selected values
            this.$scope.selectedCourse.section = $("#section_" + course.courseId).val();
            this.$scope.selectedCourse.semester = this.$scope.attendanceSearchParamModel.semesterId;
            this.$scope.selectedCourse.courseId = course.courseId;
            this.$scope.selectedCourse.courseNo = course.courseNo;
            this.$scope.selectedCourse.courseTitle = course.courseTitle;
            this.$scope.selectedStudentCategory = studentCategory;
            console.log(this.$scope.selectedCourse);
            var table = this.getTableInstance();
            this.httpClient.get("classAttendance/semester/" + this.$scope.selectedCourse.semester + "/course/" + this.$scope.selectedCourse.courseId + "/section/" + this.$scope.selectedCourse.section +
                "/studentCategory/" + studentCategory, this.appConstants.mimeTypeJson, function (response, etag) {
                _this.columnHeader = response.columns;
                var columnHeader = _this.columnHeader[1]; //name column is in 1 index
                columnHeader.renderer = _this.nameColumnRenderer;
                //Attendance column start from 2 index
                for (var i = 2; i < _this.columnHeader.length; i++) {
                    var columnHeader = _this.columnHeader[i];
                    columnHeader.renderer = _this.attendanceColumnRenderer;
                    //Setting width for Attendance columns
                    _this.$scope.colWidthArray.push(100);
                }
                _this.$scope.data.columns = _this.columnHeader;
                _this.$scope.data.items = response.attendance;
                table.updateSettings({
                    colWidths: _this.$scope.colWidthArray
                });
            }, function (response) {
                console.error(response);
            });
        };
        //Student Name Column Renderer
        ClassAttendance.prototype.nameColumnRenderer = function (instance, td, row, col, prop, value, cellProperties) {
            var operationString = '&nbsp;&nbsp;&nbsp;&nbsp;' +
                '<i class="fa fa-plus-circle" aria-hidden="true" title="Add New Attendance Column" style="color:#E74C3C;cursor:pointer;" onClick="insertNewAttendanceColumn()";></i>&nbsp;&nbsp;&nbsp;' +
                '<i class="fa fa-file-excel-o" aria-hidden="true" title="Download Excel" style="color:#273746;cursor:pointer;margin-left:2px;" onClick="downloadAttendanceSheet(\'xls\')";></i>&nbsp;&nbsp;&nbsp;' +
                '<i class="fa fa-file-pdf-o" aria-hidden="true" title="Download PDF" style="color:#273746;cursor:pointer;margin-left:2px;" onClick="downloadAttendanceSheet(\'pdf\')";></i>&nbsp;&nbsp;&nbsp;' +
                '<i class="fa fa-es" id="icon_enrolled" aria-hidden="true" title="Enrolled Students" style="color:#716b7a;cursor:pointer;margin-left:2px;" onClick="showAttendanceSheetByStudentCategory(\'Enrolled\')"></i>&nbsp;&nbsp;&nbsp;' +
                '<i class="fa fa-as" id="icon_all" aria-hidden="true" title="All Students" style="color:#52BE80;cursor:pointer;margin-left:2px;"  onClick="showAttendanceSheetByStudentCategory(\'All\')"></i>&nbsp;&nbsp;&nbsp;' +
                '<i id="download1" class="fa fa-refresh" aria-hidden="true" title="Refresh" style="color:black;cursor:pointer;margin-left:2px;" onClick="refreshAttendanceSheet()";></i>';
            var value = Handsontable.helper.stringify(value);
            var output = value;
            if (value == "GOI")
                output = operationString;
            Handsontable.Dom.empty(td);
            $(td).html(output);
            return td;
        };
        ClassAttendance.prototype.showAttendanceSheetByStudentCategory = function (studentCategory) {
            if (studentCategory != this.$scope.selectedStudentCategory)
                this.showAttendanceSheet(this.$scope.selectedCourse, studentCategory);
        };
        ClassAttendance.prototype.attendanceColumnRenderer = function (instance, td, row, col, prop, value, cellProperties) {
            var value = Handsontable.helper.stringify(value);
            var serial = row + '' + col;
            var output = "";
            //E= "Edit" , EY ="Edit and show all checkbox in Checked Mode", EN="Edit and show all checkbox in UnChecked Mode",
            //R="Reset", Y = Positive Attendance , N= Negative Attendance
            //E-Y="Edit and show checkbox in Check Mode"
            //E-N="Edit and show checkbox in Un-Check Mode"
            //I= "Show edit icon for supporting edit of a column"
            //IE= "Showing Check All, Un-Check All, Save, Delete, Back Icon
            //T- = "Showing teacher Id for a column for which the current user has not any right to edit "
            var nonEditModeString = '<i class="fa fa-pencil-square-o" title="Edit" aria-hidden="true" style="cursor:pointer;margin-left:2px;" onClick="attendanceColumnOperation(\'E\',' + row + ',' + col + ',\'' + value + '\')"></i>';
            var editModeString = '<i class="fa fa-check-square-o" title="Check All" aria-hidden="true" style="color:green;cursor:pointer;" onClick="attendanceColumnOperation(\'EY\',' + row + ',' + col + ',\'' + value + '\')";></i> ' +
                '<i class="fa fa-times" aria-hidden="true" title="Un-Check All" style="color:red;cursor:pointer;margin-left:2px;" onClick="attendanceColumnOperation(\'EN\',' + row + ',' + col + ',\'' + value + '\')";></i>' +
                '<i class="fa fa-undo" aria-hidden="true" title="Reset" style="cursor:pointer;margin-left:2px;" onClick="attendanceColumnOperation(\'R\',' + row + ',' + col + ',\'' + value + '\')";></i>' +
                '<i class="fa fa-floppy-o" aria-hidden="true" title="Save" style="cursor:pointer;margin-left:2px;" onClick="saveAttendance(' + row + ',' + col + ')";></i>' +
                '<i class="fa fa-trash-o" aria-hidden="true" title="Delete"  style="color:red;cursor:pointer;margin-left:2px;" onClick="deleteAttendance(' + row + ',' + col + ')";></i>';
            if (value == "Y")
                output = "<img src='images/attendancePresent.png' />";
            else if (value == "N")
                output = "<img src='images/attendanceAbsent.png' />";
            else if (value.indexOf("E-") == 0) {
                if ((value.split("-"))[1] == "Y")
                    output = "<input type='checkbox' checked id='att_" + serial + "' onclick=\"changeCheckboxValue(" + row + "," + col + ",this.value)\"/>";
                else
                    output = "<input type='checkbox' id='att_" + serial + "' onclick=\"changeCheckboxValue(" + row + "," + col + ",this.value)\"/>";
            }
            else if (value == "EY") {
                output = "<input type='checkbox' checked id='att_" + row + col + "' onclick=\"changeCheckboxValue(" + row + "," + col + ",this.value)\"/>";
            }
            else if (value == "EN") {
                output = "<input type='checkbox'  id='att_" + row + col + "' onclick=\"changeCheckboxValue(" + row + "," + col + ",this.value)\"/>";
            }
            else if (value == "I") {
                output = nonEditModeString;
            }
            else if (value == "IE") {
                output = editModeString;
            }
            else if (value.indexOf("T-") == 0) {
                output = value;
            }
            Handsontable.Dom.empty(td);
            $(td).html(output);
            td.className = 'htCenter';
            return td;
        };
        ClassAttendance.prototype.downloadAttendanceSheet = function (fileType) {
            var fileName = this.$scope.selectedCourse.semester + "_" + this.$scope.selectedCourse.courseNo;
            var contentType = ums.UmsUtil.getFileContentType(fileType);
            this.httpClient.get("classAttendanceReport/" + fileType + "/semester/" + this.$scope.attendanceSearchParamModel.semesterId +
                "/course/" + this.$scope.selectedCourse.courseId + "/section/" + this.$scope.selectedCourse.section + "/studentCategory/" + this.$scope.selectedStudentCategory, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ClassAttendance.prototype.attendanceColumnOperation = function (operationType, row, column, value) {
            var table = this.getTableInstance();
            var serial = row + "" + column;
            var classDate = this.columnHeader[column];
            var localStorageAttendance = [];
            var updatedAttendance = [];
            //Column Reset Operation
            if (operationType == "R") {
                localStorageAttendance = JSON.parse(localStorage.getItem("class_attendance_" + row + "_" + column));
                for (var i = 0; i < localStorageAttendance.length; i++) {
                    var innerArray = localStorageAttendance[i];
                    var val = innerArray[2];
                    //Convert "E-Y" to "Y" and "E-N" to "N"
                    innerArray[2] = val.replace("E-", "");
                    updatedAttendance.push(innerArray);
                }
                //Set the header Column (Column wise edit Icons)
                updatedAttendance[0] = [0, column, "I"];
                table.setDataAtCell(updatedAttendance);
                table.render();
                classDate.title = classDate.date + "&nbsp;<span class='badge badge-info'>" + classDate.serial + "</span>";
                this.columnHeader[column] = classDate;
                table.updateSettings({
                    columns: this.columnHeader
                });
                return;
            }
            else if (operationType == "SR") {
                var data = table.getData();
                localStorageAttendance = JSON.parse(localStorage.getItem("class_attendance_" + row + "_" + column));
                for (var i = 0; i < localStorageAttendance.length; i++) {
                    var innerArray = localStorageAttendance[i];
                    innerArray[2] = (data[i][column] == "E-Y") ? "Y" : "N";
                    updatedAttendance.push(innerArray);
                }
                updatedAttendance[0] = [0, column, "I"];
                table.setDataAtCell(updatedAttendance);
                table.render();
                classDate.title = $("#date_0" + column).val() + "&nbsp;<span class='badge badge-info'>" + $("#serial_0" + column).val() + "</span>";
                classDate.date = $("#date_0" + column).val();
                classDate.serial = Number($("#serial_0" + column).val());
                this.columnHeader[column] = classDate;
                table.updateSettings({
                    columns: this.columnHeader
                });
                return;
            }
            var totalRows = table.countRows();
            var newData = table.getSourceData();
            var updatedAttendance = [];
            //When user Click Edit Icon
            if (totalRows > 0 && operationType == "E") {
                localStorageAttendance.push([i, column, 'IE']);
                newData[0][this.columnHeader[column].data] = 'IE';
            }
            for (var i = 1; i < totalRows; i++) {
                //Need to think about it operationType =='Y' || operationType =='N' ||
                if ((operationType == 'E' || operationType == 'EY' || operationType == 'EN')) {
                    //When user click Edit Icon
                    if (operationType == 'E') {
                        localStorageAttendance.push([i, column, 'E' + "-" + table.getDataAtCell(i, column)]);
                        newData[i][this.columnHeader[column].data] = 'E' + "-" + table.getDataAtCell(i, column);
                    }
                    else if (operationType == 'EY') {
                        localStorageAttendance.push([i, column, "E-Y"]);
                        newData[i][this.columnHeader[column].data] = 'E-Y';
                    }
                    else if (operationType == 'EN') {
                        localStorageAttendance.push([i, column, "E-N"]);
                        newData[i][this.columnHeader[column].data] = 'E-N';
                    }
                }
            }
            table.loadData(newData);
            //If the user click on Edit icon then we need to do some other task.
            //We need to show date and serial TextBox in header cell
            if (operationType == "E") {
                localStorage["class_attendance_" + row + "_" + column] = JSON.stringify(localStorageAttendance);
                this.columnHeader[column] = classDate;
                classDate.title = "<i class='fa fa-calendar' aria-hidden='true' onclick=\"showCalendar('" + serial + "')\" style='cursor:pointer'></i>&nbsp;" +
                    "<input id='date_" + serial + "' class='date_" + serial + "'  type='text' style='width:55px;height:14px;border:1px solid grey;text-align:center;font-size:10px;' value=\"" + classDate.date + "\"  readonly/>&nbsp;" +
                    "<input id='serial_" + serial + "' class='serial_" + serial + "'  type='text' style='width:15px;height:14px;border:1px solid grey;text-align:center;font-size:10px;' value=\"" + classDate.serial + "\"  readonly/>";
                table.updateSettings({
                    columns: this.columnHeader
                });
            }
        };
        ClassAttendance.prototype.saveAttendance = function (row, column) {
            var _this = this;
            var table = this.getTableInstance();
            var complete_json = this.createCompleteJson(row, column);
            var url = "classAttendance";
            var dateObject = this.columnHeader[column];
            //This block is for Newly added Attendance Column
            if (dateObject.id == 0) {
                this.httpClient.post(url, complete_json, 'application/json')
                    .success(function (data) {
                    _this.notify.success("Successfully Saved New Attendance.");
                    dateObject.id = data;
                    _this.columnHeader[column] = dateObject;
                    table.updateSettings({
                        columns: _this.columnHeader
                    });
                    //Saved and reset for Column 2
                    _this.attendanceColumnOperation('SR', 0, 2, 'IE');
                    _this.$scope.addNewColumnDisable = false;
                }).error(function (data) {
                });
            }
            else {
                var url = "classAttendance";
                this.httpClient.put(url, complete_json, 'application/json')
                    .success(function (data) {
                    _this.notify.success("Successfully Updated Attendance Information.");
                    //Saved and reset for current operated column
                    _this.attendanceColumnOperation('SR', 0, column, 'IE');
                }).error(function (data) {
                });
            }
        };
        ClassAttendance.prototype.changeCheckboxValue = function (row, col, value) {
            var checked = $('#att_' + row + col).is(':checked');
            var table = this.getTableInstance();
            var updatedValue = [];
            updatedValue[0] = [row, col, (checked == true) ? "E-Y" : "E-N"];
            table.setDataAtCell(updatedValue);
        };
        ClassAttendance.prototype.deleteAttendance = function (row, column) {
            var _this = this;
            var confirmation = confirm("Are you sure you want to deleted the selected attendance column?");
            if (confirmation == false)
                return;
            var table = this.getTableInstance();
            var dateObject = this.columnHeader[column];
            //If the selected attendance column is a newly added column
            if (dateObject.id == 0) {
                this.$scope.data.columns.splice(column, 1);
                this.$scope.addNewColumnDisable = false;
                this.$scope.colWidthArray.splice(column, 1);
                table.updateSettings({
                    colWidths: this.$scope.colWidthArray
                });
            }
            else {
                this.httpClient.doDelete('classAttendance/' + dateObject.id)
                    .success(function () {
                    _this.notify.success("Successfully Deleted Attendance Information.");
                    _this.$scope.data.columns.splice(column, 1);
                    _this.$scope.colWidthArray.splice(column, 1);
                    table.updateSettings({
                        colWidths: _this.$scope.colWidthArray
                    });
                }).error(function (data) {
                    console.log("Deletion failure");
                    console.log(data);
                });
            }
        };
        ClassAttendance.prototype.createCompleteJson = function (row, column) {
            var table = this.getTableInstance();
            var attendances = table.getData();
            var attendanceList = new Array();
            for (var i = 1; i < attendances.length; i++) {
                var attendance = {};
                var cell = attendances[i];
                attendance.studentId = cell[0];
                attendance.attendance = (cell[column] == "E-Y") ? 1 : 0;
                attendanceList.push(attendance);
            }
            var dateObject = this.columnHeader[column];
            var complete_json = {};
            complete_json["attendanceList"] = attendanceList;
            complete_json["classDate"] = $("#date_0" + column).val();
            complete_json["serial"] = Number($("#serial_0" + column).val());
            complete_json["course"] = this.$scope.selectedCourse.courseId;
            complete_json["section"] = this.$scope.selectedCourse.section;
            complete_json["semester"] = Number(this.$scope.selectedCourse.semester);
            complete_json["id"] = dateObject.id + '';
            return complete_json;
        };
        ClassAttendance.prototype.showCalendar = function (serial) {
            $('#class_date').val($('#date_' + serial).val());
            $('#class_serial').val($('#serial_' + serial).val());
            $('#dateSerialModal').modal('show');
            this.serial = serial;
        };
        ClassAttendance.prototype.getTableInstance = function () {
            return this.hotRegisterer.getInstance("attendanceHandsOnTable");
        };
        ClassAttendance.prototype.insertNewAttendanceColumn = function () {
            if (this.$scope.addNewColumnDisable == true)
                return;
            var maxSerial = Math.max.apply(null, this.columnHeader.map(function (a) { return a.serial; })); //Get maximum serial  from json object array columnHeader
            var nextSerial = maxSerial + 1;
            var today = new Date();
            var year = today.getFullYear() + '';
            var dateFormat1 = today.getDate() + '' + (today.getMonth() + 1) + '' + today.getFullYear() + '' + nextSerial;
            var dateFormat2 = today.getDate() + ' ' + ums.Utils.SHORT_MONTH_ARR[today.getMonth()] + ', ' + year.substring(2, 4);
            this.$scope.addNewColumnDisable = true;
            var table = this.getTableInstance();
            this.columnHeader.splice(2, 0, {
                data: 'date' + dateFormat1,
                title: dateFormat2 + "&nbsp;<span class='badge badge-info'>" + nextSerial + "</span>",
                date: dateFormat2,
                serial: nextSerial,
                renderer: this.attendanceColumnRenderer,
                readOnly: true,
                id: 0
            });
            this.$scope.colWidthArray.push(100);
            table.updateSettings({
                colWidths: this.$scope.colWidthArray,
                columns: this.columnHeader
            });
            var defaultValues = [];
            var rows = table.countRows();
            defaultValues.push([0, 2, 'I']); //I New Column
            for (var i = 1; i < rows; i++) {
                defaultValues.push([i, 2, 'Y']); //By default we will mark present for all students
            }
            table.setDataAtCell(defaultValues);
            table.render();
            this.$scope.addNewColumnDisable == true;
        };
        ClassAttendance.prototype.setDate = function () {
            var elements = document.getElementsByClassName("date_" + this.serial);
            var names = '';
            for (var i = 0; i < elements.length; i++) {
                $(elements[i]).val($("#class_date").val());
                $(elements[i]).attr('value', $("#class_date").val());
            }
            var classDate = this.columnHeader[Number((this.serial).charAt(1))];
            classDate.title = "<i class='fa fa-calendar' aria-hidden='true' onclick=\"showCalendar('" + this.serial + "')\" style='cursor:pointer'></i>&nbsp;" +
                "<input id='date_" + this.serial + "' class='date_" + this.serial + "'  type='text' style='width:55px;height:14px;border:1px solid grey;text-align:center;font-size:10px;' value=\"" + $("#class_date").val() + "\"  />&nbsp;" +
                "<input id='serial_" + this.serial + "' class='serial_" + this.serial + "'  type='text' style='width:15px;height:14px;border:1px solid grey;text-align:center;font-size:10px;' value=\"" + $("#class_serial").val() + "\"  />";
            this.columnHeader[Number((this.serial).charAt(1))] = classDate;
            $('#dateSerialModal').modal('hide');
        };
        ClassAttendance.prototype.fetchCourseInfo = function () {
            var _this = this;
            $("#leftDiv").hide(100);
            $("#arrowDiv").show(50);
            this.$scope.loadingVisibility = true;
            this.$scope.contentVisibility = false;
            this.$scope.selectedCourse.courseNo = '';
            this.httpClient.get("academic/courseTeacher/" + this.attendanceSearchParamModel.semesterId + "/"
                + this.currentUser.employeeId + "/course", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.$scope.entries = _this.aggregateResult(response.entries);
                _this.$scope.loadingVisibility = false;
                _this.$scope.contentVisibility = true;
            });
            $("#attendanceSheetBlock").hide();
        };
        ClassAttendance.prototype.aggregateResult = function (courses) {
            var courseList = [];
            var courseMap = {};
            courses.forEach(function (courseTeacher) {
                if (courseTeacher.courseId in courseMap) {
                    courseMap[courseTeacher.courseId].section
                        = courseMap[courseTeacher.courseId].section + "," + courseTeacher.section;
                }
                else {
                    courseList[courseList.length] = courseTeacher;
                    courseMap[courseTeacher.courseId] = courseTeacher;
                }
            });
            return courseList;
        };
        ClassAttendance.prototype.showAttendanceSheet = function (course, studentCategory) {
            $("#courseSelectionDiv").hide(80);
            $("#topArrowDiv").show(50);
            $("#attendanceSheetBlock").show(100);
            this.fetchAttendanceSheet(course, studentCategory);
        };
        ClassAttendance.$inject = ['$scope', '$stateParams', 'appConstants', 'HttpClient', 'hotRegisterer', 'notify', '$window', '$sce'];
        return ClassAttendance;
    }());
    ums.ClassAttendance = ClassAttendance;
    ums.UMS.controller("ClassAttendance", ClassAttendance);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var LoggerGrid = (function () {
        function LoggerGrid(appConstants, httpClient, $scope) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            //decoratedScope: GridConfig;
            this.levelString = '';
            this.httpClient.get('logger/levels', ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.levelArray = response;
                for (var i = 0; i < response.length; i++) {
                    _this.levelString = _this.levelString + response[i].levelInt + ":" + response[i].levelStr;
                    if (i < response.length - 1) {
                        _this.levelString = _this.levelString + ';';
                    }
                }
                _this.loadData();
            });
        }
        LoggerGrid.prototype.initializeGrid = function () {
            ums.GridDecorator.decorate(this);
        };
        LoggerGrid.prototype.decorateScope = function () {
            return this.$scope;
        };
        LoggerGrid.prototype.getColumnModel = function () {
            return [
                {
                    label: 'Name',
                    name: 'name',
                    hidden: false,
                    editable: true,
                    key: true
                },
                {
                    label: 'Level',
                    name: 'level',
                    editable: true,
                    align: 'center',
                    formatter: 'select',
                    edittype: 'select',
                    editoptions: {
                        value: this.levelString,
                        defaultValue: 'DEBUG'
                    },
                    stype: 'select',
                    searchoptions: {
                        sopt: ['eq', 'ne'],
                        value: this.levelString
                    }
                }
            ];
        };
        LoggerGrid.prototype.insert = function (rowData, levelId) {
            var _this = this;
            this.decorateScope().grid.api.toggleMessage('Saving...');
            this.httpClient.post('logger', rowData, ums.HttpClient.MIME_TYPE_JSON).success(function () {
                _this.decorateScope().grid.api.toggleMessage();
                _this.loadData();
            }).error(function (response) {
                console.error(response);
                _this.loadData();
                _this.decorateScope().grid.api.toggleMessage();
            });
        };
        LoggerGrid.prototype.edit = function (rowData) {
            var _this = this;
            this.decorateScope().grid.api.toggleMessage('Saving...');
            this.httpClient.post('logger', rowData, ums.HttpClient.MIME_TYPE_JSON).success(function () {
                _this.decorateScope().grid.api.toggleMessage();
                _this.loadData();
            }).error(function (response) {
                console.error(response);
                _this.loadData();
                _this.decorateScope().grid.api.toggleMessage();
            });
        };
        LoggerGrid.prototype.remove = function (rowData) {
            var _this = this;
            rowData.level = this.getLevelId("OFF").toString();
            this.decorateScope().grid.api.toggleMessage('Saving...');
            this.httpClient.post('logger', rowData, ums.HttpClient.MIME_TYPE_JSON).success(function () {
                _this.decorateScope().grid.api.toggleMessage();
                _this.loadData();
            }).error(function (response) {
                console.error(response);
                _this.loadData();
                _this.decorateScope().grid.api.toggleMessage();
            });
        };
        LoggerGrid.prototype.beforeShowEditForm = function (formId, gridElement) {
        };
        LoggerGrid.prototype.afterShowEditForm = function (formId, gridElement) {
        };
        LoggerGrid.prototype.loadData = function () {
            var _this = this;
            this.httpClient.get("logger/list", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.initializeGrid();
                _this.$scope.loggerData = response;
            });
        };
        LoggerGrid.prototype.getLevelId = function (pLevelName) {
            for (var i = 0; i < this.levelArray.length; i++) {
                if (this.levelArray[i].levelStr == pLevelName) {
                    return this.levelArray[i].levelInt;
                }
            }
        };
        LoggerGrid.$inject = ['appConstants', 'HttpClient', '$scope'];
        return LoggerGrid;
    }());
    ums.LoggerGrid = LoggerGrid;
    ums.UMS.controller('LoggerGrid', LoggerGrid);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CourseMaterial = (function () {
        function CourseMaterial($scope, $stateParams, appConstants, httpClient, fileManagerConfig) {
            var _this = this;
            this.$scope = $scope;
            this.$stateParams = $stateParams;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.fileManagerConfig = fileManagerConfig;
            $scope.loadingVisibility = false;
            $scope.contentVisibility = false;
            $scope.preCourse = '';
            $scope.currentCourse = '';
            this.httpClient.get("users/current", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.courseMaterialSearchParamModel = new ums.ProgramSelectorModel(_this.appConstants, _this.httpClient, true);
                _this.courseMaterialSearchParamModel.setProgramType(_this.appConstants.programTypeEnum.UG, ums.FieldViewTypes.selected);
                _this.courseMaterialSearchParamModel.setDepartment(response.departmentId, ums.FieldViewTypes.hidden);
                _this.courseMaterialSearchParamModel.setProgram(null, ums.FieldViewTypes.hidden);
                _this.currentUser = response;
                _this.$scope.courseMaterialSearchParamModel = _this.courseMaterialSearchParamModel;
            });
            this.$scope.fetchCourseInfo = this.fetchCourseInfo.bind(this);
            this.$scope.initFileManager = this.initFileManager.bind(this);
            //this.initFileManager("Fall,2015", "EEE 1101");
        }
        CourseMaterial.prototype.fetchCourseInfo = function () {
            var _this = this;
            $("#leftDiv").hide(100);
            $("#arrowDiv").show(50);
            this.$scope.loadingVisibility = true;
            this.$scope.contentVisibility = false;
            this.$scope.selectedCourseNo = '';
            this.httpClient.get("academic/courseTeacher/" + this.courseMaterialSearchParamModel.semesterId + "/"
                + this.currentUser.employeeId + "/course", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.$scope.entries = _this.aggregateResult(response.entries);
                _this.$scope.loadingVisibility = false;
                _this.$scope.contentVisibility = true;
            });
        };
        CourseMaterial.prototype.aggregateResult = function (courses) {
            var courseList = [];
            var courseMap = {};
            courses.forEach(function (courseTeacher) {
                if (courseTeacher.courseId in courseMap) {
                    courseMap[courseTeacher.courseId].section
                        = courseMap[courseTeacher.courseId].section + "," + courseTeacher.section;
                }
                else {
                    courseList[courseList.length] = courseTeacher;
                    courseMap[courseTeacher.courseId] = courseTeacher;
                }
            });
            return courseList;
        };
        CourseMaterial.prototype.initFileManager = function (semesterName, courseNo, semesterId, courseId) {
            var baseUri = '/ums-webservice-academic/academic/courseMaterial/semester/' + semesterName + "/course/" + courseNo;
            var downloadBaseUri = '/ums-webservice-academic/academic/courseMaterial/download/semester/' + semesterName + "/course/" + courseNo;
            $("#courseSelectionDiv").hide(80);
            $("#topArrowDiv").show(50);
            this.fileManagerConfig.appName = semesterName + ' > ' + courseNo;
            this.fileManagerConfig.tplPath = 'views/file-manager';
            this.fileManagerConfig.listUrl = baseUri;
            this.fileManagerConfig.createFolderUrl = baseUri;
            this.fileManagerConfig.uploadUrl = baseUri + "/upload";
            this.fileManagerConfig.renameUrl = baseUri;
            this.fileManagerConfig.copyUrl = baseUri;
            this.fileManagerConfig.moveUrl = baseUri;
            this.fileManagerConfig.removeUrl = baseUri;
            this.fileManagerConfig.downloadFileUrl = downloadBaseUri;
            this.fileManagerConfig.downloadMultipleUrl = downloadBaseUri;
            this.fileManagerConfig.compressUrl = baseUri;
            this.fileManagerConfig.hidePermissions = true;
            this.fileManagerConfig.hideOwner = false;
            this.fileManagerConfig.multipleDownloadFileName = 'CourseMaterial-' + semesterName + "-" + courseNo + '.zip';
            this.fileManagerConfig.searchForm = true;
            this.fileManagerConfig.languageSelection = false;
            this.fileManagerConfig.showSizeForDirectories = true;
            this.fileManagerConfig.showUtilization = true;
            this.fileManagerConfig.allowedActions = angular.extend(this.fileManagerConfig.allowedActions, {
                createAssignmentFolder: true,
                changePermissions: false,
                createFolder: true,
                pickFiles: true,
                pickFolders: true
            });
            this.fileManagerConfig.additionalParams = {
                semesterId: semesterId + "",
                courseId: courseId
            };
            this.$scope.reloadOn = courseNo;
        };
        CourseMaterial.$inject = ['$scope', '$stateParams', 'appConstants', 'HttpClient', 'fileManagerConfig'];
        return CourseMaterial;
    }());
    ums.CourseMaterial = CourseMaterial;
    ums.UMS.controller("CourseMaterial", CourseMaterial);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentCourseMaterial = (function () {
        function StudentCourseMaterial($scope, $stateParams, appConstants, httpClient, fileManagerConfig) {
            var _this = this;
            this.$scope = $scope;
            this.$stateParams = $stateParams;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.fileManagerConfig = fileManagerConfig;
            $scope.loadingVisibility = false;
            $scope.contentVisibility = false;
            this.httpClient.get("academic/student", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.courseMaterialSearchParamModel = new ums.ProgramSelectorModel(_this.appConstants, _this.httpClient, true);
                _this.courseMaterialSearchParamModel.setProgramType(response.programTypeId, ums.FieldViewTypes.hidden);
                _this.courseMaterialSearchParamModel.setDepartment(response.departmentId, ums.FieldViewTypes.hidden);
                _this.courseMaterialSearchParamModel.setProgram(response.programId, ums.FieldViewTypes.hidden);
                _this.currentUser = response;
                _this.$scope.courseMaterialSearchParamModel = _this.courseMaterialSearchParamModel;
            });
            this.$scope.fetchCourseInfo = this.fetchCourseInfo.bind(this);
            this.$scope.initFileManager = this.initFileManager.bind(this);
            //this.initFileManager("Fall,2015", "EEE 1101");
        }
        StudentCourseMaterial.prototype.fetchCourseInfo = function (courseNo) {
            var _this = this;
            $("#leftDiv").hide(100);
            $("#arrowDiv").show(50);
            console.log(this.courseMaterialSearchParamModel.semesterId);
            this.$scope.loadingVisibility = true;
            this.$scope.contentVisibility = false;
            this.$scope.selectedCourseNo = '';
            this.httpClient.get("academic/course/registeredCourses/semester/" + this.courseMaterialSearchParamModel.semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.$scope.entries = response.entries;
                _this.$scope.loadingVisibility = false;
                _this.$scope.contentVisibility = true;
            });
        };
        StudentCourseMaterial.prototype.initFileManager = function (courseNo, semesterId, courseId) {
            var semesterName = this.getSelectedSemester();
            var baseUri = '/ums-webservice-academic/academic/student/courseMaterial/semester/' + semesterName + "/course/" + courseNo;
            var downloadBaseUri = '/ums-webservice-academic/academic/student/courseMaterial/download/semester/' + semesterName + "/course/" + courseNo;
            $("#courseSelectionDiv").hide(80);
            $("#topArrowDiv").show(50);
            this.fileManagerConfig.appName = semesterName + ' > ' + courseNo;
            this.fileManagerConfig.tplPath = 'views/file-manager';
            this.fileManagerConfig.listUrl = baseUri;
            this.fileManagerConfig.uploadUrl = baseUri + "/upload";
            this.fileManagerConfig.downloadFileUrl = downloadBaseUri;
            this.fileManagerConfig.downloadMultipleUrl = downloadBaseUri;
            this.fileManagerConfig.hidePermissions = true;
            this.fileManagerConfig.hideOwner = false;
            this.fileManagerConfig.multipleDownloadFileName = 'CourseMaterial-' + semesterName + "-" + courseNo + '.zip';
            this.fileManagerConfig.searchForm = true;
            this.fileManagerConfig.languageSelection = false;
            this.fileManagerConfig.showUtilization = false;
            this.fileManagerConfig.additionalParams = {
                semesterId: semesterId + "",
                courseId: courseId
            };
            this.fileManagerConfig.allowedActions = angular.extend(this.fileManagerConfig.allowedActions, {
                createAssignmentFolder: false,
                upload: true,
                rename: false,
                move: false,
                copy: false,
                edit: false,
                changePermissions: false,
                compress: false,
                compressChooseName: false,
                extract: false,
                download: true,
                downloadMultiple: true,
                preview: false,
                remove: false,
                createFolder: false
            });
            this.$scope.reloadOn = courseNo;
        };
        StudentCourseMaterial.prototype.getSelectedSemester = function () {
            var semesters = this.courseMaterialSearchParamModel.getSemesters();
            var semesterName = "";
            for (var i = 0; i < semesters.length; i++) {
                if (semesters[i].id == this.courseMaterialSearchParamModel.semesterId) {
                    semesterName = semesters[i].name;
                }
            }
            return semesterName;
        };
        StudentCourseMaterial.$inject = ['$scope', '$stateParams', 'appConstants', 'HttpClient', 'fileManagerConfig'];
        return StudentCourseMaterial;
    }());
    ums.StudentCourseMaterial = StudentCourseMaterial;
    ums.UMS.controller("StudentCourseMaterial", StudentCourseMaterial);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MarksSubmission = (function () {
        function MarksSubmission($scope, appConstants, httpClient, $stateParams, $window, $sce, $q, notify, commonService, semesterService) {
            this.$scope = $scope;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$stateParams = $stateParams;
            this.$window = $window;
            this.$sce = $sce;
            this.$q = $q;
            this.notify = notify;
            this.commonService = commonService;
            this.semesterService = semesterService;
            this.$scope.userRole = $stateParams["1"];
            $scope.data = {
                gradeLetterOptions: appConstants.gradeLetters,
                total_part: Number,
                part_a_total: Number,
                part_b_total: Number,
                course_no: String,
                course_title: String,
                crhr: Number,
                semester_name: String,
                dept_name: String,
                recheck_accepted_studentId: String,
                semesters: Array(),
                depts: Array(),
                ugDepts: appConstants.ugDept,
                pgDepts: appConstants.pgDept,
                ugPrograms: appConstants.ugPrograms,
                pgPrograms: appConstants.pgPrograms,
                programs: Array(),
                markSubmissionStatus: appConstants.marksSubmissionStatus,
                yearSemester: appConstants.yearSemester,
                searchBox: String,
                searchStudentId: String,
                colorMap: {
                    TIMEOVER: "timeOverClass",
                    SUBMITTED: "submittedClass",
                    NONE: "noneClass"
                },
                addiInfoArr: Array(),
                totalInfoView: Number
            };
            $scope.modalSettings = {};
            this.$scope.modalSettings.header = "Confirmation";
            $scope.onTotalPartChange = this.onTotalPartChange.bind(this);
            $scope.toggleStatRules = this.toggleStatRules.bind(this);
            $scope.fetchGradeSheet = this.fetchGradeSheet.bind(this);
            $scope.refreshGradeSheet = this.refreshGradeSheet.bind(this);
            $scope.reloadGradeSheet = this.reloadGradeSheet.bind(this);
            $scope.pasteExcelData = this.pasteExcelData.bind(this);
            $scope.validateExcelSheetHeader = this.validateExcelSheetHeader.bind(this);
            $scope.setFieldValue = this.setFieldValue.bind(this);
            $scope.checkNumber = this.checkNumber.bind(this);
            $scope.validateGradeSheet = this.validateGradeSheet.bind(this);
            $scope.saveGradeSheet = this.saveGradeSheet.bind(this);
            $scope.saveAndSendToScrutinizer = this.saveAndSendToScrutinizer.bind(this);
            $scope.fetchGradeSubmissionTable = this.fetchGradeSubmissionTable.bind(this);
            $scope.calculateTotalAndGradeLetter = this.calculateTotalAndGradeLetter.bind(this);
            $scope.fetchMarksSubmissionLog = this.fetchMarksSubmissionLog.bind(this);
            $scope.fetchMarksLog = this.fetchMarksLog.bind(this);
            $scope.getSubmissionColorCodeStyle = this.getSubmissionColorCodeStyle.bind(this);
            $scope.recheckAll = this.recheckAll.bind(this);
            $scope.approveAll = this.approveAll.bind(this);
            $scope.recheckedAll = this.recheckedAll.bind(this);
            $scope.downloadPdf = this.downloadPdf.bind(this);
            $scope.onRecheckClick = this.onRecheckClick.bind(this);
            $scope.onApproveClick = this.onApproveClick.bind(this);
            $scope.saveRecheckApproveGrades = this.saveRecheckApproveGrades.bind(this);
            $scope.closePopupModal = this.closePopupModal.bind(this);
            $scope.loadSemesters = this.loadSemesters.bind(this);
            $scope.loadPrograms = this.loadPrograms.bind(this);
            $scope.generateXls = this.generateXls.bind(this);
            $scope.calculateStyle = this.calculateStyle.bind(this);
            $scope.calculateRepStyle = this.calculateRepStyle.bind(this);
            $scope.showErrorTooltip = this.showErrorTooltip.bind(this);
            $scope.destroyErrorTooltip = this.destroyErrorTooltip.bind(this);
            $scope.searchStudent = this.searchStudent.bind(this);
            $scope.clearSearch = this.clearSearch.bind(this);
            $scope.checkDisable = this.checkDisable.bind(this);
            $scope.inputParams = {
                program_type: this.appConstants.programTypeEnum.UG,
                semester_id: 11,
                exam_typeId: 1,
                dept_id: '',
                program_id: 1,
                status: -1,
                year_semester: 0,
                course_no: ''
            };
            this.loadSemesters();
            $scope.data.recheck_accepted_studentId = "";
            $scope.chartData = [];
            this.initChart();
            var thisScope = this.$scope;
            $scope.$on('LastRepeaterElement', function () {
                setTimeout(function () {
                    $(".img_tooltip").hide();
                    $("#panel_top").show();
                    $("#loading_panel").hide();
                    //To show new features for a certain time
                    //Don't remove this code.
                    /*
                        if(thisScope.data.totalInfoView  == 0 && $scope.currentActor == 'preparer') {
                          $("#modal-feature-info").modal('show');
                        }
                        thisScope.data.totalInfoView++;
                        */
                }, 400);
            });
            ums.Utils.setValidationOptions("form-horizontal");
            $scope.data.totalInfoView = 0;
            $scope.data.addiInfoArr = ["Abs", "Rep"];
        }
        MarksSubmission.prototype.getSubmissionColorCodeStyle = function (statusType) {
            return this.$scope.data.colorMap[statusType];
        };
        ;
        MarksSubmission.prototype.initChart = function () {
            this.$scope.amChartOptions = {
                data: this.$scope.chartData,
                type: "serial",
                categoryField: "gradeLetter",
                depth3D: 20,
                angle: 30,
                pathToImages: 'http://www.amcharts.com/lib/3/images/',
                categoryAxis: {
                    gridPosition: "start",
                    parseDates: false,
                    dashLength: 5
                },
                valueAxes: [{
                        dashLength: 5,
                        title: "Students"
                    }],
                graphs: [{
                        type: "column",
                        valueField: "total",
                        balloonText: "<span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
                        fillAlphas: 1,
                        colorField: "color",
                        lineAlpha: 0,
                        labelText: '[[value]]'
                    }],
                chartCursor: [{
                        cursorAlpha: 0,
                        zoomable: false,
                        categoryBalloonEnabled: false
                    }]
            };
        };
        MarksSubmission.prototype.fetchChartData = function () {
            var url = "academic/gradeSubmission/chartdata/semester/" + this.$scope.current_semesterId + "/courseid/" + this.$scope.current_courseId + "/examtype/" + this.$scope.current_examTypeId + "/coursetype/" + (this.$scope.courseType == "THEORY" ? "1" : "2");
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var chartData = json.entries;
                defer.resolve(chartData);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        MarksSubmission.prototype.downloadPdf = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = this.$scope.data.course_no + "-" + this.$scope.data.semester_name;
            this.httpClient.get("gradeReport/pdf/semester/" + this.$scope.current_semesterId + "/courseid/" + this.$scope.current_courseId + "/examtype/" + this.$scope.current_examTypeId + "/role/" + this.$scope.currentActor, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        MarksSubmission.prototype.fetchGradeSubmissionTable = function () {
            var _this = this;
            var status = 0;
            if (this.$scope.userRole != "T") {
                status = this.$scope.inputParams.status;
            }
            var deptId = this.$scope.inputParams.dept_id + '';
            var programId = 99;
            if (deptId == "" || deptId == null || deptId == 'NaN') {
                deptId = "NA";
            }
            else {
                if (this.$scope.inputParams.dept_id != MarksSubmission.AS_DEPT_ID) {
                    deptId = this.commonService.padLeft(Number(this.$scope.inputParams.dept_id), 2, '0');
                    programId = this.$scope.inputParams.program_id;
                }
            }
            var requestUrl = "academic/gradeSubmission/semester/" + this.$scope.inputParams.semester_id +
                "/examtype/" + this.$scope.inputParams.exam_typeId +
                "/dept/" + deptId +
                "/program/" + programId +
                "/yearsemester/" + this.$scope.inputParams.year_semester +
                "/role/" + this.$scope.userRole +
                "/status/" + status;
            if (this.$scope.inputParams.course_no != null && this.$scope.inputParams.course_no != "")
                requestUrl += "/courseno/" + this.$scope.inputParams.course_no;
            console.log(requestUrl);
            this.httpClient.get(requestUrl, this.appConstants.mimeTypeJson, function (data, etag) {
                _this.$scope.allMarksSubmissionStatus = data.entries;
            });
            $("#leftDiv").hide();
            $("#arrowDiv").show();
            setTimeout(function () {
                $('[data-toggle="tooltip"]').tooltip();
            }, 1000);
        };
        //Refresh used for straightforward Refresh purpose
        MarksSubmission.prototype.refreshGradeSheet = function () {
            this.fetchGradeSheet(this.$scope.current_courseId, this.$scope.current_semesterId, this.$scope.current_examTypeId);
        };
        //Reload use for refresh a grade sheet with some time delay
        MarksSubmission.prototype.reloadGradeSheet = function (that) {
            setTimeout(function () {
                that.fetchGradeSheet(that.$scope.current_courseId, that.$scope.current_semesterId, that.$scope.current_examTypeId);
            }, 1000);
        };
        MarksSubmission.prototype.fetchGradeSheet = function (courseId, semesterId, examTypeId) {
            var _this = this;
            $("#panel_top").hide();
            $("#loading_panel").show();
            this.$scope.current_courseId = courseId;
            this.$scope.current_semesterId = semesterId;
            this.$scope.current_examTypeId = examTypeId;
            $('.page-title.ng-binding').html("Online Grade Preparation/Scrutiny/Approval");
            this.$scope.toggleColumn = true;
            var url = "academic/gradeSubmission/semester/" + semesterId + "/courseid/" + courseId + "/examtype/" + examTypeId + "/role/" + this.$scope.userRole;
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (data, etag) {
                _this.$scope.noneSubmittedGrades = data.none_and_submit_grades;
                _this.$scope.recheckCandidatesGrades = data.recheck_candidates_grades;
                _this.$scope.waitingForScrutinyGrades = data.waiting_for_scrutiny_grades;
                _this.$scope.waitingForHeadApprovalGrades = data.waiting_for_head_approval_grades;
                _this.$scope.waitingForCoEApprovalGrades = data.waiting_for_CoE_approval_grades;
                _this.$scope.submittedGrades = data.submitted_grades;
                _this.$scope.scrutinizeCandidatesGrades = data.scrutinize_candidates_grades;
                _this.$scope.approveCandidatesGrades = data.approve_candidates_grades;
                _this.$scope.acceptCandidatesGrades = data.accept_candidates_grades;
                _this.$scope.scrutinizedGrades = data.scrutinized_grades;
                _this.$scope.approvedGrades = data.approved_grades;
                _this.$scope.acceptedGrades = data.accepted_grades;
                _this.$scope.recheckAcceptedGrades = data.recheck_accepted_grades;
                var part_info = data.part_info;
                _this.$scope.data.part_a_total = part_info.part_a_total == 0 ? null : part_info.part_a_total;
                _this.$scope.data.part_b_total = part_info.part_b_total == 0 ? null : part_info.part_b_total;
                _this.$scope.data.total_part = part_info.total_part;
                _this.$scope.data.course_no = part_info.courseNo;
                _this.$scope.data.course_title = part_info.courseTitle;
                _this.$scope.data.crhr = part_info.cRhR;
                _this.$scope.data.semester_name = part_info.semesterName;
                _this.$scope.data.dept_short_name = part_info.deptSchoolShortName;
                _this.$scope.data.dept_long_name = part_info.deptSchoolLongName;
                _this.$scope.data.status_name = part_info.statusName;
                _this.$scope.gradeSubmissionStatus = part_info.statusId;
                _this.$scope.courseType = part_info.courseType;
                _this.$scope.currentActor = data.current_actor;
                _this.$scope.data.searchBox = "";
                _this.$scope.data.program_short_name = part_info.programShortName;
                _this.$scope.data.program_long_name = part_info.programLongName;
                _this.$scope.data.deadline_preparer = part_info.lastSubmissionDatePrep;
                _this.$scope.data.deadline_scrutinizer = part_info.lastSubmissionDateScr;
                _this.$scope.data.deadline_head = part_info.lastSubmissionDateHead;
                if (_this.$scope.data.total_part == 1)
                    _this.$scope.toggleColumn = false;
                $("#partDiv").show();
                //Initialize ModalWindows
                _this.initializeModalWindows();
                _this.initializeDatePickers();
                //Fetch Chart Data ---
                _this.fetchChartData().then(function (chartData) {
                    _this.$scope.$broadcast("amCharts.updateData", chartData);
                    _this.$scope.chartData = chartData;
                });
                if (_this.$scope.gradeSubmissionStatus == _this.appConstants.marksSubmissionStatusEnum.NOT_SUBMITTED)
                    $("#loading_panel").hide();
            });
            $("#selection1").hide();
            $("#selection2").show();
            //$("#btn_stat").focus();
            $(window).scrollTop($('#panel_top').offset().top - 56);
        };
        MarksSubmission.prototype.calculateTotalAndGradeLetter = function (student_id, reg_type) {
            var total;
            var regType = $("#reg_type_" + student_id).val();
            if (this.$scope.courseType == "THEORY") {
                var quiz = Number($("#quiz_" + student_id).val()) || 0;
                var class_perf = Number($("#class_perf_" + student_id).val()) || 0;
                var part_a = Number($("#part_a_" + student_id).val()) || 0;
                var part_b = 0;
                if ($("#total_part") && $("#total_part").val() == 2)
                    part_b = Number($("#part_b_" + student_id).val()) || 0;
                if (this.$scope.data.total_part == 2)
                    part_b = Number($("#part_b_" + student_id).val()) || 0;
                total = quiz + class_perf + part_a + part_b;
                total = this.decideTotal(total, reg_type);
                $("#total_" + student_id).val(String(total));
                var grade_letter = this.commonService.getGradeLetter(total, regType);
                $("#grade_letter_" + student_id).val(grade_letter);
                this.validateGrade(false, student_id, String(quiz), String(class_perf), $("#part_a_" + student_id).val(), $("#part_b_" + student_id).val(), String(total), grade_letter, regType);
            }
            else {
                total = $("#total_" + student_id).val();
                $("#total_" + student_id).val(String(total));
                var grade_letter = this.commonService.getGradeLetter(total, regType);
                $("#grade_letter_" + student_id).val(grade_letter);
                this.validateGrade(false, student_id, "", "", "", "", String(total), grade_letter, regType);
            }
        };
        MarksSubmission.prototype.onTotalPartChange = function () {
            if (this.$scope.data.total_part == 1) {
                this.$scope.toggleColumn = false;
                this.$scope.data.part_a_total = 70;
                this.$scope.data.part_b_total = 0;
                $("#partDiv").hide();
            }
            else {
                this.$scope.data.part_a_total = 0;
                this.$scope.data.part_b_total = 0;
                this.$scope.toggleColumn = true;
                $("#partDiv").show();
            }
            this.$scope.$broadcast("renderScrollableTable");
        };
        MarksSubmission.prototype.decideTotal = function (total, regType) {
            var totalMarks = 0;
            if (regType == 3 || regType == 4)
                totalMarks = Math.round((Math.round(total) / 70) * 100);
            else
                totalMarks = Math.round(total);
            return totalMarks;
        };
        MarksSubmission.prototype.checkNumber = function (sNum) {
            var pattern = /^\d+(.\d{1,3})?$/;
            return pattern.test(sNum);
        };
        MarksSubmission.prototype.toggleStatRules = function (table_id) {
            $("#tbl_stat").hide();
            $("#tbl_rules").hide();
            $("#" + table_id).show();
        };
        MarksSubmission.prototype.pasteExcelData = function () {
            var studentId = "";
            var data = $('textarea[name=excel_data]').val();
            var rows = data.split("\n");
            var regType;
            var rowError = false;
            var partAMarks = 0;
            var partBMarks = 0;
            var partBForGradeValidation = "";
            var quiz = 0;
            var classPerformance = 0;
            var total = 0;
            var totalInExcel = "";
            var gradeInExcel = "";
            for (var y = 0; y < rows.length; y++) {
                var partAMarks = 0;
                partBMarks = 0;
                quiz = 0;
                classPerformance = 0;
                total = 0;
                if (rows[y] == "")
                    continue;
                var row = rows[y].split("\t");
                if (y == 0) {
                    if (this.validateExcelSheetHeader(row) == false) {
                        return;
                    }
                    continue;
                }
                studentId = row[0];
                regType = $("#reg_type_" + studentId).val();
                rowError = false;
                if (this.$scope.courseType == "THEORY") {
                    if (regType != 3 && regType != 4) {
                        this.setFieldValue("quiz_" + studentId, row[2]);
                        this.setFieldValue("class_perf_" + studentId, row[3]);
                    }
                    this.setFieldValue("part_a_" + studentId, row[4]);
                    //ToDo: Need to check whether is it a positive number or not
                    if (!isNaN(row[4])) {
                        partAMarks = row[4];
                    }
                    if (this.$scope.data.total_part == 2) {
                        this.setFieldValue("part_b_" + studentId, row[5]);
                        if (!isNaN(row[5])) {
                            partBMarks = row[5];
                        }
                        partBForGradeValidation = row[5];
                        totalInExcel = row[6];
                        gradeInExcel = row[7];
                    }
                    else if (this.$scope.data.total_part == 1) {
                        totalInExcel = row[5];
                        gradeInExcel = row[6];
                    }
                    if (totalInExcel == "") {
                        try {
                            if (regType != 3 && regType != 4) {
                                total = Number(row[2]) + Number(row[3]) + Number(partAMarks) + Number(partBMarks);
                            }
                            else {
                                total = Number(partAMarks) + Number(partBMarks);
                            }
                            total = this.decideTotal(total, regType);
                            this.setFieldValue("total_" + studentId, total);
                        }
                        catch (Exception) {
                        }
                    }
                    else {
                        this.setFieldValue("total_" + studentId, totalInExcel);
                        total = Number(totalInExcel);
                    }
                    if (gradeInExcel != "")
                        this.setFieldValue("grade_letter_" + studentId, gradeInExcel);
                    else
                        this.setFieldValue("grade_letter_" + studentId, this.commonService.getGradeLetter(total, regType));
                    if (regType != 3 && regType != 4) {
                        quiz = row[2];
                        classPerformance = row[3];
                    }
                    this.validateGrade(false, studentId, quiz + '', classPerformance + '', row[4], partBForGradeValidation, total + '', $("#grade_letter_" + studentId).val(), regType);
                }
                else {
                    this.setFieldValue("total_" + studentId, row[2]);
                    if (row[3] != "")
                        this.setFieldValue("grade_letter_" + studentId, row[3]);
                    else
                        this.setFieldValue("grade_letter_" + studentId, this.commonService.getGradeLetter(Number(row[2]), regType));
                    this.validateGrade(false, studentId, "", "", "", "", row[2], $("#grade_letter_" + studentId).val(), regType);
                }
            }
            $('#modal-prompt').modal('hide');
        };
        MarksSubmission.prototype.validatePartAPartB = function (force_validate) {
            var messageA = "";
            var errorA = false;
            if ((this.$scope.data.part_a_total != "") || (force_validate)) {
                if (this.$scope.data.part_a_total == "") {
                    errorA = true;
                    messageA = "Part A cannot be empty.";
                }
                else if (this.checkNumber(this.$scope.data.part_a_total) == false) {
                    errorA = true;
                    messageA = "Not a valid number.";
                }
                else if (this.checkNumber(this.$scope.data.part_a_total) == true && this.$scope.data.total_part == 1 && Number(this.$scope.data.part_a_total) != 70) {
                    errorA = true;
                    messageA = "Part A should be 70.";
                }
                else if (this.$scope.data.total_part == 2 &&
                    this.checkNumber(this.$scope.data.part_a_total) == true &&
                    this.checkNumber(this.$scope.data.part_b_total) == true &&
                    Number(this.$scope.data.part_a_total) + Number(this.$scope.data.part_b_total) != 70) {
                    errorA = true;
                    messageA = "Total should be equal to 70.";
                }
            }
            if (errorA == true)
                this.showErrorTooltip("partA", "", messageA);
            else
                this.destroyErrorTooltip("partA", "");
            var messageB = "";
            var errorB = false;
            if (((this.$scope.data.total_part == 2 && (this.$scope.data.part_b_total != "")) || (this.$scope.data.total_part == 2 && force_validate))) {
                if (this.$scope.data.part_b_total == "") {
                    errorB = true;
                    messageB = "Part B cannot be empty.";
                }
                else if (this.checkNumber(this.$scope.data.part_b_total) == false) {
                    errorB = true;
                    messageB = "Not a valid number.";
                }
                else if (this.checkNumber(this.$scope.data.part_b_total) == true &&
                    Number(this.$scope.data.part_a_total) + Number(this.$scope.data.part_b_total) > 70) {
                    errorB = true;
                    messageB = "Total should not greater than 70.";
                }
            }
            if (errorB == true)
                this.showErrorTooltip("partB", "", messageB);
            else
                this.destroyErrorTooltip("partB", "");
            return (errorA || errorB);
        };
        MarksSubmission.prototype.validateGrade = function (force_validate, student_id, quiz, class_performance, part_a, part_b, total, grade_letter, reg_type) {
            var row_error = false;
            var border_error = { "border": "2px solid red" };
            var border_ok = { "border": "1px solid grey" };
            var message = "";
            if (this.$scope.courseType == "THEORY") {
                //Quiz
                if (quiz != "" || force_validate) {
                    if (((this.checkNumber(quiz) == false || Number(quiz) > 20) && reg_type == 1)) {
                        row_error = true;
                        $("#quiz_" + student_id).css(border_error);
                        if (quiz == "")
                            message = "Provide marks.";
                        else if (this.checkNumber(quiz) == false)
                            message = "Not a valid Number.";
                        else if (Number(quiz) > 20)
                            message = "Maximum Quiz marks can be 20.";
                        this.showErrorTooltip("quiz", student_id, message);
                    }
                    else {
                        $("#quiz_" + student_id).css(border_ok);
                        this.destroyErrorTooltip("quiz", student_id);
                    }
                }
                //Class Performance
                message = "";
                if (class_performance != "" || force_validate) {
                    if ((this.checkNumber(class_performance) == false || Number(class_performance) > 10) && reg_type == 1) {
                        $("#class_perf_" + student_id).css(border_error);
                        row_error = true;
                        if (class_performance == "")
                            message = "Provide marks.";
                        else if (this.checkNumber(class_performance) == false)
                            message = "Not a valid Number.";
                        else if (Number(class_performance) > 10)
                            message = "Maximum Class Performance marks can be 10.";
                        this.showErrorTooltip("class_perf", student_id, message);
                    }
                    else {
                        $("#class_perf_" + student_id).css(border_ok);
                        this.destroyErrorTooltip("class_perf", student_id);
                    }
                }
                //Part A
                message = "";
                if (part_a != "" || force_validate) {
                    if (this.$scope.data.part_a_total != null) {
                        if ((this.checkNumber(part_a) && Number(part_a) > this.$scope.data.part_a_total) ||
                            (!this.checkNumber(part_a) && !this.$scope.data.addiInfoArr.includes(part_a))) {
                            $("#part_a_" + student_id).css(border_error);
                            row_error = true;
                            if (part_a == "")
                                message = "Provide marks.";
                            else if (!this.checkNumber(part_a) && !this.$scope.data.addiInfoArr.includes(part_a))
                                message = "Not a valid Number. Number, 'Abs' and 'Rep' are allowed values";
                            else if (Number(part_a) > this.$scope.data.part_a_total)
                                message = "Maximum marks can be " + this.$scope.data.part_a_total + ".";
                            this.showErrorTooltip("part_a", student_id, message);
                        }
                        else {
                            $("#part_a_" + student_id).css(border_ok);
                            this.destroyErrorTooltip("part_a", student_id);
                        }
                    }
                }
                //Part B
                message = "";
                if (part_b != "" || force_validate) {
                    if (this.$scope.data.total_part == 2 && this.$scope.data.part_b_total != null) {
                        if ((this.checkNumber(part_b) && Number(part_b) > this.$scope.data.part_b_total) ||
                            (!this.checkNumber(part_b) && !this.$scope.data.addiInfoArr.includes(part_b))) {
                            $("#part_b_" + student_id).css(border_error);
                            row_error = true;
                            if (part_b == "")
                                message = "Provide marks.";
                            else if (!this.checkNumber(part_b) && !this.$scope.data.addiInfoArr.includes(part_b))
                                message = "Not a valid Number. Number, 'Abs' and 'Rep' are allowed values";
                            else if (Number(part_b) > this.$scope.data.part_b_total)
                                message = "Maximum marks can be " + this.$scope.data.part_b_total + ".";
                            this.showErrorTooltip("part_b", student_id, message);
                        }
                        else {
                            $("#part_b_" + student_id).css(border_ok);
                            this.destroyErrorTooltip("part_b", student_id);
                        }
                    }
                }
                // This validation has only been added in client side.
                //If Part-A holds 'Abs' or 'Rep' then Part-B should hold the same information.
                message = "";
                if (this.$scope.data.total_part == 2) {
                    if (part_a == "Abs" || part_a == "Rep" || part_b == "Abs" || part_b == "Rep") {
                        if (part_a != part_b) {
                            message = "Both part should hold same information ('Abs' or 'Rep')";
                            $("#part_a_" + student_id).css(border_error);
                            $("#part_b_" + student_id).css(border_error);
                            this.showErrorTooltip("part_a_", student_id, message);
                            this.showErrorTooltip("part_b", student_id, message);
                            row_error = true;
                        }
                        else {
                            $("#part_a_" + student_id).css(border_ok);
                            this.destroyErrorTooltip("part_a_", student_id);
                            $("#part_b_" + student_id).css(border_ok);
                            this.destroyErrorTooltip("part_b_", student_id);
                        }
                    }
                }
                //Total
                message = "";
                if (total != "" || force_validate) {
                    var lPartA = part_a;
                    var lPartB = part_b;
                    if (part_a == "Abs" || part_a == "Rep")
                        lPartA = "0";
                    if (part_b == "Abs" || part_b == "Rep")
                        lPartB = "0";
                    var cTotal = Number(quiz) + Number(class_performance) + Number(lPartA) + Number(lPartB);
                    var calculatedTotal = Math.round(cTotal);
                    var calculatedTotalForCarry = Math.round((Math.round(cTotal) / 70) * 100);
                    if (this.checkNumber(total) == false || Number(total) > 100 ||
                        (Number(total) != calculatedTotal && reg_type != 3 && reg_type != 4) ||
                        (Number(total) != calculatedTotalForCarry && (reg_type == 3 || reg_type == 4))) {
                        $("#total_" + student_id).css(border_error);
                        row_error = true;
                        if (total == "")
                            message = "Provide marks.";
                        else if (this.checkNumber(total) == false)
                            message = "Not a valid Number.";
                        else if (Number(total) > 100)
                            message = "Maximum can be 100.";
                        else if ((Number(total) != calculatedTotal && (reg_type != 3 && reg_type != 4)) ||
                            (Number(total) != calculatedTotalForCarry && (reg_type == 3 || reg_type == 4)))
                            message = "Wrong total value.";
                        this.showErrorTooltip("total", student_id, message);
                    }
                    else {
                        $("#total_" + student_id).css(border_ok);
                        this.destroyErrorTooltip("total", student_id);
                    }
                }
            } //End of if
            if (this.$scope.courseType == "SESSIONAL") {
                //Total
                if (total != "" || force_validate) {
                    if (this.checkNumber(total) == false) {
                        $("#total_" + student_id).css(border_error);
                        row_error = true;
                        if (total == "")
                            message = "Provide marks.";
                        else if (this.checkNumber(total) == false)
                            message = "Not a valid Number.";
                        this.showErrorTooltip("total", student_id, message);
                    }
                    else if (Number(total) > 100) {
                        $("#total_" + student_id).css(border_error);
                        message = "Maximum can be 100.";
                        row_error = true;
                        this.showErrorTooltip("total", student_id, message);
                    }
                    else {
                        $("#total_" + student_id).css(border_ok);
                        this.destroyErrorTooltip("total", student_id);
                    }
                }
            }
            //Grade Letter
            if (grade_letter != "" || force_validate) {
                if (grade_letter == "" || this.commonService.getGradeLetter(Number(total), reg_type) != grade_letter) {
                    $("#grade_letter_" + student_id).css(border_error);
                    row_error = true;
                    if (grade_letter == "")
                        message = "Grade cannot empty.";
                    else if (this.commonService.getGradeLetter(Number(total), reg_type) != grade_letter)
                        message = "Wrong Grade Letter.";
                    this.showErrorTooltip("grade_letter", student_id, message);
                }
                else {
                    $("#grade_letter_" + student_id).css(border_ok);
                    this.destroyErrorTooltip("grade_letter", student_id);
                }
            }
            if (row_error == true) {
                this.colorRow(ums.Utils.ERROR_ROW, student_id);
            }
            else {
                this.resetRowColor(this.getTdArray(student_id), student_id);
            }
            return row_error;
        };
        MarksSubmission.prototype.setFieldValue = function (field_id, field_value) {
            $("#" + field_id).val(field_value);
        };
        MarksSubmission.prototype.validateExcelSheetHeader = function (cells) {
            if (this.$scope.courseType == "THEORY") {
                if (this.$scope.data.total_part == 1 && (cells[0] != "Student Id" || cells[1] != "Student Name" || cells[2] != "Quiz" || cells[3] != "Class Perf." || cells[4] != "Final Exam" || cells[5] != "Total" || cells[6] != "Grade Letter")) {
                    this.$scope.excel_copy_paste_error_div = true;
                    return false;
                }
                else if (this.$scope.data.total_part == 2 && (cells[0] != "Student Id" || cells[1] != "Student Name" || cells[2] != "Quiz" || cells[3] != "Class Perf." || cells[4] != "Part-A" || cells[5] != "Part-B" || cells[6] != "Total" || cells[7] != "Grade Letter")) {
                    this.$scope.excel_copy_paste_error_div = true;
                    return false;
                }
                else
                    this.$scope.excel_copy_paste_error_div = false;
            }
            else if (this.$scope.courseType == "SESSIONAL") {
                if (cells[0] != "Student Id" || cells[1] != "Student Name" || cells[2] != "Total" || cells[3] != "Grade Letter") {
                    this.$scope.excel_copy_paste_error_div = true;
                    return false;
                }
                else
                    this.$scope.excel_copy_paste_error_div = false;
            }
            return true;
        };
        MarksSubmission.prototype.saveGradeSheet = function () {
            var gradeList = this.getTargetGradeList(1);
            if (this.validateGrades(false))
                this.postGradeSheet(gradeList, 'save');
            else {
                $("#alertMessage").html("There are some problem with your grades. Please check and correct them at first.");
                setTimeout(function () {
                    $("#modal-alert").modal('show');
                }, 200);
            }
            return false;
        };
        MarksSubmission.prototype.validateGrades = function (force_validate) {
            var validate = true;
            var gradeList = this.getTargetGradeList(this.appConstants.marksStatusEnum.SUBMITTED);
            if (this.$scope.courseType == "THEORY") {
                for (var ind in gradeList) {
                    var studentMark = gradeList[ind];
                    if (this.validateGrade(force_validate, studentMark.studentId, studentMark.quiz.toString(), studentMark.classPerformance.toString(), studentMark.partA.toString(), studentMark.partB.toString(), studentMark.total.toString(), studentMark.gradeLetter, studentMark.regType) == true)
                        validate = false;
                }
            }
            else if (this.$scope.courseType == "SESSIONAL") {
                for (var ind in gradeList) {
                    var studentMark = gradeList[ind];
                    if (this.validateGrade(force_validate, studentMark.studentId, "", "", "", "", studentMark.total.toString(), studentMark.gradeLetter, studentMark.regType) == true)
                        validate = false;
                }
            }
            return validate;
        };
        MarksSubmission.prototype.getTargetGradeList = function (status) {
            var gradeList = new Array();
            var allStudents = new Array();
            var studentId = "";
            var studentMark;
            if (this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.NOT_SUBMITTED)
                allStudents = this.$scope.noneSubmittedGrades;
            else if (this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_SCRUTINIZER
                || this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_HEAD
                || this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_COE) {
                allStudents = this.$scope.recheckCandidatesGrades;
            }
            for (var ind in allStudents) {
                var currentStudent = allStudents[ind];
                var studentMark;
                if (currentStudent.statusId == this.appConstants.marksStatusEnum.NONE
                    || currentStudent.statusId == this.appConstants.marksStatusEnum.SUBMIT
                    || currentStudent.statusId == this.appConstants.marksStatusEnum.SUBMITTED) {
                    studentMark = {};
                    studentId = currentStudent.studentId;
                    studentMark.studentId = studentId;
                    studentMark.regType = Number($("#reg_type_" + studentId).val());
                    if (this.$scope.courseType == "THEORY") {
                        studentMark.quiz = $("#quiz_" + studentId).val();
                        studentMark.classPerformance = $("#class_perf_" + studentId).val();
                        if ($("#part_a_" + studentId).val() == "Abs" || $("#part_a_" + studentId).val() == "Rep") {
                            studentMark.partA = "0";
                            studentMark.partAAddiInfo = $("#part_a_" + studentId).val();
                        }
                        else {
                            studentMark.partA = $("#part_a_" + studentId).val();
                            studentMark.partAAddiInfo = "";
                        }
                        if ($("#part_b_" + studentId).val() == "Abs" || $("#part_b_" + studentId).val() == "Rep") {
                            studentMark.partB = "0";
                            studentMark.partBAddiInfo = $("#part_b_" + studentId).val();
                        }
                        else {
                            studentMark.partB = $("#part_b_" + studentId).val();
                            studentMark.partBAddiInfo = "";
                        }
                    }
                    studentMark.total = $("#total_" + studentId).val();
                    studentMark.gradeLetter = $("#grade_letter_" + studentId).val();
                    studentMark.total = $("#total_" + studentId).val();
                    studentMark.statusId = status;
                    if ((this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_SCRUTINIZER
                        || this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_HEAD
                        || this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_COE)) {
                        if ($('#rechecked_' + studentId) && !$('#rechecked_' + studentId).prop('checked'))
                            studentMark.statusId = this.appConstants.marksStatusEnum.NONE;
                    }
                }
                gradeList.push(studentMark);
            }
            return gradeList;
        };
        MarksSubmission.prototype.saveAndSendToScrutinizer = function () {
            var gradeList = this.getTargetGradeList(this.appConstants.marksStatusEnum.SUBMITTED);
            var validate = true;
            if (this.$scope.courseType == "THEORY") {
                if (this.validatePartAPartB(true) == true) {
                    $("#alertMessage").html("Please provide Part Information Correctly.<br/></br>Check <font color='red'>'Total Part'</font> Section of the Grade Sheet Header.");
                    setTimeout(function () {
                        $("#modal-alert").modal('show');
                    }, 200);
                    $("html, body").animate({ scrollTop: 0 }, "slow");
                    return;
                }
            }
            validate = this.validateGrades(true);
            if (validate == false) {
                alert("There are some problem with the data you submitted. Please check and correct. Then submit it again.");
                return;
            }
            else if (this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_SCRUTINIZER
                || this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_HEAD
                || this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_COE) {
                var totalRecheckedGrades = this.getTotalRecheckedGrade(this.$scope.currentActor);
                if (totalRecheckedGrades != gradeList.length) {
                    $("#alertMessage").html("You must recheck all grades.");
                    setTimeout(function () {
                        $("#modal-alert").modal('show');
                    }, 1000);
                    return;
                }
            }
            this.postGradeSheet(gradeList, 'submit');
        };
        MarksSubmission.prototype.validateGradeSheet = function () {
            return false;
        };
        MarksSubmission.prototype.postGradeSheet = function (gradeList, action) {
            var _this = this;
            var url = "academic/gradeSubmission";
            var complete_json = this.createCompleteJson(action, gradeList, null, null);
            this.httpClient.put(url, complete_json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved.");
                _this.reloadGradeSheet(_this);
            }).error(function (data, status) {
                _this.notify.error(data);
                /*
               $('#modal-otp').modal('show');
               $('.progress-bar').progressbar({display_text: 'fill'});
   
               var remainingSeconds=1*70;  //We will get this value from backend
               var clockTimer=+localStorage.getItem("clockTimer");
               clearInterval(clockTimer);
               var cTimer = setInterval(function() {
                   var minutes = parseInt((remainingSeconds/60)+'');
                   var seconds =  remainingSeconds%60;
                   document.getElementById("demo").innerHTML =  "00"+" : "+("0" + minutes).slice(-2) + " : " + ("0" + seconds).slice(-2);
                   if (remainingSeconds < 0) {
                       clearInterval(cTimer);
                       $("#otpInput").hide();
                       $("#otpExpired").show();
                   }
                   remainingSeconds = remainingSeconds-1;
                 }, 1000);
           localStorage["clockTimer"] = cTimer;
   
           var progressTimer=+localStorage.getItem("progressTimer");
           clearInterval(progressTimer);
           var progressRemainingSeconds=1*70;  //We will get this value from backend
   
           var otpLifeTime = 600; //In Seconds
           var percentage = (100/otpLifeTime)*(progressRemainingSeconds);
           var index = progressRemainingSeconds;
           var pTimer = setInterval(function(){
             percentage = percentage - 1/6;
             index --;
             if (index > 0){
               $('.progress-bar').css('width', percentage+'%');
               $('.progress-bar').attr('aria-valuenow', Math.round(percentage));
               $('.progress-bar').html($('.progress-bar').attr('aria-valuenow') + '%');
             } else {
               clearInterval(pTimer);
             }
           }, 1000);
           localStorage["progressTimer"] = pTimer;
         */ 
            });
        };
        MarksSubmission.prototype.createCompleteJson = function (action, gradeList, recheckList, approveList) {
            var complete_json = {};
            complete_json["gradeList"] = gradeList;
            complete_json["recheckList"] = recheckList;
            complete_json["approveList"] = approveList;
            complete_json["role"] = this.$scope.userRole;
            var courseInfo = {
                course_id: '',
                semester_id: 0,
                exam_typeId: 0,
                total_part: 0,
                part_a_total: 0,
                part_b_total: 0,
                course_typeId: 0,
                deadline_preparer: '',
                deadline_scrutinizer: '',
                deadline_head: ''
            };
            courseInfo.course_id = this.$scope.current_courseId;
            courseInfo.semester_id = Number(this.$scope.current_semesterId);
            courseInfo.exam_typeId = Number(this.$scope.current_examTypeId);
            courseInfo.course_typeId = this.$scope.courseType == "THEORY" ? 1 : 2;
            courseInfo.total_part = Number(this.$scope.data.total_part);
            courseInfo.part_a_total = Number(this.$scope.data.part_a_total);
            courseInfo.part_b_total = Number(this.$scope.data.part_b_total);
            if ($("#deadline_preparer")) {
                courseInfo.deadline_preparer = $("#deadline_preparer").val();
                courseInfo.deadline_scrutinizer = $("#deadline_scrutinizer").val();
                courseInfo.deadline_head = $("#deadline_head").val();
            }
            complete_json["courseInfo"] = courseInfo;
            complete_json["action"] = action;
            complete_json["actor"] = this.$scope.currentActor;
            complete_json["course_current_status"] = this.$scope.gradeSubmissionStatus;
            return complete_json;
        };
        MarksSubmission.prototype.recheckAll = function (actor) {
            console.log("-----");
            if ($("#approveAllCheckBox"))
                $("#approveAllCheckBox").prop('checked', false);
            var studentMark;
            var gradeList = this.getGradeList(actor);
            for (var ind in gradeList) {
                studentMark = gradeList[ind];
                if ($('#recheckAllCheckBox').prop('checked')) {
                    $("#recheck_" + studentMark.studentId).prop('checked', true);
                    if ($('#approve_' + studentMark.studentId).prop('checked'))
                        $("#approve_" + studentMark.studentId).prop('checked', false);
                }
                else {
                    $("#recheck_" + studentMark.studentId).prop('checked', false);
                }
            }
            this.enableDisableRecheckApproveButton(actor);
        };
        MarksSubmission.prototype.recheckedAll = function (actor) {
            var studentMark;
            var gradeList = this.getGradeList(actor);
            for (var ind in gradeList) {
                studentMark = gradeList[ind];
                if ($('#recheckedAllCheckBox').prop('checked'))
                    $("#rechecked_" + studentMark.studentId).prop('checked', true);
                else
                    $("#rechecked_" + studentMark.studentId).prop('checked', false);
            }
            this.enableDisableRecheckedButton(actor);
        };
        MarksSubmission.prototype.approveAll = function (actor) {
            if ($("#recheckAllCheckBox"))
                $("#recheckAllCheckBox").prop('checked', false);
            var studentMark;
            var gradeList = this.getGradeList(actor);
            for (var ind in gradeList) {
                studentMark = gradeList[ind];
                if ($('#approveAllCheckBox').prop('checked')) {
                    $("#approve_" + studentMark.studentId).prop('checked', true);
                    if ($("#recheckAllCheckBox"))
                        $("#recheck_" + studentMark.studentId).prop('checked', false);
                }
                else {
                    $("#approve_" + studentMark.studentId).prop('checked', false);
                }
            }
            this.enableDisableRecheckApproveButton(actor);
        };
        MarksSubmission.prototype.closePopupModal = function () {
            $("#msg_div").css({
                display: "none"
            });
            $(".table_overlay").fadeOut();
        };
        MarksSubmission.prototype.showPopupModal = function () {
            var topDiv = $("#top_div");
            $(".table_overlay").css({
                background: 'url("images/overlay1.png")',
                opacity: 0.5,
                top: topDiv.position().top - 150,
                width: topDiv.outerWidth() + 20,
                height: 450,
                zIndex: 100
            });
            $(".table_overlay").fadeIn();
            $("#msg_div").css({
                display: "block",
                top: $(".table_overlay").position().top,
                left: $(".table_overlay").position().left + (topDiv.outerWidth() + 20) / 2 - $("#msg_div").width() / 2,
                zIndex: 105
            });
        };
        MarksSubmission.prototype.saveRecheckApproveGrades = function (actor, action) {
            var _this = this;
            var validate = this.validateGradesForSaveRecheckApprove(actor, action);
            if (!validate) {
                this.showPopupModal();
                return;
            }
            var gradeList = this.getGradeList(actor);
            var recheckStudentList = new Array();
            var approveStudentList = new Array();
            var student;
            var candidateGrade;
            for (var ind in gradeList) {
                student = {
                    studentId: ""
                };
                candidateGrade = gradeList[ind];
                student.studentId = candidateGrade.studentId;
                if ($('#recheck_' + student.studentId).prop('checked')) {
                    recheckStudentList.push(student);
                }
                if ($('#approve_' + student.studentId).prop('checked')) {
                    approveStudentList.push(student);
                }
            }
            var url = "academic/gradeSubmission/recheckApprove";
            var complete_json = this.createCompleteJson(action, null, recheckStudentList, approveStudentList);
            if (action == "recheckAccepted") {
                complete_json["cause"] = $("#recheck_explanation").val();
            }
            this.httpClient.put(url, complete_json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved.");
                _this.reloadGradeSheet(_this);
            }).error(function (data) {
            });
        };
        MarksSubmission.prototype.validateGradesForSaveRecheckApprove = function (actor, action) {
            var validate = true;
            var totalGrade = 0;
            var gradeList = this.getGradeList(actor);
            totalGrade = gradeList.length;
            this.getTotalRecheckApproveGrade(actor);
            var msg = "";
            if ((action == "recheck" || action == "recheckAccepted") && this.$scope.totalRecheck == 0) {
                msg = "You should recheck at least one student grade for Recheck Request.";
            }
            else if (action == "recheck" && this.$scope.totalRecheck + this.$scope.totalApprove != totalGrade) {
                msg = "Total Number of Recheck and Scrutiny Grade should be equal to the Total Number of Students.";
            }
            else if (action == "approve" && this.$scope.totalApprove != totalGrade) {
                if (actor == "scrutinizer")
                    msg = "You must scrutiny all grades for sending it to Head.";
                else if (actor == "head")
                    msg = "You must approve all grades for sending it to CoE.";
                else if (actor == "coe")
                    msg = "You must accept all grades for acceptance.";
            }
            else if (action == "approve" && this.$scope.totalRecheck > 0) {
                if (actor == "scrutinizer")
                    msg = "There should not be any recheck grade while you send grades to Head.";
                if (actor == "head")
                    msg = "There should not be any recheck grade while you send grades to CoE.";
                if (actor == "coe")
                    msg = "There should not be any recheck grade while you accept grades.";
            }
            if (msg != "") {
                $("#msg_content").html(msg);
                validate = false;
            }
            return validate;
        };
        MarksSubmission.prototype.getGradeList = function (actor) {
            var gradeList;
            if (actor == "preparer") {
                gradeList = this.$scope.recheckCandidatesGrades;
            }
            else if (actor == "scrutinizer") {
                gradeList = this.$scope.scrutinizeCandidatesGrades;
            }
            else if (actor == "head") {
                gradeList = this.$scope.approveCandidatesGrades;
            }
            else if (actor == "coe") {
                if (this.$scope.acceptCandidatesGrades.length > 0)
                    gradeList = this.$scope.acceptCandidatesGrades;
                else
                    gradeList = this.$scope.acceptedGrades;
            }
            return gradeList;
        };
        MarksSubmission.prototype.onRecheckClick = function (actor, stdMarkObj) {
            if ($("#recheck_" + stdMarkObj.studentId).prop('checked') == true && $('#approve_' + stdMarkObj.studentId).prop('checked') == true)
                $("#approve_" + stdMarkObj.studentId).prop('checked', false);
            this.enableDisableRecheckApproveButton(actor);
        };
        MarksSubmission.prototype.onApproveClick = function (actor, stdMarkObj) {
            if ($("#approve_" + stdMarkObj.studentId).prop('checked') == true && $('#recheck_' + stdMarkObj.studentId).prop('checked') == true)
                $("#recheck_" + stdMarkObj.studentId).prop('checked', false);
            this.enableDisableRecheckApproveButton(actor);
        };
        MarksSubmission.prototype.getTotalRecheckApproveGrade = function (actor) {
            var gradeList = this.getGradeList(actor);
            var totalRecheckGrade = 0;
            var totalApproveGrade = 0;
            var studentMark;
            for (var ind in gradeList) {
                studentMark = gradeList[ind];
                if ($('#recheck_' + studentMark.studentId).prop('checked')) {
                    totalRecheckGrade++;
                }
                if ($('#approve_' + studentMark.studentId).prop('checked')) {
                    totalApproveGrade++;
                }
            }
            this.$scope.totalRecheck = totalRecheckGrade;
            this.$scope.totalApprove = totalApproveGrade;
        };
        MarksSubmission.prototype.getTotalRecheckedGrade = function (actor) {
            var gradeList = this.getGradeList(actor);
            var totalRecheckedGrade = 0;
            var studentMark;
            for (var ind in gradeList) {
                studentMark = gradeList[ind];
                if ($('#rechecked_' + studentMark.studentId).prop('checked')) {
                    totalRecheckedGrade++;
                }
            }
            return totalRecheckedGrade;
        };
        MarksSubmission.prototype.enableDisableRecheckApproveButton = function (actor) {
            this.getTotalRecheckApproveGrade(actor);
            $("#recheckBtn").removeClass("disabled");
            $("#approveBtn").removeClass("disabled");
            if (this.$scope.totalRecheck == 0 && this.$scope.totalApprove == 0) {
                $("#recheckBtn").addClass("disabled");
                $("#approveBtn").addClass("disabled");
            }
            else if (this.$scope.totalRecheck == 0 && this.$scope.totalApprove > 0) {
                $("#recheckBtn").addClass("disabled");
                $("#approveBtn").removeClass("disabled");
            }
            else if (this.$scope.totalRecheck > 0) {
                $("#recheckBtn").removeClass("disabled");
                $("#approveBtn").addClass("disabled");
            }
        };
        MarksSubmission.prototype.enableDisableRecheckedButton = function (actor) {
            $("#recheckedButton").removeClass("disabled");
            $("#recheckedButton").addClass("disabled");
            if (this.getTotalRecheckedGrade(actor) == this.$scope.recheckCandidatesGrades.length) {
                $("#recheckedButton").removeClass("disabled");
            }
        };
        MarksSubmission.prototype.showErrorTooltip = function (field, student_id, message) {
            $("#tooltip_" + field + "_" + student_id).show();
            $("#tooltip_" + field + "_" + student_id).tooltip('destroy');
            setTimeout(function () {
                $("#tooltip_" + field + "_" + student_id).tooltip({ placement: 'top', trigger: 'hover', title: message + "" });
            }, 200);
        };
        MarksSubmission.prototype.destroyErrorTooltip = function (field, student_id) {
            $("#tooltip_" + field + "_" + student_id).tooltip('destroy');
            $("#tooltip_" + field + "_" + student_id).hide();
        };
        MarksSubmission.prototype.initializeModalWindows = function () {
            var _this = this;
            if (this.$scope.currentActor == "preparer" &&
                (this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.NOT_SUBMITTED
                    || this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_SCRUTINIZER
                    || this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_HEAD
                    || this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.REQUESTED_FOR_RECHECK_BY_COE)) {
                this.$scope.gradeTitle = "Non-Submitted Grades";
                this.$scope.modalSettings.submitBody = "Are you sure you want to send grades to the Scrutinizer?";
                this.$scope.modalSettings.submitHandler = "submitModal";
                this.$scope.modalSettings.submitRightButton = function () {
                    _this.saveAndSendToScrutinizer();
                };
            }
            if (this.$scope.currentActor == "scrutinizer" &&
                this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.WAITING_FOR_SCRUTINY) {
                this.$scope.gradeTitle = "Waiting for Scrutinizer's Approval";
                this.$scope.approveAction = "Scrutiny";
                this.$scope.recheckButtonLabel = "Save & Send back to Preparer";
                this.$scope.approveButtonLabel = "Scrutiny & Send to Head";
                this.$scope.candidatesGrades = this.$scope.scrutinizeCandidatesGrades;
                this.$scope.modalSettings.recheckBody = "Are you sure you want to send back the selected grades to preparer for recheck?";
                this.$scope.modalSettings.recheckHandler = "recheckModal";
                this.$scope.modalSettings.approveBody = "Are you sure you want to send grades to the Head for Approval?";
                this.$scope.modalSettings.approveHandler = "approveModal";
                this.$scope.modalSettings.rightButton = function (currentActor, action) {
                    _this.saveRecheckApproveGrades(currentActor, action);
                };
            }
            if (this.$scope.currentActor == "head"
                && this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.WAITING_FOR_HEAD_APPROVAL) {
                this.$scope.gradeTitle = "Waiting for Head's Approval";
                this.$scope.approveAction = "Approve";
                this.$scope.recheckButtonLabel = "Save & Send back to Preparer";
                this.$scope.approveButtonLabel = "Approve & Send to CoE";
                this.$scope.candidatesGrades = this.$scope.approveCandidatesGrades;
                this.$scope.modalSettings.recheckBody = "Are you sure you want to send back the selected grades to preparer for recheck?";
                this.$scope.modalSettings.recheckHandler = "recheckModal";
                this.$scope.modalSettings.approveBody = "Are you sure you want to send grades to the CoE for Acceptance?";
                this.$scope.modalSettings.approveHandler = "approveModal";
                this.$scope.modalSettings.rightButton = function (currentActor, action) {
                    _this.saveRecheckApproveGrades(currentActor, action);
                };
            }
            if (this.$scope.currentActor == "coe") {
                if (this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.WAITING_FOR_COE_APPROVAL) {
                    this.$scope.gradeTitle = "Waiting for CoE's Approval";
                    this.$scope.approveAction = "Accept";
                    this.$scope.recheckButtonLabel = "Save & Send back to Preparer";
                    this.$scope.approveButtonLabel = "Save and Accept";
                    this.$scope.candidatesGrades = this.$scope.acceptCandidatesGrades;
                    var recheckContent = "";
                    recheckContent = "Are you sure you want to send back the selected grades to preparer for recheck?";
                    recheckContent = this.getGradeRecheckConfirmationCommonBody();
                    this.$scope.modalSettings.recheckBody = this.$sce.trustAsHtml(recheckContent);
                    this.$scope.modalSettings.recheckHandler = "recheckModal";
                    this.$scope.modalSettings.approveBody = "Are you sure you want to Accept the grade sheet?";
                    this.$scope.modalSettings.approveHandler = "approveModal";
                    this.$scope.modalSettings.rightButton = function (currentActor, action) {
                        _this.saveRecheckApproveGrades(currentActor, action);
                    };
                }
                else if (this.$scope.gradeSubmissionStatus == this.appConstants.marksSubmissionStatusEnum.ACCEPTED_BY_COE) {
                    var recheckContent = "";
                    recheckContent = "Are you sure you want to send back the selected grades to preparer for recheck?";
                    recheckContent += this.getGradeRecheckConfirmationCommonBody();
                    recheckContent += "<br/><b><u>Why do we need to recheck these accepted grades ?</u></b> <hr/>";
                    recheckContent += "<font color='red'>(Please write down proper explanation)</font><br/><br/>";
                    recheckContent += "<textarea rows='5' class='form-control' id='recheck_explanation'></textarea>";
                    this.$scope.recheckButtonLabel = "Save & Send back to Preparer";
                    this.$scope.modalSettings.recheckBody = this.$sce.trustAsHtml(recheckContent);
                    this.$scope.modalSettings.recheckHandler = "recheckModal";
                    this.$scope.modalSettings.rightButton = function (currentActor, action) {
                        if ($("#recheck_explanation").val() == "")
                            _this.notify.error("Please provide explanation for recheck.");
                        else
                            _this.saveRecheckApproveGrades(currentActor, action);
                    };
                }
            }
        };
        MarksSubmission.prototype.initializeDatePickers = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 1000);
        };
        MarksSubmission.prototype.getGradeRecheckConfirmationCommonBody = function () {
            var recheckContent = "";
            recheckContent += "<div>";
            recheckContent += "<br/><b><u>Marks Submission deadlines</u></b> <hr/>";
            recheckContent += "<form class='form-horizontal'>";
            recheckContent += "<div class='form-body'>";
            recheckContent += "<div class='form-group' style='margin-bottom:5px;'>";
            recheckContent += "<label for='preparerDeadline' class='col-md-4 control-label'>Preparer</label>";
            recheckContent += "<div class='col-md-8'>";
            recheckContent += "<input type='text'  data-date-format='dd-mm-yyyy' placeholder='DD-MM-YYYY' class='datepicker-default form-control' value='" + this.$scope.data.deadline_preparer + "' style='width:60%;text-align: center;' id='deadline_preparer'/>";
            recheckContent += "</div>";
            recheckContent += "</div>";
            recheckContent += "<div class='form-group' style='margin-bottom:5px;'>";
            recheckContent += "<label for='preparerDeadline' class='col-md-4 control-label'>Scrutinizer</label>";
            recheckContent += "<div class='col-md-8'>";
            recheckContent += "<input type='text'  data-date-format='dd-mm-yyyy' placeholder='DD-MM-YYYY' class='datepicker-default form-control' value='" + this.$scope.data.deadline_scrutinizer + "'  style='width:60%;text-align: center;' id='deadline_scrutinizer'/>";
            recheckContent += "</div>";
            recheckContent += "</div>";
            recheckContent += "<div class='form-group'  style='margin-bottom:5px;'>";
            recheckContent += "<label for='preparerDeadline' class='col-md-4 control-label'>Head</label>";
            recheckContent += "<div class='col-md-8'>";
            recheckContent += "<input type='text'  data-date-format='dd-mm-yyyy' placeholder='DD-MM-YYYY' class='datepicker-default form-control' value='" + this.$scope.data.deadline_head + "' style='width:60%;text-align: center;' id='deadline_head'/>";
            recheckContent += "</div>";
            recheckContent += "</div>";
            recheckContent += "</div>";
            recheckContent += "</form>";
            recheckContent += "</div>";
            return recheckContent;
        };
        //MarksSubmissionLog
        MarksSubmission.prototype.fetchMarksSubmissionLog = function () {
            var _this = this;
            this.httpClient.get("academic/gradeSubmission/semester/" + this.$scope.current_semesterId +
                "/courseid/" + this.$scope.current_courseId +
                "/examType/" + this.$scope.current_examTypeId, this.appConstants.mimeTypeJson, function (data, etag) {
                _this.$scope.marksSubmissionStatusLogs = data.entries;
            });
        };
        //MarksLog
        MarksSubmission.prototype.fetchMarksLog = function (studentId) {
            var _this = this;
            if (studentId == "")
                this.notify.info("Please provide Student Id");
            this.httpClient.get("academic/gradeSubmission/semester/" + this.$scope.current_semesterId +
                "/courseid/" + this.$scope.current_courseId +
                "/examType/" + this.$scope.current_examTypeId +
                "/studentid/" + studentId, this.appConstants.mimeTypeJson, function (data, etag) {
                if (data.entries.length == 0)
                    _this.notify.info("No log found");
                else
                    _this.$scope.marksLogs = data.entries;
            });
        };
        // Start of Selection Panel Components Initialization
        MarksSubmission.prototype.loadSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(this.$scope.inputParams.program_type).then(function (semesters) {
                if (semesters.length == 0) {
                    semesters.splice(0, 0, _this.appConstants.initSemester[0]);
                }
                _this.$scope.data.semesters = semesters;
                _this.$scope.inputParams.semester_id = semesters[0].id;
            });
            if (this.$scope.inputParams.program_type == this.appConstants.programTypeEnum.UG) {
                if (this.$scope.userRole == "T" || this.$scope.userRole == "H") {
                    this.commonService.fetchCurrentUser().then(function (departmentJson) {
                        _this.$scope.data.depts = [departmentJson];
                        _this.$scope.inputParams.dept_id = departmentJson.id;
                        _this.loadPrograms();
                    });
                    this.$scope.inputParams.status = this.appConstants.marksSubmissionStatusEnum.WAITING_FOR_HEAD_APPROVAL;
                }
                else if (this.$scope.userRole == "C" || this.$scope.userRole == "V") {
                    if (this.$scope.userRole == "C")
                        this.$scope.inputParams.status = this.appConstants.marksSubmissionStatusEnum.WAITING_FOR_COE_APPROVAL;
                    else if (this.$scope.userRole == "V")
                        this.$scope.inputParams.status = this.appConstants.marksSubmissionStatusEnum.ACCEPTED_BY_COE;
                    this.$scope.data.depts = this.$scope.data.ugDepts;
                }
            }
            else if (this.$scope.inputParams.program_type == this.appConstants.programTypeEnum.pgDepts)
                this.$scope.data.depts = this.$scope.data.pgDepts;
        };
        MarksSubmission.prototype.loadDepartments = function () {
            var _this = this;
            this.semesterService.fetchSemesters(this.$scope.inputParams.program_type).then(function (semesters) {
                _this.$scope.data.semesters = semesters;
            });
        };
        MarksSubmission.prototype.loadPrograms = function () {
            var programArr;
            var controllerScope = this.$scope;
            if (this.$scope.inputParams.program_type == this.appConstants.programTypeEnum.UG)
                programArr = this.$scope.data.ugPrograms;
            else if (this.$scope.inputParams.program_type == this.appConstants.programTypeEnum.PG)
                programArr = this.$scope.data.pgPrograms;
            var programJson = $.map(programArr, function (el) {
                return el;
            });
            var resultPrograms = $.grep(programJson, function (e) {
                return e.deptId == controllerScope.inputParams.dept_id;
            });
            if (resultPrograms[0] == undefined) {
                this.$scope.data.programs = null;
                this.$scope.inputParams.program_id = null;
            }
            else {
                this.$scope.data.programs = resultPrograms[0].programs;
                this.$scope.inputParams.program_id = resultPrograms[0].programs[0].id;
            }
        };
        //End of Selection Panel Components Initialization
        //Download GradeSheet in Excel Format
        MarksSubmission.prototype.generateXls = function () {
            var _this = this;
            var contentType = ums.UmsUtil.getFileContentType("xls");
            this.httpClient.get("gradeReport/xls/semester/" + this.$scope.current_semesterId + "/courseid/" + this.$scope.current_courseId + "/examtype/" + this.$scope.current_examTypeId + "/coursetype/" + (this.$scope.courseType == "THEORY" ? "1" : "2") + "/role/" + this.$scope.currentActor + "/totalpart/" + this.$scope.data.total_part, contentType, function (data, etag) {
                var file = new Blob([data], { type: contentType });
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = function (e) {
                    ums.UmsUtil.saveAsFile(reader.result, _this.$scope.data.course_no);
                };
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        //Styling for different type registrations
        MarksSubmission.prototype.calculateStyle = function (regType) {
            var style = { backgroundColor: '' };
            if (regType == this.appConstants.courseRegType.CLEARANCE)
                style.backgroundColor = this.appConstants.regColorCode.CLEARANCE;
            else if (regType == this.appConstants.courseRegType.CARRY)
                style.backgroundColor = this.appConstants.regColorCode.CARRY;
            else if (regType == this.appConstants.courseRegType.SPECIAL_CARRY)
                style.backgroundColor = this.appConstants.regColorCode.SPECIAL_CARRY;
            else if (regType == this.appConstants.courseRegType.IMPROVEMENT)
                style.backgroundColor = this.appConstants.regColorCode.IMPROVEMENT;
            return style;
        };
        //Styling for expelled/reported students
        MarksSubmission.prototype.calculateRepStyle = function (marks) {
            var style = { backgroundColor: '' };
            if (marks == 'Rep')
                style.backgroundColor = '#F5B7B1';
            return style;
        };
        //Disable classTest and Class Attendance entry field for CCI Exam
        MarksSubmission.prototype.checkDisable = function (regType) {
            if (regType != this.appConstants.courseRegType.REGULAR)
                return true;
            else
                return false;
        };
        MarksSubmission.prototype.colorRow = function (colorCode, studentId) {
            var tdArray = this.getTdArray(studentId);
            for (var i = 0; i < tdArray.length; i++) {
                if ($("#reg_type_" + studentId).val() == 1 || (i != 0 && $("#reg_type_" + studentId).val() != 1))
                    tdArray[i].style.backgroundColor = colorCode;
            }
        };
        MarksSubmission.prototype.getTdArray = function (studentId) {
            var parentRow = document.getElementById("row_" + studentId);
            if (parentRow) {
                var tdArray = parentRow.getElementsByTagName('td');
                return tdArray;
            }
            return null;
        };
        MarksSubmission.prototype.resetRowColor = function (tdArray, studentId) {
            if (tdArray == null)
                return;
            for (var i = 0; i < tdArray.length; i++) {
                if ($('#' + tdArray[i].id).is("[style]") && ($("#reg_type_" + studentId).val() == 1 || (i != 0 && $("#reg_type_" + studentId).val() != 1))) {
                    $('#' + tdArray[i].id).attr('style', function (i, style) {
                        return style.replace(/background-color[^;]+;?/g, '');
                    });
                }
            }
        };
        MarksSubmission.prototype.searchStudent = function () {
            var searchValue = this.$scope.data.searchBox;
            var tdArray = this.getTdArray(this.$scope.data.searchStudentId);
            this.resetRowColor(tdArray, this.$scope.data.searchStudentId);
            if (document.getElementById("row_" + searchValue)) {
                this.$scope.$broadcast("rowSelected", searchValue);
                this.colorRow(ums.Utils.SEARCH_ROW, searchValue);
                this.$scope.data.searchStudentId = searchValue;
            }
        };
        MarksSubmission.prototype.clearSearch = function () {
            this.$scope.data.searchBox = "";
            var tdArray = this.getTdArray(this.$scope.data.searchStudentId);
            this.resetRowColor(tdArray, this.$scope.data.searchStudentId);
        };
        MarksSubmission.$inject = ['$scope', 'appConstants', 'HttpClient', '$stateParams', '$window', '$sce', '$q', 'notify', 'commonService', 'semesterService'];
        MarksSubmission.AS_DEPT_ID = '15';
        return MarksSubmission;
    }());
    ums.MarksSubmission = MarksSubmission;
    ums.UMS.controller('MarksSubmission', MarksSubmission);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var MarksSubmissionStat = (function () {
        function MarksSubmissionStat($scope, $stateParams, appConstants, httpClient, $q) {
            this.$scope = $scope;
            this.$stateParams = $stateParams;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            $scope.statParamModel = new ums.ProgramSelectorModel(this.appConstants, this.httpClient, true);
            $scope.statParamModel.setDepartment(undefined, ums.FieldViewTypes.hidden);
            $scope.statParamModel.setProgram(undefined, ums.FieldViewTypes.hidden);
            $scope.statParamModel.status = "C";
            $scope.statParamModel.examType = "1";
            $scope.statParamModel.setProgramType("11", true);
            $scope.showStatTable = false;
            $scope.statLoading = false;
            // $scope.statParamModel.enableSemesterOption(true);
            this.$scope.getStatData = this.getStatData.bind(this);
        }
        MarksSubmissionStat.prototype.getStatData = function () {
            var _this = this;
            if (this.$scope.statParamModel.status == "S")
                this.$scope.status = "Submitted";
            else if (this.$scope.statParamModel.status == "H")
                this.$scope.status = "Head Approved";
            else if (this.$scope.statParamModel.status == "C")
                this.$scope.status = "CoE Accepted";
            this.$scope.showStatTable = false;
            this.$scope.statLoading = true;
            this.fetchStatData().then(function (startData) {
                _this.$scope.statRecords = startData;
                _this.$scope.statLoading = false;
                _this.$scope.showStatTable = true;
                setTimeout(function () {
                    $(".tablesorter").trigger("update");
                }, 600);
            });
        };
        MarksSubmissionStat.prototype.fetchStatData = function () {
            var url = "academic/gradeSubmission/submissionstat/programtype/" + this.$scope.statParamModel.programTypeId + "/semester/" + this.$scope.statParamModel.semesterId + "/dept/01/examtype/" +
                this.$scope.statParamModel.examType + "/status/" + this.$scope.statParamModel.status;
            var defer = this.$q.defer();
            this.httpClient.get(url, this.appConstants.mimeTypeJson, function (json, etag) {
                var statData = json.entries;
                defer.resolve(statData);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        MarksSubmissionStat.$inject = ['$scope', '$stateParams', 'appConstants', 'HttpClient', '$q'];
        return MarksSubmissionStat;
    }());
    ums.MarksSubmissionStat = MarksSubmissionStat;
    ums.UMS.controller("MarksSubmissionStat", MarksSubmissionStat);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var GradeSubmissionDeadLine = (function () {
        function GradeSubmissionDeadLine(appConstants, httpClient, $scope, $q, notify, $sce, $window, semesterService, examRoutineService, examGradeService, userService, additionalRolePermissionService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.examRoutineService = examRoutineService;
            this.examGradeService = examGradeService;
            this.userService = userService;
            this.additionalRolePermissionService = additionalRolePermissionService;
            $scope.showLoader = false;
            $scope.showTable = false;
            $scope.showButton = false;
            $scope.editable = false;
            $scope.loggedUser = {};
            $scope.courseNo = "";
            $scope.courseType = "1";
            $scope.getSemesters = this.getSemesters.bind(this);
            $scope.getExamDates = this.getExamDates.bind(this);
            $scope.fetchDeadlineInformation = this.fetchDeadlineInformation.bind(this);
            $scope.dateChanged = this.dateChanged.bind(this);
            $scope.cancel = this.cancel.bind(this);
            $scope.convertToJson = this.convertToJson.bind(this);
            $scope.saveChanges = this.saveChanges.bind(this);
            $scope.checkCourseNo = this.checkCourseNo.bind(this);
            $scope.dateTouched = this.dateTouched.bind(this);
            ums.Utils.setValidationOptions("form-horizontal");
            this.getLoggedUserInfo();
            //todo after assigning the role of assistant directer, the following method is needed to be used.
            //this.getLoggedUserAdditionalPermissions();
        }
        GradeSubmissionDeadLine.prototype.getLoggedUserInfo = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (user) {
                _this.$scope.loggedUser = user;
            });
        };
        GradeSubmissionDeadLine.prototype.getLoggedUserAdditionalPermissions = function () {
            this.additionalRolePermissionService.fetchLoggedUserAdditionalRolePermissions().then(function (permissions) {
                console.log("permissions");
                console.log(permissions);
            });
        };
        GradeSubmissionDeadLine.prototype.getUserInfo = function () {
        };
        GradeSubmissionDeadLine.prototype.checkCourseNo = function (courseNo) {
            this.$scope.courseNo = courseNo;
        };
        GradeSubmissionDeadLine.prototype.getSemesters = function () {
            var _this = this;
            this.$scope.semesterList = [];
            var defer = this.$q.defer();
            this.semesterService.fetchSemesters(ums.Utils.UG).then(function (semesterArr) {
                _this.$scope.semesterList = semesterArr;
                _this.$scope.semesterId = semesterArr[0].id;
                _this.$scope.examType = ums.Utils.EXAM_TYPE_REGULAR;
                _this.getExamDates();
                defer.resolve(semesterArr);
            });
            return defer.promise;
        };
        GradeSubmissionDeadLine.prototype.saveChanges = function () {
            var _this = this;
            this.convertToJson().then(function (json) {
                _this.$scope.examGradeStatisticsArr.forEach(function (e) { return e.backgroundColor = ""; });
                _this.$scope.examGradeStatisticsArrTemp = [];
                _this.$scope.examGradeStatisticsArrTemp = angular.copy(_this.$scope.examGradeStatisticsArr);
                console.log(json);
                _this.examGradeService.updateGradeSubmissionDeadLine(json).then(function (message) {
                    _this.notify.success(message);
                    _this.$scope.showButton = false;
                });
            });
        };
        GradeSubmissionDeadLine.prototype.dateChanged = function (examGrade) {
            console.log("In date changed");
            if (examGrade.lastSubmissionDatePrep != null && examGrade.lastSubmissionDateScr != null && examGrade.lastSubmissionDateHead != null) {
                this.$scope.showButton = true;
                examGrade.changed = true;
                var date = ums.Utils.getDateObject(examGrade.lastSubmissionDateHead);
                date.setDate(date.getDate() + 2);
                examGrade.lastSubmissionDateCoe = date === undefined ? "" : moment(date).format("DD-MM-YYYY");
            }
        };
        GradeSubmissionDeadLine.prototype.dateTouched = function (examGrade) {
            if (this.$scope.coloredExamGradeId == null) {
                this.$scope.coloredExamGradeId = examGrade.id;
            }
            else {
                var tmpExamGrade = this.$scope.examGradeStatisticsMap[this.$scope.coloredExamGradeId];
                tmpExamGrade.backgroundColor = "";
                this.$scope.coloredExamGradeId = examGrade.id;
            }
            examGrade.backgroundColor = "yellow";
        };
        GradeSubmissionDeadLine.prototype.cancel = function () {
            this.$scope.examGradeStatisticsArr = [];
            this.$scope.examGradeStatisticsArr = angular.copy(this.$scope.examGradeStatisticsArrTemp);
            this.$scope.showButton = false;
            this.initializeDatePickers();
        };
        GradeSubmissionDeadLine.prototype.initializeDatePickers = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 200);
        };
        GradeSubmissionDeadLine.prototype.getExamDates = function () {
            var _this = this;
            if (+this.$scope.courseType == ums.Utils.COURSE_TYPE_THEORY) {
                var semester = this.$scope.semesterList[ums.Utils.findIndex(this.$scope.semesterList, this.$scope.semesterId + "")];
                this.$scope.editable = (semester.status == ums.Utils.SEMESTER_STATUS_ACTIVE) && this.$scope.loggedUser.roleId != GradeSubmissionDeadLine.SADMIN ? false : true;
                var examType = +this.$scope.examType;
                this.$scope.examDate = null;
                console.log(examType);
                console.log(this.$scope.semesterId);
                if (this.$scope.semesterId != null && this.$scope.examType != "") {
                    this.examRoutineService.getExamRoutineDates(this.$scope.semesterId, examType).then(function (examDateArr) {
                        _this.$scope.examRoutineArr = {};
                        console.log(examDateArr);
                        _this.$scope.examRoutineArr = examDateArr;
                    });
                }
            }
            else {
                this.$scope.examDate = "";
            }
        };
        GradeSubmissionDeadLine.prototype.fetchDeadlineInformation = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.$scope.showButton = false;
            this.$scope.examGradeStatisticsArr = [];
            this.$scope.examGradeStatisticsArrTemp = [];
            var examType = +this.$scope.examType;
            console.log("Exam date");
            console.log(this.$scope.examDate);
            this.$scope.showLoader = true;
            this.examGradeService.getGradeSubmissionDeadLine(this.$scope.semesterId, examType, this.$scope.examDate, this.$scope.courseType)
                .then(function (outputArr) {
                _this.$scope.examGradeStatisticsMap = {};
                if (outputArr.length == 0) {
                    _this.$scope.showLoader = false;
                    _this.notify.error("No relevant data found");
                    _this.$scope.showTable = false;
                }
                else {
                    for (var i = 0; i < outputArr.length; i++) {
                        outputArr[i].changed = false;
                        outputArr[i].backgroundColor = "";
                        _this.$scope.examGradeStatisticsMap[outputArr[i].id] = outputArr[i];
                    }
                    _this.$scope.examGradeStatisticsArr = outputArr;
                    _this.$scope.examGradeStatisticsArrTemp = angular.copy(outputArr);
                    _this.$scope.showTable = true;
                    _this.$scope.showLoader = false;
                    console.log(outputArr);
                    _this.initializeDatePickers();
                }
            });
        };
        GradeSubmissionDeadLine.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            for (var i = 0; i < this.$scope.examGradeStatisticsArr.length; i++) {
                if (this.$scope.examGradeStatisticsArr[i].changed == true) {
                    this.$scope.examGradeStatisticsArr[i].changed = false;
                    var item = {};
                    item['id'] = this.$scope.examGradeStatisticsArr[i].id;
                    item['semesterId'] = this.$scope.semesterId;
                    item['courseId'] = this.$scope.examGradeStatisticsArr[i].courseId;
                    item['examType'] = +this.$scope.examType;
                    item['lastSubmissionDatePrep'] = this.$scope.examGradeStatisticsArr[i].lastSubmissionDatePrep;
                    item['lastSubmissionDateScr'] = this.$scope.examGradeStatisticsArr[i].lastSubmissionDateScr;
                    item['lastSubmissionDateHead'] = this.$scope.examGradeStatisticsArr[i].lastSubmissionDateHead;
                    item['lastSubmissionDateCoe'] = this.$scope.examGradeStatisticsArr[i].lastSubmissionDateCoe;
                    jsonObject.push(item);
                }
            }
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        GradeSubmissionDeadLine.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'semesterService',
            'examRoutineService', 'examGradeService', 'userService', 'additionalRolePermissionsService'];
        GradeSubmissionDeadLine.SADMIN = 999;
        return GradeSubmissionDeadLine;
    }());
    ums.UMS.controller('GradeSubmissionDeadLine', GradeSubmissionDeadLine);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ResultProcessing = (function () {
        function ResultProcessing($scope, $stateParams, appConstants, httpClient, $modal, notify) {
            this.$scope = $scope;
            this.$stateParams = $stateParams;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$modal = $modal;
            this.notify = notify;
            this.showGif = true;
            this.showAllDept = false;
            this.resultProcessingSearchParamModel
                = new ums.ProgramSelectorModel(this.appConstants, this.httpClient, true, true, true);
            this.resultProcessingSearchParamModel.setProgramType(this.appConstants.programTypeEnum.UG, ums.FieldViewTypes.selected);
            this.resultProcessingSearchParamModel.setDepartment(this.appConstants.deptAll.id, ums.FieldViewTypes.selected);
            this.resultProcessingSearchParamModel.setProgram(this.appConstants.programAll.id, ums.FieldViewTypes.selected);
        }
        ResultProcessing.prototype.fetchStatusInfo = function () {
            var semesterName = $("#semester_id option:selected").text();
            $("#leftDiv").hide(100);
            $("#arrowDiv").show(50);
            $("#rp-semesterId").html(semesterName);
            this.semesterName = semesterName.replace(/(\r\n|\n|\r)/gm, "");
            this.semesterName = this.semesterName.replace(",", "");
            this.semesterName = this.semesterName.trim();
            this.showGif = false;
            this.showAllDept = true;
            if (this.resultProcessingSearchParamModel.programId === this.appConstants.programAll.id) {
                this.getStatus(this.getAllStatusUri(parseInt(this.resultProcessingSearchParamModel.programTypeId), parseInt(this.resultProcessingSearchParamModel.semesterId)));
            }
            else {
                this.getStatus(this.getProgramWiseStatusUri(parseInt(this.resultProcessingSearchParamModel.programId), parseInt(this.resultProcessingSearchParamModel.semesterId)));
            }
            this.semesterId = this.resultProcessingSearchParamModel.semesterId;
        };
        ResultProcessing.prototype.showYearSemesterWise = function (programId) {
            $("#" + programId + "_view1").hide('slide', { direction: 'right', easing: 'easeOutBounce' }, 400);
            if ($("#" + programId + "_download")) {
                $("#" + programId + "_download").hide('slide', {
                    direction: 'right',
                    easing: 'easeOutBounce'
                }, 200);
            }
            if ($("#" + programId + "_publish")) {
                $("#" + programId + "_publish").hide('slide', {
                    direction: 'right',
                    easing: 'easeOutBounce'
                }, 200);
            }
            setTimeout(function () {
                $("#" + programId + "_view2").fadeIn(200);
            }, 400);
        };
        ResultProcessing.prototype.showDefault = function (programId) {
            $("#" + programId + "_view2").hide('slide', { direction: 'right', easing: 'easeOutBounce' }, 200);
            setTimeout(function () {
                $("#" + programId + "_view1").fadeIn(200);
                if ($("#" + programId + "_download")) {
                    $("#" + programId + "_download").fadeIn(100);
                }
                $("#" + programId).fadeIn(100);
                if ($("#" + programId + "_publish")) {
                    $("#" + programId + "_publish").fadeIn(100);
                }
            }, 200);
        };
        ResultProcessing.prototype.getStatus = function (uri) {
            var _this = this;
            this.httpClient.get(uri, ums.HttpClient.MIME_TYPE_JSON, function (resposne) {
                _this.groupMarksSubmissionStatus(resposne.entries);
            });
        };
        ResultProcessing.prototype.getMeritListStatus = function (uri) {
            var _this = this;
            this.httpClient.get(uri, ums.HttpClient.MIME_TYPE_JSON, function (resposne) {
                _this.groupMeritListStatus(resposne.entries);
            });
        };
        ResultProcessing.prototype.groupMeritListStatus = function (statuses) {
            console.log("____________Merit List Program & Semester Wise_______________");
            console.log(statuses);
            for (var i = 0; i < statuses.length; i++) {
                var yearSemester = statuses[i].year + "-" + statuses[i].semester;
                this.statusMap[statuses[i].programId].yearSemester[yearSemester].meritListEntries.push(statuses[i]);
                if (this.statusMap[statuses[i].programId].yearSemester[yearSemester].meritListEntries.length != 0) {
                    this.statusMap[statuses[i].programId].yearSemester[yearSemester].meritListStatus = true;
                }
            }
        };
        ResultProcessing.prototype.groupMarksSubmissionStatus = function (statuses) {
            this.statusMap = {};
            for (var i = 0; i < statuses.length; i++) {
                if (!this.statusMap[statuses[i].programId]) {
                    this.statusMap[statuses[i].programId] = {};
                }
                var yearSemester = statuses[i].year + "-" + statuses[i].academicSemester;
                if (!this.statusMap[statuses[i].programId].yearSemester) {
                    this.statusMap[statuses[i].programId].yearSemester = {};
                    this.statusMap[statuses[i].programId].taskStatus = {};
                }
                if (!this.statusMap[statuses[i].programId].yearSemester[yearSemester]) {
                    var aggregatedStatus = {
                        entries: [],
                        meritListEntries: [],
                        status: this.appConstants.MARKS_SUBMISSION_STATUS.ACCEPTED_BY_COE,
                        meritListStatus: false,
                        year: statuses[i].year,
                        academicSemester: statuses[i].academicSemester
                    };
                    this.statusMap[statuses[i].programId].yearSemester[yearSemester] = aggregatedStatus;
                    this.statusMap[statuses[i].programId].departmentName = statuses[i].departmentName;
                    this.statusMap[statuses[i].programId].programName = statuses[i].programName;
                }
                this.statusMap[statuses[i].programId].yearSemester[yearSemester].entries.push(statuses[i]);
                if (statuses[i].statusId != this.appConstants.MARKS_SUBMISSION_STATUS.ACCEPTED_BY_COE) {
                    this.statusMap[statuses[i].programId].yearSemester[yearSemester].status = statuses[i].statusId;
                }
            }
            if (Object.keys(this.statusMap).length > 2) {
                this.numberOfRows = 3;
                this.row1start = 0;
                this.row1end = 2;
                this.row2start = 3;
                this.row2end = 5;
                this.row3start = 6;
                this.row3end = 7;
            }
            else {
                this.numberOfRows = 1;
                this.row1start = 0;
                this.row1end = Object.keys(this.statusMap).length - 1;
            }
            this.$scope.updateTime = Date.now();
            this.getMeritListStatus(this.getProgramWiseStatusUriForMeritList(parseInt(this.resultProcessingSearchParamModel.programId), parseInt(this.resultProcessingSearchParamModel.semesterId)));
        };
        ResultProcessing.prototype.isUnprocessed = function (programId) {
            return this.statusMap[programId].resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.UNPROCESSED.id;
        };
        ResultProcessing.prototype.isReadyForProcess = function (programId) {
            return this.statusMap[programId].resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.READY_TO_BE_PROCESSED.id;
        };
        ResultProcessing.prototype.isResultProcessed = function (programId) {
            return this.statusMap[programId].resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.PARTIALLY_PROCESSED.id
                || this.statusMap[programId].resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.PROCESSED.id
                || this.statusMap[programId].resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.PROCESSED_ON.id
                || this.statusMap[programId].resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.id
                || this.statusMap[programId].resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.PARTIALLY_PUBLISHED.id;
        };
        ResultProcessing.prototype.isYearSemesterResultPublished = function (rStatus) {
            if (rStatus != this.appConstants.RESULT_PROCESS_STATUS.PARTIALLY_PUBLISHED.id
                && rStatus != this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.id) {
                return false;
            }
            //console.log(" published: true");
            return true;
        };
        ResultProcessing.prototype.showCourseList = function (marksSubmissionStatusList, departmentName, yearSemester) {
            this.$modal.open({
                templateUrl: 'views/result/modal-content.html',
                controller: ums.CourseStatusList,
                resolve: {
                    marksSubmissionStatusList: function () {
                        return marksSubmissionStatusList;
                    },
                    departmentName: function () {
                        return departmentName;
                    },
                    yearSemester: function () {
                        return yearSemester;
                    }
                }
            });
        };
        ResultProcessing.prototype.tabulationDownloadConfirmation = function (programId, semesterId, year, semester) {
            this.tabulationParam = {
                programId: -1,
                semesterId: -1,
                year: -1,
                semester: -1,
                comments: "",
                copyToEmail: false
            };
            this.tabulationParam.programId = programId;
            this.tabulationParam.semesterId = semesterId;
            this.tabulationParam.year = year;
            this.tabulationParam.semester = semester;
            $('#modal-tabulationComment').modal('show');
            setTimeout(function () {
                $("#tabulationComments").focus();
            }, 1000);
        };
        ResultProcessing.prototype.promotionListDownloadConfirmation = function (programId, semesterId, year, semester) {
            this.promotionListParam = {
                programId: -1,
                semesterId: -1,
                year: -1,
                semester: -1,
                orderBy: "",
                comments: "",
                copyToEmail: false
            };
            this.promotionListParam.programId = programId;
            this.promotionListParam.semesterId = semesterId;
            this.promotionListParam.year = year;
            this.promotionListParam.semester = semester;
            $('#modal-promotionListComment').modal('show');
            setTimeout(function () {
                $("#promotionListComments").focus();
            }, 1000);
        };
        ResultProcessing.prototype.meritListDownloadConfirmation = function (programId, semesterId, year, semester) {
            this.meritListParam = {
                programId: -1,
                semesterId: -1,
                year: -1,
                semester: -1,
                comments: "",
                copyToEmail: false
            };
            this.meritListParam.programId = programId;
            this.meritListParam.semesterId = semesterId;
            this.meritListParam.year = year;
            this.meritListParam.semester = semester;
            $('#modal-meritListComment').modal('show');
            setTimeout(function () {
                $("#meritListComments").focus();
            }, 1000);
        };
        ResultProcessing.prototype.downloadPromotionList = function () {
            var _this = this;
            var validate = this.validatePromotionListInputs();
            if (!validate) {
                this.notify.info("Provide all the information.");
                return;
            }
            ums.Utils.disableButton("promotionListSubmitBtn");
            var programName = (this.appConstants.ugProgramMap[this.promotionListParam.programId])[0];
            var fileName = "PromotionList-" + programName + "_" + this.semesterName + "_Y-" + this.promotionListParam.year + "_S-" + this.promotionListParam.semester;
            var notify = "Year : " + this.promotionListParam.year + " Semester : " + this.promotionListParam.semester;
            this.httpClient.post("promotionList/pdf/year-semester-wise", this.promotionListParam, ums.HttpClient.MIME_TYPE_JSON, fileName, 'arraybuffer')
                .success(function (data) {
                ums.Utils.enableButton("promotionListSubmitBtn");
                ums.UmsUtil.writeFileContent(data, ums.UmsUtil.getFileContentType("pdf"), fileName);
                _this.notify.success("PromotionList downloaded -" + notify);
                $('#modal-promotionListComment').modal('hide');
                // this.showLoader = false;
            })
                .error(function (data) {
                // this.showLoader = false;
                ums.Utils.enableButton("promotionListSubmitBtn");
                _this.notify.error("Failed to download PromotionList -" + notify);
                $('#modal-resultProcessComment').modal('hide');
                _this.notify.error("Error in downloading report, please contact AUST ICT");
                console.error(data);
            });
        };
        ResultProcessing.prototype.downloadTabulation = function () {
            var _this = this;
            var validate = this.validateCommonInputs("tabulationComments", this.tabulationParam);
            if (!validate) {
                this.notify.info("Provide comments.");
                return;
            }
            ums.Utils.disableButton("tabulationSubmitBtn");
            var programName = (this.appConstants.ugProgramMap[this.tabulationParam.programId])[0];
            var fileName = "Tabulation-" + programName + "_" + this.semesterName + "_Y-" + this.tabulationParam.year + "_S-" + this.tabulationParam.semester;
            var notify = "Year : " + this.tabulationParam.year + " Semester : " + this.tabulationParam.semester;
            this.httpClient.post("academic/tabulation/year-semester-wise", this.tabulationParam, ums.HttpClient.MIME_TYPE_JSON, fileName, 'arraybuffer')
                .success(function (data) {
                ums.Utils.enableButton("tabulationSubmitBtn");
                ums.UmsUtil.writeFileContent(data, ums.UmsUtil.getFileContentType("pdf"), fileName);
                _this.notify.success("Tabulation downloaded -" + notify);
                $('#modal-tabulationComment').modal('hide');
            })
                .error(function (data) {
                // this.showLoader = false;
                ums.Utils.enableButton("tabulationSubmitBtn");
                _this.notify.error("Tabulation downloaded failed -" + notify);
                $('#modal-tabulationComment').modal('hide');
                _this.notify.error("Error in downloading report, please contact AUST ICT");
                console.error(data);
            });
        };
        ResultProcessing.prototype.downloadMeritList = function () {
            var _this = this;
            var validate = this.validateMeritListInputs();
            if (!validate) {
                this.notify.info("Provide all the information.");
                return;
            }
            ums.Utils.disableButton("meritListSubmitBtn");
            var programName = (this.appConstants.ugProgramMap[this.meritListParam.programId])[0];
            var fileName = "MeritList-" + programName + "_" + this.semesterName + "_Y-" + this.meritListParam.year + "_S-" + this.meritListParam.semester;
            var notify = "Year : " + this.meritListParam.year + " Semester : " + this.meritListParam.semester;
            this.httpClient.post("meritList/pdf/year-semester-wise", this.meritListParam, ums.HttpClient.MIME_TYPE_JSON, fileName, 'arraybuffer')
                .success(function (data) {
                ums.Utils.enableButton("meritListSubmitBtn");
                ums.UmsUtil.writeFileContent(data, ums.UmsUtil.getFileContentType("pdf"), fileName);
                _this.notify.success("MeritList downloaded -" + notify);
                $('#modal-meritListComment').modal('hide');
                // this.showLoader = false;
            })
                .error(function (data) {
                // this.showLoader = false;
                ums.Utils.enableButton("meritListSubmitBtn");
                _this.notify.error("Failed to download meritList -" + notify);
                $('#modal-meritListComment').modal('hide');
                _this.notify.error("First you need to process merit list result to download report fot that Y-S .");
                console.error(data);
            });
        };
        // private processResult(programId: string, year: string, semester: string): void {
        //
        //   var validate = this.validateCommonInputs("resultProcessComments", this.resultProcessParam);
        //   if (!validate) {
        //     this.notify.info("Provide comments.");
        //     return;
        //   }
        //   Utils.disableButton("resultProcessSubmitBtn");
        //
        //
        //   var that=this;
        //   this.httpClient.get(`academic/tabulation/report/program/${programId}/semester/${this.resultProcessingSearchParamModel.semesterId}/year/${year}/academic-semester/${semester}`, 'application/pdf',
        //       (data: any, etag: string) => {
        //         alert("BBC");
        //         alert(programId);
        //         var programName = (that.appConstants.ugProgramMap[programId])[0];
        //         alert(programName);
        //         let fileName =`Tabulation-${programName}_${that.resultProcessingSearchParamModel.semesterId}_Y-${year}_S-${semester}`;
        //         alert(fileName)
        //         UmsUtil.writeFileContent(data, UmsUtil.getFileContentType("pdf"), fileName);
        //       },
        //       (response: ng.IHttpPromiseCallbackArg<any>) => {
        //         console.error(response);
        //       }, 'arraybuffer');
        // }
        ResultProcessing.prototype.validateCommonInputs = function (commentField, inputObj) {
            var validate = true;
            if (inputObj.comments == "") {
                ums.Utils.changeColor(commentField, "S"); //Set red color
                validate = false;
            }
            else {
                ums.Utils.changeColor(commentField, "R"); //Reset to default color
            }
            return validate;
        };
        ResultProcessing.prototype.validatePromotionListInputs = function () {
            var validate = true;
            console.log(this.promotionListParam);
            if (this.promotionListParam.orderBy == "") {
                ums.Utils.changeColor("promotionListOrderBy", "S"); //Set red color
                validate = false;
            }
            else {
                ums.Utils.changeColor("promotionListOrderBy", "R"); //Reset to default color
            }
            if (this.promotionListParam.comments == "") {
                ums.Utils.changeColor("promotionListComments", "S"); //Set red color
                validate = false;
            }
            else {
                ums.Utils.changeColor("promotionListComments", "R"); //Reset to default color
            }
            return validate;
        };
        ResultProcessing.prototype.validateMeritListInputs = function () {
            var validate = true;
            console.log(this.meritListParam);
            if (this.meritListParam.comments == "") {
                ums.Utils.changeColor("meritListComments", "S"); //Set red color
                validate = false;
            }
            else {
                ums.Utils.changeColor("meritListComments", "R"); //Reset to default color
            }
            return validate;
        };
        ResultProcessing.prototype.sortedKeys = function (obj) {
            return Object.keys(obj).sort();
        };
        ResultProcessing.prototype.isReadyForResultProcess = function (status) {
            return parseInt(status) === this.appConstants.MARKS_SUBMISSION_STATUS.ACCEPTED_BY_COE;
        };
        ResultProcessing.prototype.getAllStatusUri = function (pProgramType, semesterId) {
            return "academic/marksSubmissionStatus/programType/" + pProgramType + "/semester/" + semesterId;
        };
        ResultProcessing.prototype.getProgramWiseStatusUri = function (pProgramId, semesterId) {
            return "academic/marksSubmissionStatus/program/" + pProgramId + "/semester/" + semesterId;
        };
        ResultProcessing.prototype.getProgramWiseStatusUriForMeritList = function (pProgramId, semesterId) {
            return "meritList/program/" + pProgramId + "/semester/" + semesterId;
        };
        ResultProcessing.$inject = ['$scope', '$stateParams', 'appConstants', 'HttpClient', '$modal', 'notify'];
        return ResultProcessing;
    }());
    ums.ResultProcessing = ResultProcessing;
    ums.UMS.controller("ResultProcessing", ResultProcessing);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CourseStatusList = (function () {
        function CourseStatusList($scope, $modalInstance, marksSubmissionStatusList, departmentName, yearSemester, appConstants) {
            this.$scope = $scope;
            this.$modalInstance = $modalInstance;
            this.marksSubmissionStatusList = marksSubmissionStatusList;
            this.departmentName = departmentName;
            this.yearSemester = yearSemester;
            this.appConstants = appConstants;
            $scope.marksSubmissionStatusList = marksSubmissionStatusList;
            $scope.departmentName = departmentName;
            $scope.yearSemester = yearSemester;
            $scope.ok = this.ok.bind(this);
            $scope.isReadyForResultProcess = this.isReadyForResultProcess.bind(this);
        }
        CourseStatusList.prototype.ok = function () {
            this.$modalInstance.dismiss('cancel');
        };
        CourseStatusList.prototype.isReadyForResultProcess = function (status) {
            return parseInt(status) === this.appConstants.MARKS_SUBMISSION_STATUS.ACCEPTED_BY_COE;
        };
        CourseStatusList.$inject = ['$scope', '$modalInstance', 'marksSubmissionStatusList', 'departmentName',
            'yearSemester', 'appConstants'];
        return CourseStatusList;
    }());
    ums.CourseStatusList = CourseStatusList;
    ums.UMS.controller("CourseStatusList", CourseStatusList);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ResultProcessStatusMonitor = (function () {
        function ResultProcessStatusMonitor() {
            this.restrict = 'AE';
            this.scope = {
                programId: '=',
                semesterId: '=',
                statusByYearSemester: '=',
                render: '=',
                purpose: '=',
                year: '@?',
                semester: '@?'
            };
            this.templateUrl = "./views/result/result-process-status.html";
            this.bindToController = true;
            this.controller = ResultProcessStatusMonitorController;
            this.controllerAs = 'vm';
        }
        return ResultProcessStatusMonitor;
    }());
    ums.ResultProcessStatusMonitor = ResultProcessStatusMonitor;
    var ResultProcessStatusMonitorController = (function () {
        function ResultProcessStatusMonitorController(httpClient, $q, $interval, settings, appConstants, $timeout, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.$interval = $interval;
            this.settings = settings;
            this.appConstants = appConstants;
            this.$timeout = $timeout;
            this.notify = notify;
            this.PROCESS_GRADES = "_process_grades";
            this.PROCESS_GPA_CGPA_PROMOTION = "_process_gpa_cgpa_promotion";
            this.PUBLISH_RESULT = "_publish_result";
            this.PROCESS_MERIT_LIST = "_process_merit_list";
            this.intervalPromiseMap = {};
            this.resultProcessStatusConst = this.appConstants.RESULT_PROCESS_STATUS;
            if (this.year && this.semester) {
                this.updateStatus(this.programId, this.semesterId, this.statusByYearSemester, this.year, this.semester);
            }
            else {
                this.updateStatus(this.programId, this.semesterId, this.statusByYearSemester);
            }
        }
        ResultProcessStatusMonitorController.prototype.getNotification = function (programId, semesterId, statusByYearSemester, year, semester) {
            var _this = this;
            console.log("Called getNotification Method");
            this.httpClient.poll(this.getUpdateStatusUri(programId, semesterId, year, semester), ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.$timeout(function () {
                    _this.resultProcessStatus(programId, semesterId, statusByYearSemester, response, year, semester);
                    _this.groupStatuses(statusByYearSemester);
                });
                _this.httpClient.get(_this.getProgramWiseStatusUriForMeritList(parseInt(programId), parseInt(semesterId)), ums.HttpClient.MIME_TYPE_JSON, function (resposne) {
                    _this.setMeritListStatus(resposne.entries, programId, semesterId, year, semester, statusByYearSemester);
                });
                if (response.response.status == _this.appConstants.TASK_STATUS.COMPLETED) {
                    if (_this.intervalPromiseMap[_this.getIntervalId(programId, semesterId, year, semester)]) {
                        _this.$interval.cancel(_this.intervalPromiseMap[_this.getIntervalId(programId, semesterId, year, semester)]);
                        delete _this.intervalPromiseMap[_this.getIntervalId(programId, semesterId, year, semester)];
                        console.log(response.response);
                        var programName = (_this.appConstants.ugProgramMap[programId])[0];
                        var notify = "Program : " + programName + " || Year : " + year + " Semester : " + semester;
                        setTimeout(function () {
                            $('#loading_panel_' + programId).hide();
                        }, 100);
                        console.log("ABC" + _this.action + ", " + response.response.status);
                        if (_this.action == "result_process") {
                            _this.notify.success("Result processed successfully. " + notify);
                            _this.action = "";
                        }
                        else if (_this.action == "result_publish") {
                            _this.notify.success("Result published successfully. " + notify);
                            _this.action = "";
                        }
                        else if (_this.action == "merit_list_result_process") {
                            _this.notify.success("Merit List Result processed successfully. " + notify);
                            _this.action = "";
                        }
                    }
                    if (year && semester) {
                        for (var yearSemester in statusByYearSemester.yearSemester) {
                            _this.updateStatus(programId, semesterId, statusByYearSemester, statusByYearSemester.yearSemester[yearSemester].year + '', statusByYearSemester.yearSemester[yearSemester].academicSemester + '');
                        }
                    }
                }
            }, function (response) {
                if (response.status !== 200) {
                    _this.$interval.cancel(_this.intervalPromiseMap[_this.getIntervalId(programId, semesterId, year, semester)]);
                }
            });
        };
        ResultProcessStatusMonitorController.prototype.setMeritListStatus = function (statusss, programId, semesterId, year, semester, statusByYearSemester) {
            if (year && semester) {
                for (var i = 0; i < statusss.length; i++) {
                    if (statusss[i].programId == parseInt(programId) && statusss[i].semesterId == parseInt(semesterId) && statusss[i].year == parseInt(year) && statusss[i].semester == parseInt(semester)) {
                        statusByYearSemester.yearSemester[year + "-" + semester].meritListStatus = true;
                        break;
                    }
                }
                /* if(this.statusByYearSemester.yearSemester[`${year}-${semester}`].meritListStatus != true){
                     this.startPolling(programId, semesterId, statusByYearSemester, year, semester);
                 }*/
            }
        };
        ResultProcessStatusMonitorController.prototype.updateStatus = function (programId, semesterId, statusByYearSemester, year, semester) {
            var _this = this;
            this.httpClient.get(this.getUpdateStatusUri(programId, semesterId, year, semester), ums.HttpClient.MIME_TYPE_JSON, function (response) {
                _this.resultProcessStatus(programId, semesterId, statusByYearSemester, response, year, semester);
                _this.groupStatuses(statusByYearSemester);
            });
            this.httpClient.get(this.getProgramWiseStatusUriForMeritList(parseInt(programId), parseInt(semesterId)), ums.HttpClient.MIME_TYPE_JSON, function (resposne) {
                _this.setMeritListStatus(resposne.entries, programId, semesterId, year, semester, statusByYearSemester);
            });
        };
        ResultProcessStatusMonitorController.prototype.resultProcessStatus = function (programId, semesterId, statusByYearSemester, taskStatus, year, semester) {
            if (taskStatus) {
                /*console.log("***************************");

                console.log(taskStatus);*/
                var resultProcessTask = taskStatus.response.id == this.getResultProcessTaskName(programId, semesterId, year, semester);
                var gradeProcessTask = taskStatus.response.id == this.getGradeProcessTaskName(programId, semesterId, year, semester);
                var resultPublishTask = taskStatus.response.id == this.getResultPublishTaskName(programId, semesterId, year, semester);
                var meritListResultProcessTask = taskStatus.response.id == this.getMeritListResultProcessTaskName(programId, semesterId, year, semester);
                if (resultProcessTask || gradeProcessTask || resultPublishTask) {
                    if (taskStatus.response.status == this.appConstants.TASK_STATUS.COMPLETED) {
                        if (resultPublishTask) {
                            var status_1 = this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.id;
                            var statusText_1 = this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.label + " " + taskStatus.response.taskCompletionDateString;
                            this.setStatusAndStatusText(statusByYearSemester, status_1, statusText_1, year, semester);
                            return;
                        }
                        else {
                            var status_2 = gradeProcessTask
                                ? this.appConstants.RESULT_PROCESS_STATUS.IN_PROGRESS.id
                                : this.appConstants.RESULT_PROCESS_STATUS.PROCESSED_ON.id;
                            var statusText_2 = gradeProcessTask
                                ? this.appConstants.RESULT_PROCESS_STATUS.IN_PROGRESS.label + '...' + statusByYearSemester.taskStatus.response.progressDescription
                                : this.appConstants.RESULT_PROCESS_STATUS.PROCESSED_ON.label + " " + taskStatus.response.taskCompletionDateString;
                            this.setStatusAndStatusText(statusByYearSemester, status_2, statusText_2, year, semester);
                            return;
                        }
                    }
                    else if (taskStatus.response.status == this.appConstants.TASK_STATUS.INPROGRESS) {
                        this.startPolling(programId, semesterId, statusByYearSemester, year, semester);
                        if (resultPublishTask) {
                            var status_3 = this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISH_INPROGRESS.id;
                            var statusText_3 = this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISH_INPROGRESS.label
                                + '...' + taskStatus.response.progressDescription;
                            this.setStatusAndStatusText(statusByYearSemester, status_3, statusText_3, year, semester);
                            return;
                        }
                        else {
                            var status_4 = this.appConstants.RESULT_PROCESS_STATUS.IN_PROGRESS.id;
                            var statusText_4 = this.appConstants.RESULT_PROCESS_STATUS.IN_PROGRESS.label
                                + '...' + taskStatus.response.progressDescription;
                            this.setStatusAndStatusText(statusByYearSemester, status_4, statusText_4, year, semester);
                            return;
                        }
                    }
                    else {
                        for (var yearSemester in statusByYearSemester.yearSemester) {
                            if (statusByYearSemester.yearSemester[yearSemester].status
                                < this.appConstants.MARKS_SUBMISSION_STATUS.ACCEPTED_BY_COE
                                || statusByYearSemester.yearSemester[yearSemester].status
                                    == this.appConstants.MARKS_SUBMISSION_STATUS.REQUESTED_FOR_RECHECK_BY_COE) {
                                console.log("========>>" + statusByYearSemester.yearSemester[yearSemester].status);
                                console.log("====Year====>>" + year);
                                console.log("====Semester====>>" + semester);
                                var status_5 = this.appConstants.RESULT_PROCESS_STATUS.UNPROCESSED.id;
                                var statusText_5 = this.appConstants.RESULT_PROCESS_STATUS.UNPROCESSED.label;
                                this.setStatusAndStatusText(statusByYearSemester, status_5, statusText_5, year, semester);
                                return;
                            }
                        }
                        var status_6 = this.appConstants.RESULT_PROCESS_STATUS.READY_TO_BE_PROCESSED.id;
                        var statusText_6 = this.appConstants.RESULT_PROCESS_STATUS.READY_TO_BE_PROCESSED.label;
                        this.setStatusAndStatusText(statusByYearSemester, status_6, statusText_6, year, semester);
                        return;
                    }
                }
                var status_7 = this.appConstants.RESULT_PROCESS_STATUS.STATUS_UNDEFINED.id;
                var statusText = this.appConstants.RESULT_PROCESS_STATUS.STATUS_UNDEFINED.label;
                this.setStatusAndStatusText(statusByYearSemester, status_7, statusText, year, semester);
            }
        };
        ResultProcessStatusMonitorController.prototype.groupStatuses = function (statusByYearSemester) {
            var allProcessed = true;
            var partiallyProcessed = false;
            var allPublished = true;
            var partiallyPublished = false;
            if (statusByYearSemester.resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.IN_PROGRESS.id) {
                return;
            }
            if (statusByYearSemester.resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.id) {
                allPublished = true;
                allProcessed = false;
            }
            else {
                for (var yearSemester in statusByYearSemester.yearSemester) {
                    if (statusByYearSemester.yearSemester[yearSemester].resultProcessStatus
                        == this.appConstants.RESULT_PROCESS_STATUS.PROCESSED_ON.id) {
                        partiallyProcessed = true;
                    }
                    else {
                        allProcessed = false;
                    }
                    if (statusByYearSemester.yearSemester[yearSemester].resultProcessStatus
                        == this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.id) {
                        partiallyPublished = true;
                    }
                    else {
                        allPublished = false;
                    }
                }
            }
            if (allPublished) {
                var status_8 = this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.id;
                var statusText = this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.label;
                this.setStatusAndStatusText(statusByYearSemester, status_8, statusText);
            }
            else if (partiallyPublished) {
                var status_9 = this.appConstants.RESULT_PROCESS_STATUS.PARTIALLY_PUBLISHED.id;
                var statusText = this.appConstants.RESULT_PROCESS_STATUS.PARTIALLY_PUBLISHED.label;
                this.setStatusAndStatusText(statusByYearSemester, status_9, statusText);
            }
            else if (allProcessed) {
                if (statusByYearSemester.resultProcessStatus !== this.appConstants.RESULT_PROCESS_STATUS.PROCESSED_ON.id) {
                    var status_10 = this.appConstants.RESULT_PROCESS_STATUS.PROCESSED.id;
                    var statusText = this.appConstants.RESULT_PROCESS_STATUS.PROCESSED.label;
                    this.setStatusAndStatusText(statusByYearSemester, status_10, statusText);
                }
            }
            else if (partiallyProcessed) {
                var status_11 = this.appConstants.RESULT_PROCESS_STATUS.PARTIALLY_PROCESSED.id;
                var statusText = this.appConstants.RESULT_PROCESS_STATUS.PARTIALLY_PROCESSED.label;
                this.setStatusAndStatusText(statusByYearSemester, status_11, statusText);
            }
        };
        ResultProcessStatusMonitorController.prototype.isReadyForResultPublish = function (statusByYearSemester, year, semester) {
            console.log(year + "----" + semester);
            console.log(statusByYearSemester.yearSemester[year + "-" + semester].resultProcessStatus);
            console.log(statusByYearSemester.resultProcessStatus);
            return (statusByYearSemester.yearSemester[year + "-" + semester].resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.PROCESSED_ON.id
                || statusByYearSemester.resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.PROCESSED_ON.id)
                && !(statusByYearSemester.yearSemester[year + "-" + semester].resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED
                    || statusByYearSemester.resultProcessStatus == this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED);
        };
        ResultProcessStatusMonitorController.prototype.setStatusAndStatusText = function (statusByYearSemester, status, statusText, year, semester, completed) {
            if (year && semester) {
                statusByYearSemester.yearSemester[year + "-" + semester].resultProcessStatus = status;
                statusByYearSemester.yearSemester[year + "-" + semester].resultProcessStatusText = statusText;
            }
            else {
                statusByYearSemester.resultProcessStatus = status;
                statusByYearSemester.resultProcessStatusText = statusText;
            }
        };
        ResultProcessStatusMonitorController.prototype.getIntervalId = function (programId, semesterId, year, semester) {
            return !year && !semester ? programId + "_" + semesterId : programId + "_" + semesterId + "_" + year + "_" + semester;
        };
        ResultProcessStatusMonitorController.prototype.getResultProcessTaskName = function (programId, semesterId, year, semester) {
            return !year && !semester ? programId + "_" + semesterId + this.PROCESS_GPA_CGPA_PROMOTION
                : programId + "_" + semesterId + "_" + year + "_" + semester + this.PROCESS_GPA_CGPA_PROMOTION;
        };
        ResultProcessStatusMonitorController.prototype.getGradeProcessTaskName = function (programId, semesterId, year, semester) {
            return !year && !semester ? programId + "_" + semesterId + this.PROCESS_GRADES
                : programId + "_" + semesterId + "_" + year + "_" + semester + this.PROCESS_GRADES;
        };
        ResultProcessStatusMonitorController.prototype.getResultPublishTaskName = function (programId, semesterId, year, semester) {
            return !year && !semester ? programId + "_" + semesterId + this.PUBLISH_RESULT
                : programId + "_" + semesterId + "_" + year + "_" + semester + this.PUBLISH_RESULT;
        };
        ResultProcessStatusMonitorController.prototype.getMeritListResultProcessTaskName = function (programId, semesterId, year, semester) {
            return !year && !semester ? programId + "_" + semesterId + this.PROCESS_MERIT_LIST
                : programId + "_" + semesterId + "_" + year + "_" + semester + this.PROCESS_MERIT_LIST;
        };
        ResultProcessStatusMonitorController.prototype.getUpdateStatusUri = function (programId, semesterId, year, semester) {
            return !year && !semester ? "academic/processResult/status/program/" + programId + "/semester/" + semesterId
                : "academic/processResult/status/program/" + programId + "/semesterId/" + semesterId + "/year/" + year + "/semester/" + semester;
        };
        ResultProcessStatusMonitorController.prototype.getProcessResultUri = function (programId, semesterId, year, semester) {
            return !year && !semester ? "academic/processResult/program/" + programId + "/semester/" + semesterId
                : "academic/processResult/program/" + programId + "/semesterId/" + semesterId + "/year/" + year + "/semester/" + semester;
        };
        ResultProcessStatusMonitorController.prototype.getMeritListProcessResultUri = function (programId, semesterId, year, semester) {
            return !year && !semester ? "academic/processMeritListResult/program/" + programId + "/semester/" + semesterId
                : "academic/processMeritListResult/program/" + programId + "/semesterId/" + semesterId + "/year/" + year + "/semester/" + semester;
        };
        ResultProcessStatusMonitorController.prototype.getPublishResultUri = function (programId, semesterId, year, semester) {
            return !year && !semester ? "academic/publishResult/program/" + programId + "/semesterId/" + semesterId
                : "academic/publishResult/program/" + programId + "/semesterId/" + semesterId + "/year/" + year + "/semester/" + semester;
        };
        ResultProcessStatusMonitorController.prototype.resultProcessConfirmation = function (programId, semesterId, statusByYearSemester, year, semester) {
            console.log(statusByYearSemester);
            this.resultProcessParam = { programId: -1, semesterId: -1, year: -1, semester: -1, comments: "" };
            this.resultProcessParam.programId = programId;
            this.resultProcessParam.semesterId = semesterId;
            this.resultProcessParam.year = year;
            this.resultProcessParam.semester = semester;
            this.statusByYearSemester = statusByYearSemester;
            console.log(this.resultProcessParam);
            $('#modal-resultProcessComment' + programId + year + semester).modal('show');
            setTimeout(function () {
                $("#resultProcessComments" + programId + year + semester).focus();
            }, 1000);
        };
        ResultProcessStatusMonitorController.prototype.meritListConfirmation = function (programId, semesterId, statusByYearSemester, year, semester) {
            console.log(statusByYearSemester);
            this.meritListResultProcessParam = { programId: -1, semesterId: -1, year: -1, semester: -1, comments: "" };
            this.meritListResultProcessParam.programId = programId;
            this.meritListResultProcessParam.semesterId = semesterId;
            this.meritListResultProcessParam.year = year;
            this.meritListResultProcessParam.semester = semester;
            this.statusByYearSemester = statusByYearSemester;
            console.log(this.meritListResultProcessParam);
            $('#modal-meritListComment' + programId + year + semester).modal('show');
            setTimeout(function () {
                $("#meritListComments" + programId + year + semester).focus();
            }, 1000);
        };
        ResultProcessStatusMonitorController.prototype.resultPublishConfirmation = function (programId, semesterId, year, semester, status) {
            if (status == "already-published") {
                var programName = (this.appConstants.ugProgramMap[programId])[0];
                var notify = "Program : " + programName + " || Year : " + year + " Semester : " + semester;
                this.notify.info("Result already published. [" + notify + "]");
                return;
            }
            this.resultPublishParam = { programId: -1, semesterId: -1, year: -1, semester: -1, comments: "" };
            this.resultPublishParam.programId = programId;
            this.resultPublishParam.semesterId = semesterId;
            this.resultPublishParam.year = year;
            this.resultPublishParam.semester = semester;
            $('#modal-resultPublishComment' + programId + year + semester).modal('show');
            setTimeout(function () {
                $("#resultPublishComments" + programId + year + semester).focus();
            }, 1000);
        };
        ResultProcessStatusMonitorController.prototype.processResult = function () {
            var _this = this;
            var programId = this.resultProcessParam.programId;
            var semesterId = this.resultProcessParam.semesterId;
            var year = this.resultProcessParam.year;
            var semester = this.resultProcessParam.semester;
            this.action = "result_process";
            var validate = this.validateCommonInputs("resultProcessComments" + programId + year + semester, this.resultProcessParam);
            if (!validate) {
                this.notify.info("Provide comments.");
                return;
            }
            $('#modal-resultProcessComment' + programId + year + semester).modal('hide');
            $('#loading_panel_' + programId).show();
            ums.Utils.disableButton("resultProcessSubmitBtn" + programId + year + semester);
            var resultProcessURL = this.getProcessResultUri(this.resultProcessParam.programId + '', this.resultProcessParam.semesterId + '', this.resultProcessParam.year + '', this.resultProcessParam.semester + '');
            console.log(resultProcessURL);
            this.httpClient.post(resultProcessURL, this.resultProcessParam, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (data) {
                ums.Utils.enableButton("resultProcessSubmitBtn" + programId + year + semester);
            })
                .error(function (data) {
                // this.showLoader = false;
                _this.action = "";
                ums.Utils.enableButton("resultProcessSubmitBtn" + programId + year + semester);
                $('#modal-resultProcessComment' + programId + year + semester).modal('hide');
                $('#loading_panel_' + programId).hide();
                console.error(data);
            });
            this.startPolling(this.resultProcessParam.programId + '', this.resultProcessParam.semesterId + '', this.statusByYearSemester, this.resultProcessParam.year + '', this.resultProcessParam.semester + '');
            if (!this.resultProcessParam.year && !this.resultProcessParam.semester) {
                this.showDefault(this.resultProcessParam.programId + '');
            }
        };
        ResultProcessStatusMonitorController.prototype.meritListProcessResult = function () {
            var _this = this;
            var programId = this.meritListResultProcessParam.programId;
            var semesterId = this.meritListResultProcessParam.semesterId;
            var year = this.meritListResultProcessParam.year;
            var semester = this.meritListResultProcessParam.semester;
            this.action = "merit_list_result_process";
            var validate = this.validateCommonInputs("meritListComments" + programId + year + semester, this.meritListResultProcessParam);
            if (!validate) {
                this.notify.info("Provide comments.");
                return;
            }
            $('#modal-meritListComment' + programId + year + semester).modal('hide');
            $('#loading_panel_' + programId).show();
            ums.Utils.disableButton("meritListSubmitBtn" + programId + year + semester);
            var meritListResultProcessURL = this.getMeritListProcessResultUri(this.meritListResultProcessParam.programId + '', this.meritListResultProcessParam.semesterId + '', this.meritListResultProcessParam.year + '', this.meritListResultProcessParam.semester + '');
            console.log(meritListResultProcessURL);
            this.httpClient.post(meritListResultProcessURL, this.meritListResultProcessParam, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (data) {
                ums.Utils.enableButton("meritListSubmitBtn" + programId + year + semester);
            })
                .error(function (data) {
                // this.showLoader = false;
                _this.action = "";
                ums.Utils.enableButton("meritListSubmitBtn" + programId + year + semester);
                $('#modal-meritListComment' + programId + year + semester).modal('hide');
                $('#loading_panel_' + programId).hide();
                console.error(data);
            });
            this.startPolling(this.meritListResultProcessParam.programId + '', this.meritListResultProcessParam.semesterId + '', this.statusByYearSemester, this.meritListResultProcessParam.year + '', this.meritListResultProcessParam.semester + '');
            if (!this.meritListResultProcessParam.year && !this.meritListResultProcessParam.semester) {
                this.showDefault(this.meritListResultProcessParam.programId + '');
            }
        };
        ResultProcessStatusMonitorController.prototype.publishResult = function () {
            var programId = this.resultPublishParam.programId;
            var semesterId = this.resultPublishParam.semesterId;
            var year = this.resultPublishParam.year;
            var semester = this.resultPublishParam.semester;
            this.action = "result_publish";
            var validate = this.validateCommonInputs("resultPublishComments" + programId + year + semester, this.resultPublishParam);
            if (!validate) {
                this.notify.info("Provide comments.");
                return;
            }
            $('#modal-resultPublishComment' + programId + year + semester).modal('hide');
            ums.Utils.disableButton("resultPublishSubmitBtn" + programId + year + semester);
            $('#loading_panel_' + programId).show();
            this.httpClient.post(this.getPublishResultUri(programId + '', semesterId + '', year + '', semester + ''), this.resultPublishParam, ums.HttpClient.MIME_TYPE_JSON).success(function (data) {
                ums.Utils.enableButton("resultPublishSubmitBtn" + programId + year + semester);
            })
                .error(function (data) {
                ums.Utils.enableButton("resultPublishSubmitBtn" + programId + year + semester);
                $('#modal-resultPublishComment' + programId + year + semester).modal('hide');
                $('#loading_panel_' + programId).hide();
                console.error(data);
            });
            this.startPolling(programId + '', semesterId + '', this.statusByYearSemester, year + '', semester + '');
            // if(!year && !semester) {
            //   this.showDefault(programId);
            // }
        };
        ResultProcessStatusMonitorController.prototype.validateCommonInputs = function (commentField, inputObj) {
            var validate = true;
            if (inputObj.comments == "") {
                ums.Utils.changeColor(commentField, "S"); //Set red color
                validate = false;
            }
            else {
                ums.Utils.changeColor(commentField, "R"); //Reset to default color
            }
            return validate;
        };
        ResultProcessStatusMonitorController.prototype.startPolling = function (programId, semesterId, statusByYearSemester, year, semester) {
            var _this = this;
            var key = this.getIntervalId(programId, semesterId, year, semester);
            if (!this.intervalPromiseMap[key]) {
                this.intervalPromiseMap[key] = this.$interval(function () {
                    _this.getNotification(programId, semesterId, statusByYearSemester, year, semester);
                }, 10000, 0, true);
            }
        };
        ResultProcessStatusMonitorController.prototype.resultPdf = function (programId, semesterId) {
            var _this = this;
            this.httpClient.get("result/pdf/program/" + programId + "/semesterId/" + semesterId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = function (e) {
                    _this.saveAsFile(reader.result, "promotion_list_" + programId + "_" + semesterId);
                };
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        ResultProcessStatusMonitorController.prototype.saveAsFile = function (url, fileName) {
            var a = document.createElement("a");
            document.body.appendChild(a);
            a.style = "display: none";
            a.href = url;
            a.download = fileName;
            a.click();
            window.URL.revokeObjectURL(url);
            $(a).remove();
        };
        ResultProcessStatusMonitorController.prototype.showDefault = function (programId) {
            $("#" + programId + "_view2").hide('slide', { direction: 'right', easing: 'easeOutBounce' }, 200);
            setTimeout(function () {
                $("#" + programId + "_view1").fadeIn(200);
                if ($("#" + programId + "_download")) {
                    $("#" + programId + "_download").fadeIn(100);
                }
                $("#" + programId).fadeIn(100);
                if ($("#" + programId + "_publish")) {
                    $("#" + programId + "_publish").fadeIn(100);
                }
            }, 200);
        };
        ResultProcessStatusMonitorController.prototype.getProgramWiseStatusUriForMeritList = function (pProgramId, semesterId) {
            return "meritList/program/" + pProgramId + "/semester/" + semesterId;
        };
        ResultProcessStatusMonitorController.prototype.isResultProcessed = function (status) {
            return status == this.appConstants.RESULT_PROCESS_STATUS.PROCESSED_ON.id
                || status == this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.id
                || status == this.appConstants.RESULT_PROCESS_STATUS.PROCESSED.id;
        };
        ResultProcessStatusMonitorController.prototype.isResultPublished = function (status) {
            return status == this.appConstants.RESULT_PROCESS_STATUS.PARTIALLY_PUBLISHED.id
                || status == this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.id;
        };
        ResultProcessStatusMonitorController.prototype.isYearSemesterResultPublished = function (statusByYearSemester, year, semester) {
            if (statusByYearSemester.yearSemester[year + "-" + semester].resultProcessStatus != this.appConstants.RESULT_PROCESS_STATUS.PARTIALLY_PUBLISHED.id
                && statusByYearSemester.yearSemester[year + "-" + semester].resultProcessStatus != this.appConstants.RESULT_PROCESS_STATUS.RESULT_PUBLISHED.id)
                return false;
            //.log("-->Y:" + year + "   --->>S:" + semester + "  published: true");
            return true;
        };
        ResultProcessStatusMonitorController.$inject = ['HttpClient',
            '$q',
            '$interval',
            'Settings',
            'appConstants',
            '$timeout',
            'notify'];
        return ResultProcessStatusMonitorController;
    }());
    ums.UMS.directive("resultProcessStatusMonitor", function () {
        return new ResultProcessStatusMonitor();
    });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentWiseResultProcess = (function () {
        function StudentWiseResultProcess($q, client, notify, studentService) {
            this.$q = $q;
            this.client = client;
            this.notify = notify;
            this.studentService = studentService;
        }
        StudentWiseResultProcess.prototype.setStudentRecords = function (studentId) {
            var _this = this;
            this.setStudentGeneralInfo(studentId);
            this.client.get("academic/studentrecord/attended-semesters/studentId/" + studentId, ums.HttpClient.MIME_TYPE_JSON, function (records) {
                _this.studentRecords = records.entries;
            });
        };
        StudentWiseResultProcess.prototype.setStudentGeneralInfo = function (studentId) {
            var _this = this;
            if (studentId.indexOf(',') < 0) {
                this.studentService.getStudentById(studentId)
                    .then(function (studentInfo) { return (_this.studentInfo = studentInfo); });
            }
            else {
                this.studentInfo = null;
            }
        };
        StudentWiseResultProcess.prototype.process = function (studentId, semesterId) {
            var _this = this;
            this.client.post("academic/processResult/semesterId/" + semesterId + "/studentId/" + studentId, {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                _this.notify.success('Processed result for student: ' + studentId);
                _this.setStudentRecords(studentId);
            });
        };
        StudentWiseResultProcess.prototype.processStudents = function (studentIds) {
            var _this = this;
            this.client.post("academic/processResult/studentIds/" + studentIds, {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                _this.notify.success('Processed result for student: ' + studentIds);
            });
        };
        StudentWiseResultProcess.$inject = ['$q', 'HttpClient', 'notify', 'studentService'];
        return StudentWiseResultProcess;
    }());
    ums.StudentWiseResultProcess = StudentWiseResultProcess;
    ums.UMS.controller("StudentWiseResultProcess", StudentWiseResultProcess);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionMeritList = (function () {
        function AdmissionMeritList(appConstants, httpClient, $scope, $q, notify, $sce, $window, semesterService, facultyService, admissionStudentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.admissionStudentService = admissionStudentService;
            $scope.programTypes = appConstants.programType;
            $scope.programType = $scope.programTypes[0];
            $scope.searchSpinner = false;
            $scope.modalData = "";
            $scope.data = {
                settings: {
                    colHeaders: true,
                    rowHeaders: true,
                    currentRowClassName: 'currentRow',
                    currentColClassName: 'currentCol',
                    fillHandle: false,
                    manualRowResize: true,
                    manualColumnResize: true,
                    columnSorting: true,
                    sortIndicator: true,
                    readOnly: true,
                    stretchH: 'all',
                    height: $(".page-content").height() - 5,
                    observeChanges: true,
                    search: true,
                    columns: [
                        { "title": "Merit Sl. No", "data": "meritSlNo" },
                        { "title": "Admission SL No", "data": "receiptId" },
                        { "title": "Admission Roll", "data": "admissionRoll" },
                        { "title": "Name of Candidates", "data": "studentName" },
                        { "title": "Group", "data": "quota" }
                    ]
                }
            };
            $scope.getSemesters = this.getSemesters.bind(this);
            $scope.fetchMeritList = this.fetchMeritList.bind(this);
            $scope.downloadTemplate = this.downloadTemplate.bind(this);
            $scope.processData = this.processData.bind(this);
            $scope.saveMeritList = this.saveMeritList.bind(this);
            this.configureHandsOnTable();
            this.getFaculties();
            this.getSemesters();
            this.getMeritListTypes();
            ums.Utils.setValidationOptions("form-horizontal");
        }
        AdmissionMeritList.prototype.configureHandsOnTable = function () {
        };
        AdmissionMeritList.prototype.getMeritListTypes = function () {
            this.$scope.meritTypes = [];
            this.$scope.meritTypes = this.appConstants.meritListTypes;
            this.$scope.meritType = this.$scope.meritTypes[0];
            console.log("merit list types");
            console.log(this.$scope.meritTypes);
            console.log(this.$scope.meritType);
        };
        AdmissionMeritList.prototype.fetchMeritList = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.$scope.searchSpinner = true;
            this.admissionStudentService.fetchMeritList(this.$scope.semester.id, +this.$scope.programType.id, +this.$scope.meritType.id, this.$scope.faculty.shortName).then(function (students) {
                console.log("Admission merit list");
                console.log(students);
                if (students.length == 0) {
                    _this.$scope.showUploadPortion = true;
                    _this.fetchAllAdmissionStudents();
                    _this.$scope.dataFound = false;
                }
                else {
                    _this.$scope.showUploadPortion = false;
                    _this.$scope.admissionStudents = [];
                    _this.$scope.admissionStudents = students;
                    _this.$scope.dataFound = true;
                }
                _this.$scope.searchSpinner = false;
            });
        };
        AdmissionMeritList.prototype.fetchAllAdmissionStudents = function () {
            var _this = this;
            this.$scope.admissionStudentMap = {};
            this.admissionStudentService.fetchTaletalkData(this.$scope.semester.id, +this.$scope.programType.id).then(function (students) {
                console.log("students length");
                console.log(students.length);
                for (var i = 0; i < students.length; i++) {
                    _this.$scope.admissionStudentMap[students[i].receiptId] = students[i];
                }
                console.log(students);
            });
        };
        AdmissionMeritList.prototype.downloadTemplate = function () {
            this.admissionStudentService.downloadMeritListExcelFile(this.$scope.semester.id);
        };
        AdmissionMeritList.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.$scope.programType.id, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.$scope.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.$scope.semester = semesters[i];
                        break;
                    }
                }
            });
        };
        AdmissionMeritList.prototype.processData = function (modalData) {
            var _this = this;
            this.$scope.admissionStudents = [];
            this.$scope.searchSpinner = true;
            this.fillUpMeritStudents(modalData).then(function (students) {
                _this.$scope.showUploadPortion = false;
                _this.$scope.searchSpinner = false;
            });
        };
        AdmissionMeritList.prototype.fillUpMeritStudents = function (modalData) {
            var defer = this.$q.defer();
            console.log(modalData);
            var rows = modalData.split("\n");
            var counter = 0;
            for (var r in rows) {
                var cells = rows[r].split('\t');
                if (+r == 0 && cells.length > 3 || cells.length < 3) {
                    this.notify.error("Wrong format, please paste the excel data again");
                    break;
                }
                else {
                    if (+r != 0) {
                        console.log("Cells");
                        console.log(cells);
                        this.insertDataIntoAdmissionStudents(cells);
                    }
                }
            }
            defer.resolve(this.$scope.admissionStudents);
            return defer.promise;
        };
        AdmissionMeritList.prototype.insertDataIntoAdmissionStudents = function (cellData) {
            console.log("#############3");
            console.log(cellData);
            console.log(cellData[0]);
            console.log(cellData[1]);
            console.log(cellData[2]);
            var receiptId = cellData[1];
            var student = {};
            student = this.$scope.admissionStudentMap[receiptId];
            console.log('student');
            console.log(student);
            student.meritSlNo = Number(cellData[0]);
            student.admissionRoll = cellData[2];
            this.$scope.admissionStudents.push(student);
            console.log("End--->");
            console.log(cellData[0]);
            console.log("<------");
        };
        AdmissionMeritList.prototype.getFaculties = function () {
            var _this = this;
            this.facultyService.getAllFaculties().then(function (faculties) {
                _this.$scope.faculties = [];
                for (var i = 0; i < faculties.length; i++) {
                    // if(faculties[i].shortName!='BUSINESS'){
                    //   this.$scope.faculties.push(faculties[i]);
                    // }
                    _this.$scope.faculties.push(faculties[i]);
                }
                _this.$scope.faculty = faculties[0];
            });
        };
        AdmissionMeritList.prototype.saveMeritList = function () {
            var _this = this;
            this.$scope.searchSpinner = true;
            this.convertToJson().then(function (json) {
                _this.admissionStudentService.saveMeritList(json, _this.$scope.meritType.name).then(function (status) {
                    _this.$scope.modalData = "";
                    _this.fetchMeritList();
                });
            });
        };
        AdmissionMeritList.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            var students = this.$scope.admissionStudents;
            for (var i = 0; i < students.length; i++) {
                var item = {};
                item['semesterId'] = students[i].semesterId;
                item['meritSlNo'] = students[i].meritSlNo;
                item['receiptId'] = students[i].receiptId;
                item['admissionRoll'] = students[i].admissionRoll;
                item['quota'] = this.$scope.meritType.name;
                item['programType'] = +this.$scope.programType.id;
                jsonObject.push(item);
            }
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        AdmissionMeritList.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'admissionStudentService'];
        return AdmissionMeritList;
    }());
    ums.UMS.controller("AdmissionMeritList", AdmissionMeritList);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionStudentReceipt = (function () {
        function AdmissionStudentReceipt(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, admissionStudentService, semesterFeeService, admissionPaymentService, feeReportService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.admissionStudentService = admissionStudentService;
            this.semesterFeeService = semesterFeeService;
            this.admissionPaymentService = admissionPaymentService;
            this.feeReportService = feeReportService;
            this.programTypes = appConstants.programType;
            this.programType = this.programTypes[0];
            this.meritTypes = this.appConstants.meritListTypes;
            this.meritType = this.meritTypes[0];
            this.getFaculties();
            this.getSemesters();
        }
        AdmissionStudentReceipt.prototype.fetchStudent = function () {
            var _this = this;
            this.admissionStudentService.fetchAdmissionStudentByReceiptId(this.semester.id, this.programType.id, this.receiptId, this.meritType.name).then(function (admissionStudent) {
                _this.selectedStudent = admissionStudent;
                console.log('selected student');
                console.log(_this.selectedStudent);
                console.log(_this.selectedStudent.studentId);
                if ((_this.selectedStudent.studentId == null || _this.selectedStudent.migrationStatus == 2) && _this.selectedStudent.allocatedProgramId != undefined) {
                    console.log("##############");
                    _this.admissionPaymentService.getAdmissionPayment(_this.selectedStudent.receiptId, _this.selectedStudent.quota).then(function (admissionpayment) {
                        console.log("Getting admissino payment");
                        _this.admissionPayment = admissionpayment;
                    });
                }
            });
        };
        AdmissionStudentReceipt.prototype.fetchFees = function () {
            var _this = this;
            this.semesterFeeService.getSemesterFeeBySemesterId(this.semester.id, +this.faculty.id).then(function (ugFees) {
                _this.ugFees = [];
                _this.ugFees = ugFees;
                _this.ugFeeMapWithCategoryId = {};
                _this.ugFees.forEach(function (f) { return _this.ugFeeMapWithCategoryId[f.feeCategoryId] = f; });
                _this.admissionFee = _this.ugFeeMapWithCategoryId[ums.FeeCategoryService.ADMISSION_FEE_CATEGORY].amount;
                _this.registrationFee = _this.ugFeeMapWithCategoryId[ums.FeeCategoryService.REGISTRATION_FEE_CATEGORY].amount;
                _this.establishmentFee = _this.ugFeeMapWithCategoryId[ums.FeeCategoryService.ESTABLISHMENT_FEE_CATEGORY].amount;
                _this.tuitionFee = _this.ugFeeMapWithCategoryId[ums.FeeCategoryService.TUITION_FEE_CATEGORY].amount;
                _this.laboratoryFee = _this.ugFeeMapWithCategoryId[ums.FeeCategoryService.LABORATORY_FEE_CATEGORY].amount;
                _this.migrationFee = _this.ugFeeMapWithCategoryId[ums.FeeCategoryService.MIGRATION_FEE_CATEGORY].amount;
            });
        };
        AdmissionStudentReceipt.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.programType.id, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                if (_this.semesters.length > 0)
                    _this.semester = _this.semesters[0];
            });
        };
        AdmissionStudentReceipt.prototype.getTotalAmount = function () {
            var total = 0;
            if (this.selectedStudent.migrationStatus == 2 && this.selectedStudent.programIdByMerit != null) {
                total = total + this.migrationFee;
            }
            else {
                total = total + this.admissionFee;
                total = total + this.registrationFee;
                total = total + this.establishmentFee;
                total = total + this.tuitionFee;
                total = total + this.laboratoryFee;
            }
            return total;
        };
        AdmissionStudentReceipt.prototype.getAllMeritStudents = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.admissionStudentService.fetchMeritList(this.semester.id, +this.programType.id, +this.meritType.id, this.faculty.shortName).then(function (admissionStudents) {
                console.log("Admission students");
                console.log(admissionStudents);
                _this.meritStudents = [];
                _this.meritStudents = admissionStudents;
                _this.receiptIdMapWithStudent = {};
                _this.meritStudents.forEach(function (a) {
                    _this.receiptIdMapWithStudent[a.receiptId] = a;
                });
            });
            this.fetchFees();
        };
        AdmissionStudentReceipt.prototype.getFaculties = function () {
            var _this = this;
            this.facultyService.getAllFaculties().then(function (faculties) {
                _this.faculties = [];
                _this.faculties = faculties;
                _this.faculty = faculties[0];
            });
        };
        AdmissionStudentReceipt.prototype.downloadFeeReceipt = function () {
            this.feeReportService.admissionFeeReceipt(this.admissionPayment.transactionId);
        };
        AdmissionStudentReceipt.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'admissionStudentService', 'SemesterFeeService', 'AdmissionPaymentService', 'FeeReportService'];
        return AdmissionStudentReceipt;
    }());
    ums.AdmissionStudentReceipt = AdmissionStudentReceipt;
    ums.UMS.controller("AdmissionStudentReceipt", AdmissionStudentReceipt);
})(ums || (ums = {}));
/**
 * Created by My Pc on 17-Dec-16.
 */
var ums;
(function (ums) {
    var AdmissionTaletalkData = (function () {
        function AdmissionTaletalkData(appConstants, httpClient, $scope, $q, notify, $sce, $window, semesterService, facultyService, admissionStudentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.admissionStudentService = admissionStudentService;
            console.log("This is constructor");
            $scope.modalData = "";
            $scope.disableSaveButton = true;
            $scope.showSpinner = false;
            $scope.searchSpinner = false;
            //this.configureHandsOnTable();
            $scope.data = {
                settings: {
                    colHeaders: true,
                    rowHeaders: true,
                    currentRowClassName: 'currentRow',
                    currentColClassName: 'currentCol',
                    fillHandle: false,
                    manualRowResize: true,
                    manualColumnResize: true,
                    columnSorting: true,
                    sortIndicator: true,
                    readOnly: true,
                    width: $(".page-content").width() - 5,
                    height: $(".page-content").height() - 5,
                    observeChanges: true,
                    search: true,
                    columns: [{ "title": "Receipt Id", "data": "receiptId" },
                        { "title": "Pin", "data": "pin" },
                        { "title": "HSC Board", "data": "hscBoard" },
                        { "title": "HSC Roll", "data": "hscRoll" },
                        { "title": "HSC RegNo", "data": "hscRegNo" },
                        { "title": "HSC Year", "data": "hscYear" },
                        { "title": "HSC Group", "data": "hscGroup" },
                        { "title": "SSC Board", "data": "sscBoard" },
                        { "title": "SSC Roll", "data": "sscRoll" },
                        { "title": "SSC Year", "data": "sscYear" },
                        { "title": "SSC Group", "data": "sscGroup" },
                        { "title": "Gender", "data": "gender" },
                        { "title": "Student Name", "data": "studentName" },
                        { "title": "Father Name", "data": "fatherName" },
                        { "title": "Mother Name", "data": "motherName" },
                        { "title": "SSC GPA", "data": "sscGpa" },
                        { "title": "HSC GPA", "data": "hscGpa" },
                        { "title": "Quota", "data": "quota" },
                        { "title": "Unit", "data": "unit" }]
                }
            };
            $scope.programTypes = appConstants.programType;
            $scope.programType = $scope.programTypes[0];
            $scope.getSemesters = this.getSemesters.bind(this);
            $scope.fetchTaletalkData = this.fetchTaletalkData.bind(this);
            $scope.fetchExcelFormat = this.fetchExcelFormat.bind(this);
            $scope.processData = this.processData.bind(this);
            $scope.saveData = this.saveData.bind(this);
            this.getSemesters();
            ums.Utils.setValidationOptions("form-horizontal");
        }
        AdmissionTaletalkData.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.$scope.programType.id, 10, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.$scope.semesters = [];
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.$scope.semester = semesters[i];
                    }
                    _this.$scope.semesters.push(semesters[i]);
                }
            });
        };
        AdmissionTaletalkData.prototype.fetchTaletalkData = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.$scope.searchSpinner = true;
            this.$scope.admissionStudents = [];
            console.log("-----programType---");
            console.log(this.$scope.programType.id);
            this.admissionStudentService.fetchTaletalkData(this.$scope.semester.id, +this.$scope.programType.id).then(function (admissionStudents) {
                console.log("upload portion");
                console.log(admissionStudents);
                if (admissionStudents.length == 0) {
                    _this.$scope.showUploadPortion = true;
                    _this.$scope.searchSpinner = false;
                    _this.$scope.disableSaveButton = false;
                }
                else {
                    _this.$scope.searchSpinner = false;
                    _this.$scope.admissionStudents = admissionStudents;
                    _this.$scope.showUploadPortion = false;
                    _this.$scope.disableSaveButton = true;
                }
            });
        };
        AdmissionTaletalkData.prototype.hideTheTablePortion = function () {
            var defer = this.$q.defer();
            this.$scope.showSpinner = false;
            defer.resolve("hidden");
            return defer.promise;
        };
        AdmissionTaletalkData.prototype.fetchExcelFormat = function () {
            this.admissionStudentService.downloadTaletalkDataExcelFile(this.$scope.semester.id);
        };
        AdmissionTaletalkData.prototype.processData = function (modalData) {
            var _this = this;
            this.$scope.admissionStudents = [];
            this.fillUpAdmissionStudents(modalData).then(function (students) {
                _this.$scope.showUploadPortion = false;
            });
        };
        AdmissionTaletalkData.prototype.fillUpAdmissionStudents = function (modalData) {
            var defer = this.$q.defer();
            var rows = modalData.split("\n");
            var counter = 0;
            for (var r in rows) {
                var cells = rows[r].split('\t');
                if (+r == 0 && cells.length > 20 || cells.length < 20) {
                    this.notify.error("Wrong format, please paste the excel data again");
                    break;
                }
                else {
                    if (+r != 0) {
                        this.insertDataIntoAdmissionStudents(cells);
                    }
                }
            }
            defer.resolve(this.$scope.admissionStudents);
            return defer.promise;
        };
        AdmissionTaletalkData.prototype.insertDataIntoAdmissionStudents = function (cellData) {
            var student = {};
            student.semesterId = this.$scope.semester.id;
            student.receiptId = cellData[0];
            student.pin = cellData[1];
            student.hscBoard = cellData[2];
            student.hscRoll = cellData[3];
            student.hscRegNo = cellData[4];
            student.hscYear = +cellData[5];
            student.hscGroup = cellData[6];
            student.sscBoard = cellData[7];
            student.sscRoll = cellData[8];
            student.sscYear = +cellData[9];
            student.sscGroup = cellData[10];
            student.gender = cellData[11];
            student.dateOfBirth = this.formateDate(cellData[12]);
            ;
            student.studentName = cellData[13];
            student.fatherName = cellData[14];
            student.motherName = cellData[15];
            student.sscGpa = Number(cellData[16]).toFixed(2);
            student.hscGpa = Number(cellData[17]).toFixed(2);
            student.quota = cellData[18];
            student.unit = cellData[19];
            this.$scope.admissionStudents.push(student);
        };
        AdmissionTaletalkData.prototype.formateDate = function (date) {
            var formatedBirthDate = "";
            if (date.indexOf('/') > -1) {
                formatedBirthDate = date;
            }
            else if (date.length == 8) {
                formatedBirthDate = [date.slice(0, 2), '/', date.slice(2, 4), '/', date.slice(6, 8)].join('');
            }
            else if (date.length == 6) {
                formatedBirthDate = [date.slice(0, 2), '/', date.slice(2, 4), '/', date.slice(4, 6)].join('');
            }
            else {
                formatedBirthDate = ['0', date.slice(0, 1), '/', date.slice(1, 3), '/', date.slice(3, 5), ''].join('');
            }
            return formatedBirthDate;
        };
        AdmissionTaletalkData.prototype.saveData = function () {
            var _this = this;
            this.$scope.showSpinner = true;
            this.convertToJson().then(function (completeJson) {
                _this.admissionStudentService.saveTaletalkData(completeJson, _this.$scope.semester.id, +_this.$scope.programType.id).then(function (message) {
                    if (message == "success") {
                        _this.notify.success("Data successfully saved");
                        _this.$scope.disableSaveButton = true;
                        _this.$scope.showSpinner = false;
                    }
                    else {
                        _this.notify.error("Error in saving data");
                        _this.$scope.showSpinner = false;
                    }
                });
            });
        };
        AdmissionTaletalkData.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            var students = this.$scope.admissionStudents;
            for (var i = 0; i < this.$scope.admissionStudents.length; i++) {
                var item = {};
                item['semesterId'] = this.$scope.semester.id;
                item['receiptId'] = students[i].receiptId;
                item['pin'] = students[i].pin;
                item['hscBoard'] = students[i].hscBoard;
                item['hscRoll'] = students[i].hscRoll;
                item['hscRegNo'] = students[i].hscRegNo;
                item['hscYear'] = students[i].hscYear;
                item['hscGroup'] = students[i].hscGroup;
                item['sscBoard'] = students[i].sscBoard;
                item['sscRoll'] = students[i].sscRoll;
                item['sscYear'] = students[i].sscYear;
                item['sscGroup'] = students[i].sscGroup;
                item['gender'] = students[i].gender;
                item['dateOfBirth'] = students[i].dateOfBirth;
                item['studentName'] = students[i].studentName;
                item['fatherName'] = students[i].fatherName;
                item['motherName'] = students[i].motherName;
                item['sscGpa'] = students[i].sscGpa;
                item['hscGpa'] = students[i].hscGpa;
                item['quota'] = students[i].quota;
                item['unit'] = students[i].unit;
                item['programType'] = +this.$scope.programType.id;
                item['admissionRoll'] = 'null';
                item['meritSlNo'] = 'null';
                item['programId'] = 'null';
                item['migrationStatus'] = 'null';
                jsonObject.push(item);
            }
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        AdmissionTaletalkData.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'admissionStudentService'];
        return AdmissionTaletalkData;
    }());
    ums.UMS.controller("AdmissionTaletalkData", AdmissionTaletalkData);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionStudentId = (function () {
        function AdmissionStudentId(appConstants, httpClient, $scope, $q, notify, $sce, $window, semesterService, facultyService, admissionStudentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.admissionStudentService = admissionStudentService;
            $scope.programTypes = appConstants.programType;
            $scope.programType = $scope.programTypes[0];
            $scope.showStudentSection = false;
            $scope.meritTypes = [];
            $scope.meritTypes = this.appConstants.meritListTypes;
            $scope.meritType = this.$scope.meritTypes[0];
            $scope.showMainPanel = this.showManePanel.bind(this);
            $scope.searchByReceiptId = this.searchByReceiptId.bind(this);
            this.getSemesters();
            ums.Utils.setValidationOptions("form-horizontal");
        }
        AdmissionStudentId.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.$scope.programType.id, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.$scope.semesters = [];
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.$scope.semester = semesters[i];
                    }
                    _this.$scope.semesters.push(semesters[i]);
                }
            });
        };
        AdmissionStudentId.prototype.searchByReceiptId = function (receiptId) {
            var _this = this;
            this.$scope.showStudentSection = false;
            this.admissionStudentService.fetchAdmissionStudentByReceiptId(this.$scope.semester.id, +this.$scope.programType.id, receiptId, this.$scope.meritType.name).then(function (data) {
                _this.$scope.admissionStudent = {};
                _this.$scope.admissionStudent = data;
                if (_this.$scope.admissionStudent.studentId != null) {
                    _this.$scope.showStudentSection = true;
                }
                else {
                    _this.notify.error("The student is not yet admitted");
                }
            });
        };
        AdmissionStudentId.prototype.showManePanel = function () {
            ums.Utils.expandRightDiv();
        };
        AdmissionStudentId.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'admissionStudentService'];
        return AdmissionStudentId;
    }());
    ums.UMS.controller("AdmissionStudentId", AdmissionStudentId);
})(ums || (ums = {}));
/**
 * Created by Monjur-E-Morshed on 14-Jan-17.
 */
var ums;
(function (ums) {
    var AdmissionStatistics = (function () {
        function AdmissionStatistics(appConstants, httpClient, $scope, $interval, $q, notify, $sce, $window, semesterService, facultyService, admissionStudentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$interval = $interval;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.admissionStudentService = admissionStudentService;
            $scope.programTypes = appConstants.programType;
            $scope.programType = $scope.programTypes[0];
            $scope.glStatistics = [];
            $scope.raStatistics = [];
            $scope.gceStatistics = [];
            $scope.ffStatistics = [];
            $scope.fontSize = 10;
            $scope.showGA = true;
            $scope.showFF = true;
            $scope.showRA = true;
            $scope.showGCE = true;
            $scope.columnSize = "col-md-6";
            $scope.searchStatistics = this.searchStatistics.bind(this);
            $scope.closeNav = this.closeNav.bind(this);
            $scope.increaseFontSize = this.increaseFontSize.bind(this);
            $scope.decreaseFontSize = this.decreaseFontSize.bind(this);
            $scope.showOrHideTable = this.showOrHideTable.bind(this);
            this.getSemesters();
            this.getFaculties();
            this.initializeQuota();
        }
        AdmissionStatistics.prototype.closeNav = function () {
            //angular.element(document.documentElement("#myModal").style.width=0);
            //angular.element("#myModal").style.width=0;
            angular.element("#moModal").css('width', 0);
        };
        AdmissionStatistics.prototype.showOrHideTable = function (type) {
            var _this = this;
            this.switchOnOffContent(type).then(function (data) {
                _this.configureColumnSize();
            });
        };
        AdmissionStatistics.prototype.configureColumnSize = function () {
            var counter = 0;
            if (this.$scope.showGA == true) {
                counter += 1;
            }
            if (this.$scope.showFF == true) {
                counter += 1;
            }
            if (this.$scope.showRA == true) {
                counter += 1;
            }
            if (this.$scope.showGCE == true) {
                counter += 1;
            }
            if (counter <= 2) {
                this.$scope.columnSize = "col-md-12";
            }
            else {
                this.$scope.columnSize = "col-md-6";
            }
        };
        AdmissionStatistics.prototype.switchOnOffContent = function (type) {
            var defer = this.$q.defer();
            if (type == 'ga') {
                this.$scope.showGA = !this.$scope.showGA;
            }
            else if (type == 'ff') {
                this.$scope.showFF = !this.$scope.showFF;
            }
            else if (type == 'ra') {
                this.$scope.showRA = !this.$scope.showRA;
            }
            else {
                this.$scope.showGCE = !this.$scope.showGCE;
            }
            defer.resolve("done");
            return defer.promise;
        };
        AdmissionStatistics.prototype.increaseFontSize = function () {
            this.$scope.fontSize = this.$scope.fontSize + 1;
            angular.element(".overlay-content").css('font-size', this.$scope.fontSize + "px");
        };
        AdmissionStatistics.prototype.decreaseFontSize = function () {
            this.$scope.fontSize = this.$scope.fontSize - 1;
            angular.element(".overlay-content").css('font-size', this.$scope.fontSize + "px");
        };
        AdmissionStatistics.prototype.getFaculties = function () {
            var _this = this;
            this.facultyService.getAllFaculties().then(function (faculties) {
                _this.$scope.faculties = [];
                for (var i = 0; i < faculties.length; i++) {
                    if (faculties[i].shortName != 'BUSINESS') {
                        _this.$scope.faculties.push(faculties[i]);
                    }
                }
                _this.$scope.faculty = faculties[0];
            });
        };
        AdmissionStatistics.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.$scope.programType.id, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.$scope.semesters = [];
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.$scope.semester = semesters[i];
                    }
                    _this.$scope.semesters.push(semesters[i]);
                }
            });
        };
        AdmissionStatistics.prototype.searchStatistics = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.getStatistics();
            console.log(this.$interval);
            this.$interval(function () {
                _this.getStatistics();
            }, 15000);
        };
        AdmissionStatistics.prototype.getStatistics = function () {
            this.getGLStatistics();
            this.getFFStatistics();
            this.getRAStatistics();
            this.getGCEStatistics();
        };
        AdmissionStatistics.prototype.initializeQuota = function () {
            this.$scope.quota = [];
            this.$scope.quota.push("RA");
            this.$scope.quota.push("GL");
            this.$scope.quota.push("FF");
            this.$scope.quota.push("GCE");
        };
        AdmissionStatistics.prototype.getFFStatistics = function () {
            var _this = this;
            //this.$scope.ffStatistics=[];
            var ffStatistics = this.$scope.ffStatistics;
            this.admissionStudentService.fetchStatistics(this.$scope.semester.id, +this.$scope.programType.id, ums.Utils.FREEDOM_FIGHTER, this.$scope.faculty.shortName).then(function (data) {
                for (var i = 0; i < data.length; i++) {
                    if (!ffStatistics[i]) {
                        ffStatistics.push(data[i]);
                    }
                    else {
                        ffStatistics[i] = data[i];
                    }
                }
                _this.$scope.ffStatistics = data;
            });
        };
        AdmissionStatistics.prototype.getRAStatistics = function () {
            var raStatistics = this.$scope.raStatistics;
            this.admissionStudentService.fetchStatistics(this.$scope.semester.id, +this.$scope.programType.id, ums.Utils.REMOTE_AREA, this.$scope.faculty.shortName).then(function (data) {
                for (var i = 0; i < data.length; i++) {
                    if (!raStatistics[i]) {
                        raStatistics.push(data[i]);
                    }
                    else {
                        raStatistics[i] = data[i];
                    }
                }
            });
        };
        AdmissionStatistics.prototype.getGLStatistics = function () {
            var glStatistics = this.$scope.glStatistics;
            this.admissionStudentService.fetchStatistics(this.$scope.semester.id, +this.$scope.programType.id, ums.Utils.GENERAL, this.$scope.faculty.shortName).then(function (data) {
                for (var i = 0; i < data.length; i++) {
                    if (!glStatistics[i]) {
                        glStatistics.push(data[i]);
                    }
                    else {
                        glStatistics[i] = data[i];
                    }
                }
            });
        };
        AdmissionStatistics.prototype.getGCEStatistics = function () {
            var gceStatistics = this.$scope.gceStatistics;
            this.admissionStudentService.fetchStatistics(this.$scope.semester.id, +this.$scope.programType.id, ums.Utils.ENGLISH_MEDIUM, this.$scope.faculty.shortName).then(function (data) {
                for (var i = 0; i < data.length; i++) {
                    if (!gceStatistics[i]) {
                        gceStatistics.push(data[i]);
                    }
                    else {
                        gceStatistics[i] = data[i];
                    }
                }
            });
        };
        AdmissionStatistics.$inject = ['appConstants', 'HttpClient', '$scope', '$interval', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'admissionStudentService'];
        return AdmissionStatistics;
    }());
    ums.UMS.controller("AdmissionStatistics", AdmissionStatistics);
})(ums || (ums = {}));
/**
 * Created by My Pc on 31-Jan-17.
 */
var ums;
(function (ums) {
    var AdmissionMigrationList = (function () {
        function AdmissionMigrationList(appConstants, httpClient, $scope, $q, notify, $sce, $window, semesterService, facultyService, admissionStudentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.admissionStudentService = admissionStudentService;
            $scope.programTypes = appConstants.programType;
            $scope.programType = $scope.programTypes[0];
            $scope.searchSpinner = false;
            $scope.disableSaveButton = true;
            $scope.showFileUploadSection = false;
            $scope.showSpinner = false;
            $scope.showMainSection = false;
            $scope.showAddButton = false;
            $scope.migrationStudents = [];
            $scope.meritTypes = [];
            $scope.meritTypes = this.appConstants.meritListTypes;
            $scope.meritType = this.$scope.meritTypes[0];
            $scope.data = {
                settings: {
                    colHeaders: true,
                    rowHeaders: true,
                    currentRowClassName: 'currentRow',
                    currentColClassName: 'currentCol',
                    fillHandle: false,
                    manualRowResize: true,
                    manualColumnResize: true,
                    columnSorting: true,
                    sortIndicator: true,
                    stretchH: 'all',
                    readOnly: true,
                    height: $(".page-content").height() - 5,
                    observeChanges: true,
                    search: true,
                    columns: [
                        { "title": "Receipt Id", "data": "receiptId" },
                        { "title": "Student Name", "data": "studentName" },
                        { "title": "Merit Sl No.", "data": "meritSlNo" },
                        { "title": "Quota", "data": "quota" },
                        { "title": "Unit", "data": "unit" },
                        { "title": "Migration Status", "data": "migrationDes" },
                        { "title": "Admission Deadline", "data": "deadline" }
                    ]
                }
            };
            $scope.fetchTaletalkData = this.fetchTaletalkData.bind(this);
            $scope.fetchMigrationData = this.fetchMigrationData.bind(this);
            $scope.fetchExcelFormat = this.fetchExcelFormat.bind(this);
            $scope.processData = this.processData.bind(this);
            $scope.saveData = this.saveData.bind(this);
            $scope.assignDeadline = this.assignDeadline.bind(this);
            $scope.addData = this.addData.bind(this);
            this.getSemesters();
        }
        AdmissionMigrationList.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.$scope.programType.id, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.$scope.semesters = [];
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.$scope.semester = semesters[i];
                    }
                    _this.$scope.semesters.push(semesters[i]);
                }
            });
        };
        AdmissionMigrationList.prototype.fetchTaletalkData = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.$scope.showMainSection = true;
            console.log("Show main section");
            console.log(this.$scope.showMainSection);
            this.$scope.modalData = {};
            this.$scope.modalData = "";
            this.$scope.searchSpinner = true;
            this.$scope.admissionStudents = [];
            this.$scope.admissionStudentMap = {};
            this.admissionStudentService.fetchTaletalkData(this.$scope.semester.id, +this.$scope.programType.id).then(function (admissionStudents) {
                for (var i = 0; i < admissionStudents.length; i++) {
                    admissionStudents[i].quota = _this.$scope.meritType.name;
                    _this.$scope.admissionStudents.push(admissionStudents[i]);
                    _this.$scope.admissionStudentMap[admissionStudents[i].receiptId] = admissionStudents[i];
                }
                _this.fetchMigrationData();
            });
        };
        AdmissionMigrationList.prototype.addDate = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 100);
        };
        AdmissionMigrationList.prototype.addData = function () {
            this.$scope.showFileUploadSection = true;
            this.$scope.showAddButton = false;
        };
        AdmissionMigrationList.prototype.assignDeadline = function (deadLine) {
            this.$scope.deadline = deadLine;
            console.log("###########");
            console.log(deadLine);
        };
        AdmissionMigrationList.prototype.fetchMigrationData = function () {
            var _this = this;
            this.$scope.migrationStudents = [];
            this.admissionStudentService.fetchMigrationData(this.$scope.semester.id, this.$scope.meritType.name).then(function (data) {
                _this.$scope.migrationStudents = data;
                console.log("Fetched migration students");
                console.log(_this.$scope.migrationStudents);
                _this.configureViewSection();
                _this.$scope.searchSpinner = false;
            });
        };
        AdmissionMigrationList.prototype.configureViewSection = function () {
            if (this.$scope.migrationStudents.length > 0) {
                this.$scope.showAddButton = true;
                this.$scope.showFileUploadSection = false;
                this.$scope.showSpinner = false;
            }
            else {
                this.$scope.showFileUploadSection = true;
            }
        };
        AdmissionMigrationList.prototype.fetchExcelFormat = function () {
            this.admissionStudentService.downloadMigrationListXlsFile();
        };
        AdmissionMigrationList.prototype.processData = function (modalData) {
            var _this = this;
            console.log("modal data ----->");
            console.log(modalData);
            this.$scope.disableSaveButton = false;
            this.$scope.migrationStudents = [];
            this.$scope.searchSpinner = false;
            this.addDate();
            this.fillUpAdmissionStudents(modalData).then(function (students) {
                console.log("Modal students");
                console.log(students);
                _this.$scope.showFileUploadSection = false;
            });
        };
        AdmissionMigrationList.prototype.fillUpAdmissionStudents = function (modalData) {
            var defer = this.$q.defer();
            var rows = modalData.split("\n");
            var counter = 0;
            for (var r in rows) {
                var cells = rows[r].split('\t');
                if (+r == 0 && cells.length > 1 || cells.length < 1) {
                    this.notify.error("Wrong format, please paste the excel data again");
                    break;
                }
                else {
                    if (+r != 0) {
                        this.insertDataIntoAdmissionStudents(cells);
                    }
                }
            }
            this.$scope.showSpinner = false;
            defer.resolve(this.$scope.admissionStudents);
            return defer.promise;
        };
        AdmissionMigrationList.prototype.insertDataIntoAdmissionStudents = function (cellData) {
            var receiptId = cellData[0];
            console.log(receiptId);
            console.log("Cell data");
            console.log(cellData);
            var student = this.$scope.admissionStudentMap[receiptId];
            console.log("Student from map");
            console.log(student);
            student.migrationStatus = ums.Utils.MIGRATION_ABLE;
            student.migrationDes = "Migration-able";
            this.$scope.migrationStudents.push(student);
            console.log(this.$scope.migrationStudents);
        };
        AdmissionMigrationList.prototype.saveData = function () {
            var _this = this;
            this.$scope.disableSave = true;
            if (this.$scope.deadline == "" || this.$scope.deadline == null) {
                this.notify.error("Deadline is not selected");
                this.$scope.disableSave = false;
            }
            else {
                this.convertToJson().then(function (json) {
                    _this.admissionStudentService.saveMigrationData(json).then(function (message) {
                        _this.$scope.disableSave = false;
                        _this.fetchMigrationData();
                    });
                });
            }
        };
        AdmissionMigrationList.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            console.log("deadline");
            console.log(this.$scope.deadline);
            var students = this.$scope.migrationStudents;
            for (var i = 0; i < students.length; i++) {
                var item = {};
                item['receiptId'] = students[i].receiptId;
                item['semesterId'] = this.$scope.semester.id;
                item['deadline'] = this.$scope.deadline;
                item['quota'] = this.$scope.meritType.name;
                jsonObject.push(item);
            }
            completeJson['entries'] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        AdmissionMigrationList.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'admissionStudentService'];
        return AdmissionMigrationList;
    }());
    ums.UMS.controller("AdmissionMigrationList", AdmissionMigrationList);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionCancellation = (function () {
        function AdmissionCancellation(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, admissionStudentService, $stateParams, $state, $location) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.admissionStudentService = admissionStudentService;
            this.$stateParams = $stateParams;
            this.$state = $state;
            this.$location = $location;
            this.admissionStatusAdmitted = 2;
            this.admissionStatusAdmissionCandidate = 1;
            this.admissionStatusNotAdmitted = 3;
            this.admissionStatusCancelled = 4;
            if (this.$location.search().studentId) {
                this.studentId = this.$location.search().studentId;
                this.fetchStudent();
            }
        }
        AdmissionCancellation.prototype.fetchStudent = function () {
            var _this = this;
            if (this.$location.search().studentId == null) {
                console.log('In the go section');
                if (this.studentId != null)
                    this.$location.path('admissionCancellation').search('studentId', this.studentId);
            }
            else {
                this.admissionStudentService.fetchAdmissionStudentByStudentId(this.$location.search().studentId).then(function (admissionStudent) {
                    _this.admissionStudent = admissionStudent;
                    _this.semesterService.getSemesterById(_this.admissionStudent.semesterId).then(function (semester) {
                        _this.semester = semester;
                        console.log('semester');
                        console.log(_this.semester);
                    });
                });
            }
        };
        AdmissionCancellation.prototype.cancelAdmission = function () {
            var _this = this;
            this.admissionStudentService.cancelAdmission(this.studentId).then(function (success) {
                _this.fetchStudent();
            });
        };
        AdmissionCancellation.prototype.goToCancelList = function () {
            this.$location.url("admissionCancellationList");
        };
        AdmissionCancellation.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'admissionStudentService', '$stateParams', '$state', '$location'];
        return AdmissionCancellation;
    }());
    ums.AdmissionCancellation = AdmissionCancellation;
    ums.UMS.controller("AdmissionCancellation", AdmissionCancellation);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionCancellationList = (function () {
        function AdmissionCancellationList(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, admissionStudentService, $stateParams, $state, $location) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.admissionStudentService = admissionStudentService;
            this.$stateParams = $stateParams;
            this.$state = $state;
            this.$location = $location;
            this.programTypes = appConstants.programType;
            this.programType = this.programTypes[0];
            this.fetchSemester();
            this.gridOptions = {
                enableGridMenu: true,
                enableSelectAll: true,
                enableRowHeaderSelection: false,
                enableSorting: true,
                enableFiltering: true,
                enableColumnMenus: true,
                appScopeProvider: this,
                exporterCsvFilename: 'admission_cancel_list.csv',
                exporterMenuExcel: false,
                columnDefs: [
                    { name: 'S/L', field: 'serialNo' },
                    { name: 'Merit Sl No', field: 'meritSerialNo' },
                    { name: 'Quota', field: 'quota' },
                    { name: 'Application SL No/ Receipt Id', field: 'applicationSerialNo' },
                    { name: 'Student Id', field: 'studentId' },
                    { name: 'Student Name', field: 'studentName' },
                    { name: 'Program', field: 'programShortName' }
                ]
            };
        }
        AdmissionCancellationList.prototype.fetchSemester = function () {
            var _this = this;
            console.log('fetching semester');
            this.semesterService.fetchSemesters(+this.programType.id, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesterList = [];
                _this.semesterList = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2 || semesters[i].status == 1) {
                        _this.semesterId = semesters[i].id;
                        _this.semester = semesters[i];
                        console.log('setting semester id --->' + _this.semesterId);
                        _this.fetchData();
                        break;
                    }
                }
                /* if(this.$location.search().semesterId){
                     console.log(' semester id found');
                     this.semesterId = this.$location.search().semesterId;
                     this.semesterService.getSemesterById(this.semesterId).then((s:Semester)=>this.semester = s);
                     this.fetchData();
                 }*/
            });
        };
        AdmissionCancellationList.prototype.back = function () {
            window.history.back();
        };
        AdmissionCancellationList.prototype.fetchData = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.admissionStudentService.fetchCancellationData(this.semester.id).then(function (cancellationData) {
                _this.admissionCancellation = [];
                _this.admissionCancellation = cancellationData;
                _this.gridOptions.data = {};
                _this.gridOptions.data = cancellationData;
            });
        };
        AdmissionCancellationList.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'admissionStudentService', '$stateParams', '$state', '$location'];
        return AdmissionCancellationList;
    }());
    ums.AdmissionCancellationList = AdmissionCancellationList;
    ums.UMS.controller("AdmissionCancellationList", AdmissionCancellationList);
})(ums || (ums = {}));
/**
 * Created by Monjur-E-Morshed on 05-Jan-17.
 */
var ums;
(function (ums) {
    var AdmissionDepartmentSelection = (function () {
        function AdmissionDepartmentSelection(appConstants, httpClient, $scope, $q, notify, $sce, $window, semesterService, facultyService, admissionStudentService, programService, $timeout) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.admissionStudentService = admissionStudentService;
            this.programService = programService;
            this.$timeout = $timeout;
            $scope.gridOpts = {};
            //$scope.datePickerOptions = <DatepickerOptions>{};
            $scope.programTypes = appConstants.programType;
            $scope.programType = $scope.programTypes[0];
            $scope.getSemesters = this.getSemesters.bind(this);
            $scope.getProgramsAndStatistics = this.getProgramsAndStatistics.bind(this);
            $scope.searchByMeritSerialNo = this.searchByMeritSerialNo.bind(this);
            $scope.saveAndRetrieveNext = this.saveAndRetrieveNext.bind(this);
            $scope.showSearchBar = this.showSearchBar.bind(this);
            $scope.assignDeadline = this.assignDeadline.bind(this);
            $scope.checkForSameSelectedPrograms = this.checkForSameSelectedPrograms.bind(this);
            $scope.saveOnly = this.saveOnly.bind(this);
            $scope.enableReportSection = this.enableReportSection.bind(this);
            $scope.enableDepartmentSelectionSection = this.enableDepartmentSelectionSection.bind(this);
            $scope.focusOnSearchBar = this.focusOnSearchBar.bind(this);
            $scope.focusOnMeritProgramSelection = this.focusOnMeritProgramSelection.bind(this);
            $scope.focusOnWaitingProgramSelection = this.focusOnWaitingProgramSelection.bind(this);
            $scope.saveWithChecking = this.saveWithChecking.bind(this);
            $scope.saveWithoutChecking = this.saveWithoutChecking.bind(this);
            $scope.showWindowedView = this.showWindowedView.bind(this);
            $scope.showSheetLikeView = this.showSheetLikeView.bind(this);
            $scope.submitMeritRange = this.submitMeritRange.bind(this);
            $scope.assignFromMeritSerialNumber = this.assignfromMeritSerialNumber.bind(this);
            $scope.assignToMeritSerialNumber = this.assignToMeritSerialNumber.bind(this);
            $scope.saveStudent = this.saveStudent.bind(this);
            $scope.assignSelectedProgram = this.assignSelectedProgram.bind(this);
            $scope.assignWaitingProgram = this.assignWaitingProgram.bind(this);
            $scope.receiptId = "";
            this.getFaculties();
            this.getSemesters();
            this.getMeritListTypes();
        }
        AdmissionDepartmentSelection.prototype.showSheetLikeView = function () {
            this.$scope.showSheetStyle = true;
            this.getStatistics();
            this.addDate();
        };
        AdmissionDepartmentSelection.prototype.showWindowedView = function () {
            this.$scope.showSheetStyle = false;
        };
        AdmissionDepartmentSelection.prototype.assignfromMeritSerialNumber = function (fromMeritSerialNumber) {
            this.$scope.fromMeritSerialNumber = fromMeritSerialNumber;
        };
        AdmissionDepartmentSelection.prototype.assignToMeritSerialNumber = function (toMeritSerialNumber) {
            this.$scope.toMeritSerialNumber = toMeritSerialNumber;
        };
        AdmissionDepartmentSelection.prototype.submitMeritRange = function () {
            var _this = this;
            console.log(this.$scope.fromMeritSerialNumber);
            console.log(this.$scope.toMeritSerialNumber);
            if (this.$scope.fromMeritSerialNumber != null || this.$scope.toMeritSerialNumber != null) {
                this.admissionStudentService.fetchStudentsByMeritRange(this.$scope.semester.id, +this.$scope.meritType.id, this.$scope.fromMeritSerialNumber, this.$scope.toMeritSerialNumber).then(function (students) {
                    _this.$scope.admissionStudents = [];
                    console.log("Students...");
                    console.log(students);
                    for (var i = 0; i < students.length; i++) {
                        if (students[i].programIdByMerit != null)
                            students[i].selectedProgram = _this.$scope.programMap[students[i].programIdByMerit];
                        else {
                            students[i].selectedProgram = _this.$scope.programs[0];
                        }
                        if (students[i].programIdByTransfer != null)
                            students[i].waitingProgram = _this.$scope.programMap[students[i].programIdByTransfer];
                        else {
                            students[i].waitingProgram = _this.$scope.programs[0];
                        }
                        _this.$scope.admissionStudents.push(students[i]);
                        console.log(students[i]);
                    }
                });
            }
            else {
                this.notify.error("Select merit range properly");
            }
        };
        AdmissionDepartmentSelection.prototype.focusOnSearchBar = function () {
            this.$timeout(function () {
                $("#searchBar").focus();
                $("#meritSerialNumberLabel").css("color", "blue");
                $("#waitingProgramLabel").css("color", "black");
                $("#selectedProgramLabel").css("color", "black");
            }, 100);
        };
        AdmissionDepartmentSelection.prototype.focusOnMeritProgramSelection = function () {
            this.$scope.focusSearch = false;
            this.$scope.focusMeritProgramSelection = true;
            this.$scope.focusWaitingProgramSelection = false;
            this.$timeout(function () {
                $("#selectedProgram").focus();
                $("#meritSerialNumberLabel").css("color", "black");
                $("#waitingProgramLabel").css("color", "black");
                $("#selectedProgramLabel").css("color", "blue");
                console.log("IN the merit program");
            }, 100);
            console.log("In the merit program outer");
        };
        AdmissionDepartmentSelection.prototype.focusOnWaitingProgramSelection = function () {
            this.$timeout(function () {
                $("#waitingProgram").focus();
                $("#meritSerialNumberLabel").css("color", "black");
                $("#waitingProgramLabel").css("color", "blue");
                $("#selectedProgramLabel").css("color", "black");
                console.log("In the waiting program");
            }, 100);
            console.log("In the waiting program outer");
        };
        AdmissionDepartmentSelection.prototype.enableReportSection = function () {
            this.$scope.showReportSection = true;
        };
        AdmissionDepartmentSelection.prototype.enableDepartmentSelectionSection = function () {
            this.$scope.showReportSection = false;
        };
        AdmissionDepartmentSelection.prototype.saveWithChecking = function () {
            this.$scope.showModal = true;
        };
        AdmissionDepartmentSelection.prototype.saveWithoutChecking = function () {
            this.$scope.showModal = false;
        };
        AdmissionDepartmentSelection.prototype.assignDeadline = function (deadLine) {
            this.$scope.deadLine = deadLine;
            console.log("Deadline");
            console.log(deadLine);
            console.log(this.$scope.deadLine);
        };
        AdmissionDepartmentSelection.prototype.showSearchBar = function () {
            this.$scope.showSearch = true;
        };
        AdmissionDepartmentSelection.prototype.getProgramsAndStatistics = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.$scope.admissionStudents = [];
            this.$scope.showStudentPortion = false;
            this.$scope.showSearch = true;
            this.$scope.disableSaveButton = false;
            this.$scope.showReportSection = false;
            this.$scope.focusSearch = false;
            this.$scope.focusMeritProgramSelection = false;
            this.$scope.focusWaitingProgramSelection = false;
            this.$scope.showSheetStyle = false;
            this.$scope.showModal = true;
            this.$scope.selectedProgramIdClr = 0;
            this.$scope.waitingProgramIdClr = 0;
            this.$scope.fromMeritSerialNumber = 0;
            this.$scope.toMeritSerialNumber = 0;
            if (this.$scope.deadLine == undefined) {
                this.$scope.deadLine = "";
            }
            this.$scope.selectionBackground = "white";
            this.$scope.statisticsColor = "white";
            var unit = this.getUnit();
            this.getPrograms().then(function (programs) {
                _this.getStatistics();
            });
        };
        AdmissionDepartmentSelection.prototype.assignStudentsToMaps = function (students) {
            var defer = this.$q.defer();
            this.$scope.admissionStudents = [];
            this.$scope.receiptIdMap = {};
            this.$scope.meritMap = {};
            for (var i = 0; i < students.length; i++) {
                students[i].text = String(students[i].meritSlNo);
                students[i].selectedProgram = this.$scope.programMap[students[i].programIdByMerit];
                students[i].waitingProgram = this.$scope.programMap[students[i].programIdByTransfer];
                this.$scope.admissionStudents.push(students[i]);
                this.$scope.receiptIdMap[students[i].receiptId] = students[i];
                this.$scope.meritMap[students[i].meritSlNo] = students[i];
            }
            defer.resolve(students);
            return defer.promise;
        };
        AdmissionDepartmentSelection.prototype.getPrograms = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.programService.fetchProgram(+this.$scope.programType.id).then(function (programs) {
                _this.$scope.programs = [];
                _this.$scope.selectionPrograms = [];
                var program = {};
                program.id = 0;
                program.shortName = "Select A Program";
                _this.$scope.programs.push(program);
                _this.$scope.programMap = {};
                console.log("---programs---");
                console.log(programs);
                for (var i = 0; i < programs.length; i++) {
                    if (programs[i].id != 110200) {
                        _this.$scope.programs.push(programs[i]);
                        _this.$scope.selectionPrograms.push(programs[i]);
                        _this.$scope.programMap[programs[i].id] = programs[i];
                    }
                }
                /*this.$scope.waitingProgram=programs[0];
                this.getSelectedProgram();*/
                defer.resolve(_this.$scope.programs);
            });
            return defer.promise;
        };
        AdmissionDepartmentSelection.prototype.getSelectedProgram = function () {
            for (var i = 0; i < this.$scope.statistics.length; i++) {
                if (this.$scope.statistics[i].remaining > 0) {
                    this.$scope.selectedProgram = this.$scope.programMap[this.$scope.statistics[i].programId];
                    break;
                }
            }
        };
        AdmissionDepartmentSelection.prototype.getStatistics = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.admissionStudentService.fetchStatistics(this.$scope.semester.id, +this.$scope.programType.id, +this.$scope.meritType.id, "ENGINEERING").then(function (students) {
                _this.$scope.statistics = [];
                _this.$scope.statisticsMap = {};
                for (var i = 0; i < students.length; i++) {
                    _this.$scope.statistics.push(students[i]);
                    _this.$scope.statisticsMap[students[i].programId] = students[i];
                }
                _this.makeStatistisChangeBlink();
                defer.resolve(_this.$scope.statistics);
            });
            return defer.promise;
        };
        AdmissionDepartmentSelection.prototype.removeProgramsFromSelectionList = function (programId) {
            console.log("selection programs");
            console.log(this.$scope.selectionPrograms);
            for (var i = 0; i < this.$scope.selectionPrograms.length; i++) {
                if (this.$scope.selectionPrograms[i].id == programId) {
                    this.$scope.selectionPrograms.splice(i, 1);
                    break;
                }
            }
        };
        AdmissionDepartmentSelection.prototype.searchByMeritSerialNo = function (meritSerialNo) {
            var _this = this;
            this.$scope.meritSerialNo = angular.copy(meritSerialNo);
            $("#searchBar").focus();
            console.log(meritSerialNo);
            console.log("merit serial no from scope-xxx");
            console.log(this.$scope.meritSerialNo);
            if (meritSerialNo != "" || meritSerialNo != null || String(meritSerialNo) != "0") {
                this.admissionStudentService.fetchAdmissionStudentByMeritSerialNo(this.$scope.semester.id, +this.$scope.meritType.id, +meritSerialNo).then(function (student) {
                    console.log("Receipt id student");
                    console.log(student);
                    _this.$scope.selectedStudent = {};
                    _this.$scope.selectedStudent = student;
                    _this.$scope.showStudentPortion = true;
                    _this.$scope.selectedStudent.waitingProgram = _this.$scope.programMap[student.programIdByTransfer];
                    if (student.programIdByMerit != null || student.programIdByTransfer != null) {
                        _this.$scope.selectionBackground = "lightsalmon";
                        if (student.deadline == null) {
                            //this.$scope.deadLine="";
                        }
                        else {
                            _this.$scope.deadLine = student.deadline;
                        }
                    }
                    else {
                        _this.$scope.selectionBackground = "white";
                    }
                    _this.assignSelectedAndWaitingProgram();
                    //this.getSelectedProgram();
                });
            }
        };
        AdmissionDepartmentSelection.prototype.assignSelectedAndWaitingProgram = function () {
            var defer = this.$q.defer();
            if (this.$scope.selectedStudent.programIdByMerit != null) {
                this.$scope.selectedStudent.selectedProgram = this.$scope.programMap[this.$scope.selectedStudent.programIdByMerit];
            }
            else {
                this.$scope.selectedStudent.selectedProgram = this.$scope.programs[0];
            }
            if (this.$scope.selectedStudent.programIdByTransfer != null) {
                this.$scope.selectedStudent.waitingProgram = this.$scope.programMap[this.$scope.selectedStudent.programIdByTransfer];
            }
            else {
                this.$scope.selectedStudent.waitingProgram = this.$scope.programs[0];
            }
            defer.resolve(this.$scope.selectedStudent);
            return defer.promise;
        };
        AdmissionDepartmentSelection.prototype.getUnit = function () {
            var unit = "";
            if (this.$scope.faculty.shortName == 'BUSINESS') {
                unit = "BBA";
            }
            else {
                unit = "ENGINEERING";
            }
            return unit;
        };
        AdmissionDepartmentSelection.prototype.addDate = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 40);
        };
        AdmissionDepartmentSelection.prototype.initializeSelect2 = function (selectBoxId, studentIds, placeHolderText) {
            var data = studentIds;
            $("#" + selectBoxId).select2({
                minimumInputLength: 0,
                query: function (options) {
                    var pageSize = 100;
                    var startIndex = (options.page - 1) * pageSize;
                    var filteredData = data;
                    if (options.term && options.term.length > 0) {
                        if (!options.context) {
                            var term = options.term.toLowerCase();
                            options.context = data.filter(function (metric) {
                                return (metric.id.indexOf(term) !== -1);
                            });
                        }
                        filteredData = options.context;
                    }
                    options.callback({
                        context: filteredData,
                        results: filteredData.slice(startIndex, startIndex + pageSize),
                        more: (startIndex + pageSize) < filteredData.length
                    });
                },
                placeholder: placeHolderText
            });
        };
        AdmissionDepartmentSelection.prototype.getMeritListTypes = function () {
            this.$scope.meritTypes = [];
            this.$scope.meritTypes = this.appConstants.meritListTypes;
            this.$scope.meritType = this.$scope.meritTypes[0];
        };
        AdmissionDepartmentSelection.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.$scope.programType.id, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.$scope.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.$scope.semester = semesters[i];
                        break;
                    }
                }
            });
        };
        AdmissionDepartmentSelection.prototype.getFaculties = function () {
            var _this = this;
            this.facultyService.getAllFaculties().then(function (faculties) {
                _this.$scope.faculties = [];
                for (var i = 0; i < faculties.length; i++) {
                    _this.$scope.faculties.push(faculties[i]);
                }
                _this.$scope.faculty = faculties[0];
            });
        };
        AdmissionDepartmentSelection.prototype.checkForSameSelectedProgramsForWaiting = function (student) {
            this.$scope.selectedStudent = student;
            if (this.$scope.selectedStudent.selectedProgram.id != 0 &&
                this.$scope.selectedStudent.waitingProgram.id != 0) {
                if (this.$scope.selectedStudent.selectedProgram.id == this.$scope.selectedStudent.waitingProgram.id) {
                    this.$scope.disableSaveButton = true;
                    this.notify.error("Both Selected program and Waiting program can't be same");
                }
                else {
                    this.$scope.disableSaveButton = false;
                }
            }
            else {
                this.$scope.disableSaveButton = false;
            }
            console.log("students");
            console.log(student);
        };
        AdmissionDepartmentSelection.prototype.checkForSameSelectedPrograms = function (student) {
            this.$scope.selectedStudent = student;
            if (this.$scope.selectedStudent.selectedProgram.id != 0 &&
                this.$scope.selectedStudent.waitingProgram.id != 0) {
                if (this.$scope.selectedStudent.selectedProgram.id == this.$scope.selectedStudent.waitingProgram.id) {
                    this.$scope.disableSaveButton = true;
                    this.notify.error("Both Selected program and Waiting program can't be same");
                }
                else {
                    this.$scope.disableSaveButton = false;
                }
            }
            else {
                this.$scope.disableSaveButton = false;
            }
            console.log("students");
            console.log(student);
            if (!this.$scope.disableSaveButton)
                this.checkIfEmptyProgramIsSelected();
        };
        AdmissionDepartmentSelection.prototype.checkIfEmptyProgramIsSelected = function () {
            console.log("I am inn");
            if (this.$scope.statisticsMap[this.$scope.selectedStudent.selectedProgram.id].remaining <= 0) {
                this.$scope.disableSaveButton = true;
                this.notify.error("No seat remaining for the selected program");
            }
            else {
                this.$scope.disableSaveButton = false;
            }
        };
        AdmissionDepartmentSelection.prototype.checkIfEmptyProgramIsSelectedDuringSave = function (programId) {
            if (this.$scope.statisticsMap[programId] != undefined && this.$scope.statisticsMap[programId].remaining <= 0) {
                this.$scope.disableSaveButton = true;
                this.notify.error("No seat remaining for the selected program");
                return false;
            }
            else {
                this.$scope.disableSaveButton = false;
                return true;
            }
        };
        AdmissionDepartmentSelection.prototype.saveAndRetrieveNext = function () {
            var _this = this;
            var that = this;
            if (this.$scope.deadLine == "") {
                this.notify.error("Deadline is not selected");
            }
            else {
                this.convertToJson().then(function (json) {
                    _this.admissionStudentService.saveAndFetchNextStudentForDepartmentSelection(_this.$scope.departmentSelectionStatus, json).then(function (data) {
                        _this.$scope.selectedStudent = data[0];
                        _this.$scope.receiptId = "";
                        _this.$scope.receiptId = _this.$scope.selectedStudent.receiptId;
                        that.$scope.meritSerialNo = _this.$scope.selectedStudent.meritSlNo + "";
                        console.log("Merit serial no of the scope");
                        console.log(_this.$scope.meritSerialNo);
                        _this.$scope.testVar = _this.$scope.selectedStudent.meritSlNo + "";
                        if (_this.$scope.selectedStudent.programIdByMerit == null) {
                            _this.$scope.selectedStudent.selectedProgram = _this.$scope.programs[0];
                        }
                        if (_this.$scope.selectedStudent.programIdByTransfer == null) {
                            _this.$scope.selectedStudent.waitingProgram = _this.$scope.programs[0];
                        }
                        //$("#searchByReceiptId").val(this.$scope.receiptId).trigger("change");
                        _this.getStatistics();
                        _this.$scope.showSearch = false;
                        //this.initializeSelect2("searchByReceiptId",this.$scope.admissionStudents,"");
                    });
                });
            }
        };
        AdmissionDepartmentSelection.prototype.makeStatistisChangeBlink = function () {
            var _this = this;
            this.$scope.statisticsColor = "yellow";
            this.$timeout(function () {
                _this.$scope.statisticsColor = "";
            }, 2500);
        };
        AdmissionDepartmentSelection.prototype.assignSelectedProgram = function (student, programId) {
            this.$scope.selectedProgram = this.$scope.programMap[programId];
            this.checkForSameSelectedPrograms(student);
        };
        AdmissionDepartmentSelection.prototype.assignWaitingProgram = function (student, programId) {
            console.log("In waiting program");
            this.$scope.waitingProgram = this.$scope.programMap[programId];
            this.checkForSameSelectedProgramsForWaiting(student);
        };
        AdmissionDepartmentSelection.prototype.saveStudent = function (student) {
            console.log("Student ------");
            console.log(student);
            console.log('deadline');
            console.log(this.$scope.deadLine);
            if (this.checkIfEmptyProgramIsSelectedDuringSave(student.selectedProgram.id)) {
                this.$scope.meritSerialNo = "" + student.meritSlNo;
                this.$scope.selectedStudent = student;
                this.$scope.selectedStudent = student;
                this.$scope.selectedStudent.deadline = this.$scope.deadLine;
                this.saveOnly();
            }
        };
        AdmissionDepartmentSelection.prototype.saveOnly = function () {
            var _this = this;
            if (this.$scope.selectedStudent.selectedProgram.id != 0 && this.$scope.deadLine == "" || this.$scope.deadLine == null) {
                this.notify.error("Deadline is not selected");
            }
            else if (this.$scope.selectedStudent.selectedProgram === this.$scope.waitingProgram) {
                this.notify.error("Both program can't be same");
            }
            else {
                this.convertToJson().then(function (json) {
                    _this.admissionStudentService.saveAndFetchNextStudentForDepartmentSelection(_this.$scope.departmentSelectionStatus, json).then(function (data) {
                        console.log("in save only");
                        _this.searchByMeritSerialNo(String(_this.$scope.meritSerialNo));
                        _this.getStatistics();
                        _this.$scope.showSearch = false;
                        _this.$scope.selectedProgram = {};
                        _this.$scope.waitingProgram = {};
                        _this.initializeSelect2("searchByReceiptId", _this.$scope.admissionStudents, "");
                    });
                });
            }
        };
        AdmissionDepartmentSelection.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            var students = this.$scope.selectedStudent;
            console.log("Saving students");
            console.log(students);
            var item = {};
            item['semesterId'] = students.semesterId;
            item['meritSlNo'] = students.meritSlNo;
            item['receiptId'] = students.receiptId;
            item['admissionRoll'] = students.admissionRoll;
            item['programType'] = +this.$scope.programType.id;
            item['unit'] = students.unit;
            item['quota'] = students.quota;
            item['deadline'] = this.$scope.deadLine;
            if (students.selectedProgram.id != 0) {
                item['programIdByMerit'] = students.selectedProgram.id;
                this.$scope.selectedProgramIdClr = students.selectedProgram.id;
            }
            else {
                this.$scope.selectedProgramIdClr = 111;
            }
            if (students.waitingProgram.id != 0 || students.waitingProgram.id != null) {
                item['programIdByTransfer'] = students.waitingProgram.id;
                this.$scope.waitingProgramIdClr = students.waitingProgram.id;
            }
            else {
                this.$scope.waitingProgramIdClr = 111;
            }
            if (this.$scope.selectedStudent.selectedProgram.id != 0 || this.$scope.selectedStudent.waitingProgram.id != 0) {
                item['presentStatus'] = ums.Utils.PRESENT;
                if (this.$scope.selectedStudent.selectedProgram.id != 0 && this.$scope.selectedStudent.waitingProgram.id == 0) {
                    item['departmentSelectionType'] = ums.Utils.MERIT_PROGRAM_SELECTED;
                    this.$scope.departmentSelectionStatus = ums.Utils.MERIT_PROGRAM_SELECTED;
                }
                else if (this.$scope.selectedStudent.selectedProgram.id != 0 && this.$scope.selectedStudent.waitingProgram.id != 0) {
                    item['departmentSelectionType'] = ums.Utils.MERIT_WAITING_PROGRAMS_SELECTED;
                    this.$scope.departmentSelectionStatus = ums.Utils.MERIT_WAITING_PROGRAMS_SELECTED;
                }
                else {
                    item['departmentSelectionType'] = ums.Utils.WAITING_PROGRAM_SELECTED;
                    this.$scope.departmentSelectionStatus = ums.Utils.WAITING_PROGRAM_SELECTED;
                }
            }
            else {
                item['presentStatus'] = ums.Utils.ABSENT;
                this.$scope.departmentSelectionStatus = ums.Utils.ABSENT;
            }
            jsonObject.push(item);
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        AdmissionDepartmentSelection.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'admissionStudentService', 'programService', '$timeout'];
        return AdmissionDepartmentSelection;
    }());
    ums.UMS.controller("AdmissionDepartmentSelection", AdmissionDepartmentSelection);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DepartmentSelectionDeadlineAssignment = (function () {
        function DepartmentSelectionDeadlineAssignment(appConstants, httpClient, $scope, $q, notify, $sce, $window, semesterService, facultyService, departmentSelectionDeadlineService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.departmentSelectionDeadlineService = departmentSelectionDeadlineService;
            $scope.showAddSection = false;
            $scope.programTypes = appConstants.programType;
            $scope.programType = $scope.programTypes[0];
            $scope.quotaTypes = appConstants.quotaTypes;
            $scope.quotaType = $scope.quotaTypes[0];
            $scope.meritSerialNumberFrom = 0;
            $scope.meritSerialNumberTo = 0;
            $scope.departmentSelectionDeadline = {};
            $scope.showLoader = false;
            $scope.getDeadlines = this.getDeadlines.bind(this);
            $scope.add = this.add.bind(this);
            $scope.edit = this.edit.bind(this);
            $scope.doDelete = this.doDelete.bind(this);
            $scope.save = this.save.bind(this);
            $scope.showHide = this.showHide.bind(this);
            this.getFaculties();
            this.getSemesters();
            this.getMeritListTypes();
        }
        DepartmentSelectionDeadlineAssignment.prototype.showHide = function () {
            this.$scope.showAddSection = !this.$scope.showAddSection;
        };
        DepartmentSelectionDeadlineAssignment.prototype.getFaculties = function () {
            var _this = this;
            this.facultyService.getAllFaculties().then(function (faculties) {
                _this.$scope.faculties = [];
                for (var i = 0; i < faculties.length; i++) {
                    _this.$scope.faculties.push(faculties[i]);
                }
                _this.$scope.faculty = faculties[0];
            });
        };
        DepartmentSelectionDeadlineAssignment.prototype.getMeritListTypes = function () {
            this.$scope.meritTypes = [];
            this.$scope.meritTypes = this.appConstants.meritListTypes;
            this.$scope.meritType = this.$scope.meritTypes[0];
        };
        DepartmentSelectionDeadlineAssignment.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.$scope.programType.id, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.$scope.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.$scope.semester = semesters[i];
                        break;
                    }
                }
            });
        };
        DepartmentSelectionDeadlineAssignment.prototype.getDeadlines = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.$scope.showLoader = true;
            this.$scope.departmentSelectionDeadlines = [];
            this.departmentSelectionDeadlineService.getDeadlines(this.$scope.semester.id, this.$scope.meritType.name, this.$scope.faculty.shortName).then(function (deadlines) {
                console.log("Fetched deadlines-");
                console.log(deadlines);
                for (var i = 0; i < deadlines.length; i++) {
                    deadlines[i].disable = true;
                    _this.$scope.departmentSelectionDeadlines.push(deadlines[i]);
                }
                _this.$scope.showLoader = false;
            });
        };
        DepartmentSelectionDeadlineAssignment.prototype.add = function () {
            this.$scope.departmentSelectionDeadline = {};
            this.$scope.departmentSelectionDeadline.deadline = angular.copy(this.$scope.date);
            this.$scope.departmentSelectionDeadline.meritSerialNumberFrom = angular.copy(+this.$scope.meritSerialNumberFrom);
            this.$scope.departmentSelectionDeadline.meritSerialNumberTo = angular.copy(+this.$scope.meritSerialNumberTo);
            this.$scope.departmentSelectionDeadline.disable = true;
            this.$scope.departmentSelectionDeadlines.push(this.$scope.departmentSelectionDeadline);
            this.$scope.meritSerialNumberFrom = 0;
            this.$scope.meritSerialNumberTo = 0;
            this.$scope.date = "";
        };
        DepartmentSelectionDeadlineAssignment.prototype.edit = function (departmentSelectionDeadline) {
            departmentSelectionDeadline.disable = false;
        };
        DepartmentSelectionDeadlineAssignment.prototype.doDelete = function (departmentSelectionDeadline) {
            for (var i = 0; i < this.$scope.departmentSelectionDeadlines.length; i++) {
                if (this.$scope.departmentSelectionDeadlines[i] == departmentSelectionDeadline) {
                    this.$scope.departmentSelectionDeadlines.splice(i, 1);
                    break;
                }
            }
            if (departmentSelectionDeadline.id == null) {
                this.notify.success("Sucessfully Deleted");
            }
            else {
                this.departmentSelectionDeadlineService.doDelete(departmentSelectionDeadline.id);
            }
        };
        DepartmentSelectionDeadlineAssignment.prototype.save = function () {
            var _this = this;
            this.convertToJson().then(function (json) {
                _this.departmentSelectionDeadlineService.saveOrUpdateDeadline(json).then(function (status) {
                    _this.getDeadlines();
                });
            });
        };
        DepartmentSelectionDeadlineAssignment.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            for (var i = 0; i < this.$scope.departmentSelectionDeadlines.length; i++) {
                var item = {};
                item['id'] = this.$scope.departmentSelectionDeadlines[i].id;
                item['semesterId'] = this.$scope.semester.id;
                item['unit'] = this.$scope.faculty.shortName;
                item['quota'] = this.$scope.meritType.name;
                item['fromMeritSerialNumber'] = this.$scope.departmentSelectionDeadlines[i].meritSerialNumberFrom;
                item['toMeritSerialNumber'] = this.$scope.departmentSelectionDeadlines[i].meritSerialNumberTo;
                item['deadline'] = this.$scope.departmentSelectionDeadlines[i].deadline;
                jsonObject.push(item);
            }
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        DepartmentSelectionDeadlineAssignment.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'departmentSelectionDeadlineService'];
        return DepartmentSelectionDeadlineAssignment;
    }());
    ums.UMS.controller("DepartmentSelectionDeadlineAssignment", DepartmentSelectionDeadlineAssignment);
})(ums || (ums = {}));
/**
 * Created by My Pc on 28-Dec-16.
 */
var ums;
(function (ums) {
    var AdmissionCertificateVerification = (function () {
        function AdmissionCertificateVerification(appConstants, $scope, $q, notify, $window, $sce, semesterService, facultyService, admissionCertificateVerificationService) {
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$window = $window;
            this.$sce = $sce;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.admissionCertificateVerificationService = admissionCertificateVerificationService;
            $scope.mainDiv = false;
            $scope.showLoader = false;
            $scope.programTypes = appConstants.programType;
            $scope.programType = $scope.programTypes[0];
            $scope.quotaTypes = appConstants.meritListTypes;
            $scope.data = {
                userComment: "",
                deadLine: ""
            };
            $scope.getSemesters = this.getSemesters.bind(this);
            $scope.getAllCandidates = this.getAllCandidates.bind(this);
            $scope.showRightDiv = this.showRightDiv.bind(this);
            $scope.search = this.search.bind(this);
            $scope.isChecked = this.isChecked.bind(this);
            $scope.toggleAll = this.toggleAll.bind(this);
            $scope.exists = this.exists.bind(this);
            $scope.toggleSelection = this.toggleSelection.bind(this);
            $scope.UnderTakenDeadline = this.UnderTakenDeadline.bind(this);
            $scope.underTaken = this.underTaken.bind(this);
            $scope.rejected = this.rejected.bind(this);
            $scope.approved = this.approved.bind(this);
            this.getSemesters();
            this.getAllTypesOfCertificates();
            this.categorizeAllTypesOfCertificates();
            ums.Utils.setValidationOptions("form-horizontal");
        }
        AdmissionCertificateVerification.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(Number(this.$scope.programType.id), 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.$scope.semesters = semesters;
            });
        };
        AdmissionCertificateVerification.prototype.getAllTypesOfCertificates = function () {
            var _this = this;
            this.admissionCertificateVerificationService.getAllTypesOfCertificates()
                .then(function (allTypesOfCertificates) {
                _this.$scope.allTypesOfCertificates = allTypesOfCertificates;
                _this.$scope.lengthOfTotalCertificates = allTypesOfCertificates.length;
            });
        };
        AdmissionCertificateVerification.prototype.getAllCandidates = function () {
            var _this = this;
            this.$scope.receiptIdMap = {};
            this.$scope.mainDiv = false;
            this.admissionCertificateVerificationService.getCandidatesList(+this.$scope.programType.id, this.$scope.semester.id, this.$scope.quota.name)
                .then(function (students) {
                _this.$scope.admissionStudents = [];
                for (var i = 0; i < students.length; i++) {
                    if (students[i].meritSlNo != 0) {
                        _this.$scope.admissionStudents.push(students[i]);
                        _this.$scope.receiptIdMap[students[i].receiptId] = students[i];
                    }
                }
                _this.$scope.lengthOfTotalCandidate = _this.$scope.admissionStudents.length;
                _this.initializeSelect2("searchByReceiptId", _this.$scope.admissionStudents, "Enter Receipt ID");
            });
        };
        AdmissionCertificateVerification.prototype.initializeSelect2 = function (selectBoxId, studentIds, placeHolderText) {
            var data = studentIds;
            $("#" + selectBoxId).select2({
                minimumInputLength: 0,
                query: function (options) {
                    var pageSize = 100;
                    var startIndex = (options.page - 1) * pageSize;
                    var filteredData = data;
                    if (options.term && options.term.length > 0) {
                        if (!options.context) {
                            var term = options.term.toLowerCase();
                            options.context = data.filter(function (metric) {
                                return (metric.id.indexOf(term) !== -1);
                            });
                        }
                        filteredData = options.context;
                    }
                    options.callback({
                        context: filteredData,
                        results: filteredData.slice(startIndex, startIndex + pageSize),
                        more: (startIndex + pageSize) < filteredData.length
                    });
                },
                placeholder: placeHolderText
            });
        };
        AdmissionCertificateVerification.prototype.search = function (receiptId) {
            var _this = this;
            this.$scope.mainDiv = true;
            if (receiptId == null || receiptId == "") {
                this.notify.error("Please Enter a Receipt Id");
            }
            else {
                this.$scope.showLoader = true;
                this.$scope.receiptId = receiptId;
                this.$scope.admissionStudent = null;
                this.admissionCertificateVerificationService.getCandidate(+this.$scope.programType.id, this.$scope.semester.id, this.$scope.receiptId, this.$scope.quota.name)
                    .then(function (admissionStudentsInfo) {
                    if (admissionStudentsInfo == null) {
                        _this.notify.error("No Data Found");
                    }
                    else {
                        _this.$scope.admissionStudent = admissionStudentsInfo[0];
                        _this.$scope.studentQuota = _this.$scope.admissionStudent.quota;
                        _this.$scope.studentStatus = _this.$scope.admissionStudent.verificationStatus;
                        _this.initializeVariables();
                        _this.resetCertificatesProperties();
                        _this.getPreviousCertificates();
                        _this.getPreviousComments();
                        _this.addDate();
                        _this.$scope.showLoader = false;
                    }
                });
            }
        };
        AdmissionCertificateVerification.prototype.initializeVariables = function () {
            if (this.$scope.studentStatus == "Verified" || this.$scope.studentStatus == "Rejected") {
                this.$scope.disableApprovedButton = true;
                this.$scope.disableRejectedButton = true;
                this.$scope.disableUndertakenButton = true;
                this.$scope.disableCommentBox = true;
                this.$scope.disableDateField = true;
                this.$scope.disableCheckAllCheckbox = false;
            }
            else {
                this.$scope.disableApprovedButton = true;
                this.$scope.disableRejectedButton = false;
                this.$scope.disableUndertakenButton = false;
                this.$scope.disableCommentBox = false;
                this.$scope.disableDateField = false;
            }
            this.$scope.gLCertificates = [];
            this.$scope.gCECertificates = [];
            this.$scope.nationalCertificates = [];
            this.$scope.quotaCertificates = [];
            this.$scope.glSelected = [];
            this.$scope.gceSelected = [];
            this.$scope.nSelected = [];
            this.$scope.ffSelected = [];
            this.$scope.raSelected = [];
            this.$scope.totalSelected = [];
            this.$scope.lengthOfTotalCandidate = 0;
            this.$scope.lengthOfPreviousCertificates = 0;
            // this.$scope.lengthOfTotalCertificates = 0;
            this.$scope.countGL = 0;
            this.$scope.countGCE = 0;
            this.$scope.countFF = 0;
            this.$scope.countRA = 0;
            this.$scope.countAll = 0;
            this.$scope.data.userComment = "";
            this.$scope.data.deadLine = "";
            this.$scope.disableCheckAllCheckbox = true;
        };
        AdmissionCertificateVerification.prototype.resetCertificatesProperties = function () {
            for (var i = 0; i < this.$scope.lengthOfTotalCertificates; i++) {
                this.$scope.allTypesOfCertificates[i].disableChecked = "false";
            }
        };
        AdmissionCertificateVerification.prototype.getPreviousCertificates = function () {
            var _this = this;
            this.admissionCertificateVerificationService.getSubmittedCertificates(this.$scope.semester.id, this.$scope.receiptId)
                .then(function (previousCertificates) {
                _this.$scope.previousCertificates = previousCertificates;
                _this.$scope.lengthOfPreviousCertificates = previousCertificates.length;
                _this.organizeCertificates();
            });
        };
        AdmissionCertificateVerification.prototype.organizeCertificates = function () {
            this.disableCertificates();
            this.categorizeAllTypesOfCertificates();
        };
        AdmissionCertificateVerification.prototype.disableCertificates = function () {
            if (this.$scope.studentStatus == "Verified" || this.$scope.studentStatus == "Rejected") {
                this.$scope.disableCheckAllCheckbox = false;
                for (var i = 0; i < this.$scope.lengthOfTotalCertificates; i++) {
                    this.$scope.allTypesOfCertificates[i].disableChecked = "true";
                }
            }
            else if (this.$scope.lengthOfPreviousCertificates > 0) {
                this.$scope.disableCheckAllCheckbox = false;
                this.increaseCountForPreviousCertificates();
                for (var p = 0; p < this.$scope.lengthOfPreviousCertificates; p++) {
                    for (var q = 0; q < this.$scope.lengthOfTotalCertificates; q++) {
                        if (this.$scope.previousCertificates[p].id == this.$scope.allTypesOfCertificates[q].id) {
                            this.$scope.allTypesOfCertificates[q].disableChecked = "true";
                            break;
                        }
                    }
                }
            }
        };
        AdmissionCertificateVerification.prototype.increaseCountForPreviousCertificates = function () {
            for (var i = 0; i < this.$scope.previousCertificates.length; i++) {
                if (this.$scope.previousCertificates[i].type == "GL") {
                    this.$scope.countGL++;
                }
                else if (this.$scope.previousCertificates[i].type == "GCE") {
                    this.$scope.countGCE++;
                }
                else if (this.$scope.previousCertificates[i].type = "ALL") {
                    this.$scope.countAll++;
                }
                else if (this.$scope.previousCertificates[i].type == "FF") {
                    this.$scope.countFF++;
                }
                else if (this.$scope.previousCertificates[i].type == "RA") {
                    this.$scope.countRA++;
                }
            }
        };
        AdmissionCertificateVerification.prototype.categorizeAllTypesOfCertificates = function () {
            if (this.$scope.studentQuota == "GCE") {
                this.$scope.GLShow = false;
                this.$scope.quotaShow = false;
                this.$scope.GCEShow = true;
                for (var i = 0; i < this.$scope.lengthOfTotalCertificates; i++) {
                    if (this.$scope.allTypesOfCertificates[i].type == "GCE") {
                        this.$scope.gCECertificates.push(this.$scope.allTypesOfCertificates[i]);
                    }
                    else if (this.$scope.allTypesOfCertificates[i].type == "ALL") {
                        this.$scope.nationalCertificates.push(this.$scope.allTypesOfCertificates[i]);
                    }
                }
            }
            else {
                this.$scope.GCEShow = false;
                this.$scope.quotaShow = false;
                this.$scope.GLShow = true;
                for (var i = 0; i < this.$scope.lengthOfTotalCertificates; i++) {
                    if (this.$scope.allTypesOfCertificates[i].type == "GL") {
                        this.$scope.gLCertificates.push(this.$scope.allTypesOfCertificates[i]);
                    }
                    else if (this.$scope.allTypesOfCertificates[i].type == "ALL") {
                        this.$scope.nationalCertificates.push(this.$scope.allTypesOfCertificates[i]);
                    }
                    else if (this.$scope.admissionStudent.quota == "FF" && this.$scope.allTypesOfCertificates[i].type == "FF") {
                        this.$scope.quotaShow = true;
                        this.$scope.quotaCertificates.push(this.$scope.allTypesOfCertificates[i]);
                    }
                    else if (this.$scope.admissionStudent.quota == "RA" && this.$scope.allTypesOfCertificates[i].type == "RA") {
                        this.$scope.quotaShow = true;
                        this.$scope.quotaCertificates.push(this.$scope.allTypesOfCertificates[i]);
                    }
                }
            }
        };
        AdmissionCertificateVerification.prototype.getPreviousComments = function () {
            var _this = this;
            this.admissionCertificateVerificationService.getAllPreviousComments(this.$scope.semester.id, this.$scope.receiptId)
                .then(function (previousComments) {
                _this.$scope.previousComments = previousComments;
            });
        };
        AdmissionCertificateVerification.prototype.addDate = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 100);
        };
        AdmissionCertificateVerification.prototype.UnderTakenDeadline = function (deadLine) {
            this.$scope.data.deadLine = deadLine;
        };
        AdmissionCertificateVerification.prototype.underTaken = function () {
            var _this = this;
            if (this.$scope.data.deadLine == null || this.$scope.data.deadLine == "") {
                this.notify.warn("Please assign a date");
            }
            else {
                this.convertToJson(2).then(function (json) {
                    _this.admissionCertificateVerificationService.saveAll(json)
                        .then(function (message) {
                        _this.search(_this.$scope.receiptId);
                        _this.admissionCertificateVerificationService.getUndertakenForm(+_this.$scope.programType.id, _this.$scope.semester.id, _this.$scope.receiptId, _this.$scope.quota.name);
                    });
                });
            }
        };
        AdmissionCertificateVerification.prototype.rejected = function () {
            var _this = this;
            this.convertToJson(3).then(function (json) {
                _this.admissionCertificateVerificationService.saveAll(json)
                    .then(function (message) {
                    _this.search(_this.$scope.receiptId);
                });
            });
        };
        AdmissionCertificateVerification.prototype.approved = function () {
            var _this = this;
            this.convertToJson(1)
                .then(function (json) {
                _this.admissionCertificateVerificationService.saveAll(json)
                    .then(function (message) {
                    _this.search(_this.$scope.receiptId);
                });
            });
        };
        AdmissionCertificateVerification.prototype.isChecked = function (allTheCertificates) {
            if (allTheCertificates == null) {
                return false;
            }
            for (var i = 0; i < allTheCertificates.length; i++) {
                if (allTheCertificates[i].type == "GL") {
                    return this.$scope.glSelected.length == allTheCertificates.length;
                }
                if (allTheCertificates[i].type == "GCE") {
                    return this.$scope.gceSelected.length == allTheCertificates.length;
                }
                if (allTheCertificates[i].type == "ALL") {
                    return this.$scope.nSelected.length == allTheCertificates.length;
                }
                if (allTheCertificates[i].type == "FF") {
                    return this.$scope.ffSelected.length == allTheCertificates.length;
                }
                if (allTheCertificates[i].type == "RA") {
                    return this.$scope.raSelected.length == allTheCertificates.length;
                }
            }
        };
        AdmissionCertificateVerification.prototype.toggleAll = function (allTheCertificates) {
            for (var i = 0; i < allTheCertificates.length; i++) {
                if (allTheCertificates[i].type == "GL") {
                    if (this.$scope.glSelected.length == allTheCertificates.length) {
                        for (var i = 0; i < this.$scope.glSelected.length; i++) {
                            this.decreaseCountForCurrentlySelectedCertificates(this.$scope.glSelected[i].type);
                        }
                        this.$scope.glSelected = [];
                    }
                    else if (this.$scope.glSelected.length == 0 || this.$scope.glSelected.length > 0) {
                        this.$scope.countGL = 0;
                        this.$scope.glSelected = allTheCertificates.slice(0);
                        for (var i = 0; i < this.$scope.glSelected.length; i++) {
                            this.increaseCountForCurrentlySelectedCertificates(this.$scope.glSelected[i]);
                        }
                    }
                }
                else if (allTheCertificates[i].type == "GCE") {
                    if (this.$scope.gceSelected.length == allTheCertificates.length) {
                        for (var i = 0; i < this.$scope.gceSelected.length; i++) {
                            this.decreaseCountForCurrentlySelectedCertificates(this.$scope.gceSelected[i].type);
                        }
                        this.$scope.gceSelected = [];
                    }
                    else if (this.$scope.gceSelected.length == 0 || this.$scope.gceSelected.length > 0) {
                        this.$scope.countGCE = 0;
                        this.$scope.gceSelected = allTheCertificates.slice(0);
                        for (var i = 0; i < this.$scope.gceSelected.length; i++) {
                            this.increaseCountForCurrentlySelectedCertificates(this.$scope.gceSelected[i]);
                        }
                    }
                }
                else if (allTheCertificates[i].type == "ALL") {
                    if (this.$scope.nSelected.length == allTheCertificates.length) {
                        for (var i = 0; i < this.$scope.nSelected.length; i++) {
                            this.decreaseCountForCurrentlySelectedCertificates(this.$scope.nSelected[i].type);
                        }
                        this.$scope.nSelected = [];
                    }
                    else if (this.$scope.nSelected.length == 0 || this.$scope.nSelected.length > 0) {
                        this.$scope.countAll = 0;
                        this.$scope.nSelected = allTheCertificates.slice(0);
                        for (var i = 0; i < this.$scope.nSelected.length; i++) {
                            this.increaseCountForCurrentlySelectedCertificates(this.$scope.nSelected[i]);
                        }
                    }
                }
                else if (allTheCertificates[i].type == "FF") {
                    if (this.$scope.ffSelected.length == allTheCertificates.length) {
                        for (var i = 0; i < this.$scope.ffSelected.length; i++) {
                            this.decreaseCountForCurrentlySelectedCertificates(this.$scope.ffSelected[i].type);
                        }
                        this.$scope.ffSelected = [];
                    }
                    else if (this.$scope.ffSelected.length == 0 || this.$scope.ffSelected.length > 0) {
                        this.$scope.countFF = 0;
                        this.$scope.ffSelected = allTheCertificates.slice(0);
                        for (var i = 0; i < this.$scope.ffSelected.length; i++) {
                            this.increaseCountForCurrentlySelectedCertificates(this.$scope.ffSelected[i]);
                        }
                    }
                }
                else if (allTheCertificates[i].type == "RA") {
                    if (this.$scope.raSelected.length == allTheCertificates.length) {
                        for (var i = 0; i < this.$scope.raSelected.length; i++) {
                            this.decreaseCountForCurrentlySelectedCertificates(this.$scope.raSelected[i].type);
                        }
                        this.$scope.raSelected = [];
                    }
                    else if (this.$scope.raSelected.length == 0 || this.$scope.raSelected.length > 0) {
                        this.$scope.countRA = 0;
                        this.$scope.raSelected = allTheCertificates.slice(0);
                        for (var i = 0; i < this.$scope.raSelected.length; i++) {
                            this.increaseCountForCurrentlySelectedCertificates(this.$scope.raSelected[i]);
                        }
                    }
                }
                this.enableOrDisableButtons();
            }
        };
        AdmissionCertificateVerification.prototype.exists = function (allCertificates) {
            if (allCertificates.type == "GL") {
                for (var i = 0; i < this.$scope.previousCertificates.length; i++) {
                    if (allCertificates.id == this.$scope.previousCertificates[i].id) {
                        return true;
                    }
                }
                return this.$scope.glSelected.indexOf(allCertificates) > -1;
            }
            else if (allCertificates.type == "GCE") {
                for (var i = 0; i < this.$scope.previousCertificates.length; i++) {
                    if (allCertificates.id == this.$scope.previousCertificates[i].id) {
                        return true;
                    }
                }
                return this.$scope.gceSelected.indexOf(allCertificates) > -1;
            }
            else if (allCertificates.type == "ALL") {
                for (var i = 0; i < this.$scope.previousCertificates.length; i++) {
                    if (allCertificates.id == this.$scope.previousCertificates[i].id) {
                        return true;
                    }
                }
                return this.$scope.nSelected.indexOf(allCertificates) > -1;
            }
            else if (allCertificates.type == "FF") {
                for (var i = 0; i < this.$scope.previousCertificates.length; i++) {
                    if (allCertificates.id == this.$scope.previousCertificates[i].id) {
                        return true;
                    }
                }
                return this.$scope.ffSelected.indexOf(allCertificates) > -1;
            }
            else if (allCertificates.type == "RA") {
                for (var i = 0; i < this.$scope.previousCertificates.length; i++) {
                    if (allCertificates.id == this.$scope.previousCertificates[i].id) {
                        return true;
                    }
                }
                return this.$scope.raSelected.indexOf(allCertificates) > -1;
            }
        };
        AdmissionCertificateVerification.prototype.toggleSelection = function (allCertificates) {
            if (allCertificates.type == "GL") {
                var idx = this.$scope.glSelected.indexOf(allCertificates);
                if (idx > -1) {
                    this.$scope.temp = this.$scope.glSelected.splice(idx, 1);
                    this.decreaseCountForCurrentlySelectedCertificates(this.$scope.temp[0].type);
                }
                else {
                    this.$scope.glSelected.push(allCertificates);
                    this.increaseCountForCurrentlySelectedCertificates(allCertificates);
                }
            }
            else if (allCertificates.type == "GCE") {
                var idx = this.$scope.gceSelected.indexOf(allCertificates);
                if (idx > -1) {
                    this.$scope.temp = this.$scope.gceSelected.splice(idx, 1);
                    this.decreaseCountForCurrentlySelectedCertificates(this.$scope.temp[0].type);
                }
                else {
                    this.$scope.gceSelected.push(allCertificates);
                    this.increaseCountForCurrentlySelectedCertificates(allCertificates);
                }
            }
            else if (allCertificates.type == "ALL") {
                var idx = this.$scope.nSelected.indexOf(allCertificates);
                if (idx > -1) {
                    this.$scope.temp = this.$scope.nSelected.splice(idx, 1);
                    this.decreaseCountForCurrentlySelectedCertificates(this.$scope.temp[0].type);
                }
                else {
                    this.$scope.nSelected.push(allCertificates);
                    this.increaseCountForCurrentlySelectedCertificates(allCertificates);
                }
            }
            else if (allCertificates.type == "FF") {
                var idx = this.$scope.ffSelected.indexOf(allCertificates);
                if (idx > -1) {
                    this.$scope.temp = this.$scope.ffSelected.splice(idx, 1);
                    this.decreaseCountForCurrentlySelectedCertificates(this.$scope.temp[0].type);
                }
                else {
                    this.$scope.ffSelected.push(allCertificates);
                    this.increaseCountForCurrentlySelectedCertificates(allCertificates);
                }
            }
            else if (allCertificates.type == "RA") {
                var idx = this.$scope.raSelected.indexOf(allCertificates);
                if (idx > -1) {
                    this.$scope.temp = this.$scope.raSelected.splice(idx, 1);
                    this.decreaseCountForCurrentlySelectedCertificates(this.$scope.temp[0].type);
                }
                else {
                    this.$scope.raSelected.push(allCertificates);
                    this.increaseCountForCurrentlySelectedCertificates(allCertificates);
                }
            }
            this.enableOrDisableButtons();
        };
        AdmissionCertificateVerification.prototype.increaseCountForCurrentlySelectedCertificates = function (allSelectedCertificates) {
            if (allSelectedCertificates.type == "GL") {
                this.$scope.countGL++;
            }
            else if (allSelectedCertificates.type == "GCE") {
                this.$scope.countGCE++;
            }
            else if (allSelectedCertificates.type == "ALL") {
                this.$scope.countAll++;
            }
            else if (allSelectedCertificates.type == "FF") {
                this.$scope.countFF++;
            }
            else if (allSelectedCertificates.type == "RA") {
                this.$scope.countRA++;
            }
        };
        AdmissionCertificateVerification.prototype.decreaseCountForCurrentlySelectedCertificates = function (allDeselectedCertificates) {
            if (allDeselectedCertificates == "GL") {
                this.$scope.countGL--;
            }
            else if (allDeselectedCertificates == "GCE") {
                this.$scope.countGCE--;
            }
            else if (allDeselectedCertificates == "ALL") {
                this.$scope.countAll--;
            }
            else if (allDeselectedCertificates == "FF") {
                this.$scope.countFF--;
            }
            else if (allDeselectedCertificates == "RA") {
                this.$scope.countRA--;
            }
        };
        AdmissionCertificateVerification.prototype.enableOrDisableButtons = function () {
            if (this.$scope.studentQuota == "GL") {
                if (this.$scope.countGL >= 5 && this.$scope.countAll >= 1) {
                    this.$scope.disableApprovedButton = false;
                    this.$scope.disableRejectedButton = false;
                    this.$scope.disableUndertakenButton = true;
                    this.$scope.disableDateField = true;
                }
                else {
                    this.$scope.disableApprovedButton = true;
                    this.$scope.disableRejectedButton = false;
                    this.$scope.disableUndertakenButton = false;
                    this.$scope.disableDateField = false;
                }
            }
            else if (this.$scope.studentQuota == "FF") {
                if (this.$scope.countGL >= 5 && this.$scope.countAll >= 1 && this.$scope.countFF >= 3) {
                    this.$scope.disableApprovedButton = false;
                    this.$scope.disableRejectedButton = false;
                    this.$scope.disableUndertakenButton = true;
                    this.$scope.disableDateField = true;
                }
                else {
                    this.$scope.disableApprovedButton = true;
                    this.$scope.disableRejectedButton = false;
                    this.$scope.disableUndertakenButton = false;
                    this.$scope.disableDateField = false;
                }
            }
            else if (this.$scope.studentQuota == "RA") {
                if (this.$scope.countGL >= 5 && this.$scope.countAll >= 1 && this.$scope.countRA >= 2) {
                    this.$scope.disableApprovedButton = false;
                    this.$scope.disableRejectedButton = false;
                    this.$scope.disableUndertakenButton = true;
                    this.$scope.disableDateField = true;
                }
                else {
                    this.$scope.disableApprovedButton = true;
                    this.$scope.disableRejectedButton = false;
                    this.$scope.disableUndertakenButton = false;
                    this.$scope.disableDateField = false;
                }
            }
            else if (this.$scope.studentQuota == "GCE") {
                if (this.$scope.countGCE >= 5 && this.$scope.countAll >= 1) {
                    this.$scope.disableApprovedButton = false;
                    this.$scope.disableRejectedButton = false;
                    this.$scope.disableUndertakenButton = true;
                    this.$scope.disableDateField = true;
                }
                else {
                    this.$scope.disableApprovedButton = true;
                    this.$scope.disableRejectedButton = false;
                    this.$scope.disableUndertakenButton = false;
                    this.$scope.disableDateField = false;
                }
            }
        };
        AdmissionCertificateVerification.prototype.convertToJson = function (status) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            this.pushAllCertificatesInOneArray();
            var item = {};
            item['programType'] = +this.$scope.programType.id;
            item['semesterId'] = this.$scope.semester.id;
            item['receiptId'] = this.$scope.receiptId;
            item['status'] = status;
            item['comment'] = this.$scope.data.userComment;
            if (status == 2) {
                item['undertakeDeadLine'] = this.$scope.data.deadLine;
            }
            else {
                item['undertakeDeadLine'] = "";
            }
            var certificateJsonObject = [];
            for (var i = 0; i < this.$scope.totalSelected.length; i++) {
                var certificates = {};
                certificates['id'] = this.$scope.totalSelected[i].id;
                certificateJsonObject.push(certificates);
            }
            item['certificateIds'] = certificateJsonObject;
            jsonObject.push(item);
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        AdmissionCertificateVerification.prototype.pushAllCertificatesInOneArray = function () {
            for (var i = 0; i < this.$scope.glSelected.length; i++) {
                this.$scope.totalSelected.push(this.$scope.glSelected[i]);
            }
            for (var i = 0; i < this.$scope.gceSelected.length; i++) {
                this.$scope.totalSelected.push(this.$scope.gceSelected[i]);
            }
            for (var i = 0; i < this.$scope.nSelected.length; i++) {
                this.$scope.totalSelected.push(this.$scope.nSelected[i]);
            }
            for (var i = 0; i < this.$scope.ffSelected.length; i++) {
                this.$scope.totalSelected.push(this.$scope.ffSelected[i]);
            }
            for (var i = 0; i < this.$scope.raSelected.length; i++) {
                this.$scope.totalSelected.push(this.$scope.raSelected[i]);
            }
        };
        AdmissionCertificateVerification.prototype.showRightDiv = function () {
            ums.Utils.expandRightDiv();
        };
        AdmissionCertificateVerification.$inject = ['appConstants', '$scope', '$q', 'notify', '$window', '$sce',
            'semesterService', 'facultyService', 'admissionCertificateVerificationService'];
        return AdmissionCertificateVerification;
    }());
    ums.UMS.controller("AdmissionCertificateVerification", AdmissionCertificateVerification);
})(ums || (ums = {}));
/**
 * Created by My Pc on 04-Jan-17.
 */
var ums;
(function (ums) {
    var AdmissionTotalSeatAssignment = (function () {
        function AdmissionTotalSeatAssignment(appConstants, httpClient, $scope, $q, notify, $sce, $window, semesterService, admissionTotalSeatService, programService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.admissionTotalSeatService = admissionTotalSeatService;
            this.programService = programService;
            $scope.programTypes = appConstants.programType;
            $scope.programType = $scope.programTypes[0];
            $scope.quotaTypes = appConstants.quotaTypes;
            $scope.quotaType = $scope.quotaTypes[0];
            $scope.searchSpinner = false;
            $scope.showContent = false;
            $scope.edit = false;
            $scope.editData = this.edit.bind(this);
            $scope.save = this.save.bind(this);
            $scope.getSemesters = this.getSemesters.bind(this);
            $scope.getAdmissionTotalSeat = this.getAdmissionTotalSeat.bind(this);
            this.getSemesters();
            ums.Utils.setValidationOptions("form-horizontal");
        }
        AdmissionTotalSeatAssignment.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(+this.$scope.programType.id, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.$scope.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.$scope.semester = semesters[i];
                        break;
                    }
                }
            });
        };
        AdmissionTotalSeatAssignment.prototype.getAdmissionTotalSeat = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.$scope.searchSpinner = true;
            this.admissionTotalSeatService
                .fetchAdmissionTotalSeat(this.$scope.semester.id, +this.$scope.programType.id, +this.$scope.quotaType.id)
                .then(function (seats) {
                _this.$scope.showContent = true;
                _this.$scope.searchSpinner = false;
                console.log("seats");
                console.log(seats);
                if (seats.length == 0) {
                    _this.$scope.edit = true;
                    _this.$scope.updatble = false;
                    _this.createEmptyAdmissionTotalDate();
                }
                else {
                    _this.$scope.edit = false;
                    _this.$scope.updatble = true;
                    _this.$scope.admissionTotalSeats = seats;
                }
            });
        };
        AdmissionTotalSeatAssignment.prototype.createEmptyAdmissionTotalDate = function () {
            var _this = this;
            this.programService.fetchProgram(+this.$scope.programType.id).then(function (programs) {
                _this.$scope.admissionTotalSeats = [];
                _this.addPrograms(programs);
            });
        };
        AdmissionTotalSeatAssignment.prototype.addPrograms = function (programs) {
            for (var i = 0; i < programs.length; i++) {
                var admissionTotalSeat = {};
                admissionTotalSeat.programId = programs[i].id;
                admissionTotalSeat.programShortName = programs[i].shortName;
                admissionTotalSeat.programLongName = programs[i].longName;
                admissionTotalSeat.semesterId = +this.$scope.semester.id;
                admissionTotalSeat.totalSeat = "";
                // admissionTotalSeat.totalSeat=0;
                this.$scope.admissionTotalSeats.push(admissionTotalSeat);
            }
        };
        AdmissionTotalSeatAssignment.prototype.edit = function () {
            this.$scope.edit = true;
        };
        AdmissionTotalSeatAssignment.prototype.save = function () {
            var _this = this;
            this.$scope.searchSpinner;
            this.convertToJson().then(function (json) {
                if (_this.$scope.updatble == false) {
                    _this.admissionTotalSeatService.saveAdmissionTotalSeatInfo(json).then(function (message) {
                        _this.getAdmissionTotalSeat();
                    });
                }
                else {
                    _this.admissionTotalSeatService.updateAdmissionTotalSeat(json).then(function (message) {
                        _this.getAdmissionTotalSeat();
                    });
                }
            });
        };
        AdmissionTotalSeatAssignment.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            var seats = this.$scope.admissionTotalSeats;
            for (var i = 0; i < seats.length; i++) {
                var item = {};
                item['id'] = seats[i].id;
                item['semesterId'] = this.$scope.semester.id;
                item['programId'] = seats[i].programId;
                item['programType'] = +this.$scope.programType.id;
                item['quota'] = +this.$scope.quotaType.id;
                if (seats[i].totalSeat != "") {
                    item['totalSeat'] = +seats[i].totalSeat;
                }
                else {
                    item['totalSeat'] = 0;
                }
                jsonObject.push(item);
            }
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        AdmissionTotalSeatAssignment.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'semesterService', 'admissionTotalSeatService', 'programService'];
        return AdmissionTotalSeatAssignment;
    }());
    ums.UMS.controller("AdmissionTotalSeatAssignment", AdmissionTotalSeatAssignment);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionReport = (function () {
        function AdmissionReport(appConstants, $q, notify, semesterService, programService, admissionStudentService) {
            this.appConstants = appConstants;
            this.$q = $q;
            this.notify = notify;
            this.semesterService = semesterService;
            this.programService = programService;
            this.admissionStudentService = admissionStudentService;
            this.programTypes = [];
            this.semesters = [];
            this.genericMeritTypes = [];
            this.admissionStudents = [];
            this.totalMaleStudent = 0;
            this.totalFemaleStudent = 0;
            this.totalFFStudent = 0;
            this.totalRAStudent = 0;
            this.totalGCEStudent = 0;
            this.showLoader = false;
            this.overallStatistics = [];
            this.quotaOverallStatistics = [];
            this.programTypes = appConstants.programType;
            this.genericMeritTypes = appConstants.genericMeritType;
            this.init();
        }
        AdmissionReport.prototype.init = function () {
            this.programType = this.programTypes[0];
            this.getSemesters();
        };
        AdmissionReport.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(this.programType.id, 3, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED)
                .then(function (semesters) {
                _this.semesters = semesters;
            });
        };
        AdmissionReport.prototype.getPrograms = function () {
            var _this = this;
            this.programService.fetchProgram(this.programType.id).then(function (programs) {
                _this.programs = programs;
                _this.removeBBAFromProgramsList();
                _this.sortProgramSequence();
            });
        };
        AdmissionReport.prototype.sortProgramSequence = function () {
            this.programs.sort(function (a, b) {
                return a.id - b.id;
            });
        };
        AdmissionReport.prototype.removeBBAFromProgramsList = function () {
            this.programs = this.programs.filter(function (val, i) {
                return val.departmentId != '02' && val.id != 110200;
            });
        };
        AdmissionReport.prototype.search = function () {
            if (this.programType && this.semester && this.genericMeritType) {
                this.getPrograms();
                ums.Utils.expandRightDiv();
            }
        };
        AdmissionReport.prototype.getStatistics = function (program) {
            var _this = this;
            this.resetValues();
            this.program = program;
            if (this.program) {
                this.admissionStudentService.getAdmissionStudent(this.semester.id, this.genericMeritType.id, AdmissionReport.ADMITTED_STUDENT_STATUS, this.program.id)
                    .then(function (result) {
                    _this.admissionStudents = result;
                    _this.showLoader = false;
                    if (_this.admissionStudents) {
                        _this.calculateTotalMaleStudent();
                        _this.calculateTotalFemaleStudent();
                        if (_this.genericMeritType.id == 2) {
                            _this.calculateTotalFFStudent();
                            _this.calculateTotalRAStudent();
                            _this.calculateTotalGCEStudent();
                        }
                        else {
                            _this.totalFFStudent = 0;
                            _this.totalRAStudent = 0;
                            _this.totalGCEStudent = 0;
                        }
                    }
                    else {
                        _this.notify.error("No data found");
                    }
                });
            }
            else {
                this.notify.error("Select a program.");
                this.resetValues();
                this.showLoader = false;
            }
        };
        AdmissionReport.prototype.resetValues = function () {
            this.showLoader = true;
            this.admissionStudents = [];
            this.totalMaleStudent = 0;
            this.totalFemaleStudent = 0;
            this.overallStatistics = [];
            this.quotaOverallStatistics = [];
        };
        AdmissionReport.prototype.calculateTotalMaleStudent = function () {
            this.totalMaleStudent = this.admissionStudents.reduce(function (prev, curr) {
                return curr.migrated != 2 ? prev + (curr.gender == "MALE" ? 1 : 0) : prev;
            }, 0);
        };
        AdmissionReport.prototype.calculateTotalFemaleStudent = function () {
            this.totalFemaleStudent = this.admissionStudents.reduce(function (prev, curr) {
                return curr.migrated != 2 ? prev + (curr.gender == "FEMALE" ? 1 : 0) : prev;
            }, 0);
        };
        AdmissionReport.prototype.calculateTotalFFStudent = function () {
            this.totalFFStudent = this.admissionStudents.reduce(function (prev, curr) {
                return curr.migrated != 2 ? prev + (curr.quota == "FF" ? 1 : 0) : prev;
            }, 0);
        };
        AdmissionReport.prototype.calculateTotalRAStudent = function () {
            this.totalRAStudent = this.admissionStudents.reduce(function (prev, curr) {
                return curr.migrated != 2 ? prev + (curr.quota == "RA" ? 1 : 0) : prev;
            }, 0);
        };
        AdmissionReport.prototype.calculateTotalGCEStudent = function () {
            this.totalGCEStudent = this.admissionStudents.reduce(function (prev, curr) {
                return curr.migrated != 2 ? prev + (curr.quota == "GCE" ? 1 : 0) : prev;
            }, 0);
        };
        AdmissionReport.prototype.getOverallStatistics = function () {
            var _this = this;
            this.resetValues();
            if (this.programType && this.semester && this.genericMeritType) {
                this.admissionStudentService.getAdmissionStudentStatistics(this.semester.id, this.programType.id, this.genericMeritType.id).then(function (result) {
                    if (_this.genericMeritType.id == 2) {
                        _this.overallStatistics = [];
                        _this.quotaOverallStatistics = result;
                        _this.showLoader = false;
                    }
                    else {
                        _this.quotaOverallStatistics = [];
                        _this.overallStatistics = result;
                        _this.showLoader = false;
                    }
                });
            }
            else {
                this.notify.error("Select parameters correctly.");
                this.showLoader = false;
            }
        };
        AdmissionReport.prototype.downloadExcelReport = function () {
            var _this = this;
            this.resetValues();
            if (this.programType && this.semester && this.genericMeritType) {
                this.admissionStudentService.downloadAdmissionReportExcelFile(this.semester.id, this.semester.name, this.genericMeritType.id, AdmissionReport.ADMITTED_STUDENT_STATUS).then(function (res) {
                    _this.showLoader = false;
                });
            }
            else {
                this.notify.error("Select parameters correctly.");
                this.showLoader = false;
            }
        };
        AdmissionReport.prototype.downloadExcelReportOfAllStudentByMeritSerial = function () {
            var _this = this;
            if (this.programType && this.semester && this.genericMeritType) {
                this.admissionStudentService.downloadAdmissionReportExcelFileByMeritSerial(this.semester.id, this.semester.name, AdmissionReport.ADMITTED_STUDENT_STATUS).then(function (res) {
                    _this.showLoader = false;
                });
            }
            else {
                this.notify.error("Select parameters correctly.");
                this.showLoader = false;
            }
        };
        AdmissionReport.$inject = ['appConstants', '$q', 'notify', 'semesterService', 'programService', 'admissionStudentService'];
        AdmissionReport.ADMITTED_STUDENT_STATUS = 2;
        return AdmissionReport;
    }());
    ums.UMS.controller("AdmissionReport", AdmissionReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SectionAssignment = (function () {
        function SectionAssignment(appConstants, httpClient, $scope, $q, $window, notify, semesterService, employeeService, studentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.$window = $window;
            this.notify = notify;
            this.semesterService = semesterService;
            this.employeeService = employeeService;
            this.studentService = studentService;
            this.anchorPrefix = ".btn.btn-xs.btn-default.";
            $scope.student = {};
            $scope.showLoader = false;
            $scope.bulkShowStudentId = true;
            $scope.bulkShowStudentName = false;
            $scope.shiftShowStudentId = true;
            $scope.shiftShowStudentName = false;
            $scope.showSection = false;
            $scope.shiftOptionSelected = false;
            $scope.changeOptionSelected = false;
            $scope.bulkAssignmentOptionSelected = false;
            $scope.SINGLE_TYPE = 1;
            $scope.BULK_TYPE = 2;
            $scope.showSingleStudentUI = this.showSingleStudentUI.bind(this);
            $scope.showBulkAssignmentUI = this.showBulkAssignmentUI.bind(this);
            $scope.getActiveTeachers = this.getActiveTeachers.bind(this);
            $scope.getActiveStudentsOfDept = this.getActiveStudentsOfDept.bind(this);
            $scope.addAStudent = this.addAStudent.bind(this);
            $scope.removeFromAddedList = this.removeFromAddedList.bind(this);
            $scope.removeFromBulkStudents = this.removeFromBulkStudents.bind(this);
            $scope.addStudents = this.addStudents.bind(this);
            $scope.viewStudentById = this.viewStudentById.bind(this);
            $scope.viewStudentByIdAndName = this.viewStudentByIdAndName.bind(this);
            $scope.clearBulkStudents = this.clearBulkStudents.bind(this);
            $scope.saveSingleStudentAdvisor = this.saveSingleStudentAdvisor.bind(this);
            $scope.saveAdvisorForBulkStudents = this.saveAdvisorForBulkStudents.bind(this);
            $scope.changeColor = this.changeColor.bind(this);
            $scope.viewStudentByYearSemester = this.viewStudentByYearSemester.bind(this);
            $scope.viewStudentWithoutYearSemester = this.viewStudentWithoutYearSemester.bind(this);
            $scope.getExistingStudentsOfAdviser = this.getExistingStudentsOfAdviser.bind(this);
            $scope.toggleAdvisorInfo = this.toggleAdvisorInfo.bind(this);
            $scope.searchSingleStudent = this.searchSingleStudent.bind(this);
            $scope.initializeShiftingStudents = this.initializeShiftingStudents.bind(this);
            $scope.changeTheorySection = this.changeTheorySection.bind(this);
            $scope.changeSessionalSection = this.changeSessionalSection.bind(this);
            $scope.changeBulkTheorySection = this.changeBulkTheorySection.bind(this);
            $scope.changeBulkSessionalSection = this.changeBulkSessionalSection.bind(this);
            $scope.redirectToViewDownloadPage = this.redirectToViewDownloadPage.bind(this);
            $scope.categorizedFormStudents = [];
            $scope.categorizedToStudents = [];
            this.$scope.bulkTheorySectionList = [];
            this.$scope.bulkTheorySectionList = this.appConstants.theorySections;
            this.$scope.bulkTheorySection = this.$scope.bulkTheorySectionList[0];
            this.$scope.selectedBulkTheorySectionId = this.$scope.bulkTheorySection.id;
            this.$scope.bulkSessionalSectionList = [];
            this.$scope.selectedBulkSessionalSectionId = "null";
            this.$scope.theorySectionList = [];
            this.$scope.theorySectionList = this.appConstants.theorySections;
            this.$scope.theorySection = this.$scope.theorySectionList[0];
            this.$scope.selectedTheorySectionId = this.$scope.theorySection.id;
            this.$scope.selectedSessionalSectionId = "null";
            this.$scope.sessionalSectionList = [];
            this.$scope.sessionalSectionList = ums.Utils.getSessionalSection(this.$scope.selectedTheorySectionId);
            this.$scope.sessionalSectionList.splice(3, 1);
            this.$scope.bulkSessionalSectionList = this.$scope.sessionalSectionList;
            $('.selectpicker').selectpicker({
                iconBase: 'fa',
                tickIcon: 'fa-check'
            });
            $("#shift").hide();
            $("#change").hide();
            $("#bulk").hide();
            this.initialize();
            setTimeout(this.$scope.showBulkAssignmentUI(), 500);
        }
        SectionAssignment.prototype.initializeSelect2 = function (selectBoxId, studentIds) {
            var data = studentIds;
            $("#" + selectBoxId).select2({
                minimumInputLength: 2,
                query: function (options) {
                    var pageSize = 100;
                    var startIndex = (options.page - 1) * pageSize;
                    var filteredData = data;
                    if (options.term && options.term.length > 0) {
                        if (!options.context) {
                            var term = options.term.toLowerCase();
                            options.context = data.filter(function (metric) {
                                return (metric.id.indexOf(term) !== -1);
                            });
                        }
                        filteredData = options.context;
                    }
                    options.callback({
                        context: filteredData,
                        results: filteredData.slice(startIndex, startIndex + pageSize),
                        more: (startIndex + pageSize) < filteredData.length
                    });
                },
                placeholder: "Select a Student"
            });
            // Her is the exmaple code for select2 with pagination.....
            //http://jsfiddle.net/Z7bDG/1/
        };
        SectionAssignment.prototype.showSingleStudentUI = function () {
            this.activateUI(1);
            this.resetMainSelections();
            this.setSelection("singleAnchor", "singleIcon");
            this.$scope.selectedOptionTitle = "View/Change Student's Section Information";
        };
        SectionAssignment.prototype.showBulkAssignmentUI = function () {
            this.activateUI(2);
            this.resetMainSelections();
            this.setSelection("bulkAnchor", "bulkIcon");
            this.$scope.selectedOptionTitle = "Bulk Section Assignment";
        };
        SectionAssignment.prototype.setSelection = function (icon1, icon2) {
            $(this.anchorPrefix + icon1).css({ "background-color": "black" });
            $(".fa." + icon2).css({ "color": "white" });
        };
        SectionAssignment.prototype.resetMainSelections = function () {
            $(this.anchorPrefix + "singleAnchor").css({ "background-color": "white" });
            $(this.anchorPrefix + "bulkAnchor").css({ "background-color": "white" });
            $(this.anchorPrefix + "shiftingAnchor").css({ "background-color": "white" });
            $(".fa.singleIcon").css({ "color": "black" });
            $(".fa.bulkIcon").css({ "color": "black" });
            $(".fa.shiftingIcon").css({ "color": "black" });
        };
        SectionAssignment.prototype.resetSubSelection = function (type) {
            if (type == "bulk_id_name") {
                $(this.anchorPrefix + "bulkStudentIdAnchor").css({ "background-color": "white" });
                $(".fa.fa-user.bulkStudentIdIcon").css({ "color": "black" });
                $(this.anchorPrefix + "bulkStudentNameAnchor").css({ "background-color": "white" });
                $(".fa.fa-indent.bulkStudentNameIcon").css({ "color": "black" });
            }
            else if (type == "shift_id_name") {
                $(this.anchorPrefix + "shiftStudentIdAnchor").css({ "background-color": "white" });
                $(".fa.fa-user.shiftStudentIdIcon").css({ "color": "black" });
                $(this.anchorPrefix + "shiftStudentNameAnchor").css({ "background-color": "white" });
                $(".fa.fa-indent.shiftStudentNameIcon").css({ "color": "black" });
            }
            else if (type == "year_semester") {
                $(this.anchorPrefix + "yearSemesterAnchor").css({ "background-color": "white" });
                $(".fa-th.yearSemesterIcon").css({ "color": "black" });
                $(this.anchorPrefix + "yearSemesterClearAnchor").css({ "background-color": "white" });
                $(".fa-align-justify.yearSemesterClearIcon").css({ "color": "black" });
            }
            else if (type == "advisor") {
                $(this.anchorPrefix + "showAdvisorAnchor").css({ "background-color": "white" });
                $(".fa.fa-sa.showAdvisorIcon").css({ "color": "black" });
                $(this.anchorPrefix + "hideAdvisorAnchor").css({ "background-color": "white" });
                $(".fa.fa-ha.hideAdvisorIcon").css({ "color": "black" });
            }
        };
        SectionAssignment.prototype.activateUI = function (activateNumber) {
            var _this = this;
            this.disableAllUI().then(function (message) {
                if (activateNumber == 1) {
                    _this.$scope.changeOptionSelected = true;
                    $("#shift").hide();
                    $("#change").show();
                    $("#bulk").hide();
                }
                else if (activateNumber == 2) {
                    _this.$scope.bulkAssignmentOptionSelected = true;
                    $("#shift").hide();
                    $("#change").hide();
                    $("#bulk").show();
                }
                else {
                    _this.$scope.shiftOptionSelected = true;
                    $("#shift").show();
                    $("#change").hide();
                    $("#bulk").hide();
                }
            });
        };
        SectionAssignment.prototype.initialize = function () {
            this.$scope.addedBulkStudentMap = {};
            this.$scope.addedShiftStudentMap = {};
            this.$scope.existingStudentsOfAdivser = [];
            this.$scope.bulkSelectedStudents = [];
            this.$scope.shiftSelectedStudents = [];
            this.$scope.selectedTeacher = "";
            this.$scope.fromStudents = [];
            this.$scope.toStudents = [];
            this.$scope.fromTeacherId = "";
            this.$scope.toTeacherId = "";
            this.$scope.teacherId = "";
            this.$scope.singleTeacher = {};
        };
        SectionAssignment.prototype.viewStudentById = function (prefix) {
            if (prefix == "bulk") {
                this.$scope.bulkShowStudentId = true;
                this.$scope.bulkShowStudentName = false;
            }
            else if (prefix == "shift") {
                this.$scope.shiftShowStudentId = true;
                this.$scope.shiftShowStudentName = false;
                this.$scope.showStudentsByYearSemester = false;
            }
            this.resetSubSelection(prefix + "_id_name");
            this.setSelection(prefix + "StudentIdAnchor", "fa-user." + prefix + "StudentIdIcon");
        };
        SectionAssignment.prototype.viewStudentByIdAndName = function (prefix) {
            if (prefix == "bulk") {
                this.$scope.bulkShowStudentId = false;
                this.$scope.bulkShowStudentName = true;
            }
            else if (prefix == "shift") {
                this.$scope.shiftShowStudentId = false;
                this.$scope.shiftShowStudentName = true;
                //this.$scope.showStudentsByYearSemester=false;
            }
            this.resetSubSelection(prefix + "_id_name");
            this.setSelection(prefix + "StudentNameAnchor", "fa-indent." + prefix + "StudentNameIcon");
        };
        SectionAssignment.prototype.viewStudentByYearSemester = function () {
            this.$scope.showStudentsByYearSemester = true;
            this.resetSubSelection("year_semester");
            this.setSelection("yearSemesterAnchor", "fa-th.yearSemesterIcon");
        };
        SectionAssignment.prototype.viewStudentWithoutYearSemester = function () {
            this.$scope.showStudentsByYearSemester = false;
            this.resetSubSelection("year_semester");
            this.setSelection("yearSemesterClearAnchor", "fa-align-justify.yearSemesterClearIcon");
        };
        SectionAssignment.prototype.toggleAdvisorInfo = function (action) {
            if (action == "show") {
                this.$scope.showSection = true;
                this.resetSubSelection("advisor");
                this.setSelection("showAdvisorAnchor", "fa-sa.showAdvisorIcon");
            }
            else {
                this.$scope.showSection = false;
                this.resetSubSelection("advisor");
                this.setSelection("hideAdvisorAnchor", "fa-ha.hideAdvisorIcon");
            }
        };
        SectionAssignment.prototype.changeColor = function (student) {
            if (student.backgroundColor == ums.Utils.SELECTED_COLOR)
                student.backgroundColor = ums.Utils.DEFAULT_COLOR;
            else
                student.backgroundColor = ums.Utils.SELECTED_COLOR;
        };
        SectionAssignment.prototype.saveSingleStudentAdvisor = function () {
            var _this = this;
            if (this.$scope.selectedSessionalSectionId == "null") {
                this.notify.warn("Select a valid Sessional SectionId");
            }
            else {
                this.$scope.singleStudent.theorySection = this.$scope.selectedTheorySectionId;
                this.$scope.singleStudent.sessionalSection = this.$scope.selectedSessionalSectionId;
                this.convertToJson([this.$scope.singleStudent]).then(function (jsonData) {
                    _this.studentService.updateStudentsSection(jsonData).then(function (data) {
                        if (data == "success")
                            _this.$scope.singleStudent.adviser = _this.$scope.singleTeacher.id;
                        _this.$scope.singleTeacher.id = "";
                    });
                });
            }
        };
        SectionAssignment.prototype.saveAdvisorForBulkStudents = function () {
            var _this = this;
            if (this.$scope.selectedBulkSessionalSectionId == "null") {
                this.notify.warn("Select a valid Sessional SectionId");
            }
            else {
                for (var i = 0; i < this.$scope.bulkSelectedStudents.length; i++) {
                    this.$scope.bulkSelectedStudents[i].theorySection = this.$scope.selectedBulkTheorySectionId;
                    this.$scope.bulkSelectedStudents[i].sessionalSection = this.$scope.selectedBulkSessionalSectionId;
                }
                this.convertToJson(this.$scope.bulkSelectedStudents).then(function (jsonData) {
                    _this.studentService.updateStudentsSection(jsonData).then(function (data) {
                        if (data == "success") {
                        }
                        _this.clearBulkStudents();
                    });
                });
            }
        };
        SectionAssignment.prototype.initializeShiftingStudents = function (teacherType) {
            var defer = this.$q.defer();
            if (teacherType == "from") {
                this.$scope.fromStudents = [];
                this.$scope.categorizedFormStudents = [];
            }
            else if (teacherType == "to") {
                this.$scope.toStudents = [];
                this.$scope.categorizedToStudents = [];
            }
            defer.resolve("success");
            return defer.promise;
        };
        SectionAssignment.prototype.addFromStudentsAndAssignTeacher = function () {
            var defer = this.$q.defer();
            var shiftSelectedStudents = [];
            for (var i = 0; i < this.$scope.fromStudents.length; i++) {
                if (this.$scope.fromStudents[i].backgroundColor == ums.Utils.SELECTED_COLOR) {
                    shiftSelectedStudents.push(this.$scope.fromStudents[i]);
                }
            }
            defer.resolve(shiftSelectedStudents);
            return defer.promise;
        };
        SectionAssignment.prototype.removeFromAddedList = function (student) {
            for (var i = 0; i < this.$scope.bulkSelectedStudents.length; i++) {
                if (this.$scope.bulkSelectedStudents[i] == student) {
                    this.$scope.bulkSelectedStudents.splice(i, 1);
                }
            }
        };
        SectionAssignment.prototype.removeFromBulkStudents = function (student) {
            for (var i = 0; i < this.$scope.bulkSelectedStudents.length; i++) {
                if (this.$scope.bulkSelectedStudents[i] == student) {
                    this.$scope.addedBulkStudentMap[student.id] = null;
                    this.$scope.bulkSelectedStudents.splice(i, 1);
                }
            }
        };
        SectionAssignment.prototype.insertIntoFromStudentsWithYearSemester = function (student) {
            var header = student.year + " Year," + student.academicSemester + " Semester";
            var key = Number(String(student.year) + "" + (String(student.academicSemester)));
            if (this.$scope.categorizedFormStudents.length == 0) {
                this.$scope.categorizedFormStudents.push(this.pushNewValueIntoCategorizedStudents(student, header, key));
            }
            else {
                var foundKey = false;
                for (var i = 0; i < this.$scope.categorizedFormStudents.length; i++) {
                    if (this.$scope.categorizedFormStudents[i].key == key) {
                        this.pushStudentIntoExistingCategorizedStudents(student, this.$scope.categorizedFormStudents[i]);
                        foundKey = true;
                        break;
                    }
                }
                if (foundKey == false) {
                    this.$scope.categorizedFormStudents.push(this.pushNewValueIntoCategorizedStudents(student, header, key));
                }
            }
            this.$scope.categorizedFormStudents.sort(function (a, b) {
                return Number(a.key) - Number(b.key);
            });
        };
        SectionAssignment.prototype.pushNewValueIntoCategorizedStudents = function (student, header, key) {
            var categorizedFromStudents = {};
            categorizedFromStudents.header = header;
            categorizedFromStudents.key = key;
            categorizedFromStudents.students = [];
            categorizedFromStudents.students.push(student);
            return categorizedFromStudents;
        };
        SectionAssignment.prototype.pushStudentIntoExistingCategorizedStudents = function (student, categorizedStudents) {
            categorizedStudents.students.push(student);
        };
        SectionAssignment.prototype.insertIntoToStudentsWithYearSemester = function (student) {
            var header = student.year + " Year," + student.academicSemester + " Semester";
            var key = Number(String(student.year) + "" + (String(student.academicSemester)));
            if (this.$scope.categorizedToStudents.length == 0) {
                this.$scope.categorizedToStudents.push(this.pushNewValueIntoCategorizedStudents(student, header, key));
            }
            else {
                var foundKey = false;
                for (var i = 0; i < this.$scope.categorizedToStudents.length; i++) {
                    if (this.$scope.categorizedToStudents[i].key == key) {
                        this.pushStudentIntoExistingCategorizedStudents(student, this.$scope.categorizedToStudents[i]);
                        foundKey = true;
                        break;
                    }
                }
                if (foundKey == false) {
                    this.$scope.categorizedToStudents.push(this.pushNewValueIntoCategorizedStudents(student, header, key));
                }
            }
            this.$scope.categorizedToStudents.sort(function (a, b) {
                return Number(a.key) - Number(b.key);
            });
        };
        SectionAssignment.prototype.getStudentsOfTeacher = function (teacherId, type) {
            var _this = this;
            var defer = this.$q.defer();
            this.studentService.getActiveStudentsOfTheTeacher(teacherId).then(function (students) {
                _this.$scope.assignedStudentsOfTheAdviser = angular.copy(students.length);
                for (var i = 0; i < students.length; i++) {
                    students[i].backgroundColor = ums.Utils.DEFAULT_COLOR;
                    if (type == _this.$scope.SINGLE_TYPE) {
                        _this.$scope.fromStudents.push(students[i]);
                        _this.insertIntoFromStudentsWithYearSemester(students[i]);
                    }
                    else if (type == _this.$scope.BULK_TYPE) {
                        _this.$scope.toStudents.push(students[i]);
                        _this.insertIntoToStudentsWithYearSemester(students[i]);
                    }
                    else {
                        _this.$scope.existingStudentsOfAdivser.push(students[i]);
                    }
                }
                defer.resolve(students);
            });
            return defer.promise;
        };
        SectionAssignment.prototype.disableAllUI = function () {
            var defer = this.$q.defer();
            this.$scope.changeOptionSelected = false;
            this.$scope.bulkAssignmentOptionSelected = false;
            this.$scope.shiftOptionSelected = false;
            defer.resolve("done");
            return defer.promise;
        };
        SectionAssignment.prototype.getActiveTeachers = function () {
            var _this = this;
            this.employeeService.getActiveTeacherByDept().then(function (teachers) {
                _this.$scope.teachers = [];
                _this.$scope.teacherIdWithTeacherMap = {};
                for (var i = 0; i < teachers.length; i++) {
                    _this.$scope.teachers.push(teachers[i]);
                    _this.$scope.teacherIdWithTeacherMap[teachers[i].id] = teachers[i];
                }
            });
        };
        SectionAssignment.prototype.getActiveStudentsOfDept = function () {
            var _this = this;
            this.$scope.showLoader = true;
            this.studentService.getActiveStudentsByDepartment().then(function (students) {
                _this.$scope.students = [];
                _this.$scope.studentIds = [];
                _this.$scope.studentIdWithStudentMap = {};
                for (var i = 0; i < students.length; i++) {
                    students[i].backgroundColor = ums.Utils.DEFAULT_COLOR;
                    students[i].text = students[i].id;
                    _this.$scope.students.push(students[i]);
                    _this.$scope.studentIds.push(students[i].id);
                    _this.$scope.studentIdWithStudentMap[_this.$scope.students[i].id] = _this.$scope.students[i];
                }
                _this.initializeSelect2("singleStudentList", _this.$scope.students);
                _this.initializeSelect2("fromStudentList", _this.$scope.students);
                _this.initializeSelect2("toStudentList", _this.$scope.students);
                _this.$scope.showLoader = false;
                _this.$scope.students = students;
            });
        };
        SectionAssignment.prototype.changeTheorySection = function (theorySection) {
            this.$scope.selectedTheorySectionId = theorySection.id;
            this.$scope.selectedSessionalSectionId = "null";
            this.$scope.sessionalSectionList = [];
            this.$scope.sessionalSectionList = ums.Utils.getSessionalSection(theorySection.name);
            this.$scope.sessionalSectionList.splice(3, 1);
        };
        SectionAssignment.prototype.changeBulkTheorySection = function (theorySection) {
            this.$scope.selectedBulkTheorySectionId = theorySection.id;
            this.$scope.selectedBulkSessionalSectionId = "null";
            this.$scope.bulkSessionalSectionList = [];
            this.$scope.bulkSessionalSectionList = ums.Utils.getSessionalSection(theorySection.name);
            this.$scope.bulkSessionalSectionList.splice(3, 1);
        };
        SectionAssignment.prototype.changeBulkSessionalSection = function (bulkSelectSessionalId) {
            if (bulkSelectSessionalId != null) {
                this.$scope.selectedBulkSessionalSectionId = bulkSelectSessionalId.id;
            }
        };
        SectionAssignment.prototype.changeSessionalSection = function (singleSelectSessionalId) {
            if (singleSelectSessionalId != null) {
                this.$scope.selectedSessionalSectionId = singleSelectSessionalId.id;
            }
        };
        SectionAssignment.prototype.searchSingleStudent = function () {
            this.$scope.singleStudent = this.$scope.studentIdWithStudentMap[this.$scope.singleStudentId];
        };
        SectionAssignment.prototype.addAStudent = function () {
            var fromStudentId = this.$scope.fromStudentId;
            if (this.$scope.addedBulkStudentMap[fromStudentId] == null && this.$scope.studentIdWithStudentMap[fromStudentId] != null) {
                this.$scope.bulkSelectedStudents.push(this.$scope.studentIdWithStudentMap[fromStudentId]);
                this.$scope.addedBulkStudentMap[fromStudentId] = 'added';
            }
        };
        SectionAssignment.prototype.addStudents = function () {
            var _this = this;
            this.$scope.showLoader = true;
            this.addStudentOfRange().then(function (data) {
                _this.$scope.showLoader = false;
            });
        };
        SectionAssignment.prototype.clearBulkStudents = function () {
            this.$scope.bulkSelectedStudents = [];
            this.$scope.addedBulkStudentMap = {};
        };
        SectionAssignment.prototype.addStudentOfRange = function () {
            var defer = this.$q.defer();
            for (var i = +this.$scope.fromStudentId; i <= +this.$scope.toStudentId; i++) {
                if (this.$scope.studentIdWithStudentMap[i.toString()] != null && this.$scope.addedBulkStudentMap[i.toString()] == null) {
                    this.$scope.bulkSelectedStudents.push(this.$scope.studentIdWithStudentMap[i.toString()]);
                }
            }
            defer.resolve('success');
            return defer.promise;
        };
        SectionAssignment.prototype.initializeExistingStudentsOfAdviser = function () {
            var defer = this.$q.defer();
            this.$scope.existingStudentsOfAdivser = [];
            defer.resolve("success");
            return defer.promise;
        };
        SectionAssignment.prototype.getExistingStudentsOfAdviser = function (teacherId) {
            var _this = this;
            if (teacherId == null || teacherId == "")
                return;
            this.initializeExistingStudentsOfAdviser().then(function (data) {
                _this.getStudentsOfTeacher(teacherId, 3);
            });
        };
        SectionAssignment.prototype.initializeTeachersStudentForBulkAssignment = function () {
            this.$scope.toStudents = [];
        };
        SectionAssignment.prototype.convertToJson = function (studentArray) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObject = [];
            for (var i = 0; i < studentArray.length; i++) {
                var item = {};
                var student = studentArray[i];
                item['id'] = student.id;
                item['theorySection'] = student.theorySection;
                item['sessionalSection'] = student.sessionalSection;
                jsonObject.push(item);
            }
            completeJson["entries"] = jsonObject;
            defer.resolve(completeJson);
            return defer.promise;
        };
        SectionAssignment.prototype.redirectToViewDownloadPage = function () {
            this.$window.open('https://' + location.hostname + '/ums-web/iums/#/sectionWiseStudentInfoReport', '_self');
        };
        SectionAssignment.$inject = ['appConstants', 'HttpClient', '$scope', '$q', '$window', 'notify', 'semesterService', 'employeeService', 'studentService'];
        return SectionAssignment;
    }());
    ums.UMS.controller("SectionAssignment", SectionAssignment);
})(ums || (ums = {}));
/*
* Rumi-21-1-1028
* carry Approval Controller
* */
var ums;
(function (ums) {
    var CarryApplicationApproval = (function () {
        function CarryApplicationApproval(appConstants, httpClient, $q, notify, deadlineExtensionService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.deadlineExtensionService = deadlineExtensionService;
            this.pagination = {};
            this.isIregularFound = false;
            this.resultsPerPage = "10";
            this.itemsPerPage = +this.resultsPerPage;
            this.pagination.currentPage = 1;
            this.pageNumber = 1;
            this.carryApprovalStatusList = [];
            this.carryApprovalStatusList = this.appConstants.carryApprovalStatus;
            this.carryApprovalStatus = this.carryApprovalStatusList[0];
            this.allSemesters = [];
            this.applicationCCIGetAll = [];
            this.applicationModalTableInfo = [];
            this.applicationModalAppliedInfo = [];
            this.applicationModalAppliedInfoUpdated = [];
            this.responseResult = [];
            this.approvalStatus = "";
            this.itemPerPageChecker = false;
            this.totalItems = 0;
            this.modalAccept = "accept";
            this.modalReject = "reject";
            this.statusDefaultWaitingForpayment = "Waiting for payment";
            this.statusDefaultApproved = "Payment Completed";
            this.carryApplicationParamId = 10;
            this.counter = 0;
            this.appliedStatus = 0;
            this.approvedStatus = 0;
            this.modalStatus = "";
            this.studentID = "";
            this.semesterId = 0;
            this.totalCarry = 0;
            this.totalApplied = 0;
            this.submitResult = 0;
            this.approvalStatusFromHead = 0;
            this.searchStudentById = "";
            this.submit_Button_Disable = true;
            this.checkBoxCounter = 0;
            this.pgDisable = false;
            this.waitingForHeadApproval = "2";
            this.approvedByHead = "7";
            this.rejectedByHead = "9";
            this.paymentCompleted = "8";
            this.statusChanged(this.carryApprovalStatus);
            this.carryLastDateFinder();
        }
        CarryApplicationApproval.prototype.carryLastDateFinder = function () {
            var _this = this;
            this.carryLastDate = "";
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationCarry/deadLine', ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                _this.carryLastDate = json.endDate;
                _this.carryStartDate = json.startDate;
                _this.carryLastDateDeadline = json.isApplicationOpen;
                _this.carryStatusShow = _this.carryLastDateDeadline == true ? "Not Allowed" : "Available";
                defer.resolve(json.date);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        CarryApplicationApproval.prototype.getSemester = function (studentIdTa, semesterIdTa) {
            var _this = this;
            this.studentID = studentIdTa;
            this.semesterId = semesterIdTa;
            this.totalCarry = 0;
            var url = '/ums-webservice-academic/academic/applicationCCI/studentId/' + this.studentID + '/semesterId/' + this.semesterId;
            var defer = this.$q.defer();
            var modalCarryInfo = [];
            this.httpClient.get(url, 'application/json', function (json, etag) {
                var modalCarryInfo = json.entries;
                _this.applicationModalTableInfo = modalCarryInfo;
                _this.totalCarry = _this.applicationModalTableInfo.length;
                defer.resolve(_this.applicationModalTableInfo);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting carry data applications");
            });
            return defer.promise;
        };
        CarryApplicationApproval.prototype.setResultsPerPage = function (resultsPerPage) {
            if (resultsPerPage > 0) {
                this.itemPerPageChecker = false;
                this.itemsPerPage = resultsPerPage;
                this.statusChanged(this.carryApprovalStatus);
            }
            else {
                this.itemPerPageChecker = true;
            }
        };
        CarryApplicationApproval.prototype.statusChanged = function (carryApplicationStatus) {
            var _this = this;
            this.carryApprovalStatus = carryApplicationStatus;
            this.pgDisable = false;
            if (this.carryApprovalStatus.name.match("Waiting for head's approval")) {
                this.approvalStatus = this.waitingForHeadApproval;
            }
            else if (this.carryApprovalStatus.name.match("Approved By Head")) {
                this.approvalStatus = this.approvedByHead;
            }
            else if (this.carryApprovalStatus.name.match("Rejected By Head")) {
                this.approvalStatus = this.rejectedByHead;
            }
            else {
                this.approvalStatus = this.paymentCompleted;
            }
            var defer = this.$q.defer();
            this.applicationCCI = [];
            var appCCIArr = [];
            this.httpClient.get('/ums-webservice-academic/academic/applicationCCI/approvalStatus/' + this.approvalStatus + '/currentPage/' + this.pagination.currentPage + '/itemPerPage/' + this.itemsPerPage, 'application/json', function (json, etag) {
                appCCIArr = json.entries;
                _this.applicationCCI = appCCIArr;
                _this.totalItems = Number(json.appSize);
                defer.resolve(appCCIArr);
            }, function (response) {
                console.error(response);
            });
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
            return defer.promise;
        };
        CarryApplicationApproval.prototype.getAppliedAndApprovedInfo = function (studentidTa, semesteridTa) {
            var _this = this;
            this.studentID = studentidTa;
            this.semesterId = semesteridTa;
            this.totalApplied = 0;
            var defer = this.$q.defer();
            var app = [];
            this.applicationModalAppliedInfo = [];
            this.httpClient.get('/ums-webservice-academic/academic/applicationCCI/getAllcarryInfo/studentId/' + this.studentID + '/semesterId/' + this.semesterId, 'application/json', function (json, etag) {
                app = json.entries;
                _this.applicationModalAppliedInfo = app;
                _this.irregularCourses = _this.applicationModalAppliedInfo.filter(function (f) { return f.regularCourse == 0; });
                if (_this.irregularCourses.length != 0) {
                    _this.isIregularFound = true;
                }
                else {
                    _this.isIregularFound = false;
                }
                console.log("Irregular Course");
                console.log(_this.irregularCourses);
                _this.totalApplied = _this.applicationModalAppliedInfo.length;
                defer.resolve(app);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        CarryApplicationApproval.prototype.pageChanged = function (pageNumber) {
            this.setCurrent(pageNumber);
        };
        CarryApplicationApproval.prototype.setCurrent = function (currentPage) {
            if (this.itemsPerPage > 0) {
                this.pagination.currentPage = currentPage;
                this.statusChanged(this.carryApprovalStatus);
            }
            else {
                console.log("Null Values !!!!");
            }
        };
        CarryApplicationApproval.prototype.click = function (studentId, semesterId, fullName, courseTitle, courseNo, year, semester) {
            var _this = this;
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
            this.getAppliedAndApprovedInfo(studentId, semesterId).then(function (value) {
                _this.getSemester(studentId, semesterId);
            }).then(function (data) {
                console.log("Original Deadline:  " + _this.carryLastDateDeadline);
                if (!_this.carryLastDateDeadline) {
                    _this.deadlineExtensionService.getExtendedDeadlineStatus(studentId, semesterId, _this.carryApplicationParamId).then(function (response) {
                        console.log("My Response:: " + response);
                        _this.extendedDeadlineStatus = response;
                        console.log("My Response In Ts :: " + _this.extendedDeadlineStatus);
                    });
                }
            });
            this.studentIdTA = studentId;
            this.semesterIdTA = semesterId;
            this.fullNameTA = fullName;
            this.studentYear = year;
            this.studentSemester = semester;
            this.courseTitleTA = courseTitle;
            this.courseNoTA = courseNo;
        };
        CarryApplicationApproval.prototype.close = function () {
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
        };
        CarryApplicationApproval.prototype.submitModal = function (submitStatus) {
            var _this = this;
            var appliedValue = [];
            this.applicationModalAppliedInfoUpdated = [];
            if (submitStatus == "accept") {
                if (this.applicationModalAppliedInfo.filter(function (f) { return f.apply === true && f.regularCourse == 0; }).length != 0) {
                    $('#modal-irregularCourseApprovalConfirmation').modal('show');
                }
                else {
                    this.acceptDataSend();
                }
            }
            else {
                this.approvalStatusFromHead = 9;
                this.applicationModalAppliedInfoUpdated = this.applicationModalAppliedInfo.filter(function (f) { return f.apply === true; });
                this.convertToJson(this.applicationModalAppliedInfo.filter(function (f) { return f.apply === true; })).then(function (app) {
                    _this.responseResult = [];
                    _this.httpClient.post('academic/applicationCCI/appliedAndApproved/studentId/' + _this.studentIdTA + '/semesterId/' + _this.semesterIdTA, app, 'application/json')
                        .success(function (data, status, header, config) {
                        _this.notify.success("Rejected By Head of the Department");
                        _this.statusChanged(_this.carryApprovalStatus);
                    }).error(function (data) {
                    });
                });
            }
        };
        CarryApplicationApproval.prototype.acceptDataSend = function () {
            var _this = this;
            $('#modal-irregularCourseApprovalConfirmation').modal('hide');
            this.approvalStatusFromHead = 7;
            this.applicationModalAppliedInfoUpdated = this.applicationModalAppliedInfo.filter(function (f) { return f.apply === true; });
            this.convertToJson(this.applicationModalAppliedInfo.filter(function (f) { return f.apply === true; })).then(function (app) {
                _this.responseResult = [];
                _this.httpClient.post('academic/applicationCCI/appliedAndApproved/studentId/' + _this.studentIdTA + '/semesterId/' + _this.semesterIdTA, app, 'application/json')
                    .success(function (data, status, header, config) {
                    _this.notify.success("Approved By Head of the Department");
                    _this.statusChanged(_this.carryApprovalStatus);
                }).error(function (data) {
                });
            });
        };
        CarryApplicationApproval.prototype.convertToJson = function (result) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < result.length; i++) {
                var item = {};
                if (result[i].apply == true) {
                    item["courseId"] = result[i].courseId;
                    item["cciStatus"] = this.approvalStatusFromHead;
                    jsonObj.push(item);
                }
            }
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        CarryApplicationApproval.prototype.searchByStudentId = function (studentId) {
            var _this = this;
            this.searchStudentById = studentId;
            if (this.searchStudentById.length >= 9) {
                this.pgDisable = true;
                var defer = this.$q.defer();
                this.applicationCCI = [];
                var appCCIArr = [];
                this.httpClient.get('/ums-webservice-academic/academic/applicationCCI/searchByStudentId/approvalStatus/' + this.approvalStatus + '/studentId/' + this.searchStudentById, 'application/json', function (json, etag) {
                    appCCIArr = json.entries;
                    _this.applicationCCI = appCCIArr;
                    _this.totalItems = _this.applicationCCI.length;
                    if (_this.applicationCCI.length < 1) {
                        _this.notify.error("No Students Records Found");
                    }
                    else
                        _this.totalItems = _this.applicationCCI.length;
                    defer.resolve(appCCIArr);
                }, function (response) {
                    _this.notify.error("No Records Found For this Student Id");
                });
                this.searchStudentById = "";
                return defer.promise;
            }
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
        };
        CarryApplicationApproval.prototype.checkMoreThanOneSelectionSubmit = function (result) {
            if (result.apply) {
                this.checkBoxCounter++;
                this.enableOrDisableSubmitButton();
            }
            else {
                this.checkBoxCounter--;
                this.enableOrDisableSubmitButton();
            }
        };
        CarryApplicationApproval.prototype.enableOrDisableSubmitButton = function () {
            if (this.checkBoxCounter > 0) {
                this.submit_Button_Disable = false;
            }
            else {
                this.submit_Button_Disable = true;
            }
        };
        CarryApplicationApproval.$inject = ['appConstants', 'HttpClient', '$q', 'notify', 'deadlineExtensionService'];
        return CarryApplicationApproval;
    }());
    ums.UMS.controller("CarryApplicationApproval", CarryApplicationApproval);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CciReports = (function () {
        function CciReports(appConstants, httpClient, $q, notify, programService, semesterService, cciReportService, userService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.programService = programService;
            this.semesterService = semesterService;
            this.cciReportService = cciReportService;
            this.userService = userService;
            this.isExamTypeCarry = false;
            this.isStatAvailable = false;
            this.showCciStats = false;
            this.showTotalRecords = true;
            this.isRegularViewAvailable = true;
            this.examIndicator = true;
            this.userService.fetchCurrentUserInfo().then(function (d) {
                _this.departmentId = d.departmentId;
                _this.roleId = d.roleId;
                if (_this.roleId == 1021) {
                    _this.showTotalRecords = false;
                }
            });
            this.courseNo = "";
            this.programName = "All";
            this.coeReportType = [];
            this.coeReportType = this.appConstants.coeReportType;
            this.examType = this.coeReportType[0];
            this.selectedExamTypeId = this.examType.id;
            this.selectedExamTypeName = this.examType.name;
            this.yearSemList = [];
            this.yearSemList = this.appConstants.yearSemester;
            this.yearSem = this.yearSemList[0];
            this.yearSemName = "";
            this.cciReportList = [];
            this.programId = 0;
            this.getSemesters();
        }
        CciReports.prototype.showRegularView = function () {
            this.isRegularViewAvailable = true;
            this.showCciStats = false;
            this.isRaAvailable = false;
            this.isStatAvailable = false;
            this.examIndicator = false;
            this.search();
        };
        CciReports.prototype.cciStats = function () {
            var _this = this;
            this.showCciStats = true;
            this.isRaAvailable = false;
            this.isRegularViewAvailable = false;
            this.isStatAvailable = false;
            this.examIndicator = false;
            this.cciReportService.getCciStatistics(this.selectedSemesterId).then(function (data) {
                _this.cciStatsList = [];
                _this.cciStatsList = data;
                _this.cciStatsListLength = data.length;
            });
        };
        CciReports.prototype.getPrograms = function () {
            var _this = this;
            this.programs = [];
            this.programService.fetchProgram(11).then(function (data) {
                var app = [];
                app = data;
                _this.programs = app;
                if (_this.roleId == 1021) {
                    _this.programs = _this.programs.filter(function (f) { return f.departmentId == _this.departmentId; });
                    _this.program = _this.programs[0];
                    _this.programId = _this.program.id;
                    _this.programName = _this.program.shortName;
                }
            });
        };
        CciReports.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.getPrevSemester(11).then(function (semesters) {
            });
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        _this.semesterName = semesters[i].name;
                        break;
                    }
                }
                _this.selectedSemesterId = semesters[i].id;
            }).then(function (data) {
            });
        };
        CciReports.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
        };
        CciReports.prototype.changeYearSem = function (value) {
            if (value.name.length > 4) {
                this.yearSemName = "";
            }
            else {
                this.yearSemName = value.name;
            }
        };
        CciReports.prototype.changeProgram = function (data) {
            if (this.showTotalRecords) {
                try {
                    this.programId = data.id;
                    this.programName = data.shortName;
                }
                catch (err) {
                    this.programId = 0;
                    this.programName = "All";
                }
            }
        };
        CciReports.prototype.changeExamType = function (value) {
            this.selectedExamTypeId = value.id;
            this.selectedExamTypeName = value.name;
        };
        CciReports.prototype.search = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.isRegularViewAvailable = true;
            this.examIndicator = true;
            this.showCciStats = false;
            this.isStatAvailable = false;
            this.isExamTypeCarry = false;
            this.isRaAvailable = false;
            if (this.selectedExamTypeId == 3 || this.selectedExamTypeId == 4) {
                this.isExamTypeCarry = true;
            }
            else if (this.selectedExamTypeId == 6) {
                this.isRaAvailable = true;
            }
            else {
                this.isExamTypeCarry = false;
                this.isRaAvailable = false;
            }
            this.getPrograms();
            if (this.isRaAvailable) {
                this.getReadmission();
            }
            else {
                this.cciReportService.getCourseWiseInfo(this.selectedSemesterId, this.selectedExamTypeId).then(function (data) {
                    _this.cciReportList = data;
                    _this.cciReportListLength = data.length;
                });
            }
        };
        CciReports.prototype.getReadmission = function () {
            var _this = this;
            this.isRegularViewAvailable = false;
            this.isRaAvailable = true;
            this.isExamTypeCarry = false;
            this.showCciStats = false;
            this.cciReportService.getReadmissionInfo(this.selectedSemesterId).then(function (data) {
                _this.reAdmissionList = [];
                _this.reAdmissionList = data;
            });
        };
        CciReports.prototype.getPreviousCourses = function () {
            var _this = this;
            var type;
            this.isStatAvailable = true;
            this.isRegularViewAvailable = true;
            if (this.isExamTypeCarry) {
                type = 'CCI';
            }
            else {
                type = 'RA';
            }
            this.showCciStats = false;
            this.examIndicator = false;
            this.cciReportService.getPreviousSyllabusCourseWiseInfo(this.selectedSemesterId, this.selectedExamTypeId, type).then(function (data) {
                _this.cciReportList = [];
                _this.cciReportList = data;
            });
        };
        CciReports.prototype.fetchInfo = function (courseId, courseNo, total) {
            var _this = this;
            this.courseId = courseId;
            this.selectedCourseNo = courseNo;
            this.studentNumber = total;
            this.studentId = "";
            this.cciReportService.getCourseWiseStudentInfo(this.courseId, this.selectedSemesterId, this.selectedExamTypeId).then(function (data) {
                _this.studentDetailsList = [];
                _this.studentDetailsList = data;
            });
        };
        CciReports.prototype.downloadReport = function () {
            if (this.isRegularViewAvailable) {
                if (this.isStatAvailable) {
                    this.cciReportService.downloadPreviousCourseExcelFile(this.selectedSemesterId, this.selectedExamTypeId, this.programId, this.yearSemName, this.selectedExamTypeName, this.semesterName, this.programName, this.isExamTypeCarry ? 'CCI' : 'RA');
                }
                else {
                    this.cciReportService.downloadCciReportExcelFile(this.selectedSemesterId, this.selectedExamTypeId, this.programId, this.yearSemName, this.selectedExamTypeName, this.semesterName, this.programName);
                }
            }
            else if (this.showCciStats) {
                this.cciReportService.downloadCciStatsReport(this.selectedSemesterId, this.programId, this.yearSemName, this.semesterName, this.programName);
            }
            else {
                this.cciReportService.downloadReAdmissionStats(this.selectedSemesterId, this.programId, this.yearSemName, this.semesterName, this.programName);
            }
        };
        CciReports.$inject = ['appConstants', 'HttpClient', '$q', 'notify', 'programService', 'semesterService', 'cciReportService', 'userService'];
        return CciReports;
    }());
    ums.UMS.controller("cciReports", CciReports);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CciReportServices = (function () {
        function CciReportServices(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        CciReportServices.prototype.getCourseWiseInfo = function (semesterId, examType) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationCCI/courseWiseStudent/semesterId/' + semesterId + '/examType/' + examType, 'application/json', function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        CciReportServices.prototype.getPreviousSyllabusCourseWiseInfo = function (semesterId, examType, type) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationCCI/previousCourseWiseStudent/semesterId/' + semesterId + '/examType/' + examType + '/type/' + type, 'application/json', function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        CciReportServices.prototype.getCciStatistics = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationCCI/cciStats/semesterId/' + semesterId, 'application/json', function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        CciReportServices.prototype.getReadmissionInfo = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationCCI/reAdmissionInfo/semesterId/' + semesterId, 'application/json', function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        CciReportServices.prototype.getCourseWiseStudentInfo = function (courseId, semesterId, examType) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationCCI/courseWiseStudentInfo/courseId/' + courseId + '/semesterId/' + semesterId + '/examType/' + examType, 'application/json', function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        CciReportServices.prototype.downloadCciReportExcelFile = function (semesterId, examType, programId, yearSemester, examName, semesterName, programName) {
            if (yearSemester == "") {
                yearSemester = "All";
            }
            var program = programName.replace(/[^\w]/gi, '_');
            var fileName = examName + "_Report_" + semesterName + "_Program: " + program + "_Year-Semester: " + yearSemester;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = 'academic/cciReports/cciExamReport/semesterId/' + semesterId + '/examType/' + examType + '/programId/' + programId + '/ys/' + yearSemester;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
            }, 'arraybuffer');
        };
        CciReportServices.prototype.downloadPreviousCourseExcelFile = function (semesterId, examType, programId, yearSemester, examName, semesterName, programName, type) {
            if (yearSemester == "") {
                yearSemester = "All";
            }
            var program = programName.replace(/[^\w]/gi, '_');
            var fileName = examName + "_Previous_Syllabus_" + semesterName + "_Program: " + program + "_Year-Semester: " + yearSemester;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = 'academic/cciReports/prevSyllabusCourse/semesterId/' + semesterId + '/examType/' + examType + '/programId/' + programId + '/ys/' + yearSemester + '/type/' + type;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
            }, 'arraybuffer');
        };
        CciReportServices.prototype.downloadCciStatsReport = function (semesterId, programId, yearSemester, semesterName, programName) {
            if (yearSemester == "") {
                yearSemester = "All";
            }
            var program = programName.replace(/[^\w]/gi, '_');
            var fileName = "CCI_Statistics_" + semesterName + "_Program: " + program + "_Year-Semester: " + yearSemester;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = 'academic/cciReports/cciStats/semesterId/' + semesterId + '/programId/' + programId + '/ys/' + yearSemester;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
            }, 'arraybuffer');
        };
        CciReportServices.prototype.downloadReAdmissionStats = function (semesterId, programId, yearSemester, semesterName, programName) {
            if (yearSemester == "") {
                yearSemester = "All";
            }
            var program = programName.replace(/[^\w]/gi, '_');
            var fileName = "READMISSION_STATS_" + semesterName + "_Program: " + program + "_Year-Semester: " + yearSemester;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = 'academic/cciReports/readmission/semesterId/' + semesterId + '/programId/' + programId + '/ys/' + yearSemester;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
            }, 'arraybuffer');
        };
        CciReportServices.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return CciReportServices;
    }());
    ums.CciReportServices = CciReportServices;
    ums.UMS.service("cciReportService", CciReportServices);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ApplicationCarry = (function () {
        function ApplicationCarry(appConstants, httpClient, $scope, $q, notify, feeReportService, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.feeReportService = feeReportService;
            this.$sce = $sce;
            this.$window = $window;
            $scope.checkBoxCounter = 0;
            $scope.CARRY = 3;
            $scope.SPECIAL_CARRY = 4;
            $scope.statusApproved = 8;
            $scope.statusWaitingForPayment = 7;
            $scope.statusWaitingforHeadsApproval = 2;
            $scope.statusRejected = 9;
            //rumi
            $scope.carry_status_initial = 14;
            $scope.pendingApprovedStatus = 0;
            $scope.ugResultsForSave = [];
            $scope.carrylastDate = "";
            $scope.submit_Button_Disable = true;
            //-----
            $scope.submitButtonClicked = false;
            $scope.applicationAllowed = false;
            $scope.applicationCCIFound = false;
            $scope.loadingVisibility = false;
            $scope.appcci_load_status = true;
            $scope.isSemesterLimitOfCarryAvailable = true;
            $scope.isStudentRegistered = true;
            $scope.hasPunishment = false;
            $scope.applicationMessage = "";
            $scope.submitButtonParameter = "";
            $scope.registrationResults = [];
            $scope.initialization = this.initialization.bind(this);
            $scope.getRegistrationResultInfo = this.getRegistrationResultInfo.bind(this);
            $scope.getApplicationCCIInfo = this.getApplicationCCIInfo.bind(this);
            $scope.postInitialization = this.postInitialization.bind(this);
            $scope.checkMoreThanOneSelectionSubmit = this.checkMoreThanOneSelectionSubmit.bind(this);
            $scope.makeDataEmpty = this.makeDataEmpty.bind(this);
            $scope.receipt = this.receipt.bind(this);
            $scope.carrylastDate = this.carryLastDateFinder.bind(this);
            $scope.save = this.save.bind(this);
            $scope.convertToJson = this.convertToJson.bind(this);
            this.initialization();
        }
        ApplicationCarry.prototype.receipt = function (transactionId) {
            this.feeReportService.receipt(transactionId);
        };
        ApplicationCarry.prototype.carryLastDateFinder = function () {
            var _this = this;
            this.$scope.carrylastDate = "";
            var defer = this.$q.defer();
            var carryLastDate_check = [];
            this.httpClient.get('academic/applicationCarry/deadLine', ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                _this.$scope.carrylastDate = json.endDate;
                _this.$scope.carryStartDate = json.startDate;
                _this.$scope.isApplicationOpen = json.isApplicationOpen;
                _this.$scope.isBeforeStartDate = json.isBeforeStartDate;
                defer.resolve(json.date);
            }, function (response) {
            });
            return defer.promise;
        };
        ApplicationCarry.prototype.save = function () {
            var _this = this;
            this.convertToJson(this.$scope.registrationResults).then(function (json) {
                _this.$scope.loadingVisibility = true;
                _this.$scope.responseResults = [];
                _this.httpClient.post('academic/applicationCarry/save', json, 'application/json')
                    .success(function (data, status, header, config) {
                    _this.$scope.submitButtonClicked = false;
                    console.log("Rumi");
                    _this.$scope.checkBoxCounter = 0;
                    _this.$scope.submit_Button_Disable = true;
                    _this.initialization();
                    _this.$scope.loadingVisibility = false;
                    _this.notify.success("Data Saved successfully");
                }).error(function (data) {
                    _this.notify.error("An error has stopped saving data");
                });
            });
        };
        ApplicationCarry.prototype.makeDataEmpty = function (resultArr) {
            this.$scope.resultCarryNumber = 0;
            for (var i = 0; i < resultArr.length; i++) {
                if (resultArr[i].type == ApplicationCarry.CARRY) {
                    this.$scope.resultCarryNumber += 1;
                }
                resultArr[i].backgroundColor = "white";
                resultArr[i].color = "black";
                resultArr[i].status = "one";
                resultArr[i].apply = false;
            }
            return resultArr;
        };
        ApplicationCarry.prototype.checkMoreThanOneSelectionSubmit = function (result) {
            if (result.apply) {
                this.$scope.checkBoxCounter++;
                this.enableOrDisableSubmitButton();
            }
            else {
                this.$scope.checkBoxCounter--;
                this.enableOrDisableSubmitButton();
            }
        };
        ApplicationCarry.prototype.enableOrDisableSubmitButton = function () {
            if (this.$scope.checkBoxCounter > 0) {
                this.$scope.submit_Button_Disable = false;
            }
            else {
                this.$scope.submit_Button_Disable = true;
            }
        };
        ApplicationCarry.prototype.initialization = function () {
            this.carryLastDateFinder();
            this.getApplicationCCIInfo();
        };
        ApplicationCarry.prototype.postInitialization = function () {
            this.getRegistrationResult();
            this.$scope.applicationCCIFound = false;
        };
        ApplicationCarry.prototype.getRegistrationResult = function () {
            var _this = this;
            this.getRegistrationResultInfo().then(function (resultArr) {
                _this.$scope.registrationResults = _this.makeDataEmpty(resultArr);
            });
        };
        ApplicationCarry.prototype.getRegistrationResultInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            var registrationResult = [];
            this.httpClient.get('academic/registrationResults/nonAppliedCarryCourses', 'application/json', function (json, etag) {
                registrationResult = json.entries;
                _this.$scope.isSemesterLimitOfCarryAvailable = json.isEligibleForCarry;
                _this.$scope.isStudentRegistered = json.isStudentRegistered;
                _this.$scope.hasPunishment = json.hasPunishment;
                defer.resolve(registrationResult);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ApplicationCarry.prototype.getApplicationCCIInfo = function () {
            var _this = this;
            this.$scope.applicationCCI = [];
            this.$scope.appCCICarryNumber = 0;
            this.$scope.pendingApprovedStatus = 0;
            var defer = this.$q.defer();
            var appCCIArr = [];
            this.httpClient.get('academic/applicationCarry/appliedCourses', 'application/json', function (json, etag) {
                appCCIArr = json.entries;
                _this.$scope.applicationCCI = appCCIArr;
                _this.$scope.transactionIdMapWithCCI = {};
                _this.extractDataFromApplicationCCI(appCCIArr).then(function (appCCI) {
                    _this.assignRowSpan();
                });
                _this.postInitialization();
                defer.resolve(appCCIArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ApplicationCarry.prototype.assignRowSpan = function () {
            var _this = this;
            this.$scope.applicationCCI.forEach(function (a) {
                var applicationCCIList = _this.$scope.transactionIdMapWithCCI[a.transactionId];
                applicationCCIList[0].rowSpan = applicationCCIList.length;
            });
        };
        ApplicationCarry.prototype.extractDataFromApplicationCCI = function (appCCIArr) {
            var defer = this.$q.defer();
            for (var i = 0; i < appCCIArr.length; i++) {
                this.createApplicationCCIGroupByTransactionId(appCCIArr[i]);
                if (appCCIArr[i].applicationType == ApplicationCarry.SPECIAL_CARRY) {
                    this.$scope.appCCISpecialCarryNumber += 1;
                }
                else {
                    this.$scope.appCCICarryNumber += 1;
                }
            }
            defer.resolve(appCCIArr);
            return defer.promise;
        };
        ApplicationCarry.prototype.createApplicationCCIGroupByTransactionId = function (applicationCCI) {
            if (this.$scope.transactionIdMapWithCCI[applicationCCI.transactionId] == undefined || this.$scope.transactionIdMapWithCCI[applicationCCI.transactionId] == null) {
                var applicationCCIArrays = [];
                applicationCCIArrays.push(applicationCCI);
                this.$scope.transactionIdMapWithCCI[applicationCCI.transactionId] = applicationCCIArrays;
            }
            else {
                var applicationCCIArrays = this.$scope.transactionIdMapWithCCI[applicationCCI.transactionId];
                applicationCCIArrays.push(applicationCCI);
                this.$scope.transactionIdMapWithCCI[applicationCCI.transactionId] = applicationCCIArrays;
            }
        };
        ApplicationCarry.prototype.convertToJson = function (result) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            console.log("Result IS: ");
            console.log(result);
            for (var i = 0; i < this.$scope.registrationResults.length; i++) {
                var item = {};
                if (this.$scope.registrationResults[i].apply == true) {
                    var a = this.$scope.registrationResults[i];
                    item["courseId"] = this.$scope.registrationResults[i].courseId;
                    item["applicationType"] = a.type;
                    this.$scope.carry_status_initial = 2;
                    item["cciStatus"] = this.$scope.carry_status_initial;
                    jsonObj.push(item);
                }
            }
            console.log("JSON OBJECT");
            console.log(jsonObj);
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        ApplicationCarry.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', 'FeeReportService', '$sce', '$window'];
        ApplicationCarry.CARRY = 3;
        ApplicationCarry.SPECIAL_CARRY = 4;
        return ApplicationCarry;
    }());
    ums.ApplicationCarry = ApplicationCarry;
    ums.UMS.controller("ApplicationCarry", ApplicationCarry);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ApplicationCarryService = (function () {
        function ApplicationCarryService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        ApplicationCarryService.prototype.getNonAppliedCarryCoursesByStudentId = function (studentId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/registrationResults/nonAppliedCarryCourses/student-id/' + studentId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        ApplicationCarryService.prototype.getAppliedCarryCourses = function (studentId, semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationCarry/appliedCourses/studentId/' + studentId + '/semesterId/' + semesterId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ApplicationCarryService.$inject = ['HttpClient', '$q', 'notify'];
        return ApplicationCarryService;
    }());
    ums.ApplicationCarryService = ApplicationCarryService;
    ums.UMS.service("applicationCarryService", ApplicationCarryService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ApplicationClearanceImprovement = (function () {
        function ApplicationClearanceImprovement(appConstants, httpClient, $scope, $q, notify, feeReportService, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.feeReportService = feeReportService;
            this.$sce = $sce;
            this.$window = $window;
            $scope.totalSelectedCourse = 0;
            $scope.IMPROVEMENT = 5;
            $scope.CLEARANCE = 2;
            $scope.statusApproved = 8;
            $scope.statusWaitingForPayment = 7;
            $scope.isImprovementLimitCrossed = false;
            $scope.checkImprovementLimitBeforeSubmit = 0;
            //-----
            $scope.isExpelledLimitCrossed = false;
            $scope.submitButtonClicked = false;
            $scope.loadingVisibility = false;
            $scope.applicationMessage = "";
            $scope.registrationResults = [];
            $scope.initialization = this.initialization.bind(this);
            $scope.getApplicationEligibleClearanceImprovementCourses = this.getApplicationEligibleClearanceImprovementCourses.bind(this);
            $scope.getAppliedCourses = this.getAppliedCourses.bind(this);
            $scope.calculateTotalSelectedCourse = this.calculateTotalSelectedCourse.bind(this);
            $scope.clearData = this.clearData.bind(this);
            $scope.receipt = this.receipt.bind(this);
            $scope.improvementLimitCalculation = this.improvementLimitCalculation.bind(this);
            $scope.apply = this.apply.bind(this);
            $scope.getImprovementExamHistory = this.getImprovementExamHistory.bind(this);
            $scope.convertToJson = this.convertToJson.bind(this);
            this.initialization();
        }
        ApplicationClearanceImprovement.prototype.receipt = function (transactionId) {
            this.feeReportService.receipt(transactionId);
        };
        ApplicationClearanceImprovement.prototype.improvementLimitCalculation = function () {
            var _this = this;
            this.$scope.improvementCount = 0;
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationCCI/improvementCount', 'application/json', function (json, etag) {
                _this.$scope.improvementCount = json;
                _this.$scope.isImprovementLimitCrossed = _this.$scope.improvementCount < 4 ? false : true;
                _this.$scope.checkImprovementLimitBeforeSubmit = _this.$scope.improvementCount;
                defer.resolve(_this.$scope.improvementCount);
            }, function (response) {
            });
            return defer.promise;
        };
        ApplicationClearanceImprovement.prototype.apply = function () {
            var _this = this;
            this.convertToJson(this.$scope.registrationResults).then(function (json) {
                if (_this.$scope.checkImprovementLimitBeforeSubmit <= 4) {
                    _this.$scope.loadingVisibility = true;
                    _this.$scope.responseResults = [];
                    _this.httpClient.post('academic/applicationCCI/saveClearanceAndImprovementInfo', json, 'application/json')
                        .success(function (data, status, header, config) {
                        _this.$scope.submitButtonClicked = false;
                        _this.$scope.totalSelectedCourse = 0;
                        _this.initialization();
                        _this.$scope.loadingVisibility = false;
                        _this.notify.success("Data Saved successfully");
                    }).error(function (data) {
                        _this.notify.error("An error has stopped saving data");
                    });
                }
                else {
                    _this.notify.error("Improvement limit crossed");
                    _this.$scope.checkImprovementLimitBeforeSubmit = _this.$scope.improvementCount;
                }
            });
        };
        ApplicationClearanceImprovement.prototype.clearData = function (resultArr) {
            this.$scope.totalEligibleClearance = 0;
            this.$scope.totalEligibleImprovement = 0;
            for (var i = 0; i < resultArr.length; i++) {
                if (resultArr[i].type == ApplicationClearanceImprovement.CLEARANCE) {
                    this.$scope.totalEligibleClearance += 1;
                }
                else if (resultArr[i].type == ApplicationClearanceImprovement.IMPROVEMENT) {
                    this.$scope.totalEligibleImprovement += 1;
                }
                resultArr[i].backgroundColor = "white";
                resultArr[i].color = "black";
                resultArr[i].status = "one";
                resultArr[i].apply = false;
            }
            this.$scope.loadingVisibility = false;
            return resultArr;
        };
        ApplicationClearanceImprovement.prototype.calculateTotalSelectedCourse = function (result) {
            if (result.apply)
                this.$scope.totalSelectedCourse++;
            else
                this.$scope.totalSelectedCourse--;
        };
        ApplicationClearanceImprovement.prototype.initialization = function () {
            this.$scope.loadingVisibility = true;
            this.improvementLimitCalculation();
            this.getAppliedCourses();
        };
        ApplicationClearanceImprovement.prototype.getApplicationEligibleCourses = function () {
            var _this = this;
            this.getApplicationEligibleClearanceImprovementCourses().then(function (resultArr) {
                _this.$scope.registrationResults = _this.clearData(resultArr);
            });
        };
        ApplicationClearanceImprovement.prototype.getApplicationEligibleClearanceImprovementCourses = function () {
            var _this = this;
            var defer = this.$q.defer();
            var registrationResult = [];
            this.httpClient.get('academic/applicationEligibleClearanceImprovementCourses', 'application/json', function (json, etag) {
                registrationResult = json.entries;
                _this.$scope.isExpelledLimitCrossed = json.totalExpelled > 1 ? true : false;
                defer.resolve(registrationResult);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ApplicationClearanceImprovement.prototype.getAppliedCourses = function () {
            var _this = this;
            this.$scope.applicationClearanceImprovement = [];
            this.$scope.totalAppliedClearance = 0;
            this.$scope.totalAppliedImprovement = 0;
            var defer = this.$q.defer();
            var appCCIArr = [];
            this.httpClient.get('academic/applicationCCI/appliedClearanceImprovementCourses', 'application/json', function (json, etag) {
                appCCIArr = json.entries;
                _this.$scope.applicationClearanceImprovement = appCCIArr;
                _this.calculateAppliedCount(appCCIArr).then(function (appCCI) {
                });
                _this.getApplicationEligibleCourses();
                defer.resolve(appCCIArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ApplicationClearanceImprovement.prototype.calculateAppliedCount = function (appCCIArr) {
            var defer = this.$q.defer();
            for (var i = 0; i < appCCIArr.length; i++) {
                if (appCCIArr[i].applicationType == ApplicationClearanceImprovement.CLEARANCE) {
                    this.$scope.totalAppliedClearance += 1;
                }
                if (appCCIArr[i].applicationType == ApplicationClearanceImprovement.IMPROVEMENT) {
                    this.$scope.totalAppliedImprovement += 1;
                }
            }
            defer.resolve(appCCIArr);
            return defer.promise;
        };
        ApplicationClearanceImprovement.prototype.getImprovementExamHistory = function () {
            var _this = this;
            var defer = this.$q.defer();
            var appCCIArr = [];
            this.httpClient.get('academic/applicationCCI/ApprovedImprovementInfo', 'application/json', function (json, etag) {
                appCCIArr = json.entries;
                _this.$scope.appImpApprove = appCCIArr;
                defer.resolve(appCCIArr);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ApplicationClearanceImprovement.prototype.convertToJson = function (result) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < this.$scope.registrationResults.length; i++) {
                var item = {};
                if (this.$scope.registrationResults[i].apply == true) {
                    var a = this.$scope.registrationResults[i];
                    item["courseId"] = this.$scope.registrationResults[i].courseId;
                    item["applicationType"] = a.type;
                    if (a.type == ApplicationClearanceImprovement.IMPROVEMENT) {
                        this.$scope.checkImprovementLimitBeforeSubmit++;
                    }
                    if (a.extendedLastApplyDate == "Not Extended") {
                        item["lastApplyDate"] = a.lastApplyDate;
                    }
                    else {
                        item["lastApplyDate"] = a.extendedLastApplyDate;
                    }
                    item["cciStatus"] = this.$scope.statusWaitingForPayment;
                    jsonObj.push(item);
                }
            }
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        ApplicationClearanceImprovement.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', 'FeeReportService', '$sce', '$window'];
        ApplicationClearanceImprovement.CLEARANCE = 2;
        ApplicationClearanceImprovement.IMPROVEMENT = 5;
        return ApplicationClearanceImprovement;
    }());
    ums.ApplicationClearanceImprovement = ApplicationClearanceImprovement;
    ums.UMS.controller("ApplicationClearanceImprovement", ApplicationClearanceImprovement);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ApplicationClearanceImprovementService = (function () {
        function ApplicationClearanceImprovementService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        ApplicationClearanceImprovementService.prototype.getNonAppliedClearanceImprovementCoursesByStudentId = function (studentId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationEligibleClearanceImprovementCourses/student-id/' + studentId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        ApplicationClearanceImprovementService.prototype.getAppliedClrnceImprvCourses = function (studentId, semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationCCI/appliedClearanceImprovementCourses/studentId/' + studentId + '/semesterId/' + semesterId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ApplicationClearanceImprovementService.$inject = ['HttpClient', '$q', 'notify'];
        return ApplicationClearanceImprovementService;
    }());
    ums.ApplicationClearanceImprovementService = ApplicationClearanceImprovementService;
    ums.UMS.service("applicationClearanceImprovementService", ApplicationClearanceImprovementService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var HeadTES = (function () {
        function HeadTES(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyName = "";
            this.facultyId = "";
            this.statusValue = 1;
            this.itemPerPage = 10;
            this.currentPageNumber = 1;
            this.submit_Button_Disable = true;
            this.resultView = true;
            this.showStudentList = false;
            this.checkBoxCounter = 0;
            this.commentPgCurrentPage = 1;
            this.commentPgItemsPerPage = 1;
            this.innerCommentPgCurrentPage = 1;
            this.innerCommentPgItemsPerPage = 10;
            this.pCurrentPage = 1;
            this.pItemsPerPage = 3;
            this.commentPgTotalRecords = 0;
            this.checkEvaluationResult = true;
            this.evaluationResultStatus = true;
            this.selectedSemesterId = 11;
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.fullName = "";
            this.evaluationEndDate = "";
            this.isEvaluationViewAvailable = false;
            this.getSubmissionDeadLine();
        }
        HeadTES.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
            });
        };
        HeadTES.prototype.teacherChanged = function (val) {
            this.fullName = val.fullName;
            this.checkEvaluationResult = true;
            this.selectedTeacherId = val.teacherId;
            this.assignedCoursesForReview = [];
        };
        HeadTES.prototype.getAllFacultyMembers = function () {
            var _this = this;
            this.facultyList = [];
            this.facultyListResultEvaluation = [];
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getAllFacultyMembers', 'application/json', function (json, etag) {
                appTES = json.entries;
                _this.facultyList = appTES;
                _this.getTotalRecords = _this.facultyList.length;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        HeadTES.prototype.getEligibleFacultyMembers = function () {
            var _this = this;
            var staticDeptId = 'none';
            this.facultyListResultEvaluation = [];
            this.selectedTeacherId = null;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getEligibleFacultyMembers/semesterId/' + this.selectedSemesterId + '/deptId/' + staticDeptId, 'application/json', function (json, etag) {
                appTES = json.entries;
                _this.facultyListResultEvaluation = appTES;
                if (_this.facultyListResultEvaluation.length > 0) {
                    _this.selectedTeacherName = _this.facultyListResultEvaluation[0];
                    _this.selectedTeacherId = _this.selectedTeacherName.teacherId;
                    _this.fullName = _this.selectedTeacherName.fullName;
                }
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        HeadTES.prototype.getAssignedCourses = function (teacher_id, fullName, deptId, designation) {
            var _this = this;
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
            this.facultyId = teacher_id;
            this.fName = fullName;
            this.deptId = deptId;
            this.designationStatus = designation;
            this.assignedCourses = [];
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.showStudentList = false;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getAssignedCourses/facultyId/' + this.facultyId, 'application/json', function (json, etag) {
                appTES = json.entries;
                appTES.forEach(function (a) {
                    if (a.status == 1)
                        _this.showStudentList = true;
                });
                _this.startDate = _this.formatDate(json.startDate);
                _this.endDate = _this.formatDate(json.endDate);
                _this.deadLine = json.deadLine;
                _this.semesterName = json.semesterName;
                _this.assignedCourses = appTES;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        HeadTES.prototype.deleteEntry = function (result) {
            var _this = this;
            this.convertToJsonDeleteEntry(result).then(function (app) {
                _this.httpClient.put('academic/applicationTES/deleteEntry', app, 'application/json')
                    .success(function (data, status, header, config) {
                    _this.getAssignedCourses(_this.facultyId, _this.fName, _this.deptId, _this.designationStatus);
                    _this.notify.success("Data deleted Successfully");
                }).error(function (data) {
                    _this.notify.error(data);
                });
            });
        };
        HeadTES.prototype.getEvaluatedStudentInfo = function (courseId, section) {
            var _this = this;
            var defer = this.$q.defer();
            this.studentList = [];
            var students = [];
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getEvaluatedStudentInfo/courseId/' + courseId + '/section/' + section, 'application/json', function (json, etag) {
                students = json.entries;
                _this.studentList = students;
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        HeadTES.prototype.getSubmissionDeadLine = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getSubmissionDeadLine', 'application/json', function (json, etag) {
                if (json.startDate == 'Not started yet' && json.endDate == 'Not started yet') {
                    _this.studentSubmitDeadLine = json.studentSubmitDeadLine;
                    _this.startDate = json.startDate;
                    _this.endDate = json.endDate;
                    _this.currentSemesterId = json.currentSemesterId;
                    _this.evaluationEndDate = json.evaluationEndDate;
                    _this.isEvaluationViewAvailable = json.isEvaluationViewAvailable;
                    defer.resolve(json.entries);
                }
                else {
                    _this.studentSubmitDeadLine = json.studentSubmitDeadLine;
                    _this.startDate = _this.formatDate(json.startDate);
                    _this.endDate = _this.formatDate(json.endDate);
                    _this.currentSemesterId = json.currentSemesterId;
                    _this.evaluationEndDate = json.evaluationEndDate;
                    _this.isEvaluationViewAvailable = json.isEvaluationViewAvailable;
                    defer.resolve(json.entries);
                }
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        HeadTES.prototype.getResults = function () {
            var _this = this;
            this.classObservationTotalSPoints = 0;
            this.classObservationTotalStudent = 0;
            this.classObservationAverage = 0;
            this.nonClassObservationTotalSPoints = 0;
            this.nonClassObservationTotalStudent = 0;
            this.nonClassObservationAverage = 0;
            this.finalScore = 0;
            this.studentComments = [];
            this.studentResult = [];
            var appTES = [];
            var defer = this.$q.defer();
            var counterObType1 = 0;
            var counterObType2 = 0;
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getResult/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json;
                _this.studentResult = appTES;
                for (var i = 0; i < _this.studentResult.length; i++) {
                    if (_this.studentResult[i].observationType == 1) {
                        counterObType1++;
                        _this.classObservationTotalSPoints = _this.classObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.classObservationTotalStudent = _this.classObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.classObservationAverage = _this.classObservationAverage + _this.studentResult[i].averageScore;
                    }
                    else {
                        counterObType2++;
                        _this.nonClassObservationTotalSPoints = _this.nonClassObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.nonClassObservationTotalStudent = _this.nonClassObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.nonClassObservationAverage = (_this.nonClassObservationAverage + _this.studentResult[i].averageScore);
                    }
                }
                if (_this.classObservationAverage != 0 && _this.nonClassObservationAverage != 0) {
                    _this.classObservationAverage = (_this.classObservationAverage / counterObType1);
                    _this.classObservationAverage = Number(_this.classObservationAverage.toFixed(2));
                    _this.nonClassObservationAverage = (_this.nonClassObservationAverage / counterObType2);
                    _this.nonClassObservationAverage = Number(_this.nonClassObservationAverage.toFixed(2));
                    _this.finalScore = (_this.classObservationAverage + _this.nonClassObservationAverage) / 2;
                    _this.finalScore = Number(_this.finalScore.toFixed(2));
                }
                else {
                    _this.classObservationAverage = 0;
                    _this.nonClassObservationAverage = 0;
                    _this.finalScore = 0;
                }
                _this.getComment();
                defer.resolve(_this.studentResult);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        HeadTES.prototype.getComment = function () {
            var _this = this;
            this.studentComments = [];
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getComment/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json;
                _this.studentComments = appTES;
                _this.commentPgTotalRecords = _this.studentComments.length;
                _this.getReviewPercentage();
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        HeadTES.prototype.getReviewPercentage = function () {
            var _this = this;
            this.sectionForReview = "";
            this.registeredStudents = 0;
            this.selectedSectionForReview = "";
            this.selectedRegisteredStudents = 0;
            this.percentage = 0;
            this.studentReviewed = 0;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReviewPercentage/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                _this.sectionForReview = json.sectionForReview;
                _this.registeredStudents = json.registeredStudents;
                _this.selectedSectionForReview = json.selectedSectionForReview;
                _this.selectedRegisteredStudents = json.selectedRegisteredStudents;
                _this.percentage = json.percentage;
                _this.studentReviewed = json.studentReviewed;
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        HeadTES.prototype.getAssignedCoursesForReview = function () {
            var _this = this;
            if (this.selectedTeacherId != null) {
                ums.Utils.expandRightDiv();
                this.checkEvaluationResult = true;
                this.assignedCoursesForReview = [];
                this.studentComments = [];
                this.staticTeacherName = this.selectedTeacherName.fullName;
                this.staticSessionName = this.semester.name;
                this.selectRow = null;
                var appTES = [];
                var defer = this.$q.defer();
                this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getAssignedCoursesForReview/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                    appTES = json.entries;
                    _this.assignedCoursesForReview = appTES;
                    defer.resolve(json);
                }, function (response) {
                    console.error(response);
                });
                return defer.promise;
            }
            else {
                this.notify.info("No Employee Selected yet");
            }
        };
        HeadTES.prototype.getInfo = function (pTeacherId, pCourseId, id, pSemesterId, pCourseNo, pCourseTitle, pDeptName) {
            this.selectRow = id;
            this.selectedCourseId = pCourseId;
            this.selectedTeacherId = pTeacherId;
            this.selectedSemesterId = pSemesterId;
            this.selectedCourseNo = pCourseNo;
            this.selectedCourseTitle = pCourseTitle;
            this.departmentName = pDeptName;
            if (this.currentSemesterId == pSemesterId) {
                if (this.isEvaluationViewAvailable) {
                    this.checkEvaluationResult = false;
                    this.getResults();
                }
                else {
                    this.notify.info("You can access the evaluation result of this semester after " + this.formatDate(this.evaluationEndDate));
                }
            }
            else {
                this.checkEvaluationResult = false;
                this.getResults();
            }
        };
        HeadTES.prototype.semesterChanged = function (val) {
            this.fullName = "";
            this.selectedSemesterId = val.id;
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
            this.getEligibleFacultyMembers();
        };
        HeadTES.prototype.getBackToMainView = function () {
            this.evaluationResultStatus = true;
        };
        HeadTES.prototype.getSemester = function () {
            var _this = this;
            this.evaluationResultStatus = false;
            this.assignedCoursesForReview = [];
            this.studentComments = [];
            this.studentResult = [];
            this.selectedCourseNo = "";
            this.checkEvaluationResult = true;
            this.selectedSemesterId = null;
            this.selectedTeacherId = null;
            this.selectedSemesterName = null;
            this.selectedTeacherName = null;
            var appTES = [];
            //----
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.getEligibleFacultyMembers();
            });
        };
        HeadTES.prototype.getReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var facultyName = this.staticTeacherName.replace(/[^\w]/gi, '_');
            var courseNo = this.selectedCourseNo.replace(/[^\w]/gi, '');
            var semesterName = this.staticSessionName.replace(/[^\w]/gi, '');
            var fileName = "Evaluation_Report-" + facultyName + "-" + courseNo + "-" + semesterName;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReport/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        HeadTES.prototype.submit = function () {
            var _this = this;
            this.convertToJson(this.assignedCourses).then(function (app) {
                _this.httpClient.post('academic/applicationTES/saveAssignedCoursesByHead', app, 'application/json')
                    .success(function (data, status, header, config) {
                    _this.notify.success("Data saved successfully");
                    _this.checkBoxCounter = 0;
                    _this.submit_Button_Disable = true;
                    _this.getAllFacultyMembers();
                }).error(function (data) {
                    _this.notify.error("Error in Saving Data");
                });
            });
        };
        HeadTES.prototype.convertToJson = function (result) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < result.length; i++) {
                var item = {};
                if (result[i].apply == true) {
                    item["courseId"] = result[i].courseName;
                    item["teacherId"] = result[i].teacherId;
                    item["semesterid"] = result[i].semesterId;
                    item["section"] = result[i].section;
                    item["status"] = this.statusValue;
                    item["deptId"] = this.deptId;
                    jsonObj.push(item);
                }
            }
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        HeadTES.prototype.convertToJsonDeleteEntry = function (result) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["courseId"] = result.courseName;
            item["teacherId"] = result.teacherId;
            item["section"] = result.section;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        HeadTES.prototype.checkMoreThanOneSelectionSubmit = function (result) {
            if (result.apply) {
                this.checkBoxCounter++;
                this.enableOrDisableSubmitButton();
            }
            else {
                this.checkBoxCounter--;
                this.enableOrDisableSubmitButton();
            }
        };
        HeadTES.prototype.enableOrDisableSubmitButton = function () {
            if (this.checkBoxCounter > 0) {
                this.submit_Button_Disable = false;
            }
            else {
                this.submit_Button_Disable = true;
            }
        };
        HeadTES.prototype.close = function () {
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
        };
        HeadTES.prototype.formatDate = function (dateVal) {
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"
            ];
            var newDate = new Date(dateVal);
            var sMonth = this.padValue(newDate.getMonth() + 1);
            var sDay = this.padValue(newDate.getDate());
            var sYear = newDate.getFullYear();
            var sHour = newDate.getHours();
            var sMinute = this.padValue(newDate.getMinutes());
            var sAMPM = "AM";
            var iHourCheck = +sHour;
            if (iHourCheck > 12) {
                sAMPM = "PM";
                sHour = iHourCheck - 12;
            }
            else if (iHourCheck === 0) {
                sHour = 12;
            }
            sHour = this.padValue(sHour);
            return sDay + "-" + monthNames[+sMonth - 1] + "-" + sYear + " " + sHour + ":" + sMinute + " " + sAMPM;
        };
        HeadTES.prototype.padValue = function (value) {
            return (value < 10) ? "0" + value : value;
        };
        HeadTES.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService'];
        return HeadTES;
    }());
    ums.UMS.controller("HeadTES", HeadTES);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DownloadTranscript = (function () {
        function DownloadTranscript(appConstants, httpClient, $q, notify, $sce, $window, semesterService, studentService, studentRecordService, feeReportService, deadlineExtensionService, userService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.studentService = studentService;
            this.studentRecordService = studentRecordService;
            this.feeReportService = feeReportService;
            this.deadlineExtensionService = deadlineExtensionService;
            this.userService = userService;
            this.isRightDivAvailable = false;
            this.isDownloadAvailable = true;
            this.showLoader = false;
            this.isCopyToEmailDisabled = false;
            this.transcriptTypes = this.appConstants.transcriptType;
            this.type = this.transcriptTypes[0];
            console.log(this.transcriptTypes);
            this.studentId = "";
            this.extendedDate = "";
            this.userService.fetchCurrentUserInfo().then(function (response) {
                if (response.roleId == 9999) {
                    _this.isSadmin = true;
                }
            });
            console.log("Execution begins......");
            this.getSemesters();
        }
        DownloadTranscript.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.activeSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
            });
            this.hideInsertMode = this.selectedSemesterId == this.activeSemesterId ? true : false;
        };
        DownloadTranscript.prototype.search = function () {
            var _this = this;
            if (this.studentId.length > 0) {
                this.studentIdForImage = this.studentId;
                this.isRightDivAvailable = true;
                this.parameterName = "";
                this.extendedDate = "";
                ums.Utils.expandRightDiv();
                this.student = {};
                this.studentService.getStudentById(this.studentId).then(function (studentInfo) {
                    _this.student = studentInfo;
                    console.log(_this.student);
                    if (_this.student.status == "9") {
                        console.log(" student status  (9)  :: " + _this.student.status);
                        _this.isDownloadAvailable = false;
                    }
                    else {
                        console.log(" student status :: " + _this.student.status);
                        _this.isDownloadAvailable = true;
                    }
                    _this.studentRecordService.getAttendedSemesters(_this.studentId).then(function (studentRecords) {
                        _this.studentRecords = studentRecords.entries[0];
                        _this.studentRecord = _this.studentRecords[_this.studentRecords.length - 1];
                    });
                });
            }
            else {
                this.notify.error("Invalid Student ID");
            }
        };
        DownloadTranscript.prototype.download = function () {
            var _this = this;
            this.copyToEmail = false;
            this.showLoader = true;
            this.httpClient.get("academic/transcript/checkCrhr/" + this.studentId, 'application/json', function (json, etag) {
                _this.creditHourData = json.entries;
                console.log('---------credit hour info----------');
                console.log(json.entries);
                if (_this.creditHourData[0].status == true) {
                    //this.forceDownload();
                    _this.showLoader = false;
                    $('#modal-copyToMailConfirmation').modal('show');
                }
                else {
                    _this.showLoader = false;
                    $('#modal-creditHourMismatchInfo').modal('show');
                    /*setTimeout(function () {
                        $("#modal-creditHourMismatchInfo").focus();
                    }, 1000);*/
                }
            }, function (response) {
                _this.showLoader = false;
                console.error(response);
            });
        };
        DownloadTranscript.prototype.submitCreditHourMismatchModal = function () {
            $('#modal-creditHourMismatchInfo').modal('hide');
            $('#modal-copyToMailConfirmation').modal('show');
        };
        DownloadTranscript.prototype.forceDownload = function () {
            var _this = this;
            if (this.type != null) {
                this.showLoader = true;
                /*
                $('#modal-creditHourMismatchInfo').modal('hide');
                 */
                $('#modal-copyToMailConfirmation').modal('hide');
                var defer = this.$q.defer();
                var contentType_1 = ums.UmsUtil.getFileContentType("pdf");
                var fileName_1 = "AcademicTranscript-" + this.studentId + "-" + this.student.degreeAwardSemesterName;
                this.httpClient.get("academic/transcript/studentId/" + this.studentId + "/copyToEmail/" + this.copyToEmail + "/type/" + this.type.name, 'application/pdf', function (data, etag) {
                    ums.UmsUtil.writeFileContent(data, contentType_1, fileName_1);
                    _this.showLoader = false;
                    _this.type = _this.transcriptTypes[0];
                    _this.notify.success("Successfully Downloaded");
                }, function (response) {
                    _this.showLoader = false;
                    _this.type = _this.transcriptTypes[0];
                    console.error(response);
                }, 'arraybuffer');
                /*
                      this.httpClient.get(`academic/student/${studentId}`, 'application/json',
                      (student: Student, etag: string) => {
                        defer.resolve(student);
                      },
                      (response: ng.IHttpPromiseCallbackArg<any>) => {
                        this.notify.error("Error in getting student data");
                      });

                */
                return defer.promise;
            }
            else
                this.notify.warn("Please select transcript type.");
        };
        DownloadTranscript.prototype.transcriptTypeChanged = function (val) {
            if (val.name == 'MAIN') {
                this.isCopyToEmailDisabled = true;
                this.copyToEmail = true;
            }
            else {
                this.isCopyToEmailDisabled = false;
                this.copyToEmail = false;
            }
        };
        DownloadTranscript.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'studentService', 'studentRecordService', 'FeeReportService',
            'deadlineExtensionService', 'userService'];
        return DownloadTranscript;
    }());
    ums.UMS.controller("DownloadTranscript", DownloadTranscript);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ApplicationStatus;
    (function (ApplicationStatus) {
        ApplicationStatus["APPLIED"] = "Applied";
        ApplicationStatus["NOT_APPLIED"] = "Not Applied";
    })(ApplicationStatus || (ApplicationStatus = {}));
    var TransactionType;
    (function (TransactionType) {
        TransactionType[TransactionType["SINGLE"] = 1] = "SINGLE";
        TransactionType[TransactionType["SPLITTED"] = 2] = "SPLITTED";
        TransactionType[TransactionType["EXCESS"] = 3] = "EXCESS";
    })(TransactionType || (TransactionType = {}));
    var DeadlineExtension = (function () {
        function DeadlineExtension(appConstants, httpClient, $q, notify, $sce, $window, semesterService, studentService, feeReportService, deadlineExtensionService, userService, paymentService, parameterService, examRoutineService, applicationCarryService, applicationClearanceImprovementService, studentRecordService, $state, detailedStudentPaymentService, $scope) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.studentService = studentService;
            this.feeReportService = feeReportService;
            this.deadlineExtensionService = deadlineExtensionService;
            this.userService = userService;
            this.paymentService = paymentService;
            this.parameterService = parameterService;
            this.examRoutineService = examRoutineService;
            this.applicationCarryService = applicationCarryService;
            this.applicationClearanceImprovementService = applicationClearanceImprovementService;
            this.studentRecordService = studentRecordService;
            this.$state = $state;
            this.detailedStudentPaymentService = detailedStudentPaymentService;
            this.$scope = $scope;
            this.state = $state;
            this.statusWaitingForPayment = 7;
            this.statusWaitingForHeadsApproval = 2;
            this.statusPaymentCompleted = 8;
            this.statusStudentPaymentExpired = 3;
            this.statusStudentPaymentReceived = 1;
            this.statusStudentPaymentVerified = 4;
            this.statusStudentPaymentCancelled = 5;
            this.statusStudentPaymentRejected = 2;
            this.isRightDivAvailable = false;
            this.studentId = "";
            this.extendedDate = "";
            this.generalDeadlineForCarry = "";
            this.isExamOffice = false;
            this.isLateFeeEditable = true;
            this.userService.fetchCurrentUserInfo().then(function (data) {
                _this.roleId = data.roleId;
                if (_this.roleId == 7302) {
                    _this.isExamOffice = true;
                }
            });
            this.getSemesters();
            this.datePickerInitialization();
            this.disableMinDates();
        }
        DeadlineExtension.prototype.disableMinDates = function () {
            var dtToday = new Date();
            var month = dtToday.getMonth() + 1;
            var day = dtToday.getDate();
            var year = dtToday.getFullYear();
            if (month < 10)
                month = '0' + month.toString();
            if (day < 10)
                day = '0' + day.toString();
            var maxDate = year + '-' + month + '-' + day;
            //alert("Max date is :: "+maxDate);
            $('#txtDate').attr('min', maxDate);
        };
        DeadlineExtension.prototype.datePickerInitialization = function () {
            this.fromDate = moment(new Date()).format("DD-MM-YYYY");
            this.toDate = moment(new Date()).format("DD-MM-YYYY");
            $('.datepicker').datepicker({
                //format:'DD-MM-YYYY'
                startDate: this.fromDate
            });
        };
        DeadlineExtension.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 6).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    //if (semesters[i].status == 1) {
                    if (semesters[i].status == ums.Utils.SEMESTER_STATUS_ACTIVE) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.activeSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
            });
            //this.hideInsertMode = this.selectedSemesterId == this.activeSemesterId ? true : false;
            //this.hideInsertMode = this.selectedSemesterId == this.activeSemesterId ? false : true;
        };
        /*private getSemesters(): void {
          this.semesterService.fetchSemesters(11, 5, Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then((semesters: Array<Semester>) => {
            this.semesters = semesters;
            for (var i = 0; i < semesters.length; i++) {
              if (semesters[i].status == Utils.SEMESTER_STATUS_NEWLY_CREATED) {
                this.semester = semesters[i];
                this.activeSemesterId = semesters[i].id;
                break;
              }
            }
            this.selectedSemesterId = this.semester.id;
            this.activeSemesterId = this.semester.id;
            this.semesterName = this.semester.name;
          });
        }*/
        DeadlineExtension.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            //this.hideInsertMode = this.selectedSemesterId == this.activeSemesterId ? true : false;
            this.hideInsertMode = this.selectedSemesterId == this.activeSemesterId ? false : true;
            this.isRightDivAvailable = false;
            this.deadlineParameterDetails = [];
        };
        DeadlineExtension.prototype.search = function () {
            var _this = this;
            if (this.studentId.length > 0) {
                this.studentIdForImage = this.studentId;
                this.isRightDivAvailable = true;
                this.parameterId = null;
                this.parameterName = "";
                this.extendedDate = "";
                this.courseId = "";
                this.courseNo = "";
                this.courseTitle = "";
                this.courseYear = null;
                this.courseSemester = null;
                this.lateFee = 0;
                this.transactionId = "";
                this.selectedPaymentStatus = null;
                this.selectedTransactionType = null;
                this.isLateFeeEditable = true;
                ums.Utils.expandRightDiv();
                this.student = {};
                var studentResponse = this.studentService.getStudentById(this.studentId);
                var deadlineParameterResponse = this.deadlineExtensionService.getParameters(this.studentId, this.selectedSemesterId);
                var paymentResponse = this.paymentService.getPaymentsByStudentIdAndSemesterId(this.studentId, this.selectedSemesterId);
                //const carryCourseResponse = this.deadlineExtensionService.getAppliedCarryCourses(this.studentId, this.selectedSemesterId);
                var carryCourseResponse = this.applicationCarryService.getAppliedCarryCourses(this.studentId, this.selectedSemesterId);
                //const clearanceImprovementResponse = this.deadlineExtensionService.getAppliedClrnceImprvCourses(this.studentId, this.selectedSemesterId);
                var clearanceImprovementResponse = this.applicationClearanceImprovementService.getAppliedClrnceImprvCourses(this.studentId, this.selectedSemesterId);
                var parameterResponse = this.parameterService.getAll();
                var extendedDeadlineInfoCarryResponse = this.deadlineExtensionService.getDeadlinesGroupByTransactionId(this.studentId, this.selectedSemesterId, 10);
                var extendedDeadlineInfoClearanceResponse = this.deadlineExtensionService.getDeadlinesGroupByTransactionId(this.studentId, this.selectedSemesterId, 27);
                var extendedDeadlineInfoImprovementResponse = this.deadlineExtensionService.getDeadlinesGroupByTransactionId(this.studentId, this.selectedSemesterId, 28);
                var cciExamDateInfoResponse = this.examRoutineService.getExamRoutine(this.selectedSemesterId, ums.Utils.EXAM_TYPE_CCI);
                var extendedDeadlineInfoCarryRegResponse = this.deadlineExtensionService.getDeadlinesGroupByTransactionId(this.studentId, this.selectedSemesterId, 18);
                var nonAppliedClearanceImprovementCoursesResponse = this.applicationClearanceImprovementService.getNonAppliedClearanceImprovementCoursesByStudentId(this.studentId);
                var nonAppliedCarryCoursesResponse = this.applicationCarryService.getNonAppliedCarryCoursesByStudentId(this.studentId);
                var studentTypeBySemesterIdResponse = this.studentRecordService.getStudentTypeBySemesterId(this.studentId, this.selectedSemesterId);
                this.$q.all([studentResponse, deadlineParameterResponse, paymentResponse, carryCourseResponse, clearanceImprovementResponse, parameterResponse, extendedDeadlineInfoCarryResponse, extendedDeadlineInfoClearanceResponse, extendedDeadlineInfoImprovementResponse, cciExamDateInfoResponse, extendedDeadlineInfoCarryRegResponse, nonAppliedClearanceImprovementCoursesResponse, nonAppliedCarryCoursesResponse, studentTypeBySemesterIdResponse])
                    .then(function (response) {
                    _this.student = response[0];
                    _this.deadlineParameterDetails = [];
                    _this.deadlineParameterDetails = response[1].entries;
                    _this.studentPayments = [];
                    _this.studentPayments = response[2];
                    _this.studentRecord = {};
                    _this.studentRecord = response[13];
                    if (_this.isExamOffice) {
                        /*this.studentPayments = [];
                        this.studentPayments = response[2];*/
                        _this.studentPaymentForCarryRegistration = [];
                        //this.studentPaymentForCarryRegistration = this.studentPayments.filter(f=>(f.feeGroup==DeadlineExtension.FEE_GROUP_UG_CARRY_REGISTRATION && f.paymentStatus != this.statusStudentPaymentReceived && f.paymentStatus != this.statusStudentPaymentVerified && f.paymentStatus != this.statusStudentPaymentCancelled && f.paymentStatus != this.statusStudentPaymentRejected && f.transactionType != TransactionType.SPLITTED));
                        _this.studentPaymentForCarryRegistration = _this.studentPayments.filter(function (f) { return (f.feeGroup == DeadlineExtension.FEE_GROUP_UG_CARRY_REGISTRATION); });
                        /*if(this.isSplittedTransactionIdFound(this.studentPaymentForCarryRegistration)){
                          this.studentPaymentForCarryRegistration = [];
                        }*/
                        _this.carryRegInitialParameterInfo = {};
                        _this.carryRegInitialParameterInfo = _this.deadlineParameterDetails.filter(function (f) { return f.parameterId == 18; })[0];
                        _this.carryAppInitialParameterInfo = {};
                        _this.carryAppInitialParameterInfo = _this.deadlineParameterDetails.filter(function (f) { return f.parameterId == 10; })[0];
                        _this.allParametersInfo = response[5];
                        var extendedDeadlineInfoCarryReg = [];
                        extendedDeadlineInfoCarryReg = response[10].entries;
                        if (_this.studentRecord.type == 'CR' || _this.studentRecord.type == 'CRR') {
                            _this.deadlineParameterDetails = _this.deadlineParameterDetails.filter(function (f) { return (f.parameterId == 18); });
                            if (_this.deadlineParameterDetails.length > 0 && _this.studentPaymentForCarryRegistration.length == 0) {
                                //this.deadlineParameterDetails[0].status = ApplicationStatus.NOT_APPLIED;
                                //todo: this is not a better approach, I will update this part later
                                var studentAllPaymentsForCarryRegistration = [];
                                //studentAllPaymentsForCarryRegistration = this.studentPayments.filter(f=>(f.feeGroup==DeadlineExtension.FEE_GROUP_UG_CARRY_REGISTRATION && f.transactionType != TransactionType.SPLITTED));
                                studentAllPaymentsForCarryRegistration = _this.studentPayments.filter(function (f) { return (f.feeGroup == DeadlineExtension.FEE_GROUP_UG_CARRY_REGISTRATION); });
                                _this.deadlineParameterDetails[0].status = studentAllPaymentsForCarryRegistration.length == 0 ? ApplicationStatus.NOT_APPLIED : ApplicationStatus.APPLIED;
                                //
                                _this.deadlineParameterDetails[0].transactionId = '';
                                _this.deadlineParameterDetails[0].courseId = '';
                            }
                            else {
                                _this.deadlineParameterDetails = [];
                            }
                            if (_this.studentPaymentForCarryRegistration.length > 0) {
                                var carryRegistrationAppliedParameterInfo = {};
                                carryRegistrationAppliedParameterInfo.parameterId = _this.carryRegInitialParameterInfo.parameterId;
                                carryRegistrationAppliedParameterInfo.parameterName = _this.allParametersInfo.filter(function (f) { return f.id == _this.carryRegInitialParameterInfo.parameterId.toString(); })[0].shortDescription;
                                carryRegistrationAppliedParameterInfo.status = ApplicationStatus.APPLIED;
                                carryRegistrationAppliedParameterInfo.transactionId = _this.studentPaymentForCarryRegistration[0].transactionId;
                                carryRegistrationAppliedParameterInfo.courseId = '';
                                carryRegistrationAppliedParameterInfo.generalDeadline = _this.carryRegInitialParameterInfo.generalDeadline;
                                carryRegistrationAppliedParameterInfo.generalDeadlineStatus = _this.carryRegInitialParameterInfo.generalDeadlineStatus;
                                var carryRegAppliedExtendedDeadline = null;
                                var filteredExtendedDeadlineInfoCarryRegApplied = [];
                                filteredExtendedDeadlineInfoCarryRegApplied = extendedDeadlineInfoCarryReg.filter(function (f) { return f.transactionId == _this.studentPaymentForCarryRegistration[0].transactionId; });
                                if (filteredExtendedDeadlineInfoCarryRegApplied.length > 0) {
                                    carryRegAppliedExtendedDeadline = filteredExtendedDeadlineInfoCarryRegApplied[0].extendedDeadline;
                                }
                                carryRegistrationAppliedParameterInfo.extendedDeadline = carryRegAppliedExtendedDeadline;
                                if (_this.checkDeadlineValidity(carryRegAppliedExtendedDeadline)) {
                                    carryRegistrationAppliedParameterInfo.extendedDeadlineStatus = 1;
                                }
                                else {
                                    carryRegistrationAppliedParameterInfo.extendedDeadlineStatus = 0;
                                }
                                _this.deadlineParameterDetails.push(carryRegistrationAppliedParameterInfo);
                            }
                        }
                        else {
                            _this.deadlineParameterDetails = [];
                        }
                        //this.insertCarryNotAppliedParameterInfo(this.deadlineParameterDetails);
                        _this.studentNonAppliedCarryCourses = [];
                        _this.studentNonAppliedCarryCourses = response[12].entries;
                        if (_this.studentNonAppliedCarryCourses.length > 0) {
                            _this.insertCarryNotAppliedParameterInfo(_this.deadlineParameterDetails);
                        }
                        var appliedCarryCourses = [];
                        appliedCarryCourses = response[3].entries;
                        _this.appliedExpiredCarryCourses = [];
                        //this.appliedExpiredCarryCourses = this.getAppliedExpiredCourses(appliedCarryCourses, this.studentPayments);
                        //this.appliedExpiredCarryCourses = appliedCarryCourses.filter(f=>(f.cciStatus == this.statusWaitingForPayment || f.cciStatus == this.statusWaitingForHeadsApproval));
                        _this.appliedExpiredCarryCourses = appliedCarryCourses;
                        var appliedClrnceImprvCourses = [];
                        appliedClrnceImprvCourses = response[4].entries;
                        var appliedClearanceCourses = [];
                        var appliedImprovementCourses = [];
                        appliedClearanceCourses = appliedClrnceImprvCourses.filter(function (f) { return (f.applicationType == ums.Utils.APPLICATION_TYPE_CLEARANCE); });
                        //this.appliedExpiredClearanceCourses = this.getAppliedExpiredCourses(appliedClearanceCourses, this.studentPayments);
                        //this.appliedExpiredClearanceCourses = appliedClearanceCourses.filter(f=> (f.cciStatus == this.statusWaitingForPayment));
                        _this.appliedExpiredClearanceCourses = appliedClearanceCourses;
                        appliedImprovementCourses = appliedClrnceImprvCourses.filter(function (f) { return (f.applicationType == ums.Utils.APPLICATION_TYPE_IMPROVEMENT); });
                        //this.appliedExpiredImprovementCourses = this.getAppliedExpiredCourses(appliedImprovementCourses, this.studentPayments);
                        //this.appliedExpiredImprovementCourses = appliedImprovementCourses.filter(f=> (f.cciStatus == this.statusWaitingForPayment));
                        _this.appliedExpiredImprovementCourses = appliedImprovementCourses;
                        //this.allParametersInfo = response[5];
                        var extendedDeadlineInfoCarry = [];
                        extendedDeadlineInfoCarry = response[6].entries;
                        var extendedDeadlineInfoClearance = [];
                        extendedDeadlineInfoClearance = response[7].entries;
                        var extendedDeadlineInfoImprovement = [];
                        extendedDeadlineInfoImprovement = response[8].entries;
                        var cciExamDateInfo = [];
                        cciExamDateInfo = response[9];
                        if (_this.appliedExpiredCarryCourses.length > 0) {
                            _this.insertCarryAppliedParameterInfo(_this.deadlineParameterDetails, extendedDeadlineInfoCarry);
                        }
                        _this.studentNonAppliedClearanceImprovementCourses = [];
                        _this.studentNonAppliedClearanceImprovementCourses = response[11].entries;
                        _this.insertClearanceImprovementNotAppliedParameterInfo(_this.deadlineParameterDetails);
                        if (_this.appliedExpiredClearanceCourses.length > 0) {
                            _this.insertClearanceImprovementAppliedParameterInfo(27, _this.deadlineParameterDetails, _this.appliedExpiredClearanceCourses, cciExamDateInfo, extendedDeadlineInfoClearance);
                        }
                        if (_this.appliedExpiredImprovementCourses.length > 0) {
                            _this.insertClearanceImprovementAppliedParameterInfo(28, _this.deadlineParameterDetails, _this.appliedExpiredImprovementCourses, cciExamDateInfo, extendedDeadlineInfoImprovement);
                        }
                        //this.deadlineParameterDetails = this.deadlineParameterDetails.sort((a,b)=>(a.transactionId.localeCompare(b.transactionId)));
                        _this.deadlineParameterDetails = _this.deadlineParameterDetails.sort(function (a, b) { return (a.parameterId - b.parameterId); });
                        //console.log(this.deadlineParameterDetails);
                    }
                    else {
                        _this.studentPaymentForSemesterFee = [];
                        //this.studentPaymentForSemesterFee = this.studentPayments.filter(f=>(f.feeGroup==DeadlineExtension.FEE_GROUP_UG_SEMESTER_FEES && f.paymentStatus != this.statusStudentPaymentReceived && f.paymentStatus != this.statusStudentPaymentVerified && f.paymentStatus != this.statusStudentPaymentCancelled && f.paymentStatus != this.statusStudentPaymentRejected && f.transactionType != TransactionType.SPLITTED));
                        _this.studentPaymentForSemesterFee = _this.studentPayments.filter(function (f) { return (f.feeGroup == DeadlineExtension.FEE_GROUP_UG_SEMESTER_FEES); });
                        /*if (this.isSplittedTransactionIdFound(this.studentPaymentForSemesterFee)){
                          this.studentPaymentForSemesterFee = [];
                        }*/
                        _this.studentPaymentForReadmission = [];
                        //this.studentPaymentForReadmission = this.studentPayments.filter(f=>(f.feeGroup==DeadlineExtension.FEE_GROUP_UG_READMISSION_FEES && f.paymentStatus != this.statusStudentPaymentReceived && f.paymentStatus != this.statusStudentPaymentVerified && f.paymentStatus != this.statusStudentPaymentCancelled && f.paymentStatus != this.statusStudentPaymentRejected && f.transactionType != TransactionType.SPLITTED));
                        _this.studentPaymentForReadmission = _this.studentPayments.filter(function (f) { return (f.feeGroup == DeadlineExtension.FEE_GROUP_UG_READMISSION_FEES); });
                        /*if(this.isSplittedTransactionIdFound(this.studentPaymentForReadmission)){
                          this.studentPaymentForReadmission = [];
                        }*/
                        /*this.deadlineParameterDetails.forEach((f)=>{
                          f.transactionId = '';
                          f.courseId = '';
                        });*/
                        _this.deadlineParameterDetails.forEach(function (f) {
                            f.courseId = '';
                            if (f.parameterId == 12) {
                                if (_this.studentPaymentForSemesterFee.length > 0) {
                                    f.transactionId = _this.studentPaymentForSemesterFee[0].transactionId;
                                    f.status = ApplicationStatus.APPLIED;
                                }
                            }
                            else if (f.parameterId == 11) {
                                if (_this.studentPaymentForReadmission.length > 0) {
                                    f.transactionId = _this.studentPaymentForReadmission[0].transactionId;
                                    f.status = ApplicationStatus.APPLIED;
                                }
                            }
                            else {
                                f.transactionId = '';
                            }
                        });
                        //this.deadlineParameterDetails=  this.deadlineParameterDetails.filter(f=>(f.parameterId !=10 && f.parameterId !=18 && f.parameterId !=27 && f.parameterId !=28));
                        if (_this.studentRecord.type == 'RA' || _this.studentRecord.type == 'RAR' || _this.studentRecord.type == 'DRAR') {
                            _this.deadlineParameterDetails = _this.deadlineParameterDetails.filter(function (f) { return (f.parameterId == 11); });
                        }
                        else if (_this.studentRecord.type == 'R' || _this.studentRecord.type == 'RR') {
                            _this.deadlineParameterDetails = _this.deadlineParameterDetails.filter(function (f) { return (f.parameterId == 12); });
                        }
                        else {
                            _this.deadlineParameterDetails = [];
                        }
                    }
                });
            }
            else {
                this.notify.error("Invalid Student ID");
            }
        };
        DeadlineExtension.prototype.insertCarryNotAppliedParameterInfo = function (deadlineParameterDetails) {
            var carryAppNotAppliedParameterInfo = {};
            carryAppNotAppliedParameterInfo.parameterId = this.carryAppInitialParameterInfo.parameterId;
            carryAppNotAppliedParameterInfo.parameterName = this.carryAppInitialParameterInfo.parameterName;
            carryAppNotAppliedParameterInfo.status = ApplicationStatus.NOT_APPLIED;
            carryAppNotAppliedParameterInfo.transactionId = '';
            carryAppNotAppliedParameterInfo.courseId = '';
            carryAppNotAppliedParameterInfo.generalDeadline = this.carryAppInitialParameterInfo.generalDeadline;
            carryAppNotAppliedParameterInfo.generalDeadlineStatus = this.carryAppInitialParameterInfo.generalDeadlineStatus;
            carryAppNotAppliedParameterInfo.extendedDeadline = this.carryAppInitialParameterInfo.extendedDeadline;
            carryAppNotAppliedParameterInfo.extendedDeadlineStatus = this.carryAppInitialParameterInfo.extendedDeadlineStatus;
            deadlineParameterDetails.push(carryAppNotAppliedParameterInfo);
        };
        DeadlineExtension.prototype.isSplittedTransactionIdFound = function (payments) {
            payments = payments.filter(function (f) { return f.transactionType == TransactionType.SPLITTED; });
            if (payments.length > 0) {
                return true;
            }
            return false;
        };
        DeadlineExtension.prototype.insertCarryAppliedParameterInfo = function (deadlineParameterDetails, extendedDeadlineInfoCarry) {
            var _this = this;
            this.appliedExpiredCarryCourses.forEach(function (appliedExpiredCarryCourse) {
                var parameterInfo = {};
                parameterInfo.semesterId = _this.selectedSemesterId;
                parameterInfo.studentId = _this.studentId;
                parameterInfo.status = ApplicationStatus.APPLIED;
                parameterInfo.parameterId = _this.carryAppInitialParameterInfo.parameterId;
                parameterInfo.parameterName = _this.carryAppInitialParameterInfo.parameterName;
                parameterInfo.courseId = appliedExpiredCarryCourse.courseId;
                parameterInfo.courseNo = appliedExpiredCarryCourse.courseNo;
                parameterInfo.courseTitle = appliedExpiredCarryCourse.courseTitle;
                parameterInfo.courseYear = appliedExpiredCarryCourse.carryYear;
                parameterInfo.courseSemester = appliedExpiredCarryCourse.carrySemester;
                /*parameterInfo.transactionId = appliedExpiredCarryCourse.transactionId;*/
                parameterInfo.transactionId = appliedExpiredCarryCourse.cciStatus == _this.statusWaitingForHeadsApproval ? '' : appliedExpiredCarryCourse.transactionId;
                parameterInfo.generalDeadline = _this.carryRegInitialParameterInfo.generalDeadline;
                if (_this.checkDeadlineValidity(_this.carryRegInitialParameterInfo.generalDeadline)) {
                    parameterInfo.generalDeadlineStatus = 1;
                }
                else {
                    parameterInfo.generalDeadlineStatus = 0;
                }
                var carryExtendedDeadline = null;
                var filteredExtendedDeadlineInfoCarry = [];
                filteredExtendedDeadlineInfoCarry = extendedDeadlineInfoCarry.filter(function (f) { return f.transactionId == appliedExpiredCarryCourse.transactionId; });
                if (filteredExtendedDeadlineInfoCarry.length > 0) {
                    carryExtendedDeadline = filteredExtendedDeadlineInfoCarry[0].extendedDeadline;
                    parameterInfo.extendedDeadline = carryExtendedDeadline;
                }
                if (_this.checkDeadlineValidity(carryExtendedDeadline)) {
                    parameterInfo.extendedDeadlineStatus = 1;
                }
                else {
                    parameterInfo.extendedDeadlineStatus = 0;
                }
                deadlineParameterDetails.push(parameterInfo);
            });
        };
        DeadlineExtension.prototype.insertClearanceImprovementNotAppliedParameterInfo = function (deadlineParameterDetails) {
            var _this = this;
            this.studentNonAppliedClearanceImprovementCourses.forEach(function (ugRegistrationResult) {
                var parameterInfo = {};
                if (ugRegistrationResult.type == DeadlineExtension.CLEARANCE) {
                    var clearanceParameterId = 27;
                    parameterInfo.parameterId = clearanceParameterId;
                    parameterInfo.parameterName = _this.allParametersInfo.filter(function (f) { return f.id == clearanceParameterId.toString(); })[0].shortDescription;
                }
                else if (ugRegistrationResult.type == DeadlineExtension.IMPROVEMENT) {
                    var improvementParameterId = 28;
                    parameterInfo.parameterId = improvementParameterId;
                    parameterInfo.parameterName = _this.allParametersInfo.filter(function (f) { return f.id == improvementParameterId.toString(); })[0].shortDescription;
                }
                parameterInfo.status = ApplicationStatus.NOT_APPLIED;
                parameterInfo.courseId = ugRegistrationResult.courseId;
                parameterInfo.courseNo = ugRegistrationResult.courseNo;
                parameterInfo.courseTitle = ugRegistrationResult.courseTitle;
                parameterInfo.courseYear = ugRegistrationResult.courseYear;
                parameterInfo.courseSemester = ugRegistrationResult.courseSemester;
                //parameterInfo.transactionId = '';
                var fakeTransactionId = '';
                fakeTransactionId = Math.random().toString(36).slice(2);
                parameterInfo.transactionId = fakeTransactionId;
                parameterInfo.generalDeadline = ugRegistrationResult.lastApplyDate;
                parameterInfo.generalDeadlineStatus = ugRegistrationResult.deadLineBol ? 0 : 1;
                parameterInfo.extendedDeadline = ugRegistrationResult.extendedLastApplyDate == "Not Extended" ? '' : ugRegistrationResult.extendedLastApplyDate;
                parameterInfo.extendedDeadlineStatus = ugRegistrationResult.extendedDeadLineBol ? 0 : 1;
                deadlineParameterDetails.push(parameterInfo);
            });
        };
        DeadlineExtension.prototype.insertClearanceImprovementAppliedParameterInfo = function (parameterId, deadlineParameterDetails, appliedExpiredCourses, cciExamDateInfo, extendedDeadlineInfo) {
            var _this = this;
            appliedExpiredCourses.forEach(function (appliedExpiredCourse) {
                var parameterInfo = {};
                parameterInfo.status = ApplicationStatus.APPLIED;
                parameterInfo.semesterId = _this.selectedSemesterId;
                parameterInfo.studentId = _this.studentId;
                parameterInfo.parameterId = parameterId;
                parameterInfo.parameterName = _this.allParametersInfo.filter(function (f) { return f.id == parameterId.toString(); })[0].shortDescription;
                parameterInfo.courseId = appliedExpiredCourse.courseId;
                parameterInfo.courseNo = appliedExpiredCourse.courseNo;
                parameterInfo.courseTitle = appliedExpiredCourse.courseTitle;
                parameterInfo.courseYear = appliedExpiredCourse.carryYear;
                parameterInfo.courseSemester = appliedExpiredCourse.carrySemester;
                parameterInfo.transactionId = appliedExpiredCourse.transactionId;
                var clrImprGeneralDeadline = null;
                clrImprGeneralDeadline = cciExamDateInfo.filter(function (f) { return (f.courseId == appliedExpiredCourse.courseId); })[0].appDeadLineStr;
                parameterInfo.generalDeadline = clrImprGeneralDeadline;
                if (_this.checkDeadlineValidity(clrImprGeneralDeadline)) {
                    parameterInfo.generalDeadlineStatus = 1;
                }
                else {
                    parameterInfo.generalDeadlineStatus = 0;
                }
                var clrImprExtendedDeadline = null;
                var filteredExtendedDeadlineInfo = [];
                filteredExtendedDeadlineInfo = extendedDeadlineInfo.filter(function (f) { return f.transactionId == appliedExpiredCourse.transactionId; });
                if (filteredExtendedDeadlineInfo.length > 0) {
                    clrImprExtendedDeadline = filteredExtendedDeadlineInfo[0].extendedDeadline;
                    parameterInfo.extendedDeadline = clrImprExtendedDeadline;
                }
                if (_this.checkDeadlineValidity(clrImprExtendedDeadline)) {
                    parameterInfo.extendedDeadlineStatus = 1;
                }
                else {
                    parameterInfo.extendedDeadlineStatus = 0;
                }
                deadlineParameterDetails.push(parameterInfo);
            });
        };
        DeadlineExtension.prototype.checkDeadlineValidity = function (deadline) {
            if (!ums.Utils.isNullOrUndefined(deadline)) {
                var date = ums.Utils.stringToDate(deadline, 'dd-MM-yyyy', '-');
                var today = new Date();
                today.setHours(0, 0, 0, 0);
                if (date < today) {
                    return false;
                }
                else {
                    return true;
                }
            }
            else {
                return false;
            }
        };
        DeadlineExtension.prototype.compareDates = function (inputDate, maxDate) {
            if (!ums.Utils.isNullOrUndefined(inputDate) && !ums.Utils.isNullOrUndefined(maxDate)) {
                var inputDateInDateFormat = ums.Utils.stringToDate(inputDate, 'dd-MM-yyyy', '-');
                var maxDateInDateFormat = ums.Utils.stringToDate(maxDate, 'dd-MM-yyyy', '-');
                if (inputDateInDateFormat > maxDateInDateFormat) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (ums.Utils.isNullOrUndefined(maxDate)) {
                return true;
            }
            else {
                return false;
            }
        };
        DeadlineExtension.prototype.getAppliedExpiredCourses = function (appliedCourses, studentPaymentList) {
            var _this = this;
            var expiredCourses = [];
            appliedCourses.forEach(function (course) {
                var coursePayment = [];
                coursePayment = studentPaymentList.filter(function (f) { return (f.transactionId == course.transactionId); });
                if (coursePayment.length > 0) {
                    if (coursePayment[0].paymentStatus == _this.statusStudentPaymentExpired) {
                        expiredCourses.push(course);
                    }
                }
            });
            return expiredCourses;
        };
        DeadlineExtension.prototype.getHistory = function (parameterId, parameterName, transactionId, courseId, courseNo, selectedApplicationStatus, selectedCourses) {
            var _this = this;
            //todo: I will update this history part later, this is not a better approach
            this.selectedPaymentStatus = null;
            this.selectedTransactionType = null;
            this.parameterId = parameterId;
            this.parameterName = parameterName;
            this.transactionId = transactionId;
            this.courseId = courseId;
            this.courseNo = courseNo;
            this.selectedApplicationStatus = selectedApplicationStatus;
            this.selectedCourses = [];
            this.selectedCourses = this.deadlineParameterDetails.filter(function (f) { return f.transactionId == transactionId; });
            this.deadlineExtensionService.getHistory(this.studentId, this.selectedSemesterId, parameterId).then(function (data) {
                _this.historyList = [];
                _this.historyList = data.entries;
                if (ums.Utils.isNullOrUndefined(_this.transactionId)) {
                    return;
                }
                if (_this.transactionId.length > 0) {
                    if (_this.selectedApplicationStatus == 'Applied') {
                        //this.historyList = this.historyList.filter(f=>(f.transactionId == this.transactionId));
                        /*this.historyList = this.historyList.filter(f=>(f.transactionId == this.transactionId && f.courseId == this.courseId));*/
                        if (_this.isExamOffice) {
                            //this.historyList = this.historyList.filter(f=>(f.transactionId == this.transactionId && f.courseId == this.courseId));
                            _this.historyList = _this.historyList.filter(function (f) { return (f.transactionId == _this.transactionId && (_this.courseId.length == 0 || f.courseId == _this.courseId)); });
                        }
                        else {
                            _this.historyList = _this.historyList.filter(function (f) { return (f.transactionId == _this.transactionId); });
                        }
                    }
                    else {
                        if (_this.courseId.length > 0) {
                            _this.historyList = _this.historyList.filter(function (f) { return (f.courseId == _this.courseId && ums.Utils.isNullOrUndefined(f.transactionId)); });
                        }
                    }
                }
                /*else{
                  this.historyList = this.historyList.filter(f=>(Utils.isNullOrUndefined(f.transactionId)));
                }*/
            });
            if (this.transactionId && this.transactionId.length > 0 && this.selectedApplicationStatus == 'Applied') {
                this.getPaymentByTransactionId(this.transactionId, false);
            }
        };
        DeadlineExtension.prototype.redirect = function () {
            this.$window.open('https://' + location.hostname + '/ums-account-web/iums/#/semesterInstallments?semesterId=' + this.selectedSemesterId + '&studentId=' + this.student.id, '_self');
        };
        DeadlineExtension.prototype.setNewDeadline = function (parameterId, parameterName, courseId, courseNo, courseTitle, courseYear, courseSemester, transactionId, selectedExtendedDate, selectedApplicationStatus, selectedGeneralDate) {
            this.deadlineExtensionSubmitButtonDisabled = false;
            this.selectedPaymentStatus = null;
            this.selectedTransactionType = null;
            this.extendedDate = "";
            this.parameterName = parameterName;
            this.parameterId = parameterId;
            this.courseId = courseId;
            this.courseNo = courseNo;
            this.courseTitle = courseTitle;
            this.courseYear = courseYear;
            this.courseSemester = courseSemester;
            this.transactionId = transactionId;
            this.selectedExtendedDate = selectedExtendedDate;
            this.selectedGeneralDate = selectedGeneralDate;
            this.selectedApplicationStatus = selectedApplicationStatus;
            this.selectedCourses = [];
            this.selectedCourses = this.deadlineParameterDetails.filter(function (f) { return f.transactionId == transactionId; });
            if (this.transactionId && this.transactionId.length > 0 && this.selectedApplicationStatus == 'Applied') {
                this.getPaymentByTransactionId(this.transactionId, true);
            }
            else {
                $('#deadlineExtend').modal('show');
            }
        };
        DeadlineExtension.prototype.getPaymentByTransactionId = function (transactionId, showModal) {
            var _this = this;
            this.paymentService.getPaymentByTransactionId(transactionId).then(function (res) {
                _this.getStudentPaymentDetail(transactionId);
                _this.selectedPaymentStatus = res.paymentStatus;
                _this.selectedTransactionType = res.transactionType;
                if (showModal)
                    $('#deadlineExtend').modal('show');
            });
        };
        DeadlineExtension.prototype.submit = function () {
            var _this = this;
            this.deadlineExtensionSubmitButtonDisabled = false;
            if (this.extendedDate != "") {
                /*
                var today=new Date(this.extendedDate);
                var dd = String(today.getDate());
                var mm = String(today.getMonth() + 1);
                var yyyy = today.getFullYear();
                var formatted = dd + '-' + mm  + '-' + yyyy;
                this.extendedDate=formatted;
                */
                //this.extendedDate = this.extendedDate.split('/').join('-');
                if (this.compareDates(this.extendedDate, this.selectedGeneralDate)) {
                    this.convertToJson().then(function (json) {
                        _this.deadlineExtensionSubmitButtonDisabled = true;
                        _this.deadlineExtensionService.addRecord(json).then((function (data) {
                            if (data == 'success') {
                                if (_this.selectedApplicationStatus == ApplicationStatus.APPLIED && _this.transactionId.length > 0) {
                                    //this.compareDates(this.extendedDate,this.selectedExtendedDate) && => date compare removed
                                    if (_this.isLateFeeEditable) {
                                        _this.updateExtension(_this.lateFee);
                                    }
                                    else {
                                        _this.updateExtension(0);
                                    }
                                }
                                _this.search();
                                $('#deadlineExtend').modal('hide');
                                _this.deadlineExtensionSubmitButtonDisabled = false;
                            }
                            else {
                                $('#deadlineExtend').modal('hide');
                                _this.deadlineExtensionSubmitButtonDisabled = false;
                            }
                        }));
                    });
                }
                else {
                    //this.notify.error(("Please select a valid date"));
                    this.notify.warn("Extended deadline should be greater than general deadline (" + this.selectedGeneralDate + ")");
                }
            }
            else {
                this.notify.error("Please select a date to extend deadline");
            }
        };
        DeadlineExtension.prototype.updateExtension = function (lateFeeForUpdate) {
            this.paymentService.saveTransactionDeadlineExtension(this.transactionId, lateFeeForUpdate, this.extendedDate).then(function (res) {
                //this.notify.success("Deadline extension successful");
            });
        };
        /*
        private convertToJson(): ng.IPromise<any> {
          let defer: ng.IDeferred<any> = this.$q.defer();
          var completeJson = {};
          var jsonObj = [];
              var item = {};
              item["studentId"] = this.studentId;
              item["semesterId"] = this.selectedSemesterId;
              item["parameterId"] = this.parameterId;
              item["extendedDate"] = this.extendedDate;
              //item["transactionId"] = this.transactionId;
              item["transactionId"] = this.selectedApplicationStatus == ApplicationStatus.NOT_APPLIED? "" : this.transactionId;
              item["courseId"] = this.courseId;
              jsonObj.push(item);
          completeJson["entries"] = jsonObj;
          defer.resolve(completeJson);
          return defer.promise;
        }
        */
        DeadlineExtension.prototype.convertToJson = function () {
            var _this = this;
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            /*if(this.selectedApplicationStatus == ApplicationStatus.APPLIED && this.parameterId != 18){*/
            if (this.selectedApplicationStatus == ApplicationStatus.APPLIED && this.parameterId != 18 && this.isExamOffice) {
                this.selectedCourses.forEach(function (f) {
                    var item = {};
                    item["studentId"] = _this.studentId;
                    item["semesterId"] = _this.selectedSemesterId;
                    item["parameterId"] = _this.parameterId;
                    item["extendedDate"] = _this.extendedDate;
                    item["transactionId"] = _this.transactionId;
                    item["courseId"] = f.courseId;
                    jsonObj.push(item);
                });
            }
            else {
                var item = {};
                item["studentId"] = this.studentId;
                item["semesterId"] = this.selectedSemesterId;
                item["parameterId"] = this.parameterId;
                item["extendedDate"] = this.extendedDate;
                /*item["transactionId"] = this.selectedApplicationStatus == ApplicationStatus.NOT_APPLIED? "" : this.transactionId;*/
                item["transactionId"] = ums.Utils.isNullOrUndefined(this.transactionId) || this.selectedApplicationStatus == ApplicationStatus.NOT_APPLIED ? "" : this.transactionId;
                item["courseId"] = this.courseId;
                if (!this.isExamOffice)
                    item["lateFee"] = this.isLateFeeEditable ? this.lateFee : 0;
                jsonObj.push(item);
            }
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        DeadlineExtension.prototype.getStudentPaymentDetail = function (transactionId) {
            var _this = this;
            this.isLateFeeEditable = true;
            this.transactionIdForDetail = transactionId;
            this.totalAmount = 0;
            this.detailedStudentPaymentService.getDetailedStudentPaymentByTransactionId(transactionId).then(function (detailedStudentPayments) {
                _this.detailedStudentPayments = [];
                _this.detailedStudentPayments = detailedStudentPayments;
                detailedStudentPayments.forEach(function (d) {
                    _this.totalAmount += d.amount;
                    if (d.feeCategoryId == "22") {
                        _this.lateFee = d.amount;
                        _this.isLateFeeEditable = false;
                    }
                });
            });
        };
        DeadlineExtension.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'studentService', 'FeeReportService',
            'deadlineExtensionService', 'userService', 'PaymentService', 'parameterService', 'examRoutineService', 'applicationCarryService', 'applicationClearanceImprovementService', 'studentRecordService', '$state', 'DetailedStudentPaymentService', '$scope'];
        DeadlineExtension.FEE_GROUP_UG_CARRY_REGISTRATION = 8;
        DeadlineExtension.FEE_GROUP_UG_SEMESTER_FEES = 2;
        DeadlineExtension.FEE_GROUP_UG_READMISSION_FEES = 5;
        DeadlineExtension.CLEARANCE = 2;
        DeadlineExtension.IMPROVEMENT = 5;
        return DeadlineExtension;
    }());
    ums.UMS.controller("DeadlineExtension", DeadlineExtension);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DeadlineExtensionService = (function () {
        function DeadlineExtensionService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        DeadlineExtensionService.prototype.getParameters = function (studentId, semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/deadlineExtension/getParameters/studentId/' + studentId + '/semesterId/' + semesterId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        DeadlineExtensionService.prototype.getDeadlinesGroupByTransactionId = function (studentId, semesterId, parameterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/deadlineExtension/getDeadlinesGroupByTransactionId/studentId/' + studentId + '/semesterId/' + semesterId + '/parameterId/' + parameterId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        DeadlineExtensionService.prototype.getHistory = function (studentId, semesterId, parameterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/deadlineExtension/getHistory/studentId/' + studentId + '/semesterId/' + semesterId + '/parameterId/' + parameterId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        DeadlineExtensionService.prototype.getHistoryByTransactionId = function (studentId, semesterId, parameterId, transactionId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/deadlineExtension/getHistoryByTransactionId/studentId/' + studentId + '/semesterId/' + semesterId + '/parameterId/' + parameterId + '/transactionId/' + transactionId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        DeadlineExtensionService.prototype.getExtendedDeadlineStatus = function (studentId, semesterId, parameterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/deadlineExtension/getStatus/studentId/' + studentId + '/semesterId/' + semesterId + '/parameterId/' + parameterId, 'application/json', function (response) {
                defer.resolve(response);
            }, function (response) {
            });
            return defer.promise;
        };
        DeadlineExtensionService.prototype.addRecord = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            this.httpClient.post("academic/deadlineExtension/addRecords", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        DeadlineExtensionService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return DeadlineExtensionService;
    }());
    ums.DeadlineExtensionService = DeadlineExtensionService;
    ums.UMS.service("deadlineExtensionService", DeadlineExtensionService);
})(ums || (ums = {}));
/*
* Rumi-21-1-1028
* carry Approval Controller
* */
var ums;
(function (ums) {
    var studentTES = (function () {
        function studentTES(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, $timeout, leaveTypeService, leaveApplicationService, leaveApplicationStatusService, employeeService, additionalRolePermissionsService, userService, commonservice, attachmentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.$timeout = $timeout;
            this.leaveTypeService = leaveTypeService;
            this.leaveApplicationService = leaveApplicationService;
            this.leaveApplicationStatusService = leaveApplicationStatusService;
            this.employeeService = employeeService;
            this.additionalRolePermissionsService = additionalRolePermissionsService;
            this.userService = userService;
            this.commonservice = commonservice;
            this.attachmentService = attachmentService;
            this.courseTypeList = [];
            this.courseTypeList = this.appConstants.courseTypeTES;
            this.courseApprovalStatus = this.courseTypeList[0];
            this.allReviewEligibleCourses = [];
            this.getFacultyInfo = [];
            this.courseType = "";
            this.selectedRow = null;
            this.checkCourseTeacher = false;
            this.checkComment = true;
            this.checkSelectTeacher = true;
            this.readOnlyViewCheck = true;
            this.statusChanged();
        }
        studentTES.prototype.statusChanged = function () {
            var _this = this;
            this.courseType = "Theory";
            this.selectedRow = null;
            this.checkSelectTeacher = true;
            this.readOnlyViewCheck = true;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReviewEligibleCourses/courseType/' + this.courseType, 'application/json', function (json, etag) {
                appTES = json.entries;
                _this.allReviewEligibleCourses = appTES;
                _this.totalReviewEligibleCourseLength = _this.allReviewEligibleCourses.length;
                _this.semesterNameCurrent = json.semesterName;
                _this.isGraduated = json.isGraduated;
                console.log(_this.isGraduated);
                _this.checkCourseTeacher = false;
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        studentTES.prototype.getAllQuestions = function () {
            var _this = this;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getAllQuestions', 'application/json', function (json, etag) {
                if (json.startDate == 'Not started yet' && json.endDate == 'Not started yet') {
                    appTES = json.entries;
                    _this.questionListAndReview = appTES;
                    _this.startDate = json.startDate;
                    _this.endDate = json.endDate;
                    _this.deadLine = json.deadLine;
                    _this.startingDeadline = json.startingDeadline;
                    defer.resolve(json.entries);
                }
                else {
                    appTES = json.entries;
                    _this.questionListAndReview = appTES;
                    _this.startDate = _this.formatDate(json.startDate);
                    _this.endDate = _this.formatDate(json.endDate);
                    _this.deadLine = json.deadLine;
                    _this.startingDeadline = json.startingDeadline;
                    defer.resolve(json.entries);
                }
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        studentTES.prototype.getInfo = function (pFacultyId, pCourseId, id, status) {
            this.selectedRow = null;
            this.selectedRow = id;
            this.selectedFacultyid = pFacultyId;
            this.selectedCourseId = pCourseId;
            if (status != 1) {
                if (this.deadLine) {
                    this.readOnlyViewCheck = true;
                    this.checkSelectTeacher = false;
                }
                else {
                    this.notify.error("Deadline is over!!");
                }
            }
            else {
                this.notify.info("This course has already been evaluated");
                this.checkSelectTeacher = true;
                this.readOnlyViewCheck = false;
                this.getReviewedCourseInfo();
            }
        };
        studentTES.prototype.getReviewedCourseInfo = function () {
            var _this = this;
            var appTES = [];
            this.questionListAndReviewReadOnly = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getAllQuestions/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedFacultyid, 'application/json', function (json, etag) {
                appTES = json.entries;
                _this.questionListAndReviewReadOnly = appTES;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        studentTES.prototype.checkNullComments = function () {
            this.checkNullPoints();
            this.checkComment = true;
            for (var i = 0; i < this.questionListAndReview.length; i++) {
                if (this.questionListAndReview[i].comment != null && this.questionListAndReview[i].comment.length > 200) {
                    this.checkComment = false;
                }
            }
            if (!this.checkComment) {
                this.notify.error("Write your comment in 200 characters");
            }
        };
        studentTES.prototype.checkNullPoints = function () {
            this.checkPoint = true;
            for (var i = 0; i < this.questionListAndReview.filter(function (a) { return a.observationType != 3; }).length; i++) {
                if (this.questionListAndReview[i].point == 0) {
                    this.checkPoint = false;
                }
            }
            if (!this.checkPoint) {
                this.notify.error("You must rate all the questions to submit your review");
            }
        };
        studentTES.prototype.submit = function () {
            var _this = this;
            if (this.deadLine) {
                this.convertToJson(this.questionListAndReview).then(function (app) {
                    _this.httpClient.post('academic/applicationTES/saveTES', app, 'application/json')
                        .success(function (data, status, header, config) {
                        _this.notify.success("Data saved successfully");
                        _this.checkSelectTeacher = true;
                        _this.selectedRow = null;
                        _this.statusChanged();
                        _this.getAllQuestions();
                    }).error(function (data) {
                        _this.notify.error("Error in Saving Data");
                    });
                });
            }
            else {
                this.notify.info("Date over!!!Your submit request can not be processed!!! ");
            }
        };
        studentTES.prototype.convertToJson = function (result) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < result.length; i++) {
                var item = {};
                item["questionId"] = result[i].questionId;
                item["point"] = result[i].point;
                item["comment"] = result[i].comment;
                item["observationType"] = result[i].observationType;
                item["courseId"] = this.selectedCourseId;
                item["teacherId"] = this.selectedFacultyid;
                jsonObj.push(item);
            }
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        studentTES.prototype.formatDate = function (dateVal) {
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"
            ];
            var newDate = new Date(dateVal);
            var sMonth = this.padValue(newDate.getMonth() + 1);
            var sDay = this.padValue(newDate.getDate());
            var sYear = newDate.getFullYear();
            var sHour = newDate.getHours();
            var sMinute = this.padValue(newDate.getMinutes());
            var sAMPM = "AM";
            var iHourCheck = +sHour;
            if (iHourCheck > 12) {
                sAMPM = "PM";
                sHour = iHourCheck - 12;
            }
            else if (iHourCheck === 0) {
                sHour = 12;
            }
            sHour = this.padValue(sHour);
            return sDay + "-" + monthNames[+sMonth - 1] + "-" + sYear + " " + sHour + ":" + sMinute + " " + sAMPM;
        };
        studentTES.prototype.padValue = function (value) {
            return (value < 10) ? "0" + value : value;
        };
        studentTES.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'employeeService', 'additionalRolePermissionsService', 'userService', 'commonService', 'attachmentService'];
        return studentTES;
    }());
    ums.UMS.controller("studentTES", studentTES);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TeachersEvaluationReport = (function () {
        function TeachersEvaluationReport(appConstants, httpClient, $q, notify, $sce, $window, semesterService, employeeService) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.employeeService = employeeService;
            this.facultyName = "";
            this.facultyId = "";
            this.statusValue = 1;
            this.itemPerPage = 10;
            this.currentPageNumber = 1;
            this.submit_Button_Disable = true;
            this.resultView = true;
            this.checkBoxCounter = 0;
            this.commentPgCurrentPage = 1;
            this.commentPgItemsPerPage = 1;
            this.innerCommentPgCurrentPage = 1;
            this.innerCommentPgItemsPerPage = 10;
            this.pCurrentPage = 1;
            this.pItemsPerPage = 3;
            this.commentPgTotalRecords = 0;
            this.checkEvaluationResult = true;
            this.evaluationResultStatus = true;
            this.selectedSemesterId = 11;
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.fullName = "";
            this.evaluationEndDate = "";
            this.isEvaluationViewAvailable = false;
            this.employeeService.getLoggedEmployeeInfo().then(function (data) {
                _this.selectedTeacherId = data.id;
                _this.staticTeacherName = data.employeeName;
            });
            this.getSubmissionDeadLine();
            this.getSemesters();
        }
        TeachersEvaluationReport.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
            });
        };
        TeachersEvaluationReport.prototype.getSubmissionDeadLine = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationTES/getSubmissionDeadLine', 'application/json', function (json, etag) {
                _this.studentSubmitDeadLine = json.studentSubmitDeadLine;
                _this.startDate = json.startDate;
                _this.endDate = json.endDate;
                _this.currentSemesterId = json.currentSemesterId;
                _this.evaluationEndDate = json.evaluationEndDate;
                _this.isEvaluationViewAvailable = json.isEvaluationViewAvailable;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        TeachersEvaluationReport.prototype.getResults = function () {
            var _this = this;
            this.classObservationTotalSPoints = 0;
            this.classObservationTotalStudent = 0;
            this.classObservationAverage = 0;
            this.nonClassObservationTotalSPoints = 0;
            this.nonClassObservationTotalStudent = 0;
            this.nonClassObservationAverage = 0;
            this.finalScore = 0;
            this.studentComments = [];
            this.studentResult = [];
            var appTES = [];
            var defer = this.$q.defer();
            var counterObType1 = 0;
            var counterObType2 = 0;
            this.httpClient.get('academic/applicationTES/getResult/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json;
                _this.studentResult = appTES;
                for (var i = 0; i < _this.studentResult.length; i++) {
                    if (_this.studentResult[i].observationType == 1) {
                        counterObType1++;
                        _this.classObservationTotalSPoints = _this.classObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.classObservationTotalStudent = _this.classObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.classObservationAverage = _this.classObservationAverage + _this.studentResult[i].averageScore;
                    }
                    else {
                        counterObType2++;
                        _this.nonClassObservationTotalSPoints = _this.nonClassObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.nonClassObservationTotalStudent = _this.nonClassObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.nonClassObservationAverage = (_this.nonClassObservationAverage + _this.studentResult[i].averageScore);
                    }
                }
                if (_this.classObservationAverage != 0 && _this.nonClassObservationAverage != 0) {
                    _this.classObservationAverage = (_this.classObservationAverage / counterObType1);
                    _this.classObservationAverage = Number(_this.classObservationAverage.toFixed(2));
                    _this.nonClassObservationAverage = (_this.nonClassObservationAverage / counterObType2);
                    _this.nonClassObservationAverage = Number(_this.nonClassObservationAverage.toFixed(2));
                    _this.finalScore = (_this.classObservationAverage + _this.nonClassObservationAverage) / 2;
                    _this.finalScore = Number(_this.finalScore.toFixed(2));
                }
                else {
                    _this.classObservationAverage = 0;
                    _this.nonClassObservationAverage = 0;
                    _this.finalScore = 0;
                }
                _this.getComment();
                defer.resolve(_this.studentResult);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        TeachersEvaluationReport.prototype.getComment = function () {
            var _this = this;
            this.studentComments = [];
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationTES/getComment/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                _this.studentComments = json;
                _this.commentPgTotalRecords = _this.studentComments.length;
                _this.getReviewPercentage();
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        TeachersEvaluationReport.prototype.getReviewPercentage = function () {
            var _this = this;
            this.sectionForReview = "";
            this.registeredStudents = 0;
            this.selectedSectionForReview = "";
            this.selectedRegisteredStudents = 0;
            this.percentage = 0;
            this.studentReviewed = 0;
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationTES/getReviewPercentage/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                _this.sectionForReview = json.sectionForReview;
                _this.registeredStudents = json.registeredStudents;
                _this.selectedSectionForReview = json.selectedSectionForReview;
                _this.selectedRegisteredStudents = json.selectedRegisteredStudents;
                _this.percentage = json.percentage;
                _this.studentReviewed = json.studentReviewed;
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        TeachersEvaluationReport.prototype.getAssignedCoursesForReview = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
            this.studentComments = [];
            this.staticSessionName = this.semester.name;
            this.selectRow = null;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationTES/getAssignedCoursesForReview/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json.entries;
                _this.assignedCoursesForReview = appTES;
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        TeachersEvaluationReport.prototype.getInfo = function (pTeacherId, pCourseId, id, pSemesterId, pCourseNo, pCourseTitle, pDeptName) {
            this.selectRow = id;
            this.selectedCourseId = pCourseId;
            this.selectedTeacherId = pTeacherId;
            this.selectedSemesterId = pSemesterId;
            this.selectedCourseNo = pCourseNo;
            this.selectedCourseTitle = pCourseTitle;
            this.departmentName = pDeptName;
            if (this.currentSemesterId == pSemesterId) {
                if (this.isEvaluationViewAvailable) {
                    this.checkEvaluationResult = false;
                    this.getResults();
                }
                else {
                    this.notify.info("You can access the evaluation result of this semester after " + this.evaluationEndDate);
                }
            }
            else {
                this.checkEvaluationResult = false;
                this.getResults();
            }
        };
        TeachersEvaluationReport.prototype.semesterChanged = function (val) {
            this.fullName = "";
            this.selectedSemesterId = val.id;
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
        };
        TeachersEvaluationReport.prototype.getReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var facultyName = this.staticTeacherName.replace(/[^\w]/gi, '_');
            var courseNo = this.selectedCourseNo.replace(/[^\w]/gi, '');
            var semesterName = this.staticSessionName.replace(/[^\w]/gi, '');
            var fileName = "Evaluation_Report-" + facultyName + "-" + courseNo + "-" + semesterName;
            var defer = this.$q.defer();
            this.httpClient.get('academic/applicationTES/getReport/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        TeachersEvaluationReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'employeeService'];
        return TeachersEvaluationReport;
    }());
    ums.UMS.controller("TeachersEvaluationReport", TeachersEvaluationReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdminVcTes = (function () {
        function AdminVcTes(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.fullName = "";
            this.facultyName = "";
            this.facultyId = "";
            this.statusValue = 1;
            this.itemPerPage = 10;
            this.currentPageNumber = 1;
            this.submit_Button_Disable = true;
            this.resultView = true;
            this.checkBoxCounter = 0;
            this.commentPgCurrentPage = 1;
            this.commentPgItemsPerPage = 1;
            this.innerCommentPgCurrentPage = 1;
            this.innerCommentPgItemsPerPage = 10;
            this.commentPgTotalRecords = 0;
            this.checkEvaluationResult = true;
            this.evaluationResultStatus = true;
            this.selectedSemesterId = 11;
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.deptList = [];
            this.deptList = this.appConstants.deptShortName;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            this.evaluationEndDate = "";
            this.isEvaluationViewAvailable = false;
            this.getSubmissionDeadLine();
            this.getSemester();
        }
        AdminVcTes.prototype.deptChanged = function (deptId) {
            this.fullName = "";
            this.selectedDepartmentId = deptId.id;
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
            this.getEligibleFacultyMembers();
        };
        AdminVcTes.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
            });
        };
        AdminVcTes.prototype.teacherChanged = function (val) {
            this.fullName = val.fullName;
            this.checkEvaluationResult = true;
            this.selectedTeacherId = val.teacherId;
            this.assignedCoursesForReview = [];
        };
        AdminVcTes.prototype.getEligibleFacultyMembers = function () {
            var _this = this;
            this.facultyListResultEvaluation = [];
            this.selectedTeacherId = null;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getEligibleFacultyMembers/semesterId/' + this.selectedSemesterId + '/deptId/' + this.selectedDepartmentId, 'application/json', function (json, etag) {
                appTES = json.entries;
                _this.facultyListResultEvaluation = appTES;
                if (_this.facultyListResultEvaluation.length > 0) {
                    _this.selectedTeacherName = _this.facultyListResultEvaluation[0];
                    _this.selectedTeacherId = _this.selectedTeacherName.teacherId;
                    _this.fullName = _this.selectedTeacherName.fullName;
                }
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdminVcTes.prototype.getSubmissionDeadLine = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getSubmissionDeadLine', 'application/json', function (json, etag) {
                _this.studentSubmitDeadLine = json.studentSubmitDeadLine;
                _this.studentSubmitEndDate = json.endDate;
                _this.currentSemesterId = json.currentSemesterId;
                _this.evaluationEndDate = json.evaluationEndDate;
                _this.isEvaluationViewAvailable = json.isEvaluationViewAvailable;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdminVcTes.prototype.getResults = function () {
            var _this = this;
            this.classObservationTotalSPoints = 0;
            this.classObservationTotalStudent = 0;
            this.classObservationAverage = 0;
            this.nonClassObservationTotalSPoints = 0;
            this.nonClassObservationTotalStudent = 0;
            this.nonClassObservationAverage = 0;
            this.finalScore = 0;
            this.studentComments = [];
            this.studentResult = [];
            var appTES = [];
            var defer = this.$q.defer();
            var counterObType1 = 0;
            var counterObType2 = 0;
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getResult/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json;
                _this.studentResult = appTES;
                for (var i = 0; i < _this.studentResult.length; i++) {
                    if (_this.studentResult[i].observationType == 1) {
                        counterObType1++;
                        _this.classObservationTotalSPoints = _this.classObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.classObservationTotalStudent = _this.classObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.classObservationAverage = _this.classObservationAverage + _this.studentResult[i].averageScore;
                    }
                    else {
                        counterObType2++;
                        _this.nonClassObservationTotalSPoints = _this.nonClassObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.nonClassObservationTotalStudent = _this.nonClassObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.nonClassObservationAverage = (_this.nonClassObservationAverage + _this.studentResult[i].averageScore);
                    }
                }
                if (_this.classObservationAverage != 0 && _this.nonClassObservationAverage != 0) {
                    _this.classObservationAverage = (_this.classObservationAverage / counterObType1);
                    _this.classObservationAverage = Number(_this.classObservationAverage.toFixed(2));
                    _this.nonClassObservationAverage = (_this.nonClassObservationAverage / counterObType2);
                    _this.nonClassObservationAverage = Number(_this.nonClassObservationAverage.toFixed(2));
                    _this.finalScore = (_this.classObservationAverage + _this.nonClassObservationAverage) / 2;
                    _this.finalScore = Number(_this.finalScore.toFixed(2));
                }
                else {
                    _this.classObservationAverage = 0;
                    _this.nonClassObservationAverage = 0;
                    _this.finalScore = 0;
                }
                _this.getComment();
                defer.resolve(_this.studentResult);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        AdminVcTes.prototype.getComment = function () {
            var _this = this;
            this.studentComments = [];
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getComment/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json;
                _this.studentComments = appTES;
                _this.commentPgTotalRecords = _this.studentComments.length;
                _this.getReviewPercentage();
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        AdminVcTes.prototype.getReviewPercentage = function () {
            var _this = this;
            this.sectionForReview = "";
            this.registeredStudents = 0;
            this.selectedSectionForReview = "";
            this.selectedRegisteredStudents = 0;
            this.percentage = 0;
            this.studentReviewed = 0;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReviewPercentage/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                _this.sectionForReview = json.sectionForReview;
                _this.registeredStudents = json.registeredStudents;
                _this.selectedSectionForReview = json.selectedSectionForReview;
                _this.selectedRegisteredStudents = json.selectedRegisteredStudents;
                _this.percentage = json.percentage;
                _this.studentReviewed = json.studentReviewed;
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        AdminVcTes.prototype.getAssignedCoursesForReview = function () {
            var _this = this;
            if (this.selectedTeacherId != null) {
                ums.Utils.expandRightDiv();
                this.checkEvaluationResult = true;
                this.assignedCoursesForReview = [];
                this.studentComments = [];
                this.staticTeacherName = this.selectedTeacherName.fullName;
                this.staticSessionName = this.semester.name;
                this.selectRow = null;
                var appTES = [];
                var defer = this.$q.defer();
                this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getAssignedCoursesForReview/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                    appTES = json.entries;
                    _this.assignedCoursesForReview = appTES;
                    defer.resolve(json);
                }, function (response) {
                    console.error(response);
                });
                return defer.promise;
            }
            else {
                this.notify.info("No Employee Found");
            }
        };
        AdminVcTes.prototype.getInfo = function (pTeacherId, pCourseId, id, pSemesterId, pCourseNo, pCourseTitle, pDeptName) {
            this.selectRow = id;
            this.selectedCourseId = pCourseId;
            this.selectedTeacherId = pTeacherId;
            this.selectedSemesterId = pSemesterId;
            this.selectedCourseNo = pCourseNo;
            this.selectedCourseTitle = pCourseTitle;
            this.departmentName = pDeptName;
            if (this.currentSemesterId == pSemesterId) {
                if (this.isEvaluationViewAvailable) {
                    this.checkEvaluationResult = false;
                    this.getResults();
                }
                else {
                    this.notify.info("You can access the evaluation result of this semester after " + this.evaluationEndDate);
                }
            }
            else {
                this.checkEvaluationResult = false;
                this.getResults();
            }
        };
        AdminVcTes.prototype.semesterChanged = function (val) {
            this.fullName = "";
            this.selectedSemesterId = val.id;
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
            this.getEligibleFacultyMembers();
        };
        AdminVcTes.prototype.getBackToMainView = function () {
            this.evaluationResultStatus = true;
        };
        AdminVcTes.prototype.getSemester = function () {
            var _this = this;
            this.evaluationResultStatus = false;
            this.assignedCoursesForReview = [];
            this.studentComments = [];
            this.studentResult = [];
            this.selectedCourseNo = "";
            this.checkEvaluationResult = true;
            this.selectedSemesterId = null;
            this.selectedTeacherId = null;
            this.selectedSemesterName = null;
            this.selectedTeacherName = null;
            var appTES = [];
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.getEligibleFacultyMembers();
            });
        };
        AdminVcTes.prototype.getReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var facultyName = this.staticTeacherName.replace(/[^\w]/gi, '_');
            var courseNo = this.selectedCourseNo.replace(/[^\w]/gi, '');
            var semesterName = this.staticSessionName.replace(/[^\w]/gi, '');
            var fileName = "Evaluation_Report-" + facultyName + "-" + courseNo + "-" + semesterName;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReport/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        AdminVcTes.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService'];
        return AdminVcTes;
    }());
    ums.UMS.controller("AdminVcTes", AdminVcTes);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdminVcTesComparison = (function () {
        function AdminVcTesComparison(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyName = "";
            this.facultyId = "";
            this.statusValue = 1;
            this.itemPerPage = 10;
            this.currentPageNumber = 1;
            this.submit_Button_Disable = true;
            this.resultView = true;
            this.checkBoxCounter = 0;
            this.innerCommentPgCurrentPage = 1;
            this.innerCommentPgItemsPerPage = 20;
            this.totalRecords = 0;
            this.checkEvaluationResult = true;
            this.evaluationResultStatus = true;
            this.selectedSemesterId = 11;
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.deptList = [];
            this.deptList = this.appConstants.deptForTes;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            this.staticDepartmentName = this.deptName.name;
            this.pgHide = true;
            this.evaluationEndDate = "";
            this.isEvaluationViewAvailable = false;
            this.loader = false;
            /* this.getStudentSubmitDeadLine();*/
            this.getSemesters();
        }
        AdminVcTesComparison.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
            this.checkEvaluationResult = true;
            this.staticDepartmentName = deptId.name;
            this.pgHide = true;
            this.assignedCoursesForReview = [];
        };
        AdminVcTesComparison.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.checkEvaluationResult = true;
            this.staticSessionName = val.name;
            this.pgHide = true;
            this.assignedCoursesForReview = [];
        };
        AdminVcTesComparison.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
            });
        };
        AdminVcTesComparison.prototype.getStudentSubmitDeadLine = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getSubmissionDeadLine', 'application/json', function (json, etag) {
                _this.studentSubmitDeadLine = json.studentSubmitDeadLine;
                _this.studentSubmitEndDate = json.endDate;
                _this.currentSemesterId = json.currentSemesterId;
                _this.evaluationEndDate = json.evaluationEndDate;
                _this.isEvaluationViewAvailable = json.isEvaluationViewAvailable;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdminVcTesComparison.prototype.getComparisionResult = function () {
            if (this.currentSemesterId == this.selectedSemesterId) {
                if (this.isEvaluationViewAvailable) {
                    this.checkEvaluationResult = false;
                    this.getComparisonList();
                }
                else {
                    this.notify.info("You can access the evaluation result of this semester after " + this.evaluationEndDate);
                }
            }
            else {
                this.checkEvaluationResult = false;
                this.getComparisonList();
            }
        };
        AdminVcTesComparison.prototype.getComparisonList = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.innerCommentPgCurrentPage = 1;
            this.loader = false;
            this.assignedCoursesForReview = [];
            this.staticSessionName = this.semester.name;
            var defer = this.$q.defer();
            var appTES = [];
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getComparisionResult/deptId/' + this.selectedDepartmentId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json;
                _this.assignedCoursesForReview = appTES;
                _this.totalRecords = appTES.length;
                _this.pgHide = false;
                _this.loader = true;
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        AdminVcTesComparison.prototype.getReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var semesterName = this.staticSessionName.replace(/[^\w]/gi, '');
            var fileName = "Evaluation_Report" + "-" + this.staticDepartmentName + "-" + semesterName;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReportSuperAdmin/deptId/' + this.selectedDepartmentId + '/semesterId/' + this.selectedSemesterId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        AdminVcTesComparison.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService'];
        return AdminVcTesComparison;
    }());
    ums.UMS.controller("AdminVcTesComparison", AdminVcTesComparison);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var QuestionsAdmin = (function () {
        function QuestionsAdmin(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.initialStatus = true;
            this.setQuestionShowStatus = true;
            this.setQuestionsForEvaluationStatus = false;
            this.addNewQuestionStatus = false;
            this.migrateQuestionStatus = false;
            this.deleteQuestionStatus = false;
            this.observationTypeList = [];
            this.observationTypeList = this.appConstants.observationTypeTes;
            this.observationTypeStatus = {};
            this.observationTypeStatus = this.observationTypeList[0];
            this.selectedObTypeId = this.observationTypeStatus.id;
            this.observationTypeName = this.observationTypeStatus.name;
            this.questionDetails = "";
            this.submit_Button_Disable = true;
            this.checkBoxCounter = 0;
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.getInitialSemesterParameter();
        }
        QuestionsAdmin.prototype.getInitialSemesterParameter = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getInitialSemesterParameter', 'application/json', function (json, etag) {
                _this.startDate = json.startDate;
                _this.endDate = json.endDate;
                _this.deadLine = json.deadLine;
                _this.semesterName = json.semesterName;
                _this.deadLineStatus = _this.deadLine == true ? 'Available' : 'Not Allowed';
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        QuestionsAdmin.prototype.getBack = function () {
            this.deleteQuestionStatus = false;
            this.setQuestionShowStatus = true;
        };
        QuestionsAdmin.prototype.getDeleteEligibleQuestions = function () {
            var _this = this;
            this.setQuestionShowStatus = false;
            this.deleteQuestionStatus = true;
            var app = [];
            this.deleteQuestionList = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getDeleteEligibleQuestions', 'application/json', function (json, etag) {
                app = json.entries;
                _this.deleteQuestionList = app;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        QuestionsAdmin.prototype.deleteQuestion = function () {
            var setQuestionStatus = 1;
            this.delete(this.deleteQuestionList, setQuestionStatus);
        };
        QuestionsAdmin.prototype.addQuestionSubmit = function () {
            if (this.questionDetails == "" || this.questionDetails == null) {
                this.notify.warn("Question details is Empty!");
            }
            else {
                if (this.questionDetails.length > 0 && this.questionDetails.length <= 200) {
                    this.save();
                }
                else {
                    this.notify.warn("Maximum length for question details is 200");
                }
            }
        };
        QuestionsAdmin.prototype.changeObservationStatus = function (value) {
            this.selectedObTypeId = value.id;
            this.observationTypeName = value.name;
        };
        QuestionsAdmin.prototype.setQuestionsForEvaluation = function () {
            ums.Utils.expandRightDiv();
            this.setQuestionsForEvaluationStatus = true;
            this.setQuestionShowStatus = true;
            this.addNewQuestionStatus = false;
            this.migrateQuestionStatus = false;
            this.initialStatus = false;
            this.deleteQuestionStatus = false;
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
            this.getQuestions();
        };
        QuestionsAdmin.prototype.addNewQuestions = function () {
            ums.Utils.expandRightDiv();
            this.addNewQuestionStatus = true;
            this.migrateQuestionStatus = false;
            this.setQuestionsForEvaluationStatus = false;
            this.initialStatus = false;
        };
        QuestionsAdmin.prototype.migrateQuestions = function () {
            ums.Utils.expandRightDiv();
            this.migrateQuestionStatus = true;
            this.setQuestionsForEvaluationStatus = false;
            this.addNewQuestionStatus = false;
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
            this.initialStatus = false;
            this.getSemesters();
        };
        QuestionsAdmin.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.getMigrationQuestionList();
            });
        };
        QuestionsAdmin.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.getMigrationQuestionList();
        };
        QuestionsAdmin.prototype.getMigrationQuestionList = function () {
            var _this = this;
            var app = [];
            this.questionsMigrationList = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getMigrateQuestions/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                app = json.entries;
                _this.questionsMigrationList = app;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        QuestionsAdmin.prototype.submitSelectedQuestions = function () {
            var setQuestionStatus = 1;
            this.setQuestions(this.questionsList, setQuestionStatus);
        };
        QuestionsAdmin.prototype.submitSelectedMigrationQuestions = function () {
            var setMigrationQuestionStatus = 2;
            this.setQuestions(this.questionsMigrationList, setMigrationQuestionStatus);
        };
        QuestionsAdmin.prototype.delete = function (result, parameter) {
            var _this = this;
            this.convertToJsonSetQuestion(result).then(function (app) {
                _this.httpClient.put('academic/applicationTES/deleteQuestion', app, 'application/json')
                    .success(function (data, status, header, config) {
                    _this.notify.success("Data deleted Successfully");
                    _this.checkBoxCounter = 0;
                    _this.submit_Button_Disable = true;
                    _this.getDeleteEligibleQuestions();
                    if (parameter == 1) {
                        _this.getQuestions();
                    }
                    else {
                        _this.getMigrationQuestionList();
                    }
                }).error(function (data) {
                    _this.notify.error("Error in Saving Data");
                });
            });
        };
        QuestionsAdmin.prototype.setQuestions = function (result, parameter) {
            var _this = this;
            this.convertToJsonSetQuestion(result).then(function (app) {
                _this.httpClient.post('academic/applicationTES/setQuestion', app, 'application/json')
                    .success(function (data, status, header, config) {
                    _this.notify.success("Data saved successfully");
                    _this.checkBoxCounter = 0;
                    _this.submit_Button_Disable = true;
                    if (parameter == 1) {
                        _this.getQuestions();
                    }
                    else {
                        _this.getMigrationQuestionList();
                    }
                }).error(function (data) {
                    _this.notify.error("Error in Saving Data");
                });
            });
        };
        QuestionsAdmin.prototype.getQuestions = function () {
            var _this = this;
            var app = [];
            this.questionsList = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getQuestions', 'application/json', function (json, etag) {
                app = json.entries;
                _this.questionsList = app;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        QuestionsAdmin.prototype.save = function () {
            var _this = this;
            this.convertToJson(this.questionDetails, this.selectedObTypeId).then(function (app) {
                _this.httpClient.post('academic/applicationTES/addQuestion', app, 'application/json')
                    .success(function (data, status, header, config) {
                    _this.notify.success("Data saved successfully");
                    _this.questionDetails = "";
                }).error(function (data) {
                    _this.notify.error("Error in Saving Data");
                });
            });
        };
        QuestionsAdmin.prototype.convertToJson = function (questionDetails, observationType) {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["questionDetails"] = questionDetails;
            item["observationType"] = observationType;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        QuestionsAdmin.prototype.convertToJsonSetQuestion = function (result) {
            var defer = this.$q.defer();
            var completeJson = {};
            var selectedQuestionStatus = 1;
            var jsonObj = [];
            for (var i = 0; i < result.length; i++) {
                var item = {};
                if (result[i].apply == true) {
                    item["questionId"] = result[i].questionId;
                    item["status"] = selectedQuestionStatus;
                    jsonObj.push(item);
                }
            }
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        QuestionsAdmin.prototype.checkMoreThanOneSelectionSubmit = function (result) {
            if (result.apply) {
                this.checkBoxCounter++;
                this.enableOrDisableSubmitButton();
            }
            else {
                this.checkBoxCounter--;
                this.enableOrDisableSubmitButton();
            }
        };
        QuestionsAdmin.prototype.enableOrDisableSubmitButton = function () {
            if (this.checkBoxCounter > 0) {
                this.submit_Button_Disable = false;
            }
            else {
                this.submit_Button_Disable = true;
            }
        };
        QuestionsAdmin.prototype.close = function () {
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
        };
        QuestionsAdmin.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService'];
        return QuestionsAdmin;
    }());
    ums.UMS.controller("QuestionsAdmin", QuestionsAdmin);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var IndividualQuestionTesReport = (function () {
        function IndividualQuestionTesReport(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.searchResult = false;
            this.deptList = [];
            this.deptList = this.appConstants.deptShortName;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            this.departmentName = this.deptName.name;
            this.yearList = [];
            this.yearList = this.appConstants.year;
            this.yearName = this.yearList[0];
            this.selectedYear = this.yearName.id;
            this.year = this.yearName.name;
            this.academicSemesterList = [];
            this.academicSemesterList = this.appConstants.semester;
            this.academicSemesterName = this.academicSemesterList[0];
            this.selectedSemester = this.academicSemesterName.id;
            this.acaSemester = this.academicSemesterName.name;
            this.evaluationEndDate = "";
            this.isEvaluationViewAvailable = false;
            this.getSemesters();
            this.getSubmissionDeadLine();
        }
        IndividualQuestionTesReport.prototype.getSubmissionDeadLine = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getSubmissionDeadLine', 'application/json', function (json, etag) {
                _this.evaluationEndDate = json.evaluationEndDate;
                _this.isEvaluationViewAvailable = json.isEvaluationViewAvailable;
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        IndividualQuestionTesReport.prototype.yearChanged = function (value) {
            this.year = value.name;
            this.selectedYear = value.id;
        };
        IndividualQuestionTesReport.prototype.academicSemester = function (value) {
            this.acaSemester = value.name;
            this.selectedSemester = value.id;
        };
        IndividualQuestionTesReport.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
            this.departmentName = deptId.name;
            this.selectedRow = null;
            if (deptId.id != "01") {
                this.yearList = [];
                this.yearList = this.appConstants.year;
                this.yearName = this.yearList[0];
                this.yearList = this.yearList.filter(function (a) { return a.id != 5; });
                this.selectedYear = this.yearName.id;
                this.year = this.yearName.name;
            }
            else {
                this.yearList = [];
                this.yearList = this.appConstants.year;
                this.yearName = this.yearList[0];
                this.selectedYear = this.yearName.id;
                this.year = this.yearName.name;
            }
        };
        IndividualQuestionTesReport.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.getSemesterWiseQuestions();
            this.selectedRow = null;
        };
        IndividualQuestionTesReport.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
                _this.getSemesterWiseQuestions();
            });
        };
        IndividualQuestionTesReport.prototype.getSemesterWiseQuestions = function () {
            var _this = this;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getSemesterWiseQuestions/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json.entries;
                _this.questionListAndReview = appTES;
                _this.questionListAndReview = _this.questionListAndReview.filter(function (a) { return a.observationType != 3; });
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        IndividualQuestionTesReport.prototype.getInfo = function (pQuestionId, pQuestionDetails, id) {
            this.selectedRow = null;
            this.selectedRow = id;
            this.questionDetails = pQuestionDetails;
            this.questionId = pQuestionId;
        };
        IndividualQuestionTesReport.prototype.clear = function () {
            this.questionId = null;
            this.questionDetails = "";
            this.searchResult = false;
        };
        IndividualQuestionTesReport.prototype.search = function () {
            var _this = this;
            if (this.isEvaluationViewAvailable) {
                if (this.selectedRow == null) {
                    this.notify.warn("You Must Select a Question to Perform Search operation");
                }
                else {
                    ums.Utils.expandRightDiv();
                    this.searchResult = true;
                    this.selectedRow = null;
                    var app = [];
                    var defer = this.$q.defer();
                    this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getQuestionWiseReport/deptId/' + this.selectedDepartmentId + '/year/' +
                        this.selectedYear + '/semester/' + this.selectedSemester + '/semesterId/' + this.selectedSemesterId + '/questionId/' + this.questionId, 'application/json', function (json, etag) {
                        _this.searchReport = json;
                        if (_this.searchReport.length <= 0) {
                            _this.notify.info("No Courses Found");
                        }
                        defer.resolve(json);
                    }, function (response) {
                        console.error(response);
                    });
                    return defer.promise;
                }
            }
            else {
                this.notify.info("You can access the evaluation result of this semester after " + this.evaluationEndDate);
            }
        };
        IndividualQuestionTesReport.prototype.getReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var semesterName = this.semesterName.replace(/[^\w]/gi, '');
            var fileName = "Evaluation_Report-" + this.departmentName + "-" + this.year + "-" + this.acaSemester + "-" + semesterName;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getQuestionWisePDFReport/deptId/' + this.selectedDepartmentId + '/year/' +
                this.selectedYear + '/semester/' + this.selectedSemester + '/semesterId/' + this.selectedSemesterId + '/questionId/' + this.questionId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        IndividualQuestionTesReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService'];
        return IndividualQuestionTesReport;
    }());
    ums.UMS.controller("IndividualQuestionTesReport", IndividualQuestionTesReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DeanEngineeringTes = (function () {
        function DeanEngineeringTes(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyName = "";
            this.facultyId = "";
            this.statusValue = 1;
            this.itemPerPage = 10;
            this.currentPageNumber = 1;
            this.submit_Button_Disable = true;
            this.resultView = true;
            this.checkBoxCounter = 0;
            this.commentPgCurrentPage = 1;
            this.commentPgItemsPerPage = 1;
            this.innerCommentPgCurrentPage = 1;
            this.innerCommentPgItemsPerPage = 2;
            this.commentPgTotalRecords = 0;
            this.checkEvaluationResult = true;
            this.evaluationResultStatus = true;
            this.selectedSemesterId = 11;
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.deptList = [];
            this.deptList = this.appConstants.facultyEngineering;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            console.log("-----" + this.selectedDepartmentId);
            this.getStudentSubmitDeadLine();
            this.getSemester();
        }
        DeanEngineeringTes.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
            this.getEligibleFacultyMembers();
            console.log(this.selectedDepartmentId);
        };
        DeanEngineeringTes.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
            });
        };
        DeanEngineeringTes.prototype.teacherChanged = function (val) {
            //  console.log("Name: "+val.firstName+"\nId: "+val.teacherId);
            this.checkEvaluationResult = true;
            this.selectedTeacherId = val.teacherId;
            this.assignedCoursesForReview = [];
        };
        DeanEngineeringTes.prototype.getEligibleFacultyMembers = function () {
            var _this = this;
            this.facultyListResultEvaluation = [];
            this.selectedTeacherId = null;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getEligibleFacultyMembers/semesterId/' + this.selectedSemesterId + '/deptId/' + this.selectedDepartmentId, 'application/json', function (json, etag) {
                appTES = json.entries;
                console.log("Eligible Faculty Members!!!!");
                _this.facultyListResultEvaluation = appTES;
                for (var i = 0; i < _this.facultyListResultEvaluation.length; i++) {
                    _this.facultyListResultEvaluation[i].fullName = _this.facultyListResultEvaluation[i].firstName + " " +
                        _this.facultyListResultEvaluation[i].lastName;
                }
                console.log(_this.facultyListResultEvaluation);
                if (_this.facultyListResultEvaluation.length > 0) {
                    _this.selectedTeacherName = _this.facultyListResultEvaluation[0];
                    _this.selectedTeacherId = _this.selectedTeacherName.teacherId;
                    console.log("id-------");
                    console.log("F_Id: " + _this.selectedTeacherId + "\nS_Id: " + _this.selectedSemesterId);
                }
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanEngineeringTes.prototype.getStudentSubmitDeadLine = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getStudentSubmitDeadLineInfo', 'application/json', function (json, etag) {
                console.log("Assigned Courses!!!!");
                _this.studentSubmitDeadLine = json.studentSubmitDeadLine;
                _this.studentSubmitEndDate = json.endDate;
                _this.currentSemesterId = json.currentSemesterId;
                console.log(_this.studentSubmitDeadLine + "\n" + _this.studentSubmitEndDate + "\n" + _this.currentSemesterId);
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanEngineeringTes.prototype.getResults = function () {
            var _this = this;
            this.classObservationTotalSPoints = 0;
            this.classObservationTotalStudent = 0;
            this.classObservationAverage = 0;
            this.nonClassObservationTotalSPoints = 0;
            this.nonClassObservationTotalStudent = 0;
            this.nonClassObservationAverage = 0;
            this.finalScore = 0;
            this.studentComments = [];
            this.studentResult = [];
            var appTES = [];
            var defer = this.$q.defer();
            var counterObType1 = 0;
            var counterObType2 = 0;
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getResult/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log(json);
                appTES = json;
                _this.studentResult = appTES;
                for (var i = 0; i < _this.studentResult.length; i++) {
                    if (_this.studentResult[i].observationType == 1) {
                        counterObType1++;
                        _this.classObservationTotalSPoints = _this.classObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.classObservationTotalStudent = _this.classObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.classObservationAverage = _this.classObservationAverage + _this.studentResult[i].averageScore;
                    }
                    else {
                        counterObType2++;
                        _this.nonClassObservationTotalSPoints = _this.nonClassObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.nonClassObservationTotalStudent = _this.nonClassObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.nonClassObservationAverage = (_this.nonClassObservationAverage + _this.studentResult[i].averageScore);
                    }
                }
                if (_this.classObservationAverage != 0 && _this.nonClassObservationAverage != 0) {
                    _this.classObservationAverage = (_this.classObservationAverage / counterObType1);
                    _this.classObservationAverage = Number(_this.classObservationAverage.toFixed(2));
                    _this.nonClassObservationAverage = (_this.nonClassObservationAverage / counterObType2);
                    _this.nonClassObservationAverage = Number(_this.nonClassObservationAverage.toFixed(2));
                    _this.finalScore = (_this.classObservationAverage + _this.nonClassObservationAverage) / 2;
                    _this.finalScore = Number(_this.finalScore.toFixed(2));
                }
                else {
                    _this.classObservationAverage = 0;
                    _this.nonClassObservationAverage = 0;
                    _this.finalScore = 0;
                }
                _this.getComment();
                defer.resolve(_this.studentResult);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        DeanEngineeringTes.prototype.getComment = function () {
            var _this = this;
            this.studentComments = [];
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getComment/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log("comment---------");
                appTES = json;
                _this.studentComments = appTES;
                _this.commentPgTotalRecords = _this.studentComments.length;
                console.log(_this.studentComments);
                console.log("calling Method");
                _this.getReviewPercentage();
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        DeanEngineeringTes.prototype.getReviewPercentage = function () {
            var _this = this;
            this.sectionForReview = "";
            this.registeredStudents = 0;
            this.selectedSectionForReview = "";
            this.selectedRegisteredStudents = 0;
            this.percentage = 0;
            this.studentReviewed = 0;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReviewPercentage/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log("Review Statistics");
                console.log("-----------------");
                console.log("sectionForReview: " + json.sectionForReview + "\n" +
                    "registeredStudents: " + json.registeredStudents + "\n" +
                    "selectedSectionForReview:" + json.selectedSectionForReview + "\n" +
                    "selectedRegisteredStudents: " + json.selectedRegisteredStudents + "\n" +
                    "percentage: " + json.percentage + "\n" +
                    "studentReviewed: " + json.studentReviewed);
                _this.sectionForReview = json.sectionForReview;
                _this.registeredStudents = json.registeredStudents;
                _this.selectedSectionForReview = json.selectedSectionForReview;
                _this.selectedRegisteredStudents = json.selectedRegisteredStudents;
                _this.percentage = json.percentage;
                _this.studentReviewed = json.studentReviewed;
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        DeanEngineeringTes.prototype.getAssignedCoursesForReview = function () {
            var _this = this;
            if (this.selectedTeacherId != null) {
                ums.Utils.expandRightDiv();
                this.checkEvaluationResult = true;
                this.assignedCoursesForReview = [];
                this.studentComments = [];
                this.staticTeacherName = this.selectedTeacherName.fullName;
                this.staticSessionName = this.semester.name;
                this.selectRow = null;
                console.log("eeeeeeeeeeee");
                console.log("" + this.selectedTeacherId + "\n" + this.selectedSemesterId);
                var appTES = [];
                var defer = this.$q.defer();
                this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getAssignedCoursesForReview/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                    console.log("List of Courses");
                    appTES = json.entries;
                    _this.assignedCoursesForReview = appTES;
                    console.log(_this.assignedCoursesForReview);
                    defer.resolve(json);
                }, function (response) {
                    console.error(response);
                });
                return defer.promise;
            }
            else {
                this.notify.info("No teacher id Found");
            }
        };
        DeanEngineeringTes.prototype.getInfo = function (pTeacherId, pCourseId, id, pSemesterId, pCourseNo, pCourseTitle, pDeptName) {
            this.selectRow = id;
            this.selectedCourseId = pCourseId;
            this.selectedTeacherId = pTeacherId;
            this.selectedSemesterId = pSemesterId;
            this.selectedCourseNo = pCourseNo;
            this.selectedCourseTitle = pCourseTitle;
            this.departmentName = pDeptName;
            if (this.currentSemesterId == pSemesterId) {
                if (this.studentSubmitDeadLine) {
                    this.checkEvaluationResult = false;
                    this.getResults();
                }
                else {
                    this.notify.info("Result is under Process.You Can access the result of this Semester on " + this.studentSubmitEndDate);
                }
            }
            else {
                this.checkEvaluationResult = false;
                this.getResults();
            }
        };
        DeanEngineeringTes.prototype.semesterChanged = function (val) {
            console.log("Name: " + val.name + "\nsemesterId: " + val.id);
            this.selectedSemesterId = val.id;
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
            this.getEligibleFacultyMembers();
            // this.getStudentSubmitDeadLine();
        };
        DeanEngineeringTes.prototype.getBackToMainView = function () {
            this.evaluationResultStatus = true;
        };
        DeanEngineeringTes.prototype.getSemester = function () {
            var _this = this;
            this.evaluationResultStatus = false;
            console.log("" + this.evaluationResultStatus);
            this.assignedCoursesForReview = [];
            this.studentComments = [];
            this.studentResult = [];
            this.selectedCourseNo = "";
            this.checkEvaluationResult = true;
            this.selectedSemesterId = null;
            this.selectedTeacherId = null;
            this.selectedSemesterName = null;
            this.selectedTeacherName = null;
            var appTES = [];
            //----
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                console.log("I____Id: " + _this.selectedSemesterId);
                _this.getEligibleFacultyMembers();
            });
        };
        DeanEngineeringTes.prototype.getReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Evaluation Report";
            console.log("QWERTYUIIOOOPPPPP");
            console.log("" + this.selectedTeacherId + "\n" + this.selectedSemesterId + "\n" + this.selectedCourseId);
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReport/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        DeanEngineeringTes.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'employeeService', 'additionalRolePermissionsService', 'userService', 'commonService', 'attachmentService'];
        return DeanEngineeringTes;
    }());
    ums.UMS.controller("DeanEngineeringTes", DeanEngineeringTes);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DeanEngineeringComparison = (function () {
        function DeanEngineeringComparison(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, $timeout, leaveTypeService, leaveApplicationService, leaveApplicationStatusService, employeeService, additionalRolePermissionsService, userService, commonservice, attachmentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.$timeout = $timeout;
            this.leaveTypeService = leaveTypeService;
            this.leaveApplicationService = leaveApplicationService;
            this.leaveApplicationStatusService = leaveApplicationStatusService;
            this.employeeService = employeeService;
            this.additionalRolePermissionsService = additionalRolePermissionsService;
            this.userService = userService;
            this.commonservice = commonservice;
            this.attachmentService = attachmentService;
            this.facultyName = "";
            this.facultyId = "";
            this.statusValue = 1;
            this.itemPerPage = 10;
            this.currentPageNumber = 1;
            this.submit_Button_Disable = true;
            this.resultView = true;
            this.checkBoxCounter = 0;
            this.innerCommentPgCurrentPage = 1;
            this.innerCommentPgItemsPerPage = 20;
            this.commentPgTotalRecords = 0;
            this.checkEvaluationResult = true;
            this.evaluationResultStatus = true;
            this.selectedSemesterId = 11;
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.deptList = [];
            this.deptList = this.appConstants.facultyEngineering;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            this.staticDepartmentName = this.deptName.name;
            this.pgHide = true;
            console.log("-----" + this.selectedDepartmentId);
            this.getStudentSubmitDeadLine();
            this.getSemesters();
        }
        DeanEngineeringComparison.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
            this.checkEvaluationResult = true;
            this.staticDepartmentName = deptId.name;
            this.pgHide = true;
            this.assignedCoursesForReview = [];
            console.log(this.selectedDepartmentId);
        };
        DeanEngineeringComparison.prototype.semesterChanged = function (val) {
            console.log("Name: " + val.name + "\nsemesterId: " + val.id);
            this.selectedSemesterId = val.id;
            this.checkEvaluationResult = true;
            this.staticSessionName = val.name;
            this.pgHide = true;
            this.assignedCoursesForReview = [];
            // this.getStudentSubmitDeadLine();
        };
        DeanEngineeringComparison.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                console.log("I____Id: " + _this.selectedSemesterId);
            });
        };
        DeanEngineeringComparison.prototype.getStudentSubmitDeadLine = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getStudentSubmitDeadLineInfo', 'application/json', function (json, etag) {
                console.log("Assigned Courses!!!!");
                _this.studentSubmitDeadLine = json.studentSubmitDeadLine;
                _this.studentSubmitEndDate = json.endDate;
                _this.currentSemesterId = json.currentSemesterId;
                console.log(_this.studentSubmitDeadLine + "\n" + _this.studentSubmitEndDate + "\n" + _this.currentSemesterId);
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanEngineeringComparison.prototype.getComparisionResult = function () {
            if (this.currentSemesterId == this.selectedSemesterId) {
                if (this.studentSubmitDeadLine) {
                    this.checkEvaluationResult = false;
                    this.getComparisonList();
                    console.log("Current Semester");
                }
                else {
                    this.notify.info("Result is under Process.You Can access the result of this Semester on " + this.studentSubmitEndDate);
                }
            }
            else {
                this.checkEvaluationResult = false;
                this.getComparisonList();
                console.log("Not Current Semester");
                //this.checkEvaluationResult = false;
                //this.getResults();
            }
        };
        DeanEngineeringComparison.prototype.getComparisonList = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.innerCommentPgCurrentPage = 1;
            this.assignedCoursesForReview = [];
            this.staticSessionName = this.semester.name;
            console.log("Stat.....");
            console.log("Dept: " + this.selectedDepartmentId + "\nSemesterId: " + this.selectedSemesterId);
            var defer = this.$q.defer();
            var appTES = [];
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getComparisionResult/deptId/' + this.selectedDepartmentId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log("List of Courses");
                appTES = json;
                _this.assignedCoursesForReview = appTES;
                _this.commentPgTotalRecords = appTES.length;
                _this.pgHide = false;
                console.log(_this.assignedCoursesForReview);
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanEngineeringComparison.prototype.getReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Evaluation Report" + "_" + this.staticDepartmentName + "_" + this.staticSessionName;
            console.log("QWERTYUIIOOOPPPPP");
            console.log("" + this.selectedTeacherId + "\n" + this.selectedSemesterId + "\n" + this.selectedCourseId);
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReportSuperAdmin/deptId/' + this.selectedDepartmentId + '/semesterId/' + this.selectedSemesterId, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        DeanEngineeringComparison.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'employeeService', 'additionalRolePermissionsService', 'userService', 'commonService', 'attachmentService'];
        return DeanEngineeringComparison;
    }());
    ums.UMS.controller("DeanEngineeringComparison", DeanEngineeringComparison);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DeanEngineeringIndividualQuestion = (function () {
        function DeanEngineeringIndividualQuestion(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.searchResult = false;
            this.deptList = [];
            this.deptList = this.appConstants.facultyEngineering;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            this.departmentName = this.deptName.name;
            this.yearList = [];
            this.yearList = this.appConstants.year;
            this.yearList = this.yearList.filter(function (a) { return a.id != 5; });
            this.yearName = this.yearList[0];
            this.selectedYear = this.yearName.id;
            this.year = this.yearName.name;
            this.academicSemesterList = [];
            this.academicSemesterList = this.appConstants.semester;
            this.academicSemesterName = this.academicSemesterList[0];
            this.selectedSemester = this.academicSemesterName.id;
            this.acaSemester = this.academicSemesterName.name;
            this.getSemesters();
        }
        DeanEngineeringIndividualQuestion.prototype.yearChanged = function (value) {
            console.log(value.name);
            this.year = value.name;
            this.selectedYear = value.id;
        };
        DeanEngineeringIndividualQuestion.prototype.academicSemester = function (value) {
            console.log(value.name);
            this.acaSemester = value.name;
            this.selectedSemester = value.id;
        };
        DeanEngineeringIndividualQuestion.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
            this.departmentName = deptId.name;
            console.log(this.selectedDepartmentId);
            this.selectedRow = null;
            if (deptId.id != "01") {
                this.yearList = [];
                this.yearList = this.appConstants.year;
                this.yearName = this.yearList[0];
                this.yearList = this.yearList.filter(function (a) { return a.id != 5; });
                this.selectedYear = this.yearName.id;
                this.year = this.yearName.name;
            }
            else {
                this.yearList = [];
                this.yearList = this.appConstants.year;
                this.yearName = this.yearList[0];
                this.selectedYear = this.yearName.id;
                this.year = this.yearName.name;
            }
        };
        DeanEngineeringIndividualQuestion.prototype.semesterChanged = function (val) {
            console.log("Name: " + val.name + "\nsemesterId: " + val.id);
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.getSemesterWiseQuestions();
            this.selectedRow = null;
        };
        DeanEngineeringIndividualQuestion.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
                console.log("Id: " + _this.selectedSemesterId);
                _this.getSemesterWiseQuestions();
            });
        };
        DeanEngineeringIndividualQuestion.prototype.getSemesterWiseQuestions = function () {
            var _this = this;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getSemesterWiseQuestions/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json.entries;
                console.log("SemesterWise Questions!!!!");
                _this.questionListAndReview = appTES;
                _this.questionListAndReview = _this.questionListAndReview.filter(function (a) { return a.observationType != 3; });
                console.log(_this.questionListAndReview);
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanEngineeringIndividualQuestion.prototype.getInfo = function (pQuestionId, pQuestionDetails, id) {
            this.selectedRow = null;
            console.log("Question_Id:" + pQuestionId + "\nQuestion_Details:" + pQuestionDetails + "\nRow_ID:" + id);
            this.selectedRow = id;
            this.questionDetails = pQuestionDetails;
            this.questionId = pQuestionId;
        };
        DeanEngineeringIndividualQuestion.prototype.clear = function () {
            this.questionId = null;
            this.questionDetails = "";
            console.log("----" + this.questionDetails);
            this.searchResult = false;
        };
        DeanEngineeringIndividualQuestion.prototype.search = function () {
            var _this = this;
            if (this.selectedRow == null) {
                this.notify.warn("You Must Select a Question to Perform Search operation");
            }
            else {
                ums.Utils.expandRightDiv();
                this.searchResult = true;
                this.selectedRow = null;
                var app = [];
                var defer = this.$q.defer();
                this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getQuestionWiseReport/deptId/' + this.selectedDepartmentId + '/year/' +
                    this.selectedYear + '/semester/' + this.selectedSemester + '/semesterId/' + this.selectedSemesterId + '/questionId/' + this.questionId, 'application/json', function (json, etag) {
                    console.log("SemesterWise Questions!!!!");
                    _this.searchReport = json;
                    if (_this.searchReport.length <= 0) {
                        _this.notify.info("No Courses Found");
                    }
                    console.log(_this.searchReport);
                    defer.resolve(json);
                }, function (response) {
                    console.error(response);
                });
                return defer.promise;
            }
        };
        DeanEngineeringIndividualQuestion.prototype.getReport = function () {
            console.log("hello");
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Evaluation Report_" + this.departmentName + "_" + this.year + "_" + this.acaSemester + "_" + this.semesterName;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getQuestionWisePDFReport/deptId/' + this.selectedDepartmentId + '/year/' +
                this.selectedYear + '/semester/' + this.selectedSemester + '/semesterId/' + this.selectedSemesterId + '/questionId/' + this.questionId, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        DeanEngineeringIndividualQuestion.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'employeeService', 'additionalRolePermissionsService', 'userService', 'commonService', 'attachmentService'];
        return DeanEngineeringIndividualQuestion;
    }());
    ums.UMS.controller("DeanEngineeringIndividualQuestion", DeanEngineeringIndividualQuestion);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DeanBusinessAndSocialTes = (function () {
        function DeanBusinessAndSocialTes(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyName = "";
            this.facultyId = "";
            this.statusValue = 1;
            this.itemPerPage = 10;
            this.currentPageNumber = 1;
            this.submit_Button_Disable = true;
            this.resultView = true;
            this.checkBoxCounter = 0;
            this.commentPgCurrentPage = 1;
            this.commentPgItemsPerPage = 1;
            this.innerCommentPgCurrentPage = 1;
            this.innerCommentPgItemsPerPage = 2;
            this.commentPgTotalRecords = 0;
            this.checkEvaluationResult = true;
            this.evaluationResultStatus = true;
            this.selectedSemesterId = 11;
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.deptList = [];
            this.deptList = this.appConstants.facultyBusinessAndSocial;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            console.log("-----" + this.selectedDepartmentId);
            this.getStudentSubmitDeadLine();
            this.getSemester();
        }
        DeanBusinessAndSocialTes.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
            this.getEligibleFacultyMembers();
            console.log(this.selectedDepartmentId);
        };
        DeanBusinessAndSocialTes.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
            });
        };
        DeanBusinessAndSocialTes.prototype.teacherChanged = function (val) {
            // console.log("Name: "+val.firstName+"\nId: "+val.teacherId);
            this.checkEvaluationResult = true;
            this.selectedTeacherId = val.teacherId;
            this.assignedCoursesForReview = [];
        };
        DeanBusinessAndSocialTes.prototype.getEligibleFacultyMembers = function () {
            var _this = this;
            this.facultyListResultEvaluation = [];
            this.selectedTeacherId = null;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getEligibleFacultyMembers/semesterId/' + this.selectedSemesterId + '/deptId/' + this.selectedDepartmentId, 'application/json', function (json, etag) {
                appTES = json.entries;
                console.log("Eligible Faculty Members!!!!");
                _this.facultyListResultEvaluation = appTES;
                for (var i = 0; i < _this.facultyListResultEvaluation.length; i++) {
                    _this.facultyListResultEvaluation[i].fullName = _this.facultyListResultEvaluation[i].firstName + " " +
                        _this.facultyListResultEvaluation[i].lastName;
                }
                console.log(_this.facultyListResultEvaluation);
                if (_this.facultyListResultEvaluation.length > 0) {
                    _this.selectedTeacherName = _this.facultyListResultEvaluation[0];
                    _this.selectedTeacherId = _this.selectedTeacherName.teacherId;
                    console.log("id-------");
                    console.log("F_Id: " + _this.selectedTeacherId + "\nS_Id: " + _this.selectedSemesterId);
                }
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanBusinessAndSocialTes.prototype.getStudentSubmitDeadLine = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getStudentSubmitDeadLineInfo', 'application/json', function (json, etag) {
                console.log("Assigned Courses!!!!");
                _this.studentSubmitDeadLine = json.studentSubmitDeadLine;
                _this.studentSubmitEndDate = json.endDate;
                _this.currentSemesterId = json.currentSemesterId;
                console.log(_this.studentSubmitDeadLine + "\n" + _this.studentSubmitEndDate + "\n" + _this.currentSemesterId);
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanBusinessAndSocialTes.prototype.getResults = function () {
            var _this = this;
            this.classObservationTotalSPoints = 0;
            this.classObservationTotalStudent = 0;
            this.classObservationAverage = 0;
            this.nonClassObservationTotalSPoints = 0;
            this.nonClassObservationTotalStudent = 0;
            this.nonClassObservationAverage = 0;
            this.finalScore = 0;
            this.studentComments = [];
            this.studentResult = [];
            var appTES = [];
            var defer = this.$q.defer();
            var counterObType1 = 0;
            var counterObType2 = 0;
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getResult/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log(json);
                appTES = json;
                _this.studentResult = appTES;
                for (var i = 0; i < _this.studentResult.length; i++) {
                    if (_this.studentResult[i].observationType == 1) {
                        counterObType1++;
                        _this.classObservationTotalSPoints = _this.classObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.classObservationTotalStudent = _this.classObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.classObservationAverage = _this.classObservationAverage + _this.studentResult[i].averageScore;
                    }
                    else {
                        counterObType2++;
                        _this.nonClassObservationTotalSPoints = _this.nonClassObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.nonClassObservationTotalStudent = _this.nonClassObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.nonClassObservationAverage = (_this.nonClassObservationAverage + _this.studentResult[i].averageScore);
                    }
                }
                if (_this.classObservationAverage != 0 && _this.nonClassObservationAverage != 0) {
                    _this.classObservationAverage = (_this.classObservationAverage / counterObType1);
                    _this.classObservationAverage = Number(_this.classObservationAverage.toFixed(2));
                    _this.nonClassObservationAverage = (_this.nonClassObservationAverage / counterObType2);
                    _this.nonClassObservationAverage = Number(_this.nonClassObservationAverage.toFixed(2));
                    _this.finalScore = (_this.classObservationAverage + _this.nonClassObservationAverage) / 2;
                    _this.finalScore = Number(_this.finalScore.toFixed(2));
                }
                else {
                    _this.classObservationAverage = 0;
                    _this.nonClassObservationAverage = 0;
                    _this.finalScore = 0;
                }
                _this.getComment();
                defer.resolve(_this.studentResult);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        DeanBusinessAndSocialTes.prototype.getComment = function () {
            var _this = this;
            this.studentComments = [];
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getComment/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log("comment---------");
                appTES = json;
                _this.studentComments = appTES;
                _this.commentPgTotalRecords = _this.studentComments.length;
                console.log(_this.studentComments);
                console.log("calling Method");
                _this.getReviewPercentage();
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        DeanBusinessAndSocialTes.prototype.getReviewPercentage = function () {
            var _this = this;
            this.sectionForReview = "";
            this.registeredStudents = 0;
            this.selectedSectionForReview = "";
            this.selectedRegisteredStudents = 0;
            this.percentage = 0;
            this.studentReviewed = 0;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReviewPercentage/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log("Review Statistics");
                console.log("-----------------");
                console.log("sectionForReview: " + json.sectionForReview + "\n" +
                    "registeredStudents: " + json.registeredStudents + "\n" +
                    "selectedSectionForReview:" + json.selectedSectionForReview + "\n" +
                    "selectedRegisteredStudents: " + json.selectedRegisteredStudents + "\n" +
                    "percentage: " + json.percentage + "\n" +
                    "studentReviewed: " + json.studentReviewed);
                _this.sectionForReview = json.sectionForReview;
                _this.registeredStudents = json.registeredStudents;
                _this.selectedSectionForReview = json.selectedSectionForReview;
                _this.selectedRegisteredStudents = json.selectedRegisteredStudents;
                _this.percentage = json.percentage;
                _this.studentReviewed = json.studentReviewed;
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        DeanBusinessAndSocialTes.prototype.getAssignedCoursesForReview = function () {
            var _this = this;
            if (this.selectedTeacherId != null) {
                ums.Utils.expandRightDiv();
                this.checkEvaluationResult = true;
                this.assignedCoursesForReview = [];
                this.studentComments = [];
                this.staticTeacherName = this.selectedTeacherName.fullName;
                this.staticSessionName = this.semester.name;
                this.selectRow = null;
                console.log("eeeeeeeeeeee");
                console.log("" + this.selectedTeacherId + "\n" + this.selectedSemesterId);
                var appTES = [];
                var defer = this.$q.defer();
                this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getAssignedCoursesForReview/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                    console.log("List of Courses");
                    appTES = json.entries;
                    _this.assignedCoursesForReview = appTES;
                    console.log(_this.assignedCoursesForReview);
                    defer.resolve(json);
                }, function (response) {
                    console.error(response);
                });
                return defer.promise;
            }
            else {
                this.notify.info("No teacher id Found");
            }
        };
        DeanBusinessAndSocialTes.prototype.getInfo = function (pTeacherId, pCourseId, id, pSemesterId, pCourseNo, pCourseTitle, pDeptName) {
            this.selectRow = id;
            this.selectedCourseId = pCourseId;
            this.selectedTeacherId = pTeacherId;
            this.selectedSemesterId = pSemesterId;
            this.selectedCourseNo = pCourseNo;
            this.selectedCourseTitle = pCourseTitle;
            this.departmentName = pDeptName;
            if (this.currentSemesterId == pSemesterId) {
                if (this.studentSubmitDeadLine) {
                    this.checkEvaluationResult = false;
                    this.getResults();
                }
                else {
                    this.notify.info("Result is under Process.You Can access the result of this Semester on " + this.studentSubmitEndDate);
                }
            }
            else {
                this.checkEvaluationResult = false;
                this.getResults();
            }
        };
        DeanBusinessAndSocialTes.prototype.semesterChanged = function (val) {
            console.log("Name: " + val.name + "\nsemesterId: " + val.id);
            this.selectedSemesterId = val.id;
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
            this.getEligibleFacultyMembers();
            // this.getStudentSubmitDeadLine();
        };
        DeanBusinessAndSocialTes.prototype.getBackToMainView = function () {
            this.evaluationResultStatus = true;
        };
        DeanBusinessAndSocialTes.prototype.getSemester = function () {
            var _this = this;
            this.evaluationResultStatus = false;
            console.log("" + this.evaluationResultStatus);
            this.assignedCoursesForReview = [];
            this.studentComments = [];
            this.studentResult = [];
            this.selectedCourseNo = "";
            this.checkEvaluationResult = true;
            this.selectedSemesterId = null;
            this.selectedTeacherId = null;
            this.selectedSemesterName = null;
            this.selectedTeacherName = null;
            var appTES = [];
            //----
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                console.log("I____Id: " + _this.selectedSemesterId);
                _this.getEligibleFacultyMembers();
            });
        };
        DeanBusinessAndSocialTes.prototype.getReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Evaluation Report";
            console.log("QWERTYUIIOOOPPPPP");
            console.log("" + this.selectedTeacherId + "\n" + this.selectedSemesterId + "\n" + this.selectedCourseId);
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReport/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        DeanBusinessAndSocialTes.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'employeeService', 'additionalRolePermissionsService', 'userService', 'commonService', 'attachmentService'];
        return DeanBusinessAndSocialTes;
    }());
    ums.UMS.controller("DeanBusinessAndSocialTes", DeanBusinessAndSocialTes);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DeanBusinessAndSocialComparison = (function () {
        function DeanBusinessAndSocialComparison(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, $timeout, leaveTypeService, leaveApplicationService, leaveApplicationStatusService, employeeService, additionalRolePermissionsService, userService, commonservice, attachmentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.$timeout = $timeout;
            this.leaveTypeService = leaveTypeService;
            this.leaveApplicationService = leaveApplicationService;
            this.leaveApplicationStatusService = leaveApplicationStatusService;
            this.employeeService = employeeService;
            this.additionalRolePermissionsService = additionalRolePermissionsService;
            this.userService = userService;
            this.commonservice = commonservice;
            this.attachmentService = attachmentService;
            this.facultyName = "";
            this.facultyId = "";
            this.statusValue = 1;
            this.itemPerPage = 10;
            this.currentPageNumber = 1;
            this.submit_Button_Disable = true;
            this.resultView = true;
            this.checkBoxCounter = 0;
            this.innerCommentPgCurrentPage = 1;
            this.innerCommentPgItemsPerPage = 20;
            this.commentPgTotalRecords = 0;
            this.checkEvaluationResult = true;
            this.evaluationResultStatus = true;
            this.selectedSemesterId = 11;
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.deptList = [];
            this.deptList = this.appConstants.facultyBusinessAndSocial;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            this.staticDepartmentName = this.deptName.name;
            this.pgHide = true;
            console.log("-----" + this.selectedDepartmentId);
            this.getStudentSubmitDeadLine();
            this.getSemesters();
        }
        DeanBusinessAndSocialComparison.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
            this.checkEvaluationResult = true;
            this.staticDepartmentName = deptId.name;
            this.pgHide = true;
            this.assignedCoursesForReview = [];
            console.log(this.selectedDepartmentId);
        };
        DeanBusinessAndSocialComparison.prototype.semesterChanged = function (val) {
            console.log("Name: " + val.name + "\nsemesterId: " + val.id);
            this.selectedSemesterId = val.id;
            this.checkEvaluationResult = true;
            this.staticSessionName = val.name;
            this.pgHide = true;
            this.assignedCoursesForReview = [];
            // this.getStudentSubmitDeadLine();
        };
        DeanBusinessAndSocialComparison.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                console.log("I____Id: " + _this.selectedSemesterId);
            });
        };
        DeanBusinessAndSocialComparison.prototype.getStudentSubmitDeadLine = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getStudentSubmitDeadLineInfo', 'application/json', function (json, etag) {
                console.log("Assigned Courses!!!!");
                _this.studentSubmitDeadLine = json.studentSubmitDeadLine;
                _this.studentSubmitEndDate = json.endDate;
                _this.currentSemesterId = json.currentSemesterId;
                console.log(_this.studentSubmitDeadLine + "\n" + _this.studentSubmitEndDate + "\n" + _this.currentSemesterId);
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanBusinessAndSocialComparison.prototype.getComparisionResult = function () {
            if (this.currentSemesterId == this.selectedSemesterId) {
                if (this.studentSubmitDeadLine) {
                    this.checkEvaluationResult = false;
                    this.getComparisonList();
                    console.log("Current Semester");
                }
                else {
                    this.notify.info("Result is under Process.You Can access the result of this Semester on " + this.studentSubmitEndDate);
                }
            }
            else {
                this.checkEvaluationResult = false;
                this.getComparisonList();
                console.log("Not Current Semester");
                //this.checkEvaluationResult = false;
                //this.getResults();
            }
        };
        DeanBusinessAndSocialComparison.prototype.getComparisonList = function () {
            var _this = this;
            ums.Utils.expandRightDiv();
            this.innerCommentPgCurrentPage = 1;
            this.assignedCoursesForReview = [];
            this.staticSessionName = this.semester.name;
            console.log("Stat.....");
            console.log("Dept: " + this.selectedDepartmentId + "\nSemesterId: " + this.selectedSemesterId);
            var defer = this.$q.defer();
            var appTES = [];
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getComparisionResult/deptId/' + this.selectedDepartmentId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log("List of Courses");
                appTES = json;
                _this.assignedCoursesForReview = appTES;
                _this.commentPgTotalRecords = appTES.length;
                _this.pgHide = false;
                console.log(_this.assignedCoursesForReview);
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanBusinessAndSocialComparison.prototype.getReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Evaluation Report" + "_" + this.staticDepartmentName + "_" + this.staticSessionName;
            console.log("QWERTYUIIOOOPPPPP");
            console.log("" + this.selectedTeacherId + "\n" + this.selectedSemesterId + "\n" + this.selectedCourseId);
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReportSuperAdmin/deptId/' + this.selectedDepartmentId + '/semesterId/' + this.selectedSemesterId, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        DeanBusinessAndSocialComparison.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'employeeService', 'additionalRolePermissionsService', 'userService', 'commonService', 'attachmentService'];
        return DeanBusinessAndSocialComparison;
    }());
    ums.UMS.controller("DeanBusinessAndSocialComparison", DeanBusinessAndSocialComparison);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DeanBusinessAndSocialIndividualQuestion = (function () {
        function DeanBusinessAndSocialIndividualQuestion(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.searchResult = false;
            this.deptList = [];
            this.deptList = this.appConstants.facultyBusinessAndSocial;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            this.departmentName = this.deptName.name;
            this.yearList = [];
            this.yearList = this.appConstants.year;
            this.yearList = this.yearList.filter(function (a) { return a.id != 5; });
            this.yearName = this.yearList[0];
            this.selectedYear = this.yearName.id;
            this.year = this.yearName.name;
            this.academicSemesterList = [];
            this.academicSemesterList = this.appConstants.semester;
            this.academicSemesterName = this.academicSemesterList[0];
            this.selectedSemester = this.academicSemesterName.id;
            this.acaSemester = this.academicSemesterName.name;
            this.getSemesters();
        }
        DeanBusinessAndSocialIndividualQuestion.prototype.yearChanged = function (value) {
            console.log(value.name);
            this.year = value.name;
            this.selectedYear = value.id;
        };
        DeanBusinessAndSocialIndividualQuestion.prototype.academicSemester = function (value) {
            console.log(value.name);
            this.acaSemester = value.name;
            this.selectedSemester = value.id;
        };
        DeanBusinessAndSocialIndividualQuestion.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
            this.departmentName = deptId.name;
            console.log(this.selectedDepartmentId);
            this.selectedRow = null;
            if (deptId.id != "01") {
                this.yearList = [];
                this.yearList = this.appConstants.year;
                this.yearName = this.yearList[0];
                this.yearList = this.yearList.filter(function (a) { return a.id != 5; });
                this.selectedYear = this.yearName.id;
                this.year = this.yearName.name;
            }
            else {
                this.yearList = [];
                this.yearList = this.appConstants.year;
                this.yearName = this.yearList[0];
                this.selectedYear = this.yearName.id;
                this.year = this.yearName.name;
            }
        };
        DeanBusinessAndSocialIndividualQuestion.prototype.semesterChanged = function (val) {
            console.log("Name: " + val.name + "\nsemesterId: " + val.id);
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.getSemesterWiseQuestions();
            this.selectedRow = null;
        };
        DeanBusinessAndSocialIndividualQuestion.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
                console.log("Id: " + _this.selectedSemesterId);
                _this.getSemesterWiseQuestions();
            });
        };
        DeanBusinessAndSocialIndividualQuestion.prototype.getSemesterWiseQuestions = function () {
            var _this = this;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getSemesterWiseQuestions/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json.entries;
                console.log("SemesterWise Questions!!!!");
                _this.questionListAndReview = appTES;
                _this.questionListAndReview = _this.questionListAndReview.filter(function (a) { return a.observationType != 3; });
                console.log(_this.questionListAndReview);
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanBusinessAndSocialIndividualQuestion.prototype.getInfo = function (pQuestionId, pQuestionDetails, id) {
            this.selectedRow = null;
            console.log("Question_Id:" + pQuestionId + "\nQuestion_Details:" + pQuestionDetails + "\nRow_ID:" + id);
            this.selectedRow = id;
            this.questionDetails = pQuestionDetails;
            this.questionId = pQuestionId;
        };
        DeanBusinessAndSocialIndividualQuestion.prototype.clear = function () {
            this.questionId = null;
            this.questionDetails = "";
            console.log("----" + this.questionDetails);
            this.searchResult = false;
        };
        DeanBusinessAndSocialIndividualQuestion.prototype.search = function () {
            var _this = this;
            if (this.selectedRow == null) {
                this.notify.warn("You Must Select a Question to Perform Search operation");
            }
            else {
                ums.Utils.expandRightDiv();
                this.searchResult = true;
                this.selectedRow = null;
                var app = [];
                var defer = this.$q.defer();
                this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getQuestionWiseReport/deptId/' + this.selectedDepartmentId + '/year/' +
                    this.selectedYear + '/semester/' + this.selectedSemester + '/semesterId/' + this.selectedSemesterId + '/questionId/' + this.questionId, 'application/json', function (json, etag) {
                    console.log("SemesterWise Questions!!!!");
                    _this.searchReport = json;
                    if (_this.searchReport.length <= 0) {
                        _this.notify.info("No Courses Found");
                    }
                    console.log(_this.searchReport);
                    defer.resolve(json);
                }, function (response) {
                    console.error(response);
                });
                return defer.promise;
            }
        };
        DeanBusinessAndSocialIndividualQuestion.prototype.getReport = function () {
            console.log("hello");
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Evaluation Report_" + this.departmentName + "_" + this.year + "_" + this.acaSemester + "_" + this.semesterName;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getQuestionWisePDFReport/deptId/' + this.selectedDepartmentId + '/year/' +
                this.selectedYear + '/semester/' + this.selectedSemester + '/semesterId/' + this.selectedSemesterId + '/questionId/' + this.questionId, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        DeanBusinessAndSocialIndividualQuestion.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'employeeService', 'additionalRolePermissionsService', 'userService', 'commonService', 'attachmentService'];
        return DeanBusinessAndSocialIndividualQuestion;
    }());
    ums.UMS.controller("DeanBusinessAndSocialIndividualQuestion", DeanBusinessAndSocialIndividualQuestion);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DeanArchitectureTes = (function () {
        function DeanArchitectureTes(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyName = "";
            this.facultyId = "";
            this.statusValue = 1;
            this.itemPerPage = 10;
            this.currentPageNumber = 1;
            this.submit_Button_Disable = true;
            this.resultView = true;
            this.checkBoxCounter = 0;
            this.commentPgCurrentPage = 1;
            this.commentPgItemsPerPage = 1;
            this.innerCommentPgCurrentPage = 1;
            this.innerCommentPgItemsPerPage = 2;
            this.commentPgTotalRecords = 0;
            this.checkEvaluationResult = true;
            this.evaluationResultStatus = true;
            this.selectedSemesterId = 11;
            this.startDate = "";
            this.endDate = "";
            this.deadLine = false;
            this.deptList = [];
            this.deptList = this.appConstants.facultyArchitecture;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            console.log("-----" + this.selectedDepartmentId);
            this.getStudentSubmitDeadLine();
            this.getSemester();
        }
        DeanArchitectureTes.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
            this.getEligibleFacultyMembers();
            console.log(this.selectedDepartmentId);
        };
        DeanArchitectureTes.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
            });
        };
        DeanArchitectureTes.prototype.teacherChanged = function (val) {
            console.log("Name: " + val.firstName + "\nId: " + val.teacherId);
            this.checkEvaluationResult = true;
            this.selectedTeacherId = val.teacherId;
            this.assignedCoursesForReview = [];
        };
        DeanArchitectureTes.prototype.getEligibleFacultyMembers = function () {
            var _this = this;
            this.facultyListResultEvaluation = [];
            this.selectedTeacherId = null;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getEligibleFacultyMembers/semesterId/' + this.selectedSemesterId + '/deptId/' + this.selectedDepartmentId, 'application/json', function (json, etag) {
                appTES = json.entries;
                console.log("Eligible Faculty Members!!!!");
                _this.facultyListResultEvaluation = appTES;
                for (var i = 0; i < _this.facultyListResultEvaluation.length; i++) {
                    _this.facultyListResultEvaluation[i].fullName = _this.facultyListResultEvaluation[i].firstName + " " +
                        _this.facultyListResultEvaluation[i].lastName;
                }
                console.log(_this.facultyListResultEvaluation);
                if (_this.facultyListResultEvaluation.length > 0) {
                    _this.selectedTeacherName = _this.facultyListResultEvaluation[0];
                    _this.selectedTeacherId = _this.selectedTeacherName.teacherId;
                    console.log("id-------");
                    console.log("F_Id: " + _this.selectedTeacherId + "\nS_Id: " + _this.selectedSemesterId);
                }
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanArchitectureTes.prototype.getStudentSubmitDeadLine = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getStudentSubmitDeadLineInfo', 'application/json', function (json, etag) {
                console.log("Assigned Courses!!!!");
                _this.studentSubmitDeadLine = json.studentSubmitDeadLine;
                _this.studentSubmitEndDate = json.endDate;
                _this.currentSemesterId = json.currentSemesterId;
                console.log(_this.studentSubmitDeadLine + "\n" + _this.studentSubmitEndDate + "\n" + _this.currentSemesterId);
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanArchitectureTes.prototype.getResults = function () {
            var _this = this;
            this.classObservationTotalSPoints = 0;
            this.classObservationTotalStudent = 0;
            this.classObservationAverage = 0;
            this.nonClassObservationTotalSPoints = 0;
            this.nonClassObservationTotalStudent = 0;
            this.nonClassObservationAverage = 0;
            this.finalScore = 0;
            this.studentComments = [];
            this.studentResult = [];
            var appTES = [];
            var defer = this.$q.defer();
            var counterObType1 = 0;
            var counterObType2 = 0;
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getResult/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log(json);
                appTES = json;
                _this.studentResult = appTES;
                for (var i = 0; i < _this.studentResult.length; i++) {
                    if (_this.studentResult[i].observationType == 1) {
                        counterObType1++;
                        _this.classObservationTotalSPoints = _this.classObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.classObservationTotalStudent = _this.classObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.classObservationAverage = _this.classObservationAverage + _this.studentResult[i].averageScore;
                    }
                    else {
                        counterObType2++;
                        _this.nonClassObservationTotalSPoints = _this.nonClassObservationTotalSPoints + _this.studentResult[i].totalScore;
                        _this.nonClassObservationTotalStudent = _this.nonClassObservationTotalStudent + _this.studentResult[i].studentNo;
                        _this.nonClassObservationAverage = (_this.nonClassObservationAverage + _this.studentResult[i].averageScore);
                    }
                }
                if (_this.classObservationAverage != 0 && _this.nonClassObservationAverage != 0) {
                    _this.classObservationAverage = (_this.classObservationAverage / counterObType1);
                    _this.classObservationAverage = Number(_this.classObservationAverage.toFixed(2));
                    _this.nonClassObservationAverage = (_this.nonClassObservationAverage / counterObType2);
                    _this.nonClassObservationAverage = Number(_this.nonClassObservationAverage.toFixed(2));
                    _this.finalScore = (_this.classObservationAverage + _this.nonClassObservationAverage) / 2;
                    _this.finalScore = Number(_this.finalScore.toFixed(2));
                }
                else {
                    _this.classObservationAverage = 0;
                    _this.nonClassObservationAverage = 0;
                    _this.finalScore = 0;
                }
                _this.getComment();
                defer.resolve(_this.studentResult);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        DeanArchitectureTes.prototype.getComment = function () {
            var _this = this;
            this.studentComments = [];
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getComment/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log("comment---------");
                appTES = json;
                _this.studentComments = appTES;
                _this.commentPgTotalRecords = _this.studentComments.length;
                console.log(_this.studentComments);
                console.log("calling Method");
                _this.getReviewPercentage();
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        DeanArchitectureTes.prototype.getReviewPercentage = function () {
            var _this = this;
            this.sectionForReview = "";
            this.registeredStudents = 0;
            this.selectedSectionForReview = "";
            this.selectedRegisteredStudents = 0;
            this.percentage = 0;
            this.studentReviewed = 0;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReviewPercentage/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                console.log("Review Statistics");
                console.log("-----------------");
                console.log("sectionForReview: " + json.sectionForReview + "\n" +
                    "registeredStudents: " + json.registeredStudents + "\n" +
                    "selectedSectionForReview:" + json.selectedSectionForReview + "\n" +
                    "selectedRegisteredStudents: " + json.selectedRegisteredStudents + "\n" +
                    "percentage: " + json.percentage + "\n" +
                    "studentReviewed: " + json.studentReviewed);
                _this.sectionForReview = json.sectionForReview;
                _this.registeredStudents = json.registeredStudents;
                _this.selectedSectionForReview = json.selectedSectionForReview;
                _this.selectedRegisteredStudents = json.selectedRegisteredStudents;
                _this.percentage = json.percentage;
                _this.studentReviewed = json.studentReviewed;
                defer.resolve(json);
            }, function (response) {
                console.error("No Records Found");
            });
            return defer.promise;
        };
        DeanArchitectureTes.prototype.getAssignedCoursesForReview = function () {
            var _this = this;
            if (this.selectedTeacherId != null) {
                ums.Utils.expandRightDiv();
                this.checkEvaluationResult = true;
                this.assignedCoursesForReview = [];
                this.studentComments = [];
                this.staticTeacherName = this.selectedTeacherName.fullName;
                this.staticSessionName = this.semester.name;
                this.selectRow = null;
                console.log("eeeeeeeeeeee");
                console.log("" + this.selectedTeacherId + "\n" + this.selectedSemesterId);
                var appTES = [];
                var defer = this.$q.defer();
                this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getAssignedCoursesForReview/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                    console.log("List of Courses");
                    appTES = json.entries;
                    _this.assignedCoursesForReview = appTES;
                    console.log(_this.assignedCoursesForReview);
                    defer.resolve(json);
                }, function (response) {
                    console.error(response);
                });
                return defer.promise;
            }
            else {
                this.notify.info("No teacher id Found");
            }
        };
        DeanArchitectureTes.prototype.getInfo = function (pTeacherId, pCourseId, id, pSemesterId, pCourseNo, pCourseTitle, pDeptName) {
            this.selectRow = id;
            this.selectedCourseId = pCourseId;
            this.selectedTeacherId = pTeacherId;
            this.selectedSemesterId = pSemesterId;
            this.selectedCourseNo = pCourseNo;
            this.selectedCourseTitle = pCourseTitle;
            this.departmentName = pDeptName;
            if (this.currentSemesterId == pSemesterId) {
                if (this.studentSubmitDeadLine) {
                    this.checkEvaluationResult = false;
                    this.getResults();
                }
                else {
                    this.notify.info("Result is under Process.You Can access the result of this Semester on " + this.studentSubmitEndDate);
                }
            }
            else {
                this.checkEvaluationResult = false;
                this.getResults();
            }
        };
        DeanArchitectureTes.prototype.semesterChanged = function (val) {
            console.log("Name: " + val.name + "\nsemesterId: " + val.id);
            this.selectedSemesterId = val.id;
            this.checkEvaluationResult = true;
            this.assignedCoursesForReview = [];
            this.getEligibleFacultyMembers();
            // this.getStudentSubmitDeadLine();
        };
        DeanArchitectureTes.prototype.getBackToMainView = function () {
            this.evaluationResultStatus = true;
        };
        DeanArchitectureTes.prototype.getSemester = function () {
            var _this = this;
            this.evaluationResultStatus = false;
            console.log("" + this.evaluationResultStatus);
            this.assignedCoursesForReview = [];
            this.studentComments = [];
            this.studentResult = [];
            this.selectedCourseNo = "";
            this.checkEvaluationResult = true;
            this.selectedSemesterId = null;
            this.selectedTeacherId = null;
            this.selectedSemesterName = null;
            this.selectedTeacherName = null;
            var appTES = [];
            //----
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                console.log("I____Id: " + _this.selectedSemesterId);
                _this.getEligibleFacultyMembers();
            });
        };
        DeanArchitectureTes.prototype.getReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Evaluation Report";
            console.log("QWERTYUIIOOOPPPPP");
            console.log("" + this.selectedTeacherId + "\n" + this.selectedSemesterId + "\n" + this.selectedCourseId);
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getReport/courseId/' + this.selectedCourseId + '/teacherId/' + this.selectedTeacherId + '/semesterId/' + this.selectedSemesterId, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        DeanArchitectureTes.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'employeeService', 'additionalRolePermissionsService', 'userService', 'commonService', 'attachmentService'];
        return DeanArchitectureTes;
    }());
    ums.UMS.controller("DeanArchitectureTes", DeanArchitectureTes);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DeanArchitectureIndividualQuestion = (function () {
        function DeanArchitectureIndividualQuestion(appConstants, httpClient, $q, notify, $sce, $window, semesterService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.searchResult = false;
            this.deptList = [];
            this.deptList = this.appConstants.facultyArchitecture;
            this.deptName = this.deptList[0];
            this.selectedDepartmentId = this.deptName.id;
            this.departmentName = this.deptName.name;
            this.yearList = [];
            this.yearList = this.appConstants.year;
            this.yearName = this.yearList[0];
            this.selectedYear = this.yearName.id;
            this.year = this.yearName.name;
            this.academicSemesterList = [];
            this.academicSemesterList = this.appConstants.semester;
            this.academicSemesterName = this.academicSemesterList[0];
            this.selectedSemester = this.academicSemesterName.id;
            this.acaSemester = this.academicSemesterName.name;
            this.getSemesters();
        }
        DeanArchitectureIndividualQuestion.prototype.yearChanged = function (value) {
            console.log(value.name);
            console.log("---------");
            this.year = value.name;
            this.selectedYear = value.id;
        };
        DeanArchitectureIndividualQuestion.prototype.academicSemester = function (value) {
            console.log(value.name);
            this.acaSemester = value.name;
            this.selectedSemester = value.id;
        };
        DeanArchitectureIndividualQuestion.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
            this.departmentName = deptId.name;
            console.log(this.selectedDepartmentId);
            this.selectedRow = null;
            if (deptId.id != "01") {
                this.yearList = [];
                this.yearList = this.appConstants.year;
                this.yearName = this.yearList[0];
                this.yearList = this.yearList.filter(function (a) { return a.id != 5; });
                this.selectedYear = this.yearName.id;
                this.year = this.yearName.name;
            }
            else {
                this.yearList = [];
                this.yearList = this.appConstants.year;
                this.yearName = this.yearList[0];
                this.selectedYear = this.yearName.id;
                this.year = this.yearName.name;
            }
        };
        DeanArchitectureIndividualQuestion.prototype.semesterChanged = function (val) {
            console.log("Name: " + val.name + "\nsemesterId: " + val.id);
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.getSemesterWiseQuestions();
            this.selectedRow = null;
        };
        DeanArchitectureIndividualQuestion.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5, ums.Utils.SEMESTER_FETCH_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                console.log(_this.semesters);
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 2) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
                console.log("Id: " + _this.selectedSemesterId);
                _this.getSemesterWiseQuestions();
            });
        };
        DeanArchitectureIndividualQuestion.prototype.getSemesterWiseQuestions = function () {
            var _this = this;
            var appTES = [];
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getSemesterWiseQuestions/semesterId/' + this.selectedSemesterId, 'application/json', function (json, etag) {
                appTES = json.entries;
                console.log("SemesterWise Questions!!!!");
                _this.questionListAndReview = appTES;
                _this.questionListAndReview = _this.questionListAndReview.filter(function (a) { return a.observationType != 3; });
                console.log(_this.questionListAndReview);
                defer.resolve(json.entries);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        DeanArchitectureIndividualQuestion.prototype.getInfo = function (pQuestionId, pQuestionDetails, id) {
            this.selectedRow = null;
            console.log("Question_Id:" + pQuestionId + "\nQuestion_Details:" + pQuestionDetails + "\nRow_ID:" + id);
            this.selectedRow = id;
            this.questionDetails = pQuestionDetails;
            this.questionId = pQuestionId;
        };
        DeanArchitectureIndividualQuestion.prototype.clear = function () {
            this.questionId = null;
            this.questionDetails = "";
            console.log("----" + this.questionDetails);
            this.searchResult = false;
        };
        DeanArchitectureIndividualQuestion.prototype.search = function () {
            var _this = this;
            if (this.selectedRow == null) {
                this.notify.warn("You Must Select a Question to Perform Search operation");
            }
            else {
                ums.Utils.expandRightDiv();
                this.searchResult = true;
                this.selectedRow = null;
                var app = [];
                var defer = this.$q.defer();
                this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getQuestionWiseReport/deptId/' + this.selectedDepartmentId + '/year/' +
                    this.selectedYear + '/semester/' + this.selectedSemester + '/semesterId/' + this.selectedSemesterId + '/questionId/' + this.questionId, 'application/json', function (json, etag) {
                    console.log("SemesterWise Questions!!!!");
                    _this.searchReport = json;
                    if (_this.searchReport.length <= 0) {
                        _this.notify.info("No Courses Found");
                    }
                    console.log(_this.searchReport);
                    defer.resolve(json);
                }, function (response) {
                    console.error(response);
                });
                return defer.promise;
            }
        };
        DeanArchitectureIndividualQuestion.prototype.getReport = function () {
            console.log("hello");
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Evaluation Report_" + this.departmentName + "_" + this.year + "_" + this.acaSemester + "_" + this.semesterName;
            var defer = this.$q.defer();
            this.httpClient.get('/ums-webservice-academic/academic/applicationTES/getQuestionWisePDFReport/deptId/' + this.selectedDepartmentId + '/year/' +
                this.selectedYear + '/semester/' + this.selectedSemester + '/semesterId/' + this.selectedSemesterId + '/questionId/' + this.questionId, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        DeanArchitectureIndividualQuestion.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService', 'programService', '$timeout', 'leaveTypeService', 'leaveApplicationService', 'leaveApplicationStatusService', 'employeeService', 'additionalRolePermissionsService', 'userService', 'commonService', 'attachmentService'];
        return DeanArchitectureIndividualQuestion;
    }());
    ums.UMS.controller("DeanArchitectureIndividualQuestion", DeanArchitectureIndividualQuestion);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var EmployeeExamAttendance = (function () {
        function EmployeeExamAttendance(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, examRoutineService, classRoomService, employeeService, employeeExamAttendanceService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.examRoutineService = examRoutineService;
            this.classRoomService = classRoomService;
            this.employeeService = employeeService;
            this.employeeExamAttendanceService = employeeExamAttendanceService;
            this.examTypeList = [];
            this.examTypeList = this.appConstants.examType;
            this.examType = this.examTypeList[0];
            this.selectedExamTypeId = this.examType.id;
            this.selectedExamTypeName = this.examType.name;
            this.selectedExamTypeName = this.examType.name;
            this.employeeTypeList = [];
            this.employeeTypeList = this.appConstants.employeeTypes;
            this.employeeType = this.employeeTypeList[0];
            this.employeeTypeId = this.employeeType.id;
            this.employeeTypeName = this.employeeType.name;
            this.selectedExamDate = "";
            this.deptList = [];
            this.deptList = this.appConstants.departmentOffice;
            this.examTypeList = [];
            this.examTypeList = this.appConstants.examType;
            this.examType = this.examTypeList[0];
            this.selectedExamTypeId = this.examType.id;
            this.selectedExamTypeName = this.examType.name;
            this.roomInCharge = false;
            this.empExamDate = "";
            this.empReserveDate = "";
            this.staffId = 3;
            this.isStaffSelected = false;
            this.isDeleteAvailable = false;
            this.selectedEmployeeName = "";
            this.selectedClassRoomNo = "";
            this.departmentName = "";
            this.selectedEmployeeId = "";
            this.isRightDivAvailable = false;
            this.isExamDateSelected = false;
            this.isDeptSelected = false;
            this.isSubmitModalAvailable = false;
            this.isInsertAvailable = false;
            this.getSemesters();
        }
        EmployeeExamAttendance.prototype.enableInsert = function () {
            this.isInsertAvailable = true;
        };
        EmployeeExamAttendance.prototype.hideInsert = function () {
            this.isInsertAvailable = false;
        };
        EmployeeExamAttendance.prototype.search = function () {
            if (this.selectedExamDate != "") {
                if (this.isDeptSelected == true) {
                    this.isRightDivAvailable = true;
                    ums.Utils.expandRightDiv();
                    this.initializeData();
                    this.getEmployees(this.selectedDepartmentId);
                    this.getClassRoomInfo();
                    this.getData();
                    this.empName = "";
                }
                else {
                    this.notify.warn("Select Department");
                }
            }
            else {
                this.notify.warn("Select an exam date");
            }
        };
        EmployeeExamAttendance.prototype.getData = function () {
            var _this = this;
            var info = [];
            this.employeeExamAttendanceService.getEmpExamAttendanceInfo(this.selectedSemesterId, this.selectedExamTypeId).then(function (data) {
                info = data;
                _this.empExamAttendantInfo = info;
            });
        };
        EmployeeExamAttendance.prototype.getExamDates = function () {
            var _this = this;
            this.examRoutineArr = {};
            this.examRoutineService.getExamRoutineDates(this.selectedSemesterId, this.selectedExamTypeId).then(function (examDateArr) {
                _this.selectedExamDate = "";
                _this.examRoutineArr = {};
                if (examDateArr.length > 0) {
                    _this.examRoutineArr = examDateArr;
                    _this.selectedExamDate = _this.examRoutineArr[0].examDate;
                }
                else {
                    _this.notify.warn("No Exam Routine Found");
                }
            });
        };
        EmployeeExamAttendance.prototype.ExamDateChange = function (value) {
            this.selectedExamDate = value;
        };
        EmployeeExamAttendance.prototype.changeEmployeeType = function (value) {
            this.employeeTypeId = value.id;
            this.employeeTypeName = value.name;
            this.isRightDivAvailable = false;
            this.isStaffSelected = this.employeeTypeId == this.staffId ? true : false;
        };
        EmployeeExamAttendance.prototype.changeExamType = function (value) {
            this.selectedExamTypeId = value.id;
            this.selectedExamTypeName = value.name;
            this.isRightDivAvailable = false;
            this.getExamDates();
        };
        EmployeeExamAttendance.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.activeSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
            }).then(function (data) {
                _this.getExamDates();
            });
            this.hideInsertMode = this.selectedSemesterId == this.activeSemesterId ? true : false;
        };
        EmployeeExamAttendance.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.isRightDivAvailable = false;
            this.hideInsertMode = this.selectedSemesterId == this.activeSemesterId ? true : false;
            this.getExamDates();
        };
        EmployeeExamAttendance.prototype.getEmployees = function (deptId) {
            var _this = this;
            this.employeeService.getAll().then(function (data) {
                _this.employees = data;
                _this.employees = _this.employees.filter(function (a) { return a.department.id == deptId && a.status.id == 1 && a.employeeType.id == _this.employeeTypeId; });
                for (var i = 0; i < _this.employees.length; i++) {
                    _this.employees[i].employeeName = _this.employees[i].employeeName + "(" + _this.employees[i].designation.name + ")";
                }
            });
            this.selectedEmployeeId = "";
        };
        EmployeeExamAttendance.prototype.employeeChanged = function (value) {
            this.selectedEmployeeId = value.id;
            this.selectedEmployeeName = value.employeeName;
            this.selectedEmployeeType = value.employeeType;
            this.selectedDeptName = value.deptOfficeName;
        };
        EmployeeExamAttendance.prototype.getClassRoomInfo = function () {
            var _this = this;
            this.classRoomService.getClassRoomsForSeatPlan().then(function (data) {
                _this.classRooms = data;
            });
        };
        EmployeeExamAttendance.prototype.classRoomChanged = function (value) {
            try {
                this.selectedClassRoomId = value.id;
                this.selectedClassRoomNo = value.roomNo;
            }
            catch (e) {
                this.selectedClassRoomId = null;
            }
        };
        EmployeeExamAttendance.prototype.initializeDatePickers = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker({
                    inputs: undefined,
                    todayHighlight: true,
                    multidate: true,
                    clearBtn: true
                });
                $('.datepicker-default').on('change', function () {
                });
            }, 200);
        };
        EmployeeExamAttendance.prototype.dateChanged = function (examDate) {
            var invigilator = [];
            var reserve = [];
            var counter = 0;
            if (this.empExamDate != "" || this.empReserveDate != "") {
                invigilator = this.empExamDate.split(",");
                reserve = this.empReserveDate.split(",");
                for (var i = 0; i < invigilator.length; i++) {
                    for (var j = 0; j < reserve.length; j++) {
                        if (reserve[j] == invigilator[i]) {
                            counter++;
                        }
                    }
                }
                if (counter > 0) {
                    this.notify.warn(counter + " duplicate Reserve date and Invigilator date found");
                }
            }
        };
        EmployeeExamAttendance.prototype.deptChanged = function (deptId) {
            this.isRightDivAvailable = false;
            this.isDeptSelected = true;
            try {
                this.selectedDepartmentId = deptId.id;
                this.departmentName = deptId.name;
            }
            catch (e) {
                this.selectedDepartmentId = "";
            }
        };
        EmployeeExamAttendance.prototype.save = function () {
            var _this = this;
            var json = this.convertToJson();
            this.employeeExamAttendanceService.addEmpExamAttendanceInfo(json).then(function (data) {
                if (data == "success") {
                    _this.notify.success("Successfully Saved");
                }
                _this.getData();
                _this.initializeData();
            });
        };
        EmployeeExamAttendance.prototype.isEligibleForSubmitData = function () {
            if (this.selectedEmployeeId != "" || this.selectedEmployeeId.length > 5) {
                if (this.selectedClassRoomId != null) {
                    this.isSubmitModalAvailable = true;
                }
                else {
                    this.isSubmitModalAvailable = false;
                    this.notify.warn("Select classroom");
                }
            }
            else {
                this.isSubmitModalAvailable = false;
                this.notify.warn("Select Employee Name");
            }
        };
        EmployeeExamAttendance.prototype.initializeData = function () {
            this.empExamDate = "";
            this.empReserveDate = "";
            this.selectedEmployeeId = "";
            this.selectedEmployeeName = "select Employee";
            this.selectedClassRoomId = null;
            this.selectedClassRoomNo = "select Room No";
            this.initializeDatePickers();
        };
        EmployeeExamAttendance.prototype.updateInfo = function (value) {
            this.upEmpExamInvDate = "";
            this.upEmpExamReserveDate = "";
            this.empExamAttendantInfoForUpdate = value;
            this.upEmpExamInvDate = this.empExamAttendantInfoForUpdate.invigilatorDateForUpdate;
            this.upEmpExamReserveDate = this.empExamAttendantInfoForUpdate.reserveDateForUpdate;
            this.isDeleteAvailable = false;
        };
        EmployeeExamAttendance.prototype.deleteInfo = function (value) {
            this.upEmpExamInvDate = "";
            this.upEmpExamReserveDate = "";
            this.empExamAttendantInfoForDelete = value;
            this.upEmpExamInvDate = this.empExamAttendantInfoForDelete.invigilatorDate;
            this.upEmpExamReserveDate = this.empExamAttendantInfoForDelete.reserveDate;
            this.isDeleteAvailable = true;
        };
        EmployeeExamAttendance.prototype.delete = function () {
            var _this = this;
            var json = this.convertToJsonForDelete(this.empExamAttendantInfoForDelete);
            this.employeeExamAttendanceService.deleteEmpExamAttendanceInfo(json).then(function (data) {
                _this.notify.success("Successfully deleted");
                _this.getData();
            });
        };
        EmployeeExamAttendance.prototype.update = function () {
            var _this = this;
            var up = this.convertToJsonForUpdate(this.empExamAttendantInfoForUpdate);
            this.employeeExamAttendanceService.updateEmpExamAttendanceInfo(up).then(function (data) {
                _this.upEmpExamReserveDate = "";
                _this.upEmpExamInvDate = "";
                _this.initializeDatePickers();
                _this.getData();
            });
        };
        EmployeeExamAttendance.prototype.getClassRoomReport = function () {
            this.employeeExamAttendanceService.getMemorandumReport(this.selectedSemesterId, this.selectedExamTypeId).then(function (data) {
            });
        };
        EmployeeExamAttendance.prototype.getAttendantReport = function () {
            this.employeeExamAttendanceService.getStaffAttendantReport(this.selectedSemesterId, this.selectedExamTypeId, this.selectedExamDate).then(function (data) {
            });
        };
        EmployeeExamAttendance.prototype.getEmployeeReport = function () {
            this.employeeExamAttendanceService.getEmployeeAttendantReport(this.selectedSemesterId, this.selectedExamTypeId, this.selectedExamDate, this.selectedDepartmentId).then(function (data) {
            });
        };
        EmployeeExamAttendance.prototype.getReserveEmployeeReport = function () {
            this.employeeExamAttendanceService.getReserveEmployeeAttendantReport(this.selectedSemesterId, this.selectedExamTypeId, this.selectedExamDate, this.selectedDepartmentId).then(function (data) {
            });
        };
        EmployeeExamAttendance.prototype.convertToJsonForDelete = function (result) {
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["id"] = result.id.toString();
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        EmployeeExamAttendance.prototype.convertToJsonForUpdate = function (result) {
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["id"] = result.id.toString();
            item["employeeId"] = result.employeeId;
            item["examType"] = result.examType;
            item["roomInCharge"] = result.roomInCharge;
            item["invigilatorRoomId"] = result.invigilatorRoomId.toString();
            item["invigilatorDate"] = this.upEmpExamInvDate;
            item["reserveDate"] = this.upEmpExamReserveDate;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        EmployeeExamAttendance.prototype.convertToJson = function () {
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["employeeId"] = this.selectedEmployeeId;
            item["examType"] = this.selectedExamTypeId;
            item["roomInCharge"] = this.roomInCharge == true ? 1 : 0;
            item["invigilatorRoomId"] = this.selectedClassRoomId == null ? "0" : this.selectedClassRoomId.toString();
            item["invigilatorDate"] = this.empExamDate;
            item["reserveDate"] = this.empReserveDate;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        EmployeeExamAttendance.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService',
            'programService', 'examRoutineService', 'classRoomService', 'employeeService', 'employeeExamAttendanceService'];
        return EmployeeExamAttendance;
    }());
    ums.UMS.controller("EmployeeExamAttendance", EmployeeExamAttendance);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var EmployeeExamAttendanceService = (function () {
        function EmployeeExamAttendanceService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        EmployeeExamAttendanceService.prototype.addEmpExamAttendanceInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Inside-Service-add-info");
            console.log(json);
            this.httpClient.post("academic/empExamAttendance/addRecords", json, 'application/json')
                .success(function () {
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        EmployeeExamAttendanceService.prototype.updateEmpExamAttendanceInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Inside-Service-add-info");
            console.log(json);
            this.httpClient.post("academic/empExamAttendance/updateRecords", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        EmployeeExamAttendanceService.prototype.getEmpExamAttendanceInfo = function (semesterId, examType) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/empExamAttendance/getEmpExamAttendanceList/semesterId/' + semesterId + '/examType/' + examType, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        EmployeeExamAttendanceService.prototype.deleteEmpExamAttendanceInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            console.log("Delete");
            console.log(json);
            this.httpClient.put("academic/empExamAttendance/deleteRecords", json, 'application/json')
                .success(function () {
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        EmployeeExamAttendanceService.prototype.getMemorandumReport = function (pSemesterId, pExamType) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "MEMORANDUM";
            this.httpClient.get('/ums-webservice-academic/academic/empExamAttendance/getMemorandumReport/semesterId/' + pSemesterId + '/examType/' + pExamType, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        EmployeeExamAttendanceService.prototype.getStaffAttendantReport = function (pSemesterId, pExamType, pExamDate) {
            console.log("in");
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Staff Attendant Report";
            this.httpClient.get('/ums-webservice-academic/academic/empExamAttendance/getStaffAttendantReport/semesterId/' + pSemesterId + '/examType/' + pExamType + '/examDate/' + pExamDate, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        EmployeeExamAttendanceService.prototype.getEmployeeAttendantReport = function (pSemesterId, pExamType, pExamDate, pDeptId) {
            console.log("in");
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Employee Attendant Report";
            this.httpClient.get('/ums-webservice-academic/academic/empExamAttendance/getEmployeeAttendantReport/semesterId/' + pSemesterId + '/examType/' + pExamType + '/examDate/' + pExamDate + '/deptId/' + pDeptId, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        EmployeeExamAttendanceService.prototype.getReserveEmployeeAttendantReport = function (pSemesterId, pExamType, pExamDate, pDeptId) {
            console.log("in");
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Reserve Attendant Report";
            this.httpClient.get('/ums-webservice-academic/academic/empExamAttendance/getReserveEmployeeAttendantReport/semesterId/' + pSemesterId + '/examType/' + pExamType + '/examDate/' + pExamDate + '/deptId/' + pDeptId, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        EmployeeExamAttendanceService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return EmployeeExamAttendanceService;
    }());
    ums.EmployeeExamAttendanceService = EmployeeExamAttendanceService;
    ums.UMS.service("employeeExamAttendanceService", EmployeeExamAttendanceService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DummyNewEmployeeService = (function () {
        function DummyNewEmployeeService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        DummyNewEmployeeService.prototype.getDummyNewEmployees = function (departmentId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/dummy-new-employee/dept-id/" + departmentId, "application/json", function (data) {
                defer.resolve(data);
            }, function (response) {
                defer.resolve(undefined);
                console.error(response);
                _this.notify.error("Error in fetching new employee data");
            });
            return defer.promise;
        };
        DummyNewEmployeeService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return DummyNewEmployeeService;
    }());
    ums.DummyNewEmployeeService = DummyNewEmployeeService;
    ums.UMS.service("DummyNewEmployeeService", DummyNewEmployeeService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var FullSyllabus = (function () {
        function FullSyllabus($scope, httpClient, $stateParams) {
            var _this = this;
            this.$scope = $scope;
            this.httpClient = httpClient;
            this.$stateParams = $stateParams;
            $(".portlet").each(function (index, element) {
                var me = $(this);
                $(">.portlet-header>.tools>i", me).click(function (e) {
                    if ($(this).hasClass('fa-chevron-up')) {
                        $(">.portlet-body", me).slideUp('fast');
                        $(this).removeClass('fa-chevron-up').addClass('fa-chevron-down');
                    }
                    else if ($(this).hasClass('fa-chevron-down')) {
                        $(">.portlet-body", me).slideDown('fast');
                        $(this).removeClass('fa-chevron-down').addClass('fa-chevron-up');
                    }
                    else if ($(this).hasClass('fa-cog')) {
                        //Show modal
                    }
                    else if ($(this).hasClass('fa-refresh')) {
                        $(">.portlet-body", me).addClass('wait');
                        setTimeout(function () {
                            $(">.portlet-body", me).removeClass('wait');
                        }, 1000);
                    }
                    else if ($(this).hasClass('fa-times')) {
                        me.remove();
                    }
                });
            });
            this.httpClient.get('academic/course/syllabus/' + this.$stateParams.syllabusId, 'application/json', function (data, etag) {
                var courses = data.entries;
                _this.$scope.courseMap = _this.formatCourses(courses);
                console.debug(_this.$scope.courseMap);
            });
        }
        FullSyllabus.prototype.formatCourses = function (courses) {
            var courseMap = {};
            var optionalCourses;
            for (var i = 0; i < courses.length; i++) {
                var year = FullSyllabus.getSuffix(courses[i].year);
                var semester = FullSyllabus.getSuffix(courses[i].semester);
                var optionalGroup = courses[i].groupName ? courses[i].groupName : " " + courses[i].category;
                if (courses[i].semester == '0') {
                    if (!optionalCourses) {
                        optionalCourses = {};
                    }
                    if (!optionalCourses[optionalGroup]) {
                        optionalCourses[optionalGroup] = [];
                    }
                    optionalCourses[optionalGroup][optionalCourses[optionalGroup].length] = courses[i];
                }
                else {
                    if (!courseMap[year]) {
                        courseMap[year] = {};
                    }
                    if (!courseMap[year][semester]) {
                        courseMap[year][semester] = {};
                    }
                    if (!courseMap[year][semester][optionalGroup]) {
                        courseMap[year][semester][optionalGroup] = [];
                    }
                    courseMap[year][semester][optionalGroup][courseMap[year][semester][optionalGroup].length] = courses[i];
                }
            }
            if (optionalCourses) {
                courseMap['Optional courses'] = {};
                courseMap['Optional courses'][''] = optionalCourses;
            }
            return courseMap;
        };
        //TODO: Move this function to utility class
        FullSyllabus.getSuffix = function (n) {
            var suffix = "th";
            switch (parseInt(n)) {
                case 1:
                    suffix = "st";
                    break;
                case 2:
                    suffix = "nd";
                    break;
                case 3:
                    suffix = "rd";
                    break;
                default:
                    suffix = "th";
                    break;
            }
            return n + "" + suffix;
        };
        FullSyllabus.$inject = ['$scope', 'HttpClient', '$stateParams'];
        return FullSyllabus;
    }());
    ums.FullSyllabus = FullSyllabus;
    ums.UMS.controller('FullSyllabus', FullSyllabus);
})(ums || (ums = {}));
///<reference path="ProgramSelectorModel.ts"/>
var ums;
(function (ums) {
    var NewSyllabusModel = (function () {
        function NewSyllabusModel(appConstants, httpClient) {
            this.programSelector = new ums.ProgramSelectorModel(appConstants, httpClient);
            this.semesterId = '';
            this.syllabusId = '';
        }
        return NewSyllabusModel;
    }());
    ums.NewSyllabusModel = NewSyllabusModel;
})(ums || (ums = {}));
///<reference path="../../model/master_data/Syllabus.ts"/>
///<reference path="../../model/NewSyllabusModel.ts"/>
///<reference path="../../model/NewSyllabusModel.ts"/>
///<reference path="../../../../../../ums-web-core/src/main/ts/service/HttpClient.ts"/>
///<reference path="../../../../../../ums-web-core/src/main/ts/lib/jquery.notific8.d.ts"/>
var ums;
(function (ums) {
    var NewSyllabus = (function () {
        function NewSyllabus(appConstants, httpClient, $scope) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            $scope.newSyllabusModel = new ums.NewSyllabusModel(this.appConstants, this.httpClient);
            $scope.submit = this.submit.bind(this);
        }
        NewSyllabus.prototype.submit = function () {
            this.$scope.newSyllabusModel.syllabusId
                = this.$scope.newSyllabusModel.semesterId + "_" + this.$scope.newSyllabusModel.programSelector.programId;
            this.httpClient.post('academic/syllabus/', this.$scope.newSyllabusModel, 'application/json')
                .success(function (data, status, headers) {
                //console.debug("Syllabus created, resource location : " + headers('location'));
                $.notific8('Successfully created a new Syllabus.');
            }).error(function (data) {
                console.error(data);
            });
        };
        NewSyllabus.$inject = ['appConstants', 'HttpClient', '$scope'];
        return NewSyllabus;
    }());
    ums.NewSyllabus = NewSyllabus;
    ums.UMS.controller('NewSyllabus', NewSyllabus);
})(ums || (ums = {}));
///<reference path="../../../../../../ums-web-core/src/main/ts/lib/jquery.tablesorter.d.ts"/>
var ums;
(function (ums) {
    var GridSyllabus = (function () {
        function GridSyllabus(appConstants, $scope, httpClient) {
            var _this = this;
            this.appConstants = appConstants;
            this.$scope = $scope;
            this.httpClient = httpClient;
            $scope.data = {
                loadingVisibility: true,
                listVisibility: false
            };
            $(".tablesorter").tablesorter({
                headers: {
                    0: {
                        sorter: false
                    }
                }
            });
            httpClient.get("academic/syllabus/all", 'application/json', function (data, etag) {
                _this.$scope.syllabuses = data.entries;
                _this.$scope.data.loadingVisibility = false;
                _this.$scope.data.listVisibility = true;
            });
        }
        GridSyllabus.$inject = ['appConstants', '$scope', 'HttpClient'];
        return GridSyllabus;
    }());
    ums.GridSyllabus = GridSyllabus;
    ums.UMS.controller('GridSyllabus', GridSyllabus);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentWaiverApproval = (function () {
        function StudentWaiverApproval(appConstants, httpClient, $q, notify, $sce, $window, semesterService, studentService, feeReportService, deadlineExtensionService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.studentService = studentService;
            this.feeReportService = feeReportService;
            this.deadlineExtensionService = deadlineExtensionService;
            this.showTable = false;
            this.isRightDivAvailable = false;
            this.studentId = "";
            this.extendedDate = "";
            console.log("Execution begins");
            this.departmentList = this.appConstants.progShortName;
            this.selectedDepartmentId = this.departmentList[0].id;
            this.selectedDepartmentname = this.departmentList[0].name;
            this.itemPerPage = 20;
            this.currentPageNumber = 1;
            this.applicationModalTableInfo = [];
            this.applicationModalAppliedInfo = [];
            this.getSemesters();
        }
        StudentWaiverApproval.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        console.log(_this.semester);
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.activeSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
            });
        };
        StudentWaiverApproval.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.showTable = false;
        };
        StudentWaiverApproval.prototype.search = function () {
            var _this = this;
            this.isRightDivAvailable = true;
            ums.Utils.expandRightDiv();
            this.httpClient.get("academic/studentWaiver/semester/" + this.semester.id + "/program/" + this.selectedDepartmentId, 'application/json', function (json, etag) {
                _this.selectedStudentWaiverList = json.entries;
                _this.totalRecord = _this.selectedStudentWaiverList.length;
                _this.showTable = true;
            }, function (response) {
                console.error(response);
            });
        };
        StudentWaiverApproval.prototype.confirmVerification = function () {
            var _this = this;
            console.log("start");
            this.httpClient.put("academic/studentWaiver/" + this.studentId, { status: 0 }, 'application/json').success(function () {
                _this.notify.success("success");
            });
        };
        StudentWaiverApproval.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["studentId"] = this.studentId;
            item["semesterId"] = this.selectedSemesterId;
            item["parameterId"] = this.parameterId;
            item["extendedDate"] = this.extendedDate;
            jsonObj.push(item);
            console.log("JSON OBJECT");
            console.log(jsonObj);
            completeJson["entries"] = jsonObj;
            defer.resolve(completeJson);
            return defer.promise;
        };
        StudentWaiverApproval.prototype.click = function (studentId, semesterId) {
            var _this = this;
            /*this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;*/
            this.getAppliedAndApprovedInfo(studentId, semesterId).then(function (value) {
                _this.getSemester(studentId, semesterId);
            });
            this.studentService.getStudentById(studentId).then(function (value) {
                console.log("student Info");
                console.log(value);
                _this.fullNameTA = value.fullName;
                _this.studentYear = value.year;
                _this.studentSemester = value.academicSemester;
            });
            this.studentIdTA = studentId;
            this.semesterIdTA = semesterId;
            //this.fullNameTA = fullName;
            //this.studentYear = year;
            //this.studentSemester = semester;
        };
        StudentWaiverApproval.prototype.getAppliedAndApprovedInfo = function (studentidTa, semesteridTa) {
            var _this = this;
            this.studentID = studentidTa;
            this.semesterId = semesteridTa;
            console.log("semesterId" + this.semesterId);
            this.totalApplied = 0;
            var defer = this.$q.defer();
            var app = [];
            this.applicationModalAppliedInfo = [];
            this.httpClient.get('/ums-webservice-academic/academic/applicationCCI/getAllcarryInfo/studentId/' + this.studentID + '/semesterId/' + this.semesterId, 'application/json', function (json, etag) {
                app = json.entries;
                _this.applicationModalAppliedInfo = app;
                _this.totalApplied = _this.applicationModalAppliedInfo.length;
                defer.resolve(app);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        StudentWaiverApproval.prototype.getSemester = function (studentIdTa, semesterIdTa) {
            var _this = this;
            this.studentID = studentIdTa;
            this.semesterId = semesterIdTa;
            this.totalCarry = 0;
            var url = '/ums-webservice-academic/academic/applicationCCI/studentId/' + this.studentID + '/semesterId/' + this.semesterId;
            var defer = this.$q.defer();
            var modalCarryInfo = [];
            this.httpClient.get(url, 'application/json', function (json, etag) {
                var modalCarryInfo = json.entries;
                _this.applicationModalTableInfo = modalCarryInfo;
                _this.totalCarry = _this.applicationModalTableInfo.length;
                defer.resolve(_this.applicationModalTableInfo);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in getting carry data applications");
            });
            return defer.promise;
        };
        StudentWaiverApproval.prototype.selectDepartmentName = function (id) {
            this.selectedDepartmentname = this.departmentList.filter(function (value) {
                return value.id == id;
            })[0].name;
            this.showTable = false;
        };
        StudentWaiverApproval.prototype.verifyQuota = function (studentWaiver) {
            var _this = this;
            var studentWaiverTmp;
            studentWaiverTmp = angular.copy(studentWaiver);
            studentWaiverTmp.status = 1;
            this.convertToJsonForVerify(studentWaiverTmp).then(function (json) {
                _this.httpClient.post("academic/studentWaiver/verify", json, 'application/json').success(function () {
                    _this.notify.success("Successfully Verified!!");
                    _this.search();
                }).error(function (data) {
                    _this.notify.error("Error in Verification!!");
                });
            });
        };
        StudentWaiverApproval.prototype.convertToJsonForVerify = function (object) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = object;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        StudentWaiverApproval.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'studentService', 'FeeReportService',
            'deadlineExtensionService'];
        return StudentWaiverApproval;
    }());
    ums.StudentWaiverApproval = StudentWaiverApproval;
    ums.UMS.controller("StudentWaiverApproval", StudentWaiverApproval);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DegreeAwardDate = (function () {
        function DegreeAwardDate(appConstants, httpClient, $q, notify, $sce, $window, semesterService, studentService, feeReportService, deadlineExtensionService, $scope) {
            var _this = this;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.studentService = studentService;
            this.feeReportService = feeReportService;
            this.deadlineExtensionService = deadlineExtensionService;
            this.$scope = $scope;
            this.showModal = false;
            this.showTable = false;
            this.isRightDivAvailable = false;
            this.studentId = "";
            this.extendedDate = "";
            console.log("Execution begins");
            this.programList = this.appConstants.programs;
            this.selectedProgramId = this.programList[0].id;
            this.selectedProgramname = this.programList[0].name;
            this.itemPerPage = 20;
            this.currentPageNumber = 1;
            this.setDateAll = false;
            this.itemPerPage2 = 20;
            this.currentPageNumber2 = 1;
            this.applicationModalTableInfo = [];
            this.applicationModalAppliedInfo = [];
            this.applyEnabled = false;
            $scope.$watch(function () { return _this.unifiedDate; }, function (date) {
                if (date) {
                    _this.applyEnabled = true;
                }
            });
            this.getSemesters();
        }
        DegreeAwardDate.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 8).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.activeSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
            });
        };
        DegreeAwardDate.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.showTable = false;
        };
        DegreeAwardDate.prototype.search = function () {
            var _this = this;
            this.isRightDivAvailable = true;
            ums.Utils.expandRightDiv();
            this.httpClient.get("academic/student/degreeAward/verified/" + this.selectedProgramId + "/" + this.semester.id, 'application/json', function (json, etag) {
                _this.selectedVerifiedStudent = json.entries;
                _this.totalRecord = _this.selectedVerifiedStudent.length;
                _this.showTable = true;
                console.log("student List");
                console.log(_this.selectedVerifiedStudent);
                _this.selectedVerifiedStudent.forEach(function (value) {
                    value.editData = false;
                    value.setDate = false;
                    value.degreeAwardDateTmp = value.degreeAwardDate;
                });
            }, function (response) {
                console.error(response);
            });
            this.httpClient.get("academic/student/degreeAward/unVerified/" + this.selectedProgramId + "/" + this.semester.id, 'application/json', function (json, etag) {
                _this.selectedUnVerifiedStudent = json.entries;
                _this.totalRecord2 = _this.selectedUnVerifiedStudent.length;
                _this.showTable = true;
                console.log("unverified students List");
                console.log(_this.selectedUnVerifiedStudent);
            }, function (response) {
                console.error(response);
            });
        };
        DegreeAwardDate.prototype.click = function (studentId, semesterId, showModal) {
            var _this = this;
            /*this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;*/
            if (showModal == 'first') {
                this.showModal = true;
            }
            else {
                this.showModal = false;
            }
            this.studentService.getStudentById(studentId).then(function (value) {
                _this.fullNameTA = value.fullName;
                _this.studentYear = value.year;
                _this.studentSemester = value.academicSemester;
            });
            this.studentIdTA = studentId;
            this.semesterIdTA = semesterId;
            //this.fullNameTA = fullName;
            //this.studentYear = year;
            //this.studentSemester = semester;
        };
        DegreeAwardDate.prototype.selectProgramName = function (id) {
            this.selectedProgramname = this.programList.filter(function (value) {
                return value.id == id;
            })[0].name;
            this.showTable = false;
        };
        DegreeAwardDate.prototype.verifyGraduateStudent = function (student) {
            var _this = this;
            student.degreeAwardSemesterId = this.selectedSemesterId;
            this.convertToJsonForVerify(student).then(function (json) {
                _this.httpClient.put("academic/student/updateStatusOfGraduated", json, 'application/json').success(function () {
                    _this.notify.success("Successfully Verified!!");
                    _this.search();
                }).error(function (data) {
                    _this.notify.error("Error in Verification!!");
                });
            });
        };
        DegreeAwardDate.prototype.unverifyGraduateStudent = function (student) {
            var _this = this;
            student.degreeAwardSemesterId = this.selectedSemesterId;
            this.convertToJsonForVerify(student).then(function (json) {
                _this.httpClient.put("academic/student/unverifyStatusOfGraduated", json, 'application/json').success(function () {
                    _this.notify.success("Unverified!!");
                    _this.search();
                }).error(function (data) {
                    _this.notify.error("Error in Verification!!");
                });
            });
            $('#unverifyWarning').modal('close');
        };
        DegreeAwardDate.prototype.convertToJsonForVerify = function (object) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = object;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        DegreeAwardDate.prototype.cancel = function (id) {
            this.selectedVerifiedStudent.filter(function (value) {
                return value.id == id;
            })[0].editData = false;
        };
        DegreeAwardDate.prototype.editData = function (id) {
            this.selectedVerifiedStudent.filter(function (value) {
                return value.id == id;
            })[0].editData = true;
        };
        DegreeAwardDate.prototype.updateData = function (student) {
            var _this = this;
            this.convertToJsonForVerify(student).then(function (json) {
                _this.httpClient.put("academic/student/updateDateOfGraduated", json, 'application/json').success(function () {
                    _this.notify.success("Successfully Updated!!");
                    _this.search();
                }).error(function (data) {
                    _this.notify.error("Error in Update!!");
                });
            });
        };
        DegreeAwardDate.prototype.apply = function () {
            var _this = this;
            var selectionCheck = false;
            this.applyEnabled = false;
            for (var i = 0; i < this.selectedVerifiedStudent.length; i++) {
                if (this.selectedVerifiedStudent[i].setDate == true) {
                    selectionCheck = true;
                    break;
                }
            }
            if (selectionCheck) {
                for (var i = 0; i < this.selectedVerifiedStudent.length; i++) {
                    this.selectedVerifiedStudent[i].degreeAwardDateTmp = this.unifiedDate;
                }
                this.convertToJsonForVerify(this.selectedVerifiedStudent).then(function (json) {
                    _this.httpClient.put("academic/student/updateDateOfAllGraduated", json, 'application/json').success(function () {
                        _this.notify.success("Successfully All Updated!!");
                        _this.search();
                        _this.applyEnabled = true;
                    }).error(function (data) {
                        _this.notify.error("Error in Update!!");
                        _this.search();
                        _this.applyEnabled = true;
                    });
                });
            }
            else {
                this.notify.warn("No data selected!!");
                this.applyEnabled = true;
            }
        };
        DegreeAwardDate.prototype.setAll = function () {
            if (this.setDateAll) {
                this.selectedVerifiedStudent.forEach(function (value) {
                    value.setDate = true;
                });
            }
            else {
                this.selectedVerifiedStudent.forEach(function (value) {
                    value.setDate = false;
                });
            }
        };
        DegreeAwardDate.prototype.setCellStyle = function (student) {
            if (student.cgpa < 2.2)
                return "belowGraduationCgpa";
            else
                return "";
        };
        DegreeAwardDate.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'studentService', 'FeeReportService',
            'deadlineExtensionService', '$scope'];
        return DegreeAwardDate;
    }());
    ums.DegreeAwardDate = DegreeAwardDate;
    ums.UMS.controller("DegreeAwardDate", DegreeAwardDate);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DownloadNomenclature = (function () {
        function DownloadNomenclature(appConstants, httpClient, $q, notify, $sce, $window, semesterService, downloadNomenclatureService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.downloadNomenclatureService = downloadNomenclatureService;
            this.isRightDivAvailable = false;
            this.showTable = false;
            this.programList = this.appConstants.programs;
            this.selectedProgramId = this.programList[0].id;
            this.selectedProgramName = this.programList[0].name;
            //this.academicYearList = this.appConstants.academicYear;
            //this.academicYearList = this.academicYearList.map(x => ({id: Number(x.id), name: x.name}));
            //this.selectedAcademicYearId = this.academicYearList[0].id;
            //this.selectedAcademicYearName = this.academicYearList[0].name;
            //this.academicSemesterList = this.appConstants.academicSemester;
            //this.academicSemesterList = this.academicSemesterList.map(x => ({id: Number(x.id), name: x.name}));
            //this.selectedAcademicSemesterId = this.academicSemesterList[0].id;
            //this.selectedAcademicSemesterName = this.academicSemesterList[0].name;
            this.academicYearSemesterList = this.appConstants.yearSemester;
            //this.academicYearSemesterList = this.academicYearSemesterList.map(x => ({id: Number(x.id), name: x.name}));
            this.selectedAcademicYearSemesterId = this.academicYearSemesterList[0].id;
            this.selectedAcademicYearSemesterName = this.academicYearSemesterList[0].name;
            this.selectedAcademicYearId = 0;
            this.selectedAcademicSemesterId = 0;
            this.loadingVisibility = false;
            this.getSemesters();
        }
        DownloadNomenclature.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == ums.Utils.SEMESTER_STATUS_ACTIVE) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
            });
        };
        DownloadNomenclature.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.showTable = false;
            this.theoryCoursesByYearAndSemester = [];
            this.theoryCoursesByYearAndSemesterTmp = [];
            this.sessionalCoursesByYearAndSemester = [];
            this.sessionalCoursesByYearAndSemesterTmp = [];
        };
        DownloadNomenclature.prototype.programNameChanged = function (id) {
            this.selectedProgramName = this.programList.filter(function (f) { return f.id == id; })[0].name;
            this.showTable = false;
            this.tableDataReset();
        };
        /*public academicYearChanged(id: any): void {
            this.selectedAcademicYearName = this.academicYearList.filter(f => f.id == id)[0].name;
            this.selectedAcademicYearId = id;
            this.showTable = false;
            this.tableDataReset();
        }

        public academicSemesterChanged(id: any): void {
            this.selectedAcademicSemesterName = this.academicSemesterList.filter(f => f.id == id)[0].name;
            this.selectedAcademicSemesterId = id;
            this.showTable = false;
            this.tableDataReset();

        }*/
        DownloadNomenclature.prototype.academicYearSemesterChanged = function (id) {
            this.selectedAcademicYearSemesterName = this.academicYearSemesterList.filter(function (f) { return f.id == id; })[0].name;
            this.selectedAcademicYearSemesterId = id;
            this.showTable = false;
            this.tableDataReset();
        };
        DownloadNomenclature.prototype.tableDataReset = function () {
            this.theoryCoursesByYearAndSemester = [];
            this.theoryCoursesByYearAndSemesterTmp = [];
            this.sessionalCoursesByYearAndSemester = [];
            this.sessionalCoursesByYearAndSemesterTmp = [];
        };
        DownloadNomenclature.prototype.searchForNomenclatureInfo = function () {
            var _this = this;
            this.isRightDivAvailable = true;
            ums.Utils.expandRightDiv();
            this.showTable = true;
            this.loadingVisibility = true;
            this.downloadNomenclatureService.getNomenclatureInformation(this.selectedSemesterId, this.selectedProgramId).then(function (res) {
                _this.allCourses = [];
                _this.allCourses = res;
                if (_this.selectedAcademicYearSemesterId.length > 1) {
                    _this.selectedAcademicYearId = Number(_this.selectedAcademicYearSemesterId[0]);
                    _this.selectedAcademicSemesterId = Number(_this.selectedAcademicYearSemesterId[1]);
                }
                _this.allCoursesByYearAndSemester = [];
                _this.allCoursesByYearAndSemester = _this.allCourses.filter(function (f) { return f.academicYearId == _this.selectedAcademicYearId && f.academicSemesterId == _this.selectedAcademicSemesterId; });
                _this.theoryCoursesByYearAndSemester = [];
                _this.theoryCoursesByYearAndSemester = _this.allCoursesByYearAndSemester.filter(function (f) { return f.courseTypeId == ums.Utils.COURSE_TYPE_THEORY; });
                _this.sessionalCoursesByYearAndSemester = [];
                _this.sessionalCoursesByYearAndSemester = _this.allCoursesByYearAndSemester.filter(function (f) { return f.courseTypeId == ums.Utils.COURSE_TYPE_SESSIONAL; });
                _this.loadingVisibility = false;
                _this.theoryCoursesByYearAndSemesterTmp = angular.copy(_this.theoryCoursesByYearAndSemester);
                _this.sessionalCoursesByYearAndSemesterTmp = angular.copy(_this.sessionalCoursesByYearAndSemester);
            });
        };
        DownloadNomenclature.prototype.getPdfVersionNomenclature = function () {
            if (this.selectedProgramId != this.programList[0].id) {
                this.downloadNomenclatureService.getNomenclaturePdf(this.selectedSemesterId, this.selectedProgramId);
            }
            else {
                this.notify.warn("Please select a Program");
            }
        };
        DownloadNomenclature.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'DownloadNomenclatureService'];
        return DownloadNomenclature;
    }());
    ums.UMS.controller("DownloadNomenclature", DownloadNomenclature);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DownloadNomenclatureService = (function () {
        function DownloadNomenclatureService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        DownloadNomenclatureService.prototype.getNomenclatureInformation = function (semesterId, programId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/nomenclature/courseInfo/semester-id/" + semesterId + "/program-id/" + programId, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching nomenclature information");
            });
            return defer.promise;
        };
        DownloadNomenclatureService.prototype.getNomenclaturePdf = function (semesterId, programId) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Nomenclature" + "-" + semesterId + "-" + programId;
            this.httpClient.get("/ums-webservice-academic/academic/nomenclature/pdf/semester-id/" + semesterId + "/program-id/" + programId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        DownloadNomenclatureService.$inject = ['$q', 'HttpClient', 'notify'];
        return DownloadNomenclatureService;
    }());
    ums.DownloadNomenclatureService = DownloadNomenclatureService;
    ums.UMS.service("DownloadNomenclatureService", DownloadNomenclatureService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SectionType;
    (function (SectionType) {
        SectionType["THEORY"] = "Theory";
        SectionType["SESSIONAL"] = "Sessional";
    })(SectionType || (SectionType = {}));
    var SectionWiseStudentInfoReport = (function () {
        function SectionWiseStudentInfoReport(appConstants, httpClient, $q, notify, $sce, $window, sectionWiseStudentInfoReportService, userService, additionalRolePermissionsService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.sectionWiseStudentInfoReportService = sectionWiseStudentInfoReportService;
            this.userService = userService;
            this.additionalRolePermissionsService = additionalRolePermissionsService;
            this.getProgramListByLoggedInUserDeptId();
            this.academicYearSemesterList = angular.copy(this.appConstants.yearSemester);
            this.academicYearSemesterList = this.academicYearSemesterList.filter(function (f) { return f.id != "51" && f.id != "52"; });
            this.selectedAcademicYearSemesterId = this.academicYearSemesterList[0].id;
            this.selectedAcademicYearSemesterName = this.academicYearSemesterList[0].name;
            this.sectionTypeList = this.appConstants.sectionTypes;
            this.selectedSectionTypeId = this.sectionTypeList[0].id;
            this.selectedSectionTypeName = this.sectionTypeList[0].name;
            this.theorySectionList = angular.copy(this.appConstants.theorySections);
            this.sectionList = [];
            this.sessionalSectionList = [];
            this.theorySectionList.unshift({ id: "", name: "Select Theory Section" });
            this.sessionalSectionList.unshift({ id: "", name: "Select Sessional Section" });
            this.sectionList.unshift({ id: "", name: "Select Section" });
            this.theorySectionList.push({ id: "All", name: "All" });
            this.theorySectionList.push({ id: "None", name: "No Theory Section Assigned" });
            this.selectedSectionId = this.sectionList[0].id;
            this.selectedSectionName = this.sectionList[0].name;
            this.selectedTheorySectionId = this.theorySectionList[0].id;
            this.selectedTheorySectionName = this.theorySectionList[0].name;
            this.selectedSessionalSectionId = this.sessionalSectionList[0].id;
            this.selectedSessionalSectionName = this.sessionalSectionList[0].name;
            this.isRightDivAvailable = false;
            this.loadingVisibility = false;
            this.itemPerPage = 20;
            this.currentPageNumber = 1;
            this.showAllPrograms = false;
        }
        SectionWiseStudentInfoReport.prototype.getProgramListByLoggedInUserDeptId = function () {
            var _this = this;
            this.programList = [];
            this.programList = [
                { id: 110100, name: 'Bsc in ARC', deptId: '01' },
                { id: 110200, name: 'BBA', deptId: '02' },
                { id: 110300, name: 'Bsc in CE', deptId: '03' },
                { id: 110400, name: 'Bsc in CSE', deptId: '04' },
                { id: 110500, name: 'Bsc in EEE', deptId: '05' },
                { id: 110600, name: 'Bsc in TE', deptId: '06' },
                { id: 110707, name: 'Bsc in IPE', deptId: '07' },
                { id: 110708, name: 'Bsc in ME', deptId: '07' }
            ];
            this.filteredProgramList = [];
            var currentUserInfoResponse = this.userService.fetchCurrentUserInfo();
            var userAdditionalRolePermissionsResponse = this.additionalRolePermissionsService.fetchLoggedUserAdditionalRolePermissions();
            this.$q.all([currentUserInfoResponse, userAdditionalRolePermissionsResponse]).then(function (response) {
                _this.loggedInUser = response[0];
                _this.roleId = _this.loggedInUser.roleId;
                _this.additionalRolePermissions = response[1];
                _this.additionalRolePermissions.forEach(function (f) {
                    if (f.roleId == ums.Utils.ICT_DIRECTOR || f.roleId == ums.Utils.DEPT_HEAD) {
                        _this.roleId = f.roleId;
                        return;
                    }
                });
                if (_this.roleId == ums.Utils.S_ADMIN || _this.roleId == ums.Utils.ICT_DIRECTOR || _this.roleId == ums.Utils.ASSISTANT_ADMINISTRATIVE_OFFICER_REG || _this.roleId == ums.Utils.SYSTEM_ENGINEER
                    || _this.roleId == ums.Utils.DEPT_HEAD) {
                    _this.showAllPrograms = true;
                }
                else {
                    _this.showAllPrograms = false;
                }
                if (_this.showAllPrograms) {
                    _this.filteredProgramList = angular.copy(_this.programList);
                }
                else {
                    _this.programList.forEach(function (p) {
                        if (p.deptId === _this.loggedInUser.departmentId)
                            _this.filteredProgramList.push(p);
                    });
                }
                if (_this.filteredProgramList.length == 0 || _this.filteredProgramList.length > 1) {
                    _this.filteredProgramList.unshift({ id: 0, name: 'Select Program', deptId: '' });
                }
                _this.selectedProgramId = _this.filteredProgramList[0].id;
                _this.selectedProgramName = _this.filteredProgramList[0].name;
                if (_this.selectedProgramId == ums.Utils.UG_ARCH) {
                    _this.academicYearSemesterList.push({ id: "51", name: "5-1" });
                    _this.academicYearSemesterList.push({ id: "52", name: "5-2" });
                }
                _this.academicYearSemesterList.push({ id: "99", name: "All" });
            });
        };
        SectionWiseStudentInfoReport.prototype.programNameChanged = function (id) {
            this.academicYearSemesterList.pop();
            this.selectedProgramName = this.filteredProgramList.filter(function (f) { return f.id == id; })[0].name;
            if (this.selectedProgramId == ums.Utils.UG_ARCH) {
                this.academicYearSemesterList.push({ id: "51", name: "5-1" });
                this.academicYearSemesterList.push({ id: "52", name: "5-2" });
                this.selectedAcademicYearSemesterId = this.academicYearSemesterList[0].id;
                this.selectedAcademicYearSemesterName = this.academicYearSemesterList[0].name;
            }
            this.academicYearSemesterList.push({ id: "99", name: "All" });
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        SectionWiseStudentInfoReport.prototype.academicYearSemesterChanged = function (id) {
            this.selectedAcademicYearSemesterName = this.academicYearSemesterList.filter(function (f) { return f.id == id; })[0].name;
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        SectionWiseStudentInfoReport.prototype.sectionTypeChanged = function (id) {
            var _this = this;
            this.sectionList = [];
            this.sectionList.unshift({ id: "", name: "Select Section" });
            this.selectedSectionTypeName = this.sectionTypeList.filter(function (f) { return f.id == id; })[0].name;
            if (this.selectedSectionTypeName == SectionType.THEORY) {
                var theorySectionListTmp = angular.copy(this.theorySectionList);
                theorySectionListTmp.forEach(function (f) {
                    _this.sectionList.push(f);
                });
            }
            else if (this.selectedSectionTypeName == SectionType.SESSIONAL) {
                var sessionalSectionListTmp = angular.copy(this.sessionalSectionList);
                sessionalSectionListTmp.forEach(function (f) {
                    _this.sectionList.push(f);
                });
            }
            this.sectionList.push({ id: "All", name: "All" });
            this.selectedSectionId = this.sectionList[0].id;
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        SectionWiseStudentInfoReport.prototype.sectionChanged = function (id) {
            this.selectedSectionName = this.sectionList.filter(function (f) { return f.id == id; })[0].name;
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        SectionWiseStudentInfoReport.prototype.theorySectionChanged = function (id) {
            var _this = this;
            this.selectedTheorySectionName = this.theorySectionList.filter(function (f) { return f.id == id; })[0].name;
            this.isRightDivAvailable = false;
            this.sessionalSectionList = [];
            this.sessionalSectionList.unshift({ id: "", name: "Select Section" });
            this.selectedSessionalSectionId = this.sessionalSectionList[0].id;
            this.selectedSessionalSectionName = this.sessionalSectionList[0].name;
            if (id == "All" || id == "None") {
                var allSessionalSections = angular.copy(this.appConstants.sessionalSections);
                allSessionalSections.forEach(function (f) {
                    _this.sessionalSectionList.push(f);
                });
            }
            else {
                var filteredSessionalSections = angular.copy(ums.Utils.getSessionalSection(id));
                filteredSessionalSections.splice(3, 1);
                filteredSessionalSections.forEach(function (f) {
                    _this.sessionalSectionList.push(f);
                });
            }
            this.sessionalSectionList.push({ id: "All", name: "All" });
            this.sessionalSectionList.push({ id: "None", name: "No Sessional Section Assigned" });
            this.clearTableData();
        };
        SectionWiseStudentInfoReport.prototype.sessionalSectionChanged = function (id) {
            this.selectedSessionalSectionName = this.sessionalSectionList.filter(function (f) { return f.id == id; })[0].name;
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        SectionWiseStudentInfoReport.prototype.searchForSectionWiseStudentInfo = function () {
            var _this = this;
            if ((this.filteredProgramList.length > 1 && this.selectedProgramId == this.filteredProgramList[0].id) || (this.selectedAcademicYearSemesterId == this.academicYearSemesterList[0].id)
                || (this.selectedTheorySectionId == this.theorySectionList[0].id) || (this.selectedSessionalSectionId == this.sessionalSectionList[0].id)) {
                this.notify.warn("Program/Year-Semester/Theory Section/Sessional Section must be selected!");
            }
            else {
                this.isRightDivAvailable = true;
                ums.Utils.expandRightDiv();
                if (this.selectedAcademicYearSemesterId.length > 1) {
                    this.selectedAcademicYearId = Number(this.selectedAcademicYearSemesterId[0]);
                    this.selectedAcademicSemesterId = Number(this.selectedAcademicYearSemesterId[1]);
                }
                this.loadingVisibility = true;
                this.sectionWiseStudentInfoList = [];
                this.sectionWiseStudentInfoListTmp = [];
                this.sectionWiseStudentInfoReportService.getSectionWiseStudentInfo(this.selectedProgramId, this.selectedAcademicYearId, this.selectedAcademicSemesterId, this.selectedTheorySectionId, this.selectedSessionalSectionId).then(function (res) {
                    _this.sectionWiseStudentInfoList = res;
                    _this.sectionWiseStudentInfoListTmp = res;
                    _this.loadingVisibility = false;
                });
            }
        };
        SectionWiseStudentInfoReport.prototype.clearTableData = function () {
            this.sectionWiseStudentInfoList = [];
            this.sectionWiseStudentInfoListTmp = [];
        };
        SectionWiseStudentInfoReport.prototype.getExcelVersionSectionWiseStudentInfoReport = function () {
            this.sectionWiseStudentInfoReportService
                .downloadSectionWiseStudentInfoReportExcelFile(this.selectedProgramId, this.selectedProgramName, this.selectedAcademicYearId, this.selectedAcademicSemesterId, this.selectedTheorySectionId, this.selectedSessionalSectionId);
        };
        SectionWiseStudentInfoReport.prototype.redirectToAssignSectionPage = function () {
            this.$window.open('https://' + location.hostname + '/ums-web/iums/#/sectionAssignment', '_self');
        };
        SectionWiseStudentInfoReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'SectionWiseStudentInfoReportService', 'userService', 'additionalRolePermissionsService'];
        return SectionWiseStudentInfoReport;
    }());
    ums.UMS.controller("SectionWiseStudentInfoReport", SectionWiseStudentInfoReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SectionWiseStudentInfoReportService = (function () {
        function SectionWiseStudentInfoReportService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        SectionWiseStudentInfoReportService.prototype.getSectionWiseStudentInfo = function (programId, year, semester, theorySection, sessionalSection) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/sectionWiseStudentInfo/programId/" + programId + "/year/" + year + "/semester/" + semester + "/theorySection/" + theorySection + "/sessionalSection/" + sessionalSection, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                _this.notify.error("Error in section wise student info");
            });
            return defer.promise;
        };
        SectionWiseStudentInfoReportService.prototype.downloadSectionWiseStudentInfoReportExcelFile = function (programId, programName, year, semester, theorySection, sessionalSection) {
            var _this = this;
            var program = programName.replace(/[^\w]/gi, '_');
            //var fileName = "SectionWiseStudentInfoReport_"+program+"_"+year+"_"+semester+"_"+theorySection+"_"+sessionalSection;
            var fileName = "SectionWiseStudentInfoReport_" + program;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "/ums-webservice-academic/academic/sectionWiseStudentInfo/excelReport/programId/" + programId + "/year/" + year + "/semester/" + semester + "/theorySection/" + theorySection + "/sessionalSection/" + sessionalSection;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                _this.notify.success("Successfully downloaded");
            }, function (response) {
            }, 'arraybuffer');
        };
        SectionWiseStudentInfoReportService.$inject = ['$q', 'HttpClient', 'notify'];
        return SectionWiseStudentInfoReportService;
    }());
    ums.SectionWiseStudentInfoReportService = SectionWiseStudentInfoReportService;
    ums.UMS.service("SectionWiseStudentInfoReportService", SectionWiseStudentInfoReportService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdvisingStudentInfoReportFilterType;
    (function (AdvisingStudentInfoReportFilterType) {
        AdvisingStudentInfoReportFilterType["DEPARTMENT"] = "Department";
        AdvisingStudentInfoReportFilterType["PROGRAM"] = "Program";
        AdvisingStudentInfoReportFilterType["PROGRAM_YEAR_SEMESTER"] = "ProgramYearSemester";
        AdvisingStudentInfoReportFilterType["TEACHER"] = "Teacher";
    })(AdvisingStudentInfoReportFilterType || (AdvisingStudentInfoReportFilterType = {}));
    var AdvisingStudentInfoReport = (function () {
        function AdvisingStudentInfoReport(appConstants, httpClient, $q, notify, $sce, $window, advisingStudentInfoReportService, userService, employeeService, additionalRolePermissionsService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.advisingStudentInfoReportService = advisingStudentInfoReportService;
            this.userService = userService;
            this.employeeService = employeeService;
            this.additionalRolePermissionsService = additionalRolePermissionsService;
            this.deptList = this.appConstants.deptShort;
            this.filterDepartmentByLoggedInUserDeptId();
            this.advisingStudentInfoFilterTypeList = [
                { id: 'Department', name: 'Department' },
                { id: 'Program', name: 'Program' },
                { id: 'ProgramYearSemester', name: 'Program & Year-Semester' },
                { id: 'Teacher', name: 'Teacher' }
            ];
            this.selectedFilterTypeId = this.advisingStudentInfoFilterTypeList[0].id;
            this.selectedFilterTypeName = this.advisingStudentInfoFilterTypeList[0].name;
            this.isRightDivAvailable = false;
            this.loadingVisibility = false;
            this.itemPerPage = 20;
            this.currentPageNumber = 1;
            this.showAllDepartments = false;
        }
        AdvisingStudentInfoReport.prototype.filterDepartmentByLoggedInUserDeptId = function () {
            var _this = this;
            var currentUserInfoResponse = this.userService.fetchCurrentUserInfo();
            var userAdditionalRolePermissionsResponse = this.additionalRolePermissionsService.fetchLoggedUserAdditionalRolePermissions();
            this.$q.all([currentUserInfoResponse, userAdditionalRolePermissionsResponse]).then(function (response) {
                _this.loggedInUser = response[0];
                _this.roleId = _this.loggedInUser.roleId;
                _this.additionalRolePermissions = response[1];
                _this.additionalRolePermissions.forEach(function (f) {
                    if (f.roleId == ums.Utils.ICT_DIRECTOR || f.roleId == ums.Utils.DEPT_HEAD) {
                        _this.roleId = f.roleId;
                        return;
                    }
                });
                if (_this.roleId == ums.Utils.S_ADMIN || _this.roleId == ums.Utils.ICT_DIRECTOR || _this.roleId == ums.Utils.ASSISTANT_ADMINISTRATIVE_OFFICER_REG || _this.roleId == ums.Utils.SYSTEM_ENGINEER
                    || _this.roleId == ums.Utils.DEPT_HEAD) {
                    _this.showAllDepartments = true;
                }
                else {
                    _this.showAllDepartments = false;
                }
                if (!_this.showAllDepartments) {
                    _this.deptList = _this.deptList.filter(function (f) { return f.id == _this.loggedInUser.departmentId; });
                }
                _this.selectedDeptId = _this.deptList[0].id;
                _this.selectedDeptName = _this.deptList[0].name;
            });
        };
        AdvisingStudentInfoReport.prototype.getProgramListByDeptId = function () {
            var _this = this;
            this.programList = [];
            this.academicYearSemesterList = angular.copy(this.appConstants.yearSemester);
            this.programList = [
                { id: 110100, name: 'Bsc in ARC', deptId: '01' },
                { id: 110200, name: 'BBA', deptId: '02' },
                { id: 110300, name: 'Bsc in CE', deptId: '03' },
                { id: 110400, name: 'Bsc in CSE', deptId: '04' },
                { id: 110500, name: 'Bsc in EEE', deptId: '05' },
                { id: 110600, name: 'Bsc in TE', deptId: '06' },
                { id: 110707, name: 'Bsc in IPE', deptId: '07' },
                { id: 110708, name: 'Bsc in ME', deptId: '07' }
            ];
            this.filteredProgramList = [];
            //this.userService.fetchCurrentUserInfo().then((res)=>{
            //this.loggedInUser = res;
            this.programList.forEach(function (p) {
                if (p.deptId == _this.selectedDeptId) {
                    _this.filteredProgramList.push(p);
                }
            });
            if (this.filteredProgramList.length == 0 || this.filteredProgramList.length > 1) {
                this.filteredProgramList.unshift({ id: 0, name: 'Select Program', deptId: '' });
            }
            this.selectedProgramId = this.filteredProgramList[0].id;
            this.selectedProgramName = this.filteredProgramList[0].name;
            if (this.selectedProgramId != ums.Utils.UG_ARCH) {
                this.academicYearSemesterList = this.academicYearSemesterList.filter(function (f) { return f.id != "51" && f.id != "52"; });
            }
            this.academicYearSemesterList.push({ id: "99", name: "All" });
            //});
        };
        AdvisingStudentInfoReport.prototype.getActiveTeachers = function () {
            var _this = this;
            this.teacherList = [];
            this.employeeService.getActiveTeacherByDeptId(this.selectedDeptId).then(function (res) {
                _this.teacherList = res;
            });
        };
        AdvisingStudentInfoReport.prototype.deptNameChanged = function (id) {
            this.selectedDeptName = this.deptList.filter(function (f) { return f.id == id; })[0].name;
            this.isRightDivAvailable = false;
            if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.PROGRAM || this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.PROGRAM_YEAR_SEMESTER) {
                this.getProgramListByDeptId();
            }
            this.clearTableData();
        };
        AdvisingStudentInfoReport.prototype.filterTypeChanged = function (id) {
            this.selectedFilterTypeName = this.advisingStudentInfoFilterTypeList.filter(function (f) { return f.id == id; })[0].name;
            this.getProgramListByDeptId();
            this.selectedAcademicYearSemesterId = this.academicYearSemesterList[0].id;
            this.selectedAcademicYearSemesterName = this.academicYearSemesterList[0].name;
            this.selectedTeacher = null;
            this.selectedTeacherId = null;
            this.selectedTeacherName = null;
            setTimeout(function () {
                $("#teacher").select2();
            }, 10);
            if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.TEACHER) {
                this.getActiveTeachers();
            }
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        AdvisingStudentInfoReport.prototype.programNameChanged = function (id) {
            //this.academicYearSemesterList.pop();
            this.selectedProgramName = this.filteredProgramList.filter(function (f) { return f.id == id; })[0].name;
            /*if(this.selectedProgramId == Utils.UG_ARCH){
                this.academicYearSemesterList.push({id: "51", name: "5-1"});
                this.academicYearSemesterList.push({id: "52", name: "5-2"});
                this.selectedAcademicYearSemesterId = this.academicYearSemesterList[0].id;
                this.selectedAcademicYearSemesterName = this.academicYearSemesterList[0].name;
            }
            this.academicYearSemesterList.push({id: "99", name: "All"});*/
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        AdvisingStudentInfoReport.prototype.academicYearSemesterChanged = function (id) {
            this.selectedAcademicYearSemesterName = this.academicYearSemesterList.filter(function (f) { return f.id == id; })[0].name;
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        AdvisingStudentInfoReport.prototype.teacherChanged = function (teacher) {
            this.selectedTeacherId = teacher.id;
            this.selectedTeacherName = teacher.employeeName;
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        AdvisingStudentInfoReport.prototype.searchForAdvisingStudentInfo = function () {
            if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.DEPARTMENT) {
                if (this.showAllDepartments) {
                    if (this.selectedDeptId == this.deptList[0].id) {
                        this.notify.warn("Department must be selected");
                    }
                    else {
                        this.fetchAdvisingStudentInfo();
                    }
                }
                else {
                    this.fetchAdvisingStudentInfo();
                }
            }
            else if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.PROGRAM) {
                if ((this.showAllDepartments && this.selectedDeptId == this.deptList[0].id) || (this.filteredProgramList.length > 1 && this.selectedProgramId == this.filteredProgramList[0].id)) {
                    this.notify.warn("Department/Program must be selected!");
                }
                else {
                    this.fetchAdvisingStudentInfo();
                }
            }
            else if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.PROGRAM_YEAR_SEMESTER) {
                if (this.selectedAcademicYearSemesterId.length > 1) {
                    this.selectedAcademicYearId = Number(this.selectedAcademicYearSemesterId[0]);
                    this.selectedAcademicSemesterId = Number(this.selectedAcademicYearSemesterId[1]);
                }
                if ((this.showAllDepartments && this.selectedDeptId == this.deptList[0].id) || (this.filteredProgramList.length > 1 && this.selectedProgramId == this.filteredProgramList[0].id) || (this.selectedAcademicYearSemesterId == this.academicYearSemesterList[0].id)) {
                    this.notify.warn("Department/Program/Year-Semester must be selected!");
                }
                else {
                    this.fetchAdvisingStudentInfo();
                }
            }
            else if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.TEACHER) {
                if (this.showAllDepartments) {
                    if (this.selectedDeptId == this.deptList[0].id || ums.Utils.isNullOrUndefined(this.selectedTeacher)) {
                        this.notify.warn("Department/Teacher Name must be selected!");
                    }
                    else {
                        this.fetchAdvisingStudentInfo();
                    }
                }
                else {
                    if (ums.Utils.isNullOrUndefined(this.selectedTeacher)) {
                        this.notify.warn("Teacher Name must be selected!");
                    }
                    else {
                        this.fetchAdvisingStudentInfo();
                    }
                }
            }
        };
        AdvisingStudentInfoReport.prototype.fetchAdvisingStudentInfo = function () {
            var _this = this;
            this.isRightDivAvailable = true;
            ums.Utils.expandRightDiv();
            this.loadingVisibility = true;
            this.advisingStudentInfoList = [];
            this.advisingStudentInfoListTmp = [];
            if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.DEPARTMENT) {
                this.advisingStudentInfoReportService.getAdvisingStudentInfoByDepartmentId(this.selectedDeptId).then(function (res) {
                    _this.advisingStudentInfoList = res;
                    _this.advisingStudentInfoListTmp = res;
                    _this.loadingVisibility = false;
                });
            }
            else if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.PROGRAM) {
                this.advisingStudentInfoReportService.getAdvisingStudentInfoByDepartmentIdAndProgramId(this.selectedDeptId, this.selectedProgramId).then(function (res) {
                    _this.advisingStudentInfoList = res;
                    _this.advisingStudentInfoListTmp = res;
                    _this.loadingVisibility = false;
                });
            }
            else if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.PROGRAM_YEAR_SEMESTER) {
                this.advisingStudentInfoReportService.getAdvisingStudentInfoByDepartmentIdAndProgramIdAndYearSemester(this.selectedDeptId, this.selectedProgramId, this.selectedAcademicYearId, this.selectedAcademicSemesterId).then(function (res) {
                    _this.advisingStudentInfoList = res;
                    _this.advisingStudentInfoListTmp = res;
                    _this.loadingVisibility = false;
                });
            }
            else if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.TEACHER) {
                this.advisingStudentInfoReportService.getAdvisingStudentInfoByDepartmentIdAndTeacherId(this.selectedDeptId, this.selectedTeacherId).then(function (res) {
                    _this.advisingStudentInfoList = res;
                    _this.advisingStudentInfoListTmp = res;
                    _this.loadingVisibility = false;
                });
            }
        };
        AdvisingStudentInfoReport.prototype.getExcelVersionAdvisingStudentInfoReport = function () {
            if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.DEPARTMENT) {
                this.advisingStudentInfoReportService.downloadAdvisingStudentInfoReportExcelFileByDepartmentId(this.selectedDeptId, this.selectedDeptName);
            }
            else if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.PROGRAM) {
                this.advisingStudentInfoReportService.downloadAdvisingStudentInfoReportExcelFileByDepartmentIdAndProgramId(this.selectedDeptId, this.selectedDeptName, this.selectedProgramId, this.selectedProgramName);
            }
            else if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.PROGRAM_YEAR_SEMESTER) {
                this.advisingStudentInfoReportService.downloadAdvisingStudentInfoReportExcelFileByDepartmentIdAndProgramIdAndYearSemester(this.selectedDeptId, this.selectedDeptName, this.selectedProgramId, this.selectedProgramName, this.selectedAcademicYearId, this.selectedAcademicSemesterId);
            }
            else if (this.selectedFilterTypeId == AdvisingStudentInfoReportFilterType.TEACHER) {
                this.advisingStudentInfoReportService.downloadAdvisingStudentInfoReportExcelFileByDepartmentIdAndTeacherId(this.selectedDeptId, this.selectedDeptName, this.selectedTeacherId, this.selectedTeacherName);
            }
        };
        AdvisingStudentInfoReport.prototype.clearTableData = function () {
            this.advisingStudentInfoList = [];
            this.advisingStudentInfoListTmp = [];
        };
        AdvisingStudentInfoReport.prototype.redirectToAssignAdvisorPage = function () {
            this.$window.open('https://' + location.hostname + '/ums-web/iums/#/studentAdviser', '_self');
        };
        AdvisingStudentInfoReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'AdvisingStudentInfoReportService', 'userService', 'employeeService', 'additionalRolePermissionsService'];
        return AdvisingStudentInfoReport;
    }());
    ums.UMS.controller("AdvisingStudentInfoReport", AdvisingStudentInfoReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdvisingStudentInfoReportService = (function () {
        function AdvisingStudentInfoReportService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        AdvisingStudentInfoReportService.prototype.getAdvisingStudentInfoByDepartmentId = function (departmentId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/advisingStudentInfo/departmentId/" + departmentId, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                _this.notify.error("Error in fetching Advising student info");
            });
            return defer.promise;
        };
        AdvisingStudentInfoReportService.prototype.downloadAdvisingStudentInfoReportExcelFileByDepartmentId = function (departmentId, departmentName) {
            var _this = this;
            var fileName = "AdvisingStudentInfoReport_" + departmentName;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "/ums-webservice-academic/academic/advisingStudentInfo/excelReport/departmentId/" + departmentId;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                _this.notify.success("Successfully downloaded");
            }, function (response) {
            }, 'arraybuffer');
        };
        AdvisingStudentInfoReportService.prototype.getAdvisingStudentInfoByDepartmentIdAndProgramId = function (departmentId, programId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/advisingStudentInfo/departmentId/" + departmentId + "/programId/" + programId, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                _this.notify.error("Error in fetching Advising student info");
            });
            return defer.promise;
        };
        AdvisingStudentInfoReportService.prototype.downloadAdvisingStudentInfoReportExcelFileByDepartmentIdAndProgramId = function (departmentId, departmentName, programId, programName) {
            var _this = this;
            var program = programName.replace(/[^\w]/gi, '_');
            var fileName = "AdvisingStudentInfoReport_" + departmentName + "_" + program;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "/ums-webservice-academic/academic/advisingStudentInfo/excelReport/departmentId/" + departmentId + "/programId/" + programId;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                _this.notify.success("Successfully downloaded");
            }, function (response) {
            }, 'arraybuffer');
        };
        AdvisingStudentInfoReportService.prototype.getAdvisingStudentInfoByDepartmentIdAndProgramIdAndYearSemester = function (departmentId, programId, year, semester) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/advisingStudentInfo/departmentId/" + departmentId + "/programId/" + programId + "/year/" + year + "/semester/" + semester, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                _this.notify.error("Error in fetching Advising student info");
            });
            return defer.promise;
        };
        AdvisingStudentInfoReportService.prototype.downloadAdvisingStudentInfoReportExcelFileByDepartmentIdAndProgramIdAndYearSemester = function (departmentId, departmentName, programId, programName, year, semester) {
            var _this = this;
            var program = programName.replace(/[^\w]/gi, '_');
            //var fileName = "AdvisingStudentInfoReport_"+departmentName+"_"+program+"_"+year+"_"+semester;
            var fileName = "AdvisingStudentInfoReport_" + departmentName + "_" + program;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "/ums-webservice-academic/academic/advisingStudentInfo/excelReport/departmentId/" + departmentId + "/programId/" + programId + "/year/" + year + "/semester/" + semester;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                _this.notify.success("Successfully downloaded");
            }, function (response) {
            }, 'arraybuffer');
        };
        AdvisingStudentInfoReportService.prototype.getAdvisingStudentInfoByDepartmentIdAndTeacherId = function (departmentId, teacherId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/advisingStudentInfo/departmentId/" + departmentId + "/teacherId/" + teacherId, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data);
            }, function (response) {
                _this.notify.error("Error in fetching Advising student info");
            });
            return defer.promise;
        };
        AdvisingStudentInfoReportService.prototype.downloadAdvisingStudentInfoReportExcelFileByDepartmentIdAndTeacherId = function (departmentId, departmentName, teacherId, teacherName) {
            var _this = this;
            var teacher = teacherName.replace(/[^\w]/gi, '_');
            var fileName = "AdvisingStudentInfoReport_" + departmentName + "_" + teacher;
            var contentType = ums.UmsUtil.getFileContentType('xls');
            var url = "/ums-webservice-academic/academic/advisingStudentInfo/excelReport/departmentId/" + departmentId + "/teacherId/" + teacherId;
            this.httpClient.get(url, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
                _this.notify.success("Successfully downloaded");
            }, function (response) {
            }, 'arraybuffer');
        };
        AdvisingStudentInfoReportService.$inject = ['$q', 'HttpClient', 'notify'];
        return AdvisingStudentInfoReportService;
    }());
    ums.AdvisingStudentInfoReportService = AdvisingStudentInfoReportService;
    ums.UMS.service("AdvisingStudentInfoReportService", AdvisingStudentInfoReportService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionInfoReportType;
    (function (AdmissionInfoReportType) {
        AdmissionInfoReportType["ADMISSION"] = "Admission";
        AdmissionInfoReportType["ADMISSION_CANCELLATION"] = "AdmissionCancellation";
        AdmissionInfoReportType["ADMISSION_MIGRATION"] = "AdmissionMigration";
    })(AdmissionInfoReportType || (AdmissionInfoReportType = {}));
    var AdmissionInfoReport = (function () {
        function AdmissionInfoReport(appConstants, httpClient, $q, notify, $sce, $window, admissionCancellationInfoService, migratedStudentsInfoService, userService, semesterService, admittedStudentsInfoService, additionalRolePermissionsService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.admissionCancellationInfoService = admissionCancellationInfoService;
            this.migratedStudentsInfoService = migratedStudentsInfoService;
            this.userService = userService;
            this.semesterService = semesterService;
            this.admittedStudentsInfoService = admittedStudentsInfoService;
            this.additionalRolePermissionsService = additionalRolePermissionsService;
            this.programTypeList = angular.copy(this.appConstants.programType);
            this.programTypeList = this.programTypeList.filter(function (f) { return f.id == '11'; });
            this.selectedProgramTypeId = +this.programTypeList[0].id;
            this.selectedProgramTypeName = this.programTypeList[0].name;
            this.admissionInfoReportTypeList = [
                { id: '', name: 'Select Type' },
                { id: 'Admission', name: 'Admission' },
                { id: 'AdmissionCancellation', name: 'Admission Cancellation' },
                { id: 'AdmissionMigration', name: 'Admission Migration' }
            ];
            this.selectedReportTypeId = this.admissionInfoReportTypeList[0].id;
            this.selectedReportTypeName = this.admissionInfoReportTypeList[0].name;
            this.isRightDivAvailable = false;
            this.loadingVisibility = false;
            this.itemPerPage = 20;
            this.currentPageNumber = 1;
            this.showAllPrograms = false;
            this.getSemesters();
            this.getProgramListByLoggedInUserDeptId();
        }
        AdmissionInfoReport.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 4, ums.UmsUtil.SEMESTER_FETCH_ALL_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == ums.Utils.SEMESTER_STATUS_ACTIVE) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.selectedSemesterName = _this.semester.name;
            });
        };
        AdmissionInfoReport.prototype.semesterChanged = function (semester) {
            this.selectedSemesterId = semester.id;
            this.selectedSemesterName = semester.name;
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        AdmissionInfoReport.prototype.programTypeChanged = function (id) {
            this.selectedProgramTypeName = this.programTypeList.filter(function (f) { return f.id == id; })[0].name;
            this.getProgramListByLoggedInUserDeptId();
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        AdmissionInfoReport.prototype.programNameChanged = function (id) {
            this.selectedProgramName = this.filteredProgramList.filter(function (f) { return f.id == id; })[0].name;
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        AdmissionInfoReport.prototype.admissionInfoReportTypeChanged = function (id) {
            this.selectedReportTypeName = this.admissionInfoReportTypeList.filter(function (f) { return f.id == id; })[0].name;
            this.isRightDivAvailable = false;
            this.clearTableData();
        };
        AdmissionInfoReport.prototype.getProgramListByLoggedInUserDeptId = function () {
            var _this = this;
            this.isProgramFound = false;
            this.programList = [];
            if (this.selectedProgramTypeId == ums.Utils.UG) {
                this.programList = [
                    { id: 110100, name: 'Bsc in ARC', deptId: '01' },
                    { id: 110200, name: 'BBA', deptId: '02' },
                    { id: 110300, name: 'Bsc in CE', deptId: '03' },
                    { id: 110400, name: 'Bsc in CSE', deptId: '04' },
                    { id: 110500, name: 'Bsc in EEE', deptId: '05' },
                    { id: 110600, name: 'Bsc in TE', deptId: '06' },
                    { id: 110707, name: 'Bsc in IPE', deptId: '07' },
                    { id: 110708, name: 'Bsc in ME', deptId: '07' }
                ];
            }
            else {
                // todo: will implement later
            }
            this.filteredProgramList = [];
            var currentUserInfoResponse = this.userService.fetchCurrentUserInfo();
            var userAdditionalRolePermissionsResponse = this.additionalRolePermissionsService.fetchLoggedUserAdditionalRolePermissions();
            this.$q.all([currentUserInfoResponse, userAdditionalRolePermissionsResponse]).then(function (response) {
                _this.loggedInUser = response[0];
                _this.roleId = _this.loggedInUser.roleId;
                _this.additionalRolePermissions = response[1];
                _this.additionalRolePermissions.forEach(function (f) {
                    if (f.roleId == ums.Utils.ICT_DIRECTOR || f.roleId == ums.Utils.DEPT_HEAD) {
                        _this.roleId = f.roleId;
                        return;
                    }
                });
                if (_this.roleId == ums.Utils.S_ADMIN || _this.roleId == ums.Utils.ICT_DIRECTOR || _this.roleId == ums.Utils.ASSISTANT_ADMINISTRATIVE_OFFICER_REG || _this.roleId == ums.Utils.SYSTEM_ENGINEER
                    || _this.roleId == ums.Utils.DEPT_HEAD) {
                    _this.showAllPrograms = true;
                }
                else {
                    _this.showAllPrograms = false;
                }
                if (_this.showAllPrograms) {
                    _this.filteredProgramList = angular.copy(_this.programList);
                }
                else {
                    _this.programList.forEach(function (p) {
                        if (p.deptId == _this.loggedInUser.departmentId)
                            _this.filteredProgramList.push(p);
                    });
                }
                if (_this.filteredProgramList.length > 0) {
                    _this.isProgramFound = true;
                }
                if (_this.filteredProgramList.length == 0 || _this.filteredProgramList.length > 1) {
                    _this.filteredProgramList.unshift({ id: 0, name: 'Select Program', deptId: '' });
                }
                _this.selectedProgramId = _this.filteredProgramList[0].id;
                _this.selectedProgramName = _this.filteredProgramList[0].name;
                if (_this.selectedProgramId == _this.appConstants.ugProgramEnum.BBA) {
                    _this.admissionInfoReportTypeList = _this.admissionInfoReportTypeList.filter(function (f) { return f.id != AdmissionInfoReportType.ADMISSION_MIGRATION; });
                }
            });
        };
        AdmissionInfoReport.prototype.search = function () {
            if (this.isSemesterStarted(this.semester)) {
                this.searchForAdmissionInfo();
            }
            else {
                this.notify.warn("Semester: " + this.selectedSemesterName + " has not been started yet!");
            }
        };
        AdmissionInfoReport.prototype.searchForAdmissionInfo = function () {
            this.admissionInfoListLength = 0;
            var eligibleForSearch = false;
            if ((!this.isProgramFound) || (this.filteredProgramList.length > 1)) {
                if (this.selectedProgramId == this.filteredProgramList[0].id || this.selectedReportTypeId == this.admissionInfoReportTypeList[0].id) {
                    this.notify.warn("Program/Report Type must be selected!");
                }
                else {
                    eligibleForSearch = true;
                }
            }
            else {
                if (this.selectedReportTypeId == this.admissionInfoReportTypeList[0].id) {
                    this.notify.warn("Report Type must be selected!");
                }
                else {
                    eligibleForSearch = true;
                }
            }
            if (eligibleForSearch) {
                this.isRightDivAvailable = true;
                ums.Utils.expandRightDiv();
                this.cancelledStudentsInfoList = [];
                this.cancelledStudentsInfoListTmp = [];
                this.migratedStudentsInfoList = [];
                this.migratedStudentsInfoListTmp = [];
                this.loadingVisibility = true;
                if (this.selectedReportTypeId == AdmissionInfoReportType.ADMISSION_CANCELLATION) {
                    this.fetchAdmissionCancellationInfo();
                }
                else if (this.selectedReportTypeId == AdmissionInfoReportType.ADMISSION_MIGRATION) {
                    this.fetchAdmissionMigrationInfo();
                }
                else if (this.selectedReportTypeId == AdmissionInfoReportType.ADMISSION) {
                    this.fetchAdmittedStudentsInfo();
                }
            }
        };
        AdmissionInfoReport.prototype.fetchAdmissionCancellationInfo = function () {
            var _this = this;
            this.admissionCancellationInfoService.getAdmissionCancellationInfo(this.selectedSemesterId, this.selectedProgramId).then(function (res) {
                _this.cancelledStudentsInfoList = res;
                _this.cancelledStudentsInfoListTmp = res;
                _this.admissionInfoListLength = _this.cancelledStudentsInfoList.length;
                _this.loadingVisibility = false;
            });
        };
        AdmissionInfoReport.prototype.fetchAdmissionMigrationInfo = function () {
            var _this = this;
            this.migratedStudentsInfoService.getMigratedStudentsInfo(this.selectedSemesterId, this.selectedProgramId).then(function (res) {
                _this.migratedStudentsInfoList = res;
                _this.migratedStudentsInfoListTmp = res;
                _this.admissionInfoListLength = _this.migratedStudentsInfoList.length;
                _this.loadingVisibility = false;
            });
        };
        AdmissionInfoReport.prototype.fetchAdmittedStudentsInfo = function () {
            var _this = this;
            this.admittedStudentsInfoService.getAdmittedStudentsInfo(this.selectedSemesterId, this.selectedProgramId).then(function (res) {
                _this.admittedStudentsInfoList = res;
                _this.admittedStudentsInfoListTmp = res;
                _this.admissionInfoListLength = _this.admittedStudentsInfoList.length;
                _this.loadingVisibility = false;
            });
        };
        AdmissionInfoReport.prototype.clearTableData = function () {
            this.cancelledStudentsInfoList = [];
            this.cancelledStudentsInfoListTmp = [];
            this.migratedStudentsInfoList = [];
            this.migratedStudentsInfoListTmp = [];
            this.admittedStudentsInfoList = [];
            this.admittedStudentsInfoListTmp = [];
        };
        AdmissionInfoReport.prototype.getExcelVersionAdmissionInfoReport = function () {
            if (this.selectedReportTypeId == AdmissionInfoReportType.ADMISSION_CANCELLATION) {
                this.admissionCancellationInfoService.downloadAdmissionCancellationInfoReportExcelFile(this.selectedProgramTypeName, this.selectedSemesterId, this.selectedSemesterName, this.selectedProgramId, this.selectedProgramName);
            }
            else if (this.selectedReportTypeId == AdmissionInfoReportType.ADMISSION_MIGRATION) {
                this.migratedStudentsInfoService.downloadMigratedStudentsInfoReportExcelFile(this.selectedProgramTypeName, this.selectedSemesterId, this.selectedSemesterName, this.selectedProgramId, this.selectedProgramName);
            }
            else if (this.selectedReportTypeId == AdmissionInfoReportType.ADMISSION) {
                this.admittedStudentsInfoService.downloadAdmittedStudentsInfoReportExcelFile(this.selectedProgramTypeName, this.selectedSemesterId, this.selectedSemesterName, this.selectedProgramId, this.selectedProgramName);
            }
        };
        AdmissionInfoReport.prototype.isSemesterStarted = function (semester) {
            var startDate = semester.startDate.replace(/\//g, "-");
            if (!ums.Utils.isNullOrUndefined(startDate)) {
                var startDateInDateFormat = ums.Utils.stringToDate(startDate, "DD-MM-YYYY", "-");
                startDateInDateFormat.setDate(startDateInDateFormat.getDate() - 7);
                var currentDate = ums.Utils.stringToDate(moment(new Date()).format("DD-MM-YYYY"), "DD-MM-YYYY", "-");
                if (currentDate >= startDateInDateFormat) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        };
        AdmissionInfoReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'AdmissionCancellationInfoService', 'MigratedStudentsInfoService', 'userService', 'semesterService', 'AdmittedStudentsInfoService', 'additionalRolePermissionsService'];
        return AdmissionInfoReport;
    }());
    ums.UMS.controller("AdmissionInfoReport", AdmissionInfoReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentDetailsReport = (function () {
        function StudentDetailsReport(appConstants, httpClient, $q, notify, $sce, $window, semesterService, studentDetailsReportService, courseService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.studentDetailsReportService = studentDetailsReportService;
            this.courseService = courseService;
            this.isRightDivAvailable = false;
            this.programList = this.appConstants.programs;
            this.selectedProgramId = this.programList[0].id;
            this.selectedProgramName = this.programList[0].name;
            //this.academicYearList = this.appConstants.academicYear;
            //this.academicYearList = this.academicYearList.map(x => ({id: Number(x.id), name: x.name}));
            //this.selectedAcademicYearId = this.academicYearList[0].id;
            //this.selectedAcademicYearName = this.academicYearList[0].name;
            //this.academicSemesterList = this.appConstants.academicSemester;
            //this.academicSemesterList = this.academicSemesterList.map(x => ({id: Number(x.id), name: x.name}));
            //this.selectedAcademicSemesterId = this.academicSemesterList[0].id;
            //this.selectedAcademicSemesterName = this.academicSemesterList[0].name;
            this.academicYearSemesterList = this.appConstants.yearSemester;
            this.examTypeList = this.appConstants.examType;
            this.selectedExamTypeId = this.examTypeList[0].id;
            this.selectedExamTypeName = this.examTypeList[0].name;
            this.verifiedRegisteredStudentStatusList = this.appConstants.verifiedRegisteredStudentStatus;
            this.selectedVerifiedRegisteredStudentStatusId = this.verifiedRegisteredStudentStatusList[0].id;
            this.selectedVerifiedRegisteredStudentStatusName = this.verifiedRegisteredStudentStatusList[0].name;
            this.selectedAcademicYearSemesterId = this.academicYearSemesterList[0].id;
            this.selectedAcademicYearSemesterName = this.academicYearSemesterList[0].name;
            this.selectedAcademicYearId = 0;
            this.selectedAcademicSemesterId = 0;
            this.allExamType = 0;
            this.totalRaForwardedStudentCount = 0;
            this.loadingVisibility = false;
            this.courseNo = "";
            this.allCourse = true;
            this.getSemesters();
        }
        StudentDetailsReport.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == ums.Utils.SEMESTER_STATUS_ACTIVE) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
            });
        };
        StudentDetailsReport.prototype.getCourses = function (courseNo) {
            var _this = this;
            this.courseNo = courseNo;
            if (this.courseNo.length > 1) {
                console.log('[#####]Requesting Id:' + this.courseNo);
                this.courseList = [];
                this.selectedCourse = null;
                this.courseService.getLikelyCourses(this.selectedSemesterId, this.selectedProgramId, this.selectedAcademicYearId, this.selectedAcademicSemesterId, this.courseNo).then(function (data) {
                    _this.courseList = data;
                    console.log("courseList");
                });
            }
        };
        StudentDetailsReport.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.isRightDivAvailable = false;
            this.tableDataReset();
        };
        StudentDetailsReport.prototype.programNameChanged = function (id) {
            this.selectedProgramName = this.programList.filter(function (f) { return f.id == id; })[0].name;
            this.selectedProgramId = id;
            this.isRightDivAvailable = false;
            this.tableDataReset();
        };
        /*public academicYearChanged(id: any): void {
            this.selectedAcademicYearName = this.academicYearList.filter(f => f.id == id)[0].name;
            this.selectedAcademicYearId = id;
            this.isRightDivAvailable = false;
            this.tableDataReset();
        }

        public academicSemesterChanged(id: any): void {
            this.selectedAcademicSemesterName = this.academicSemesterList.filter(f => f.id == id)[0].name;
            this.selectedAcademicSemesterId = id;
            this.isRightDivAvailable = false;
            this.tableDataReset();
        }*/
        StudentDetailsReport.prototype.academicYearSemesterChanged = function (id) {
            this.selectedAcademicYearSemesterName = this.academicYearSemesterList.filter(function (f) { return f.id == id; })[0].name;
            this.selectedAcademicYearSemesterId = id;
            this.isRightDivAvailable = false;
            this.tableDataReset();
        };
        StudentDetailsReport.prototype.examTypeChanged = function (id) {
            this.selectedExamTypeName = this.examTypeList.filter(function (f) { return f.id == id; })[0].name;
            this.selectedExamTypeId = id;
            this.isRightDivAvailable = false;
            //this.tableDataReset();
        };
        StudentDetailsReport.prototype.verifiedRegisteredStudentStatusChanged = function (id) {
            var _this = this;
            this.selectedVerifiedRegisteredStudentStatusName = this.verifiedRegisteredStudentStatusList.filter(function (f) { return f.id == id; })[0].name;
            this.selectedVerifiedRegisteredStudentStatusId = id;
            if (this.selectedVerifiedRegisteredStudentStatusId == this.verifiedRegisteredStudentStatusList[this.verifiedRegisteredStudentStatusList.length - 1].id) {
                this.selectedExamTypeId = this.examTypeList[this.examTypeList.length - 1].id;
                this.selectedExamTypeName = this.examTypeList.filter(function (f) { return f.id == _this.selectedExamTypeId; })[0].name;
            }
            this.isRightDivAvailable = false;
            this.tableDataReset();
        };
        StudentDetailsReport.prototype.tableDataReset = function () {
            this.studentDetailsList = [];
            this.studentDetailsListTmp = [];
        };
        StudentDetailsReport.prototype.searchForStudentDetailsReportInfo = function () {
            var _this = this;
            this.allCourse = true;
            this.isRightDivAvailable = true;
            ums.Utils.expandRightDiv();
            if (this.selectedAcademicYearSemesterId.length > 1) {
                this.selectedAcademicYearId = Number(this.selectedAcademicYearSemesterId[0]);
                this.selectedAcademicSemesterId = Number(this.selectedAcademicYearSemesterId[1]);
            }
            this.loadingVisibility = true;
            this.studentDetailsReportService.getStudentDetailsReportInformation(this.selectedSemesterId, this.selectedProgramId, this.selectedAcademicYearId, this.selectedAcademicSemesterId).then(function (res) {
                _this.studentDetailsList = [];
                _this.studentDetailsList = res;
                //this.loadingVisibility = false;
                if (_this.selectedVerifiedRegisteredStudentStatusId != _this.verifiedRegisteredStudentStatusList[0].id) {
                    _this.studentDetailsList = _this.studentDetailsList.filter(function (f) { return f.status == _this.selectedVerifiedRegisteredStudentStatusId; });
                }
                _this.studentDetailsList.forEach(function (studentDetails) {
                    studentDetails.status = _this.verifiedRegisteredStudentStatusList.filter(function (f) { return f.id == studentDetails.status; })[0].name;
                    studentDetails.registeredCourses = studentDetails.registeredCourses.filter(function (f) { return f.examTypeId == _this.selectedExamTypeId; });
                });
                _this.totalRaForwardedStudentCount = _this.studentDetailsList.filter(function (f) { return f.registeredCourses.some(function (regCourse) { return regCourse.raForwarded == true; }); }).length;
                _this.loadingVisibility = false;
                _this.studentDetailsListTmp = angular.copy(_this.studentDetailsList);
            });
        };
        StudentDetailsReport.prototype.searchCoursewiseStudentDetailsReport = function () {
            var _this = this;
            if (this.selectedCourse) {
                this.allCourse = false;
                this.selectedCourseNo = this.selectedCourse.no;
                if (this.selectedAcademicYearSemesterId.length > 1) {
                    this.selectedAcademicYearId = Number(this.selectedAcademicYearSemesterId[0]);
                    this.selectedAcademicSemesterId = Number(this.selectedAcademicYearSemesterId[1]);
                }
                this.loadingVisibility = true;
                this.studentDetailsReportService.getStudentDetailsReportInformationByCourse(this.selectedSemesterId, this.selectedProgramId, this.selectedAcademicYearId, this.selectedAcademicSemesterId, this.selectedCourseNo).then(function (res) {
                    _this.studentDetailsList = [];
                    _this.studentDetailsList = res;
                    //this.loadingVisibility = false;
                    if (_this.selectedVerifiedRegisteredStudentStatusId != _this.verifiedRegisteredStudentStatusList[0].id) {
                        _this.studentDetailsList = _this.studentDetailsList.filter(function (f) { return f.status == _this.selectedVerifiedRegisteredStudentStatusId; });
                    }
                    _this.studentDetailsList.forEach(function (studentDetails) {
                        studentDetails.status = _this.verifiedRegisteredStudentStatusList.filter(function (f) { return f.id == studentDetails.status; })[0].name;
                        studentDetails.registeredCourses = studentDetails.registeredCourses.filter(function (f) { return f.examTypeId == _this.selectedExamTypeId; });
                    });
                    _this.totalRaForwardedStudentCount = _this.studentDetailsList.filter(function (f) { return f.registeredCourses.some(function (regCourse) { return regCourse.raForwarded == true; }); }).length;
                    _this.loadingVisibility = false;
                    _this.studentDetailsListTmp = angular.copy(_this.studentDetailsList);
                });
            }
            else
                this.searchForStudentDetailsReportInfo();
        };
        StudentDetailsReport.prototype.getPdfVersionStudentDetailsReport = function () {
            this.getStudentDetailsReportPdf(this.selectedSemesterId, this.selectedProgramId, this.selectedAcademicYearId, this.selectedAcademicSemesterId, this.selectedVerifiedRegisteredStudentStatusId, this.selectedExamTypeId);
        };
        StudentDetailsReport.prototype.getPdfVersionStudentDetailsReportAllExamTypes = function () {
            if (this.selectedAcademicYearSemesterId.length > 1) {
                this.selectedAcademicYearId = Number(this.selectedAcademicYearSemesterId[0]);
                this.selectedAcademicSemesterId = Number(this.selectedAcademicYearSemesterId[1]);
            }
            this.getStudentDetailsReportPdf(this.selectedSemesterId, this.selectedProgramId, this.selectedAcademicYearId, this.selectedAcademicSemesterId, this.selectedVerifiedRegisteredStudentStatusId, this.allExamType);
        };
        StudentDetailsReport.prototype.getStudentDetailsReportPdf = function (semesterId, programId, year, semester, status, examType) {
            if (this.selectedProgramId != this.programList[0].id && this.selectedAcademicYearId != Number(this.academicYearSemesterList[0].id) && this.selectedAcademicSemesterId != Number(this.academicYearSemesterList[0].id)) {
                if (this.allCourse)
                    this.studentDetailsReportService.getStudentDetailsReportPdf(semesterId, programId, year, semester, status, examType);
                else
                    this.studentDetailsReportService.getStudentDetailsReportPdfByCourse(semesterId, programId, year, semester, status, examType, this.selectedCourseNo);
            }
            else {
                this.notify.warn("Program/Year-Semester must be selected");
            }
        };
        StudentDetailsReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'StudentDetailsReportService', 'courseService'];
        return StudentDetailsReport;
    }());
    ums.UMS.controller("StudentDetailsReport", StudentDetailsReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentDetailsReportService = (function () {
        function StudentDetailsReportService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        StudentDetailsReportService.prototype.getStudentDetailsReportInformation = function (semesterId, programId, year, semester) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/studentDetailsReport/getRegisteredStudentList/semester-id/" + semesterId + "/program-id/" + programId + "/year/" + year + "/semester/" + semester, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching Student details report information");
            });
            return defer.promise;
        };
        StudentDetailsReportService.prototype.getStudentDetailsReportInformationByCourse = function (semesterId, programId, year, semester, courseId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/studentDetailsReport/getRegisteredStudentListByCourse/semester-id/" + semesterId + "/program-id/" + programId + "/year/" + year + "/semester/" + semester + "/courseId/" + courseId, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching Student details report information");
            });
            return defer.promise;
        };
        StudentDetailsReportService.prototype.getStudentDetailsReportPdf = function (semesterId, programId, year, semester, status, examType) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Detailed_Information_of_Students_" + semesterId + "_" + programId;
            this.httpClient.get("/ums-webservice-academic/academic/studentDetailsReport/pdf/semester-id/" + semesterId + "/program-id/" + programId + "/year/" + year + "/semester/" + semester + "/status/" + status + "/exam-type/" + examType, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        StudentDetailsReportService.prototype.getStudentDetailsReportPdfByCourse = function (semesterId, programId, year, semester, status, examType, courseId) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Detailed_Information_of_Students_" + semesterId + "_" + programId;
            this.httpClient.get("/ums-webservice-academic/academic/studentDetailsReport/pdf/filteredByCourse/semester-id/" + semesterId + "/program-id/" + programId + "/year/" + year + "/semester/" + semester + "/status/" + status + "/exam-type/" + examType + "/courseId/" + courseId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        StudentDetailsReportService.$inject = ['$q', 'HttpClient', 'notify'];
        return StudentDetailsReportService;
    }());
    ums.StudentDetailsReportService = StudentDetailsReportService;
    ums.UMS.service("StudentDetailsReportService", StudentDetailsReportService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TotalRegisteredStudentsCountReport = (function () {
        function TotalRegisteredStudentsCountReport(appConstants, httpClient, $q, notify, $sce, $window, semesterService, totalRegisteredStudentsCountReportService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.totalRegisteredStudentsCountReportService = totalRegisteredStudentsCountReportService;
            this.isRightDivAvailable = false;
            this.programList = this.appConstants.programs;
            this.selectedProgramId = this.programList[0].id;
            this.selectedProgramName = this.programList[0].name;
            this.loadingVisibility = false;
            this.getSemesters();
        }
        TotalRegisteredStudentsCountReport.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == ums.Utils.SEMESTER_STATUS_ACTIVE) {
                        _this.semester = semesters[i];
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
            });
        };
        TotalRegisteredStudentsCountReport.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.isRightDivAvailable = false;
            this.tableDataReset();
        };
        TotalRegisteredStudentsCountReport.prototype.programNameChanged = function (id) {
            this.selectedProgramName = this.programList.filter(function (f) { return f.id == id; })[0].name;
            this.selectedProgramId = id;
            this.isRightDivAvailable = false;
            this.tableDataReset();
        };
        TotalRegisteredStudentsCountReport.prototype.searchForRegisteredStudentsCountInfo = function () {
            var _this = this;
            this.isRightDivAvailable = true;
            ums.Utils.expandRightDiv();
            //this.loadingVisibility = true;
            this.totalRegisteredStudentsCountReportService.getRegisteredStudentsCountReportInformation(this.selectedSemesterId, this.selectedProgramId).then(function (res) {
                _this.totalRegisteredStudentsCount = {};
                _this.totalRegisteredStudentsCount = res;
                _this.programWiseRegisteredStudentsCountList = [];
                _this.programWiseRegisteredStudentsCountList = _this.totalRegisteredStudentsCount.registeredStudentsCount;
                //this.loadingVisibility = false;
                _this.programWiseRegisteredStudentsCountListTmp = angular.copy(_this.programWiseRegisteredStudentsCountList);
            });
        };
        TotalRegisteredStudentsCountReport.prototype.tableDataReset = function () {
            this.programWiseRegisteredStudentsCountList = [];
            this.programWiseRegisteredStudentsCountListTmp = [];
        };
        TotalRegisteredStudentsCountReport.prototype.getPdfVersionTotalRegisteredStudentsCountReport = function () {
            if (this.selectedProgramId != this.programList[0].id) {
                this.totalRegisteredStudentsCountReportService.getProgramWiseStudentDetailsReportPdf(this.selectedSemesterId, this.selectedProgramId);
            }
            else {
                this.notify.warn("Please select a Program");
            }
        };
        TotalRegisteredStudentsCountReport.prototype.getPdfVersionTotalRegisteredStudentsCountReportAllProgramTypes = function () {
            this.totalRegisteredStudentsCountReportService.getAllProgramWiseStudentDetailsReportPdf(this.selectedSemesterId);
        };
        TotalRegisteredStudentsCountReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'TotalRegisteredStudentsCountReportService'];
        return TotalRegisteredStudentsCountReport;
    }());
    ums.UMS.controller("TotalRegisteredStudentsCountReport", TotalRegisteredStudentsCountReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TotalRegisteredStudentsCountReportService = (function () {
        function TotalRegisteredStudentsCountReportService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        TotalRegisteredStudentsCountReportService.prototype.getRegisteredStudentsCountReportInformation = function (semesterId, programId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/academic/totalRegisteredStudentsCountReport/getTotalRegisteredStudentsCount/semester-id/" + semesterId + "/program-id/" + programId, ums.HttpClient.MIME_TYPE_JSON, function (data, etag) {
                defer.resolve(data.entries);
            }, function (response) {
                console.error(response);
                _this.notify.error("Error in fetching Registered Students Count report information");
            });
            return defer.promise;
        };
        TotalRegisteredStudentsCountReportService.prototype.getAllProgramWiseStudentDetailsReportPdf = function (semesterId) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Total_Registered_Students_Count_Report_" + semesterId;
            this.httpClient.get("/ums-webservice-academic/academic/totalRegisteredStudentsCountReport/all-programs-pdf/semester-id/" + semesterId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        TotalRegisteredStudentsCountReportService.prototype.getProgramWiseStudentDetailsReportPdf = function (semesterId, programId) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Total_Registered_Students_Count Report_" + semesterId + "_" + programId;
            this.httpClient.get("/ums-webservice-academic/academic/totalRegisteredStudentsCountReport/program-wise-pdf/semester-id/" + semesterId + "/program-id/" + programId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        TotalRegisteredStudentsCountReportService.$inject = ['$q', 'HttpClient', 'notify'];
        return TotalRegisteredStudentsCountReportService;
    }());
    ums.TotalRegisteredStudentsCountReportService = TotalRegisteredStudentsCountReportService;
    ums.UMS.service("TotalRegisteredStudentsCountReportService", TotalRegisteredStudentsCountReportService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SemesterEnrollmentModel = (function () {
        function SemesterEnrollmentModel(appConstants, httpClient) {
            this.programSelector = new ums.ProgramSelectorModel(appConstants, httpClient);
            this.semesterId = '';
            this.enrollmentType = 0;
            this.getEnrollmentTypes = function () {
                return appConstants.semesterEnrollmentTypes;
            };
            this.status = [];
        }
        return SemesterEnrollmentModel;
    }());
    ums.SemesterEnrollmentModel = SemesterEnrollmentModel;
})(ums || (ums = {}));
/// <reference path='model/SemesterEnrollmentModel.ts'/>
var ums;
(function (ums) {
    var SemesterEnrollment = (function () {
        function SemesterEnrollment($scope, appConstants, httpClient, $q, notify) {
            var _this = this;
            this.$scope = $scope;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            $scope.semesterEnrollmentModel = new ums.SemesterEnrollmentModel(appConstants, httpClient);
            $scope.submit = this.submit.bind(this);
            $scope.$watchGroup(['semesterEnrollmentModel.semesterId',
                'semesterEnrollmentModel.enrollmentType',
                'semesterEnrollmentModel.programSelector.programId'], function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    if ($scope.semesterEnrollmentModel.enrollmentType
                        && $scope.semesterEnrollmentModel.programSelector.programId
                        && $scope.semesterEnrollmentModel.semesterId) {
                        _this.enrollmentStatus($scope.semesterEnrollmentModel.programSelector.programId, $scope.semesterEnrollmentModel.semesterId)
                            .then(function (enrollmentStatus) {
                            _this.$scope.semesterEnrollmentModel.status = enrollmentStatus;
                            _this.$scope.showStatus = true;
                        });
                    }
                }
            });
            $scope.numberWithSuffix = function (n) {
                return ums.UmsUtil.getNumberWithSuffix(n);
            };
        }
        SemesterEnrollment.prototype.enrollmentStatus = function (programId, semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/studentEnrollment'
                + '/program/' + programId
                + '/semester/' + semesterId + '', ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                var enrollmentStatus = json.entries;
                defer.resolve(enrollmentStatus);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        SemesterEnrollment.prototype.submit = function () {
            var _this = this;
            this.httpClient.post('academic/studentEnrollment/enroll/'
                + this.$scope.semesterEnrollmentModel.enrollmentType
                + "/program/"
                + this.$scope.semesterEnrollmentModel.programSelector.programId
                + "/semester/"
                + this.$scope.semesterEnrollmentModel.semesterId, { 'status': this.$scope.semesterEnrollmentModel.status }, 'application/json')
                .success(function (data) {
                _this.notify.show(data);
                _this.enrollmentStatus(_this.$scope.semesterEnrollmentModel.programSelector.programId, _this.$scope.semesterEnrollmentModel.semesterId).then(function (enrollmentStatus) {
                    _this.$scope.semesterEnrollmentModel.status = enrollmentStatus;
                    _this.$scope.showStatus = true;
                });
            }).error(function (data) {
                console.error(data);
            });
        };
        SemesterEnrollment.$inject = ['$scope', 'appConstants', 'HttpClient', '$q', 'notify'];
        return SemesterEnrollment;
    }());
    ums.SemesterEnrollment = SemesterEnrollment;
    ums.UMS.controller("SemesterEnrollment", SemesterEnrollment);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmitCard = (function () {
        function AdmitCard($scope, studentRecordService, appConstants, httpClient, notify) {
            var _this = this;
            this.$scope = $scope;
            this.studentRecordService = studentRecordService;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.notify = notify;
            this.studentRecordService.getCurrentSemesterRecord().then(function (record) {
                if (record.type == "REGULAR" || record.type == "READMITTED")
                    _this.isEligibleForAdmitCard = true;
                else
                    _this.isEligibleForAdmitCard = false;
            });
        }
        AdmitCard.prototype.downloadAdmitCard = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "AdmitCard";
            this.httpClient.get('academic/admitCard/ug', 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        AdmitCard.$inject = ['$scope', 'studentRecordService', 'appConstants', 'HttpClient', 'notify'];
        return AdmitCard;
    }());
    ums.AdmitCard = AdmitCard;
    ums.UMS.controller('AdmitCard', AdmitCard);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentProfile = (function () {
        function StudentProfile($scope, appConstants, httpClient, notify, registrarConstants, countryService, divisionService, districtService, changeRequestService, thanaService) {
            this.$scope = $scope;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.notify = notify;
            this.registrarConstants = registrarConstants;
            this.countryService = countryService;
            this.divisionService = divisionService;
            this.districtService = districtService;
            this.changeRequestService = changeRequestService;
            this.thanaService = thanaService;
            this.$scope.bloodGroupType = [];
            this.$scope.bloodGroupType = this.appConstants.bloodGroup;
            this.$scope.religionType = [];
            this.$scope.religionType = this.registrarConstants.religionTypes;
            this.$scope.personal = 1;
            this.$scope.academic = 2;
            this.$scope.guardian = 3;
            this.$scope.contact = 4;
            this.$scope.tabDetect = 1;
            this.$scope.studentName = "";
            this.$scope.RequestCreatedDate = "";
            this.$scope.changeString = "";
            this.$scope.changeFlag = 0;
            this.$scope.changeParentsFlag = 0;
            this.$scope.changeDobFlag = 0;
            this.$scope.selectedReasonType = "";
            this.$scope.concateStudentName = "";
            this.$scope.tabReferencePath = "#tab-personal";
            this.$scope.isNidValid = true;
            this.$scope.isFatherNameEligibleForUpdate = false;
            this.$scope.isMotherNameEligibleForUpdate = false;
            this.$scope.isDateOfBirthEligbleForUpdate = false;
            this.$scope.studentAddress = {};
            this.$scope.presentAddressDistricts = [];
            this.$scope.permanentAddressDistricts = [];
            this.$scope.allDistricts = [];
            this.$scope.presentAddressThanas = [];
            this.$scope.permanentAddressThanas = [];
            this.$scope.allThanas = [];
            this.$scope.otherThana = {};
            this.$scope.historyList = [];
            $scope.showNewUpdateMsg = false;
            $scope.editProfileMode = false;
            $scope.toggleEditProfile = this.toggleEditProfile.bind(this);
            $scope.cancelEditProfile = this.cancelEditProfile.bind(this);
            $scope.saveProfile = this.saveProfile.bind(this);
            $scope.changePresentAddressFields = this.changePresentAddressFields.bind(this);
            $scope.changePermanentAddressFields = this.changePermanentAddressFields.bind(this);
            $scope.changePresentAddressDistrict = this.changePresentAddressDistrict.bind(this);
            $scope.changePresentAddressThana = this.changePresentAddressThana.bind(this);
            $scope.changePermanentAddressDistrict = this.changePermanentAddressDistrict.bind(this);
            $scope.changePermanentAddressThana = this.changePermanentAddressThana.bind(this);
            $scope.changePresentAddressOtherThana = this.changePresentAddressOtherThana.bind(this);
            $scope.changePermanentAddressOtherThana = this.changePermanentAddressOtherThana.bind(this);
            $scope.sameAsPresentAddress = this.sameAsPresentAddress.bind(this);
            this.$scope.switchTab = this.switchTab.bind(this);
            this.getStudentProfileChangeInfo();
            this.getProfileInfo();
            this.initializeDatePickers();
        }
        StudentProfile.prototype.initializationAddress = function () {
            var _this = this;
            this.countryService.getAll().then(function (countries) {
                _this.$scope.countries = countries;
                if (_this.$scope.studentAddress.preAddressCountry == null || _this.$scope.preAddressCountry == "") {
                    _this.$scope.studentAddress.preAddressCountry = countries.filter(function (country) { return country.id == 18; })[0];
                    _this.notify.info("Present Address is empty");
                    _this.switchTab(4);
                    if ((_this.$scope.student.gender != "" || _this.$scope.student.gender != null) || (_this.$scope.student.religionId != 0 ||
                        _this.$scope.student.religionId != null) || (_this.$scope.student.bloodGroup != "" ||
                        _this.$scope.student.bloodGroup != null)) {
                        var element = document.getElementById('contact');
                        element.click();
                    }
                }
                if (_this.$scope.studentAddress.perAddressCountry == null || _this.$scope.perAddressCountry == "") {
                    _this.$scope.studentAddress.perAddressCountry = countries.filter(function (country) { return country.id == 18; })[0];
                    _this.notify.info("Permanent Address is empty");
                    _this.switchTab(4);
                    if ((_this.$scope.student.gender != "" || _this.$scope.student.gender != null) || (_this.$scope.student.religionId != 0 ||
                        _this.$scope.student.religionId != null) || (_this.$scope.student.bloodGroup != "" ||
                        _this.$scope.student.bloodGroup != null)) {
                        var element = document.getElementById('contact');
                        element.click();
                    }
                }
                if (_this.$scope.student.gender == "" || _this.$scope.student.gender == null) {
                    _this.$scope.tabDetect = _this.$scope.personal;
                    _this.switchTab(1);
                    _this.$scope.tabReferencePath = "#tab-personal";
                    _this.notify.info("Gender is empty");
                }
                if (_this.$scope.student.religionId == 0 || _this.$scope.student.religionId == null) {
                    _this.$scope.tabDetect = _this.$scope.personal;
                    _this.$scope.tabReferencePath = "#tab-personal";
                    _this.notify.info("Religion is empty");
                    _this.switchTab(1);
                }
                if (_this.$scope.student.bloodGroup == "" || _this.$scope.student.bloodGroup == null) {
                    _this.$scope.tabDetect = _this.$scope.personal;
                    _this.$scope.tabReferencePath = "#tab-personal";
                    _this.notify.info("Blood group is empty");
                    _this.switchTab(1);
                }
                _this.divisionService.getAll().then(function (divisions) {
                    _this.$scope.divisions = divisions;
                    _this.districtService.getAll().then(function (districts) {
                        _this.$scope.allDistricts = districts;
                        _this.thanaService.getAll().then(function (thanas) {
                            _this.$scope.allThanas = thanas;
                            _this.changePresentAddressFields();
                            _this.changePermanentAddressFields();
                        });
                    });
                });
            });
        };
        StudentProfile.prototype.switchTab = function (tabIndex) {
            this.$scope.tabDetect = tabIndex;
            if (this.$scope.tabDetect == this.$scope.personal) {
                this.$scope.tabReferencePath = "#tab-personal";
            }
            else if (this.$scope.tabDetect == this.$scope.academic) {
                this.$scope.tabReferencePath = "#tab-academic";
            }
            else if (this.$scope.tabDetect == this.$scope.guardian) {
                this.$scope.tabReferencePath = "#tab-guardian";
            }
            else {
                this.$scope.tabReferencePath = "#tab-contact";
            }
        };
        StudentProfile.prototype.getProfileInfo = function () {
            var _this = this;
            this.httpClient.get('academic/student/profile', ums.HttpClient.MIME_TYPE_JSON, function (response, etag) {
                _this.$scope.student = response;
                if (response.address != undefined) {
                    _this.$scope.studentAddress = response.address;
                }
                var reg = new RegExp('^202002');
                if (reg.test(_this.$scope.student.id)) {
                    _this.$scope.showNewUpdateMsg = false;
                }
                else {
                    _this.$scope.showNewUpdateMsg = true;
                }
                _this.$scope.etag = etag;
                _this.initializationAddress();
                if (ums.UmsUtil.isEmptyString(_this.$scope.student.fatherName)) {
                    _this.$scope.isFatherNameEligibleForUpdate = true;
                }
                else {
                    _this.$scope.isFatherNameEligibleForUpdate = false;
                }
                if (ums.UmsUtil.isEmptyString(_this.$scope.student.motherName)) {
                    _this.$scope.isMotherNameEligibleForUpdate = true;
                }
                else {
                    _this.$scope.isMotherNameEligibleForUpdate = false;
                }
                if (ums.UmsUtil.isEmptyString(_this.$scope.student.dateOfBirth)) {
                    _this.$scope.isDateOfBirthEligbleForUpdate = true;
                }
                else {
                    _this.$scope.isDateOfBirthEligbleForUpdate = false;
                }
            });
        };
        StudentProfile.prototype.getStudentProfileChangeInfo = function () {
            var _this = this;
            this.$scope.requestStatus = [];
            var encodedid = "";
            this.changeRequestService.getChangeRequestHistory().then(function (record) {
                _this.$scope.requestStatus = record.entries;
                console.log("Last Request data=" + _this.$scope.requestStatus);
                console.log("record size=" + record.entries.length);
                console.log("change flag=" + _this.$scope.changeFlag);
                if (record.entries.length > 0) {
                    _this.$scope.changeFlag = 1;
                    _this.$scope.historyList = _this.$scope.requestStatus;
                    console.log("Last Request status=" + JSON.stringify(_this.$scope.requestStatus));
                }
                else {
                    _this.$scope.changeFlag = 0;
                }
            });
        };
        StudentProfile.prototype.correctionHistory = function () {
        };
        StudentProfile.prototype.toggleEditProfile = function () {
            this.$scope.editProfileMode = !this.$scope.editProfileMode;
        };
        StudentProfile.prototype.cancelEditProfile = function () {
            this.$scope.checkBoxValue = false;
            this.getProfileInfo();
            this.toggleEditProfile();
        };
        StudentProfile.prototype.initializeDatePickers = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker({
                    todayHighlight: true,
                    multidate: false,
                    autoclose: true
                });
                $('.datepicker-default').on('change', function () {
                });
            }, 200);
        };
        StudentProfile.prototype.saveProfile = function () {
            var _this = this;
            var validate = this.isValidateSuccessful();
            this.$scope.student.address = this.$scope.studentAddress;
            this.$scope.student.bloodGroup = $("#bloodGroup").val();
            if (validate) {
                this.httpClient.put('academic/student/profile', this.$scope.student, ums.HttpClient.MIME_TYPE_JSON, this.$scope.etag)
                    .success(function (data) {
                    _this.$scope.checkBoxValue = false;
                    _this.toggleEditProfile();
                    _this.getProfileInfo();
                    _this.notify.success("Successfully saved");
                }).error(function (error) {
                    console.error(error);
                    _this.notify.error("Error in saving data");
                });
            }
        };
        StudentProfile.prototype.isValidateSuccessful = function () {
            this.$scope.studentName = this.$scope.student.fullName;
            this.$scope.studentName = this.$scope.studentName.replace(/\s/g, '');
            this.$scope.concateStudentName = this.$scope.student.firstName + this.$scope.student.lastName;
            this.$scope.concateStudentName = this.$scope.concateStudentName.replace(/\s/g, '');
            if (this.$scope.studentName == this.$scope.concateStudentName) {
                var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                var isEmailValid = re.test(String(this.$scope.student.personalEmail).toLowerCase());
                var reg = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;
                var isPhoneNumberValid = reg.test(String(this.$scope.student.mobileNo));
                if (this.$scope.student.fatherName.length < 5 || this.$scope.student.fatherName == null) {
                    this.$scope.tabDetect = this.$scope.personal;
                    this.$scope.tabReferencePath = "#tab-personal";
                    this.notify.info("Father name can not be empty. Min 5 characters needed");
                    return false;
                }
                else if (this.$scope.student.firstName.length < 1 || this.$scope.student.firstName == null) {
                    this.$scope.tabDetect = this.$scope.personal;
                    this.$scope.tabReferencePath = "#tab-personal";
                    this.notify.info("First name can not be empty");
                    return false;
                } /*else if (this.$scope.student.lastName.length < 1 || this.$scope.student.lastName == null) {
                    this.$scope.tabDetect = this.$scope.personal;
                    this.$scope.tabReferencePath = "#tab-personal";
                    this.notify.info("Last name can not be empty");
                    return false;

                }*/
                else if (this.$scope.student.motherName.length < 5 || this.$scope.student.motherName == null) {
                    this.$scope.tabDetect = this.$scope.personal;
                    this.$scope.tabReferencePath = "#tab-personal";
                    this.notify.info("Mother name can not be empty. Min 5 characters needed");
                    return false;
                }
                else if (this.$scope.student.dateOfBirth == "" || this.$scope.student.dateOfBirth == null) {
                    this.$scope.tabDetect = this.$scope.personal;
                    this.$scope.tabReferencePath = "#tab-personal";
                    this.notify.info("Date of Birth can not be empty");
                    return false;
                }
                else if (this.$scope.student.gender == "" || this.$scope.student.gender == null) {
                    this.$scope.tabDetect = this.$scope.personal;
                    this.$scope.tabReferencePath = "#tab-personal";
                    this.notify.info("Gender can not be empty");
                    return false;
                }
                else if (this.$scope.student.bloodGroup == "" || this.$scope.student.bloodGroup == null) {
                    this.$scope.tabDetect = this.$scope.personal;
                    this.$scope.tabReferencePath = "#tab-personal";
                    this.notify.info("Blood group can not be empty");
                    return false;
                }
                else if (this.$scope.student.nid != "") {
                    var len = this.$scope.student.nid.length;
                    if (len != 10 && len != 13 && len != 17) {
                        this.$scope.tabDetect = this.$scope.personal;
                        this.$scope.tabReferencePath = "#tab-personal";
                        this.notify.info("NID number must be 10, 13 or 17 digits");
                        return false;
                    }
                }
                else if (this.$scope.student.religionId == 0 || this.$scope.student.religionId == null) {
                    this.$scope.tabDetect = this.$scope.personal;
                    this.$scope.tabReferencePath = "#tab-personal";
                    this.notify.info("Religion can not be empty");
                    return false;
                }
                else if (this.$scope.student.guardianName.length < 5 || this.$scope.student.guardianName == null) {
                    this.$scope.tabDetect = this.$scope.guardian;
                    this.$scope.tabReferencePath = "#tab-guardian";
                    this.notify.info("Gurdian name can not be empty. Min 5 characters needed");
                    return false;
                }
                else if (this.$scope.student.guardianMobileNo == "" || this.$scope.student.guardianMobileNo == null) {
                    this.$scope.tabDetect = this.$scope.guardian;
                    this.$scope.tabReferencePath = "#tab-guardian";
                    this.notify.info("Gurdian mobile can not be empty");
                    return false;
                }
                else if (this.$scope.student.guardianPhoneNo == "" || this.$scope.student.guardianPhoneNo == null) {
                    this.$scope.tabDetect = this.$scope.guardian;
                    this.$scope.tabReferencePath = "#tab-guardian";
                    this.notify.info("Gurdian phone can not be empty");
                    return false;
                }
                else if (this.$scope.student.mobileNo == "" || this.$scope.student.mobileNo == null) {
                    this.$scope.tabDetect = this.$scope.contact;
                    this.$scope.tabReferencePath = "#tab-contact";
                    this.notify.info("Mobile No can not be empty");
                    return false;
                }
                else if (isEmailValid == false) {
                    this.$scope.tabDetect = this.$scope.contact;
                    this.$scope.tabReferencePath = "#tab-contact";
                    this.notify.info("Not a valid email address");
                    return false;
                }
                else if (this.$scope.studentAddress.preAddressLine1 == "" || this.$scope.studentAddress.preAddressLine1 == null) {
                    this.$scope.tabDetect = this.$scope.contact;
                    this.$scope.tabReferencePath = "#tab-contact";
                    this.notify.info("Present Address line 1 can not be empty");
                    return false;
                }
                else if (this.$scope.studentAddress.preAddressLine1.toLowerCase().includes('division') || this.$scope.studentAddress.preAddressLine1.toLowerCase().includes('district') || this.$scope.studentAddress.preAddressLine1.toLowerCase().includes('thana')) {
                    this.$scope.tabDetect = this.$scope.contact;
                    this.$scope.tabReferencePath = "#tab-contact";
                    this.notify.info("Present Address line 1 contains division/district/thana!! You can not add division/district/thana in this field.");
                    return false;
                }
                else if (this.$scope.studentAddress.preAddressCountry == "" || this.$scope.studentAddress.preAddressCountry == null) {
                    this.$scope.tabDetect = this.$scope.contact;
                    this.$scope.tabReferencePath = "#tab-contact";
                    this.notify.info("Present Address country can not be empty");
                    return false;
                }
                else if (this.$scope.studentAddress.preAddressCountry.name == "Bangladesh") {
                    if (this.$scope.studentAddress.preAddressDistrict == null || this.$scope.studentAddress.preAddressDivision == null || this.$scope.studentAddress.preAddressThana == null) {
                        this.$scope.tabDetect = this.$scope.contact;
                        this.$scope.tabReferencePath = "#tab-contact";
                        this.notify.info("Present Address division/district/thana can not be empty");
                        return false;
                    }
                    else if (this.$scope.studentAddress.preAddressThana.id == 9999) {
                        if (this.$scope.studentAddress.preAddressThanaOther == "" || this.$scope.studentAddress.preAddressThanaOther == null) {
                            this.$scope.tabDetect = this.$scope.contact;
                            this.$scope.tabReferencePath = "#tab-contact";
                            this.notify.info("Present address other thana can not be empty");
                            return false;
                        }
                    }
                }
                if (this.$scope.studentAddress.perAddressLine1 == "" || this.$scope.studentAddress.perAddressLine1 == null) {
                    this.$scope.tabDetect = this.$scope.contact;
                    this.$scope.tabReferencePath = "#tab-contact";
                    this.notify.info("Permanent Address line 1 can not be empty");
                    return false;
                }
                else if (this.$scope.studentAddress.perAddressLine1.toLowerCase().includes('division') || this.$scope.studentAddress.perAddressLine1.toLowerCase().includes('district') || this.$scope.studentAddress.perAddressLine1.toLowerCase().includes('thana')) {
                    this.$scope.tabDetect = this.$scope.contact;
                    this.$scope.tabReferencePath = "#tab-contact";
                    this.notify.info("Permanent Address line 1 contains division/district/thana!! You can not add division/district/thana in this field.");
                    return false;
                }
                else if (this.$scope.studentAddress.perAddressCountry == "" || this.$scope.studentAddress.perAddressCountry == null) {
                    this.$scope.tabDetect = this.$scope.contact;
                    this.$scope.tabReferencePath = "#tab-contact";
                    this.notify.info("Permanent Address country can not be empty");
                    return false;
                }
                else if (this.$scope.studentAddress.perAddressCountry.name == "Bangladesh") {
                    if (this.$scope.studentAddress.perAddressDistrict == null || this.$scope.studentAddress.perAddressDivision == null || this.$scope.studentAddress.perAddressThana == null) {
                        this.$scope.tabDetect = this.$scope.contact;
                        this.$scope.tabReferencePath = "#tab-contact";
                        this.notify.info("Permanent Address division/district/thana can not be empty");
                        return false;
                    }
                    else if (this.$scope.studentAddress.perAddressThana.id == 9999) {
                        if (this.$scope.studentAddress.perAddressThanaOther == "" || this.$scope.studentAddress.perAddressThanaOther == null) {
                            this.$scope.tabDetect = this.$scope.contact;
                            this.$scope.tabReferencePath = "#tab-contact";
                            this.notify.info("Permanent address other thana can not be empty");
                            return false;
                        }
                    }
                }
                return true;
            }
            else {
                alert("Your first name and last name must not differ from your full name.");
            }
        };
        StudentProfile.prototype.sameAsPresentAddress = function () {
            if (this.$scope.checkBoxValue) {
                this.$scope.studentAddress.perAddressLine1 = this.$scope.studentAddress.preAddressLine1;
                this.$scope.studentAddress.perAddressLine2 = this.$scope.studentAddress.preAddressLine2;
                this.$scope.studentAddress.perAddressCountry = this.$scope.studentAddress.preAddressCountry;
                this.$scope.studentAddress.perAddressDivision = this.$scope.studentAddress.preAddressDivision;
                this.$scope.studentAddress.perAddressDistrict = this.$scope.studentAddress.preAddressDistrict;
                this.$scope.studentAddress.perAddressThana = this.$scope.studentAddress.preAddressThana;
                if (this.$scope.studentAddress.preAddressIsThanaOther) {
                    this.$scope.studentAddress.perAddressIsThanaOther = this.$scope.studentAddress.preAddressIsThanaOther;
                    this.$scope.studentAddress.perAddressThanaOther = this.$scope.studentAddress.preAddressThanaOther;
                }
                this.changePermanentAddressFields();
            }
            else {
                this.$scope.studentAddress.perAddressLine1 = "";
                this.$scope.studentAddress.perAddressLine2 = "";
                this.$scope.studentAddress.perAddressCountry = null;
                this.$scope.studentAddress.perAddressDivision = null;
                this.$scope.studentAddress.perAddressDistrict = null;
                this.$scope.studentAddress.perAddressThana = null;
                this.$scope.studentAddress.perAddressThanaOther = "";
                this.$scope.studentAddress.perAddressIsThanaOther = false;
            }
        };
        StudentProfile.prototype.changePresentAddressFields = function () {
            if (this.$scope.studentAddress.preAddressCountry.name === "Bangladesh") {
                this.changePresentAddressDistrict();
                this.changePresentAddressThana();
                this.changePresentAddressOtherThana();
            }
            else {
                this.$scope.studentAddress.preAddressDivision = null;
                this.$scope.studentAddress.preAddressDistrict = null;
                this.$scope.studentAddress.preAddressThana = null;
                this.$scope.studentAddress.preAddressPostCode = "";
            }
        };
        StudentProfile.prototype.changePermanentAddressFields = function () {
            if (this.$scope.studentAddress.perAddressCountry.name === "Bangladesh") {
                this.changePermanentAddressDistrict();
                this.changePermanentAddressThana();
                this.changePermanentAddressOtherThana();
            }
            else {
                this.$scope.studentAddress.perAddressDivision = null;
                this.$scope.studentAddress.perAddressDistrict = null;
                this.$scope.studentAddress.perAddressThana = null;
                this.$scope.studentAddress.perAddressPostCode = "";
            }
        };
        StudentProfile.prototype.changePresentAddressDistrict = function () {
            this.$scope.presentAddressDistricts = [];
            var districtLength = this.$scope.allDistricts.length;
            var index = 0;
            for (var i = 0; i < districtLength; i++) {
                if (this.$scope.studentAddress.preAddressDivision.id === this.$scope.allDistricts[i].foreign_id) {
                    this.$scope.presentAddressDistricts[index++] = this.$scope.allDistricts[i];
                }
            }
        };
        StudentProfile.prototype.changePermanentAddressDistrict = function () {
            this.$scope.permanentAddressDistricts = [];
            var districtLength = this.$scope.allDistricts.length;
            var index = 0;
            for (var i = 0; i < districtLength; i++) {
                if (this.$scope.studentAddress.perAddressDivision.id === this.$scope.allDistricts[i].foreign_id) {
                    this.$scope.permanentAddressDistricts[index++] = this.$scope.allDistricts[i];
                }
            }
        };
        StudentProfile.prototype.changePresentAddressThana = function () {
            this.$scope.presentAddressThanas = [];
            var thanaLength = this.$scope.allThanas.length;
            var index = 0;
            for (var i = 0; i < thanaLength; i++) {
                if (this.$scope.studentAddress.preAddressDistrict.id === this.$scope.allThanas[i].foreign_id) {
                    this.$scope.presentAddressThanas[index++] = this.$scope.allThanas[i];
                }
            }
            this.$scope.otherThana.id = 9999;
            this.$scope.otherThana.name = "Other";
            this.$scope.presentAddressThanas[index++] = this.$scope.otherThana;
        };
        StudentProfile.prototype.changePermanentAddressThana = function () {
            this.$scope.permanentAddressThanas = [];
            var thanaLength = this.$scope.allThanas.length;
            var index = 0;
            for (var i = 0; i < thanaLength; i++) {
                if (this.$scope.studentAddress.perAddressDistrict.id === this.$scope.allThanas[i].foreign_id) {
                    this.$scope.permanentAddressThanas[index++] = this.$scope.allThanas[i];
                }
            }
            this.$scope.otherThana.id = 9999;
            this.$scope.otherThana.name = "Other";
            this.$scope.permanentAddressThanas[index++] = this.$scope.otherThana;
        };
        StudentProfile.prototype.changePresentAddressOtherThana = function () {
            if (this.$scope.studentAddress.preAddressThana.id === 9999) {
                this.$scope.studentAddress.preAddressIsThanaOther = true;
            }
            else {
                this.$scope.studentAddress.preAddressIsThanaOther = false;
            }
        };
        StudentProfile.prototype.changePermanentAddressOtherThana = function () {
            if (this.$scope.studentAddress.perAddressThana.id === 9999) {
                this.$scope.studentAddress.perAddressIsThanaOther = true;
            }
            else {
                this.$scope.studentAddress.perAddressIsThanaOther = false;
            }
        };
        StudentProfile.$inject = ['$scope', 'appConstants', 'HttpClient', 'notify', 'registrarConstants', 'countryService', 'divisionService', 'districtService', 'changeRequestService', 'thanaService'];
        return StudentProfile;
    }());
    ums.StudentProfile = StudentProfile;
    ums.UMS.controller('StudentProfile', StudentProfile);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var GStudentProfile = (function () {
        function GStudentProfile($scope, appConstants, httpClient, notify) {
            this.$scope = $scope;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.notify = notify;
            this.$scope.student = {};
            this.$scope.tabDetect = 1;
            this.$scope.switchTab = this.switchTab.bind(this);
            this.$scope.getStudentProfile = this.getStudentProfile.bind(this);
        }
        GStudentProfile.prototype.switchTab = function (tabIndex) {
            this.$scope.tabDetect = tabIndex;
            console.log("switchTAb");
        };
        GStudentProfile.prototype.getStudentProfile = function () {
            this.$scope.tabDetect = 1;
            console.log("search student");
            if ($("#studentId").val() != this.$scope.studentId) {
                this.$scope.student = {};
                this.$scope.studentId = $("#studentId").val();
                console.log("hello1");
            }
            else
                console.log("hello2");
        };
        GStudentProfile.$inject = ['$scope', 'appConstants', 'HttpClient', 'notify'];
        return GStudentProfile;
    }());
    ums.GStudentProfile = GStudentProfile;
    ums.UMS.controller('GStudentProfile', GStudentProfile);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ExpelledInformation = (function () {
        function ExpelledInformation(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, expelledInformationService, $stateParams, examRoutineService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.expelledInformationService = expelledInformationService;
            this.$stateParams = $stateParams;
            this.examRoutineService = examRoutineService;
            this.stateParams = $stateParams;
            this.examTypeList = [];
            this.studentId = "";
            this.reasonOfExpel = "";
            this.examTypeList = this.appConstants.regType;
            this.examType = this.examTypeList[0];
            this.selectedExamTypeId = this.examType.id;
            this.selectedExamTypeName = this.examType.name;
            this.enableAddButton = false;
            this.showExpelReasonBox = false;
            this.showModal = false;
            this.examTypeListForFilter = [];
            this.examTypeListForFilter = this.appConstants.regType;
            this.examTypeForFilter = this.examTypeListForFilter[0];
            this.selectedExamTypeIdForFilter = this.examTypeForFilter.id;
            this.selectedExamTypeNameForFilter = this.examTypeForFilter.name;
            this.showDeleteColumn = false;
            this.submit_Button_Disable = true;
            this.checkBoxCounter = 0;
            this.studentIdForFilter = "";
            this.deptList = this.appConstants.deptShort;
            this.deptName = this.deptList[0];
            this.isInsertAvailable = false;
            this.getSemesters();
            this.doSomething();
        }
        ExpelledInformation.prototype.deptChanged = function (deptId) {
            this.selectedDepartmentId = deptId.id;
        };
        ExpelledInformation.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.hideInsertMode = _this.activeSemesterId == _this.stateParams.semesterId ? true : false;
            }).then(function (data) {
                _this.getExamDates();
            });
        };
        ExpelledInformation.prototype.changeExamTypeForFilter = function (value) {
            this.selectedExamTypeIdForFilter = value.id;
            this.selectedExamTypeNameForFilter = value.name;
        };
        ExpelledInformation.prototype.doSomething = function () {
            var _this = this;
            var res = [];
            this.expelledInformationService.getExpelledInfo(this.stateParams.semesterId, this.selectedExamTypeIdForFilter).then(function (data) {
                res = data.entries;
                _this.expelInfo = res;
                for (var i = 0; i < _this.expelInfo.length; i++) {
                    _this.expelInfo[i].examDate = _this.expelInfo[i].examDate.replace("/", "-");
                    _this.expelInfo[i].examDate = _this.expelInfo[i].examDate.replace("/", "-");
                    if (_this.expelInfo[i].status == 1) {
                        _this.showDeleteColumn = true;
                    }
                    else {
                        _this.showDeleteColumn = false;
                    }
                }
            });
        };
        ExpelledInformation.prototype.checkMoreThanOneSelectionSubmit = function (result) {
            if (result.apply) {
                this.checkBoxCounter++;
                this.enableOrDisableSubmitButton();
            }
            else {
                this.checkBoxCounter--;
                this.enableOrDisableSubmitButton();
            }
        };
        ExpelledInformation.prototype.enableOrDisableSubmitButton = function () {
            if (this.checkBoxCounter > 0) {
                this.submit_Button_Disable = false;
            }
            else {
                this.submit_Button_Disable = true;
            }
        };
        ExpelledInformation.prototype.deleteExpelInfo = function () {
            var json = this.convertToJsonForDelete(this.expelInfo);
            this.expelledInformationService.deleteExpelInfo(json).then(function (data) {
            });
            this.doSomething();
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
        };
        ExpelledInformation.prototype.ExamDateChange = function (value) {
            this.examDateForFilter = value;
        };
        ExpelledInformation.prototype.getExamDates = function () {
            var _this = this;
            var examTypeId = this.stateParams.examType == ExamType.REGULAR ? ExamType.REGULAR : ExamType.CARRY_CLEARANCE_IMPROVEMENT;
            this.examRoutineService.getExamRoutineDates(this.stateParams.semesterId, examTypeId).then(function (examDateArr) {
                _this.examRoutineArr = {};
                _this.examRoutineArr = examDateArr;
            });
        };
        ExpelledInformation.prototype.enableInsert = function () {
            this.isInsertAvailable = true;
        };
        ExpelledInformation.prototype.hideInsert = function () {
            this.isInsertAvailable = false;
        };
        ExpelledInformation.prototype.changeExamType = function (value) {
            this.selectedExamTypeId = value.id;
            this.selectedExamTypeName = value.name;
            this.courseList = [];
            this.showExpelReasonBox = false;
        };
        ExpelledInformation.prototype.searchCourses = function () {
            var _this = this;
            if (this.studentId.length > 8) {
                this.enableAddButton = false;
                this.showExpelReasonBox = true;
                var res = [];
                this.expelledInformationService.getCourses(this.studentId, this.selectedExamTypeId).then(function (data) {
                    res = data.entries;
                    _this.courseList = res;
                });
            }
            else {
                this.notify.warn("Invalid Student Id");
            }
        };
        ExpelledInformation.prototype.checkExpelReason = function () {
            if (this.reasonOfExpel.length >= 5 && this.reasonOfExpel.length < 200) {
                this.showModal = true;
            }
            else {
                this.notify.warn("Reason of Expulsion Must be between 5 to 200 Characters");
                this.showModal = false;
            }
        };
        ExpelledInformation.prototype.reset = function () {
            this.reasonOfExpel = "";
            for (var i = 0; i < this.courseList.length; i++) {
                this.courseList[i].apply = false;
            }
            this.enableAddButton = false;
        };
        ExpelledInformation.prototype.addRecords = function () {
            var _this = this;
            var json = this.convertToJson();
            this.expelledInformationService.addExpelledStudentsRecord(json).then(function (data) {
                _this.searchCourses();
                _this.doSomething();
                _this.reasonOfExpel = "";
                _this.enableAddButton = false;
            });
        };
        ExpelledInformation.prototype.selectAction = function (List) {
            this.enableAddButton = true;
            for (var i = 0; i < this.courseList.length; i++) {
                if (this.courseList[i].courseId == List) {
                    this.courseList[i].apply = true;
                    this.selectedCourseId = this.courseList[i].courseId;
                    this.selectedCourseTitle = this.courseList[i].courseTitle + "(" + this.courseList[i].courseNo + ")";
                    this.examDate = this.courseList[i].examDate;
                    this.selectedRegType = this.courseList[i].regType;
                }
                else {
                    this.courseList[i].apply = false;
                }
            }
        };
        ExpelledInformation.prototype.convertToJsonForDelete = function (result) {
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < result.length; i++) {
                var item = {};
                if (result[i].apply == true) {
                    item["semesterId"] = result[i].semesterId;
                    item["studentId"] = result[i].studentId;
                    item["courseId"] = result[i].courseId;
                    item["examType"] = result[i].examType;
                    jsonObj.push(item);
                }
            }
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        ExpelledInformation.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["studentId"] = this.studentId;
            item["courseId"] = this.selectedCourseId;
            item["examType"] = this.selectedExamTypeId != ExamType.REGULAR ? ExamType.CARRY_CLEARANCE_IMPROVEMENT : ExamType.REGULAR;
            item["regType"] = this.selectedRegType;
            item["expelReason"] = this.reasonOfExpel;
            item["examDate"] = this.examDate;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            console.log(completeJson);
            return completeJson;
        };
        ExpelledInformation.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService',
            'programService', 'ExpelledInformationService', '$stateParams', 'examRoutineService'];
        return ExpelledInformation;
    }());
    ums.UMS.controller("ExpelledInformation", ExpelledInformation);
})(ums || (ums = {}));
var ExamType;
(function (ExamType) {
    ExamType[ExamType["REGULAR"] = 1] = "REGULAR";
    ExamType[ExamType["CARRY_CLEARANCE_IMPROVEMENT"] = 2] = "CARRY_CLEARANCE_IMPROVEMENT";
})(ExamType || (ExamType = {}));
var ums;
(function (ums) {
    var ExpelledInformationService = (function () {
        function ExpelledInformationService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        ExpelledInformationService.prototype.getCourses = function (studentId, examType) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/expelledInformation/getCourseList/studentId/' + studentId + '/regType/' + examType, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        ExpelledInformationService.prototype.getExpelledInfo = function (semesterId, examType) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/expelledInformation/getExpelInfoList/semesterId/' + semesterId + '/regType/' + examType, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        ExpelledInformationService.prototype.addExpelledStudentsRecord = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            console.log("Inside-Service");
            console.log(json);
            this.httpClient.post("academic/expelledInformation/addRecords", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        ExpelledInformationService.prototype.deleteExpelInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            console.log("Delete");
            console.log(json);
            this.httpClient.put("academic/expelledInformation/deleteExpelStudents", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        ExpelledInformationService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return ExpelledInformationService;
    }());
    ums.ExpelledInformationService = ExpelledInformationService;
    ums.UMS.service("ExpelledInformationService", ExpelledInformationService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DailyExamAttendanceReport = (function () {
        function DailyExamAttendanceReport(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, dailyExamAttendanceReportService, examRoutineService, $stateParams) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.dailyExamAttendanceReportService = dailyExamAttendanceReportService;
            this.examRoutineService = examRoutineService;
            this.$stateParams = $stateParams;
            this.stateParams = $stateParams;
            this.selectedSemesterId = this.stateParams.semesterId;
            this.selectedExamTypeId = this.stateParams.examType;
            this.selectedExamDate = this.stateParams.examDate;
            this.getSemesters();
        }
        DailyExamAttendanceReport.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.enableSubmitButton = _this.activeSemesterId == _this.selectedSemesterId ? true : false;
            }).then(function (data) {
                _this.search();
            });
        };
        DailyExamAttendanceReport.prototype.search = function () {
            this.getData();
        };
        DailyExamAttendanceReport.prototype.getData = function () {
            var _this = this;
            this.examInfo = [];
            var reg = [];
            this.dailyExamAttendanceReportService.getExamAttendantInfo(this.selectedSemesterId, this.selectedExamDate, this.selectedExamTypeId).then(function (data) {
                reg = data;
                _this.examInfo = reg;
            });
            console.log("Exam Info");
            console.log(this.examInfo);
            console.log("------");
        };
        DailyExamAttendanceReport.prototype.save = function () {
            var _this = this;
            var json = this.convertToJson(this.examInfo);
            console.log("convert to json");
            console.log(json);
            this.dailyExamAttendanceReportService.addStudentAttendantInfo(json).then(function (data) {
                _this.getData();
            });
        };
        DailyExamAttendanceReport.prototype.convertToJson = function (result) {
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < result.length; i++) {
                for (var j = 0; j < result[i].examAttendantYearSemesterWiseDataList.length; j++) {
                    var item = {};
                    item["programId"] = result[i].examAttendantYearSemesterWiseDataList[j].programId;
                    item["year"] = result[i].examAttendantYearSemesterWiseDataList[j].year;
                    item["semester"] = result[i].examAttendantYearSemesterWiseDataList[j].semester;
                    item["absentStudent"] = +result[i].examAttendantYearSemesterWiseDataList[j].absentStudent;
                    item["registeredStudent"] = result[i].examAttendantYearSemesterWiseDataList[j].totalAttendantStudentNumber;
                    item["examType"] = this.selectedExamTypeId;
                    item["examDate"] = this.selectedExamDate;
                    jsonObj.push(item);
                }
            }
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        DailyExamAttendanceReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService',
            'programService', 'DailyExamAttendanceReportService', 'examRoutineService', '$stateParams'];
        return DailyExamAttendanceReport;
    }());
    ums.UMS.controller("DailyExamAttendanceReport", DailyExamAttendanceReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DailyExamAttendanceReportService = (function () {
        function DailyExamAttendanceReportService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        DailyExamAttendanceReportService.prototype.getExamAttendantInfo = function (semesterId, examDate, examType) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/studentsExamAttendantInfo/getExamAttendantInfo/semesterId/' + semesterId + '/examDate/' + examDate + '/examType/' + examType, 'application/json', function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        DailyExamAttendanceReportService.prototype.addStudentAttendantInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Inside-Service");
            console.log(json);
            this.httpClient.post("academic/studentsExamAttendantInfo/addStudentAttendantRecords", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        DailyExamAttendanceReportService.prototype.getExamAttendantReport = function (pSemesterId, pExamType, pExamDate) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Daily Examination Report";
            this.httpClient.get('/ums-webservice-academic/academic/studentsExamAttendantInfo/getReport/semesterId/' + pSemesterId + '/examType/' + pExamType + '/examDate/' + pExamDate, 'application/pdf', function (data, etag) {
                console.log("pdf");
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        DailyExamAttendanceReportService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return DailyExamAttendanceReportService;
    }());
    ums.DailyExamAttendanceReportService = DailyExamAttendanceReportService;
    ums.UMS.service("DailyExamAttendanceReportService", DailyExamAttendanceReportService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AbsentLateComingInfo = (function () {
        function AbsentLateComingInfo(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, dailyExamAttendanceReportService, examRoutineService, classRoomService, employeeService, absLateComingService, $stateParams) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.dailyExamAttendanceReportService = dailyExamAttendanceReportService;
            this.examRoutineService = examRoutineService;
            this.classRoomService = classRoomService;
            this.employeeService = employeeService;
            this.absLateComingService = absLateComingService;
            this.$stateParams = $stateParams;
            this.stateParams = $stateParams;
            this.examTypeList = [];
            this.examTypeList = this.appConstants.examType;
            this.examType = this.examTypeList[0];
            this.selectedExamTypeId = this.examType.id;
            this.selectedExamTypeName = this.examType.name;
            this.absPreStatusList = [];
            this.absPreStatusList = this.appConstants.absentPresentStatus;
            this.absPreStatus = this.absPreStatusList[0];
            this.selectedAbsPreStatusId = this.absPreStatus.id;
            this.selectedAbsPreStatusName = this.absPreStatus.name;
            this.remarks = "Informed";
            this.deptList = [];
            this.deptList = this.appConstants.departmentOffice;
            this.selectedExamDate = "";
            this.arrivalTimeObj = new Date();
            this.amPmList = [];
            this.amPmList = this.appConstants.amPmType;
            this.amPm = this.amPmList[0];
            this.amPmValue = this.amPmList[0].name;
            this.isArrivalTimeEligible = false;
            this.absent = 1;
            this.isSubmitEligible = true;
            this.selectedClassRoomId = 0;
            //---views
            this.isInsertAvailable = false;
            this.absPreStatusListForFilter = [];
            this.absPreStatusListForFilter = this.appConstants.absentPresentStatus;
            this.absPreStatusForFilter = this.absPreStatusListForFilter[0];
            this.selectedAbsPreStatusIdForFilter = this.absPreStatusForFilter.id;
            this.isArrivalTimeEligibleForFilter = false;
            this.deptListForFilter = [];
            this.deptListForFilter = this.appConstants.departmentOffice;
            //this.deptNameForFilter=this.deptListForFilter[0];
            this.selectedExamDateForFilter = "";
            this.showDeleteColumn = true;
            this.submit_Button_Disable = true;
            this.checkBoxCounter = 0;
            this.getSemesters();
            this.initializeDatePickers();
            this.getClassRoomInfo();
            this.getExamDatesForFilter();
            this.getData();
        }
        AbsentLateComingInfo.prototype.enableInsert = function () {
            this.isInsertAvailable = true;
        };
        AbsentLateComingInfo.prototype.hideInsert = function () {
            this.isInsertAvailable = false;
        };
        AbsentLateComingInfo.prototype.unSelectAll = function () {
            this.submit_Button_Disable = true;
            for (var i = 0; i < this.absLateComeInfo.length; i++) {
                this.absLateComeInfo[i].apply = false;
            }
        };
        AbsentLateComingInfo.prototype.ExamDateChangeForFilter = function (value) {
        };
        AbsentLateComingInfo.prototype.getExamDatesForFilter = function () {
            var _this = this;
            this.examRoutineArrForFilter = null;
            this.examRoutineService.getExamRoutineDates(this.stateParams.semesterId, this.stateParams.examType).then(function (examDateArr) {
                _this.examRoutineArrForFilter = {};
                _this.examRoutineArrForFilter = examDateArr;
            });
        };
        AbsentLateComingInfo.prototype.deptChangedForFilter = function (deptId) {
            try {
                this.selectedDepartmentIdForFilter = deptId.id;
            }
            catch (e) {
                this.selectedDepartmentIdForFilter = "";
            }
        };
        AbsentLateComingInfo.prototype.changeAbsPreStatusForFilter = function (value) {
            this.selectedAbsPreStatusIdForFilter = value.id;
            this.selectedAbsPreStatusName = value.name;
            this.isArrivalTimeEligibleForFilter = this.selectedAbsPreStatusIdForFilter == this.absent ? false : true;
            this.unSelectAll();
        };
        AbsentLateComingInfo.prototype.getEmployees = function (deptId) {
            var _this = this;
            this.employeeService.getAll().then(function (data) {
                _this.employees = data;
                _this.employees = _this.employees.filter(function (a) { return a.department.id == deptId && a.status.id == 1; });
                for (var i = 0; i < _this.employees.length; i++) {
                    _this.employees[i].employeeName = _this.employees[i].employeeName + "(" + _this.employees[i].designation.name + ")";
                }
            });
            this.selectedEmployeeId = "";
        };
        AbsentLateComingInfo.prototype.assignArrivalTime = function () {
            this.arrivalTime = moment(this.arrivalTimeObj).format("hh:mm A").toString();
            console.log("inside method:" + this.arrivalTime.toString());
            return this.arrivalTime.toString();
        };
        AbsentLateComingInfo.prototype.employeeChanged = function (value) {
            this.selectedEmployeeId = value.id;
            this.selectedEmployeeName = value.employeeName;
            this.selectedEmployeeType = value.employeeType;
            this.selectedDeptName = value.deptOfficeName;
            this.getEmployeeType(value);
        };
        AbsentLateComingInfo.prototype.getEmployeeType = function (value) {
            if (value.employeeType == 1) {
                this.selectedEmployeeType = EmployeeType.TEACHER;
            }
            else if (value.employeeType == 2) {
                this.selectedEmployeeType = EmployeeType.OFFICER;
            }
            else if (value.employeeType == 3) {
                this.selectedEmployeeType = EmployeeType.STAFF;
            }
            else {
                this.selectedEmployeeType = EmployeeType.MANAGEMENT;
            }
        };
        AbsentLateComingInfo.prototype.getClassRoomInfo = function () {
            var _this = this;
            this.classRoomService.getClassRooms().then(function (data) {
                _this.classRooms = data;
            });
        };
        AbsentLateComingInfo.prototype.classRoomChanged = function (value) {
            try {
                this.selectedClassRoomId = value.id;
                this.selectedClassRoomNo = value.roomNo;
            }
            catch (e) {
                this.selectedClassRoomId = null;
            }
        };
        AbsentLateComingInfo.prototype.initializeDatePickers = function () {
            setTimeout(function () {
                $('.datepicker-default').datepicker();
                $('.datepicker-default').on('change', function () {
                    $('.datepicker').hide();
                });
            }, 200);
        };
        AbsentLateComingInfo.prototype.getExamDates = function () {
            var _this = this;
            this.examRoutineArr = {};
            this.examRoutineService.getExamRoutineDates(this.stateParams.semesterId, this.stateParams.examType).then(function (examDateArr) {
                _this.selectedExamDate = "";
                _this.examRoutineArr = {};
                if (examDateArr.length > 0) {
                    _this.examRoutineArr = examDateArr;
                    _this.selectedExamDate = _this.examRoutineArr[0].examDate;
                }
                else {
                    _this.notify.warn("No class Routine Found");
                }
            });
        };
        AbsentLateComingInfo.prototype.deptChanged = function (deptId) {
            try {
                this.selectedDepartmentId = deptId.id;
                this.selectedEmployeeName = "";
                this.selectedEmployeeType = "";
                this.selectedDeptName = "";
                this.selectedEmployeeName = "";
                this.getEmployees(this.selectedDepartmentId);
            }
            catch (e) {
                this.selectedDepartmentId = "";
                this.getEmployees(this.selectedDepartmentId);
            }
        };
        AbsentLateComingInfo.prototype.changeExamType = function (value) {
            this.selectedExamTypeId = value.id;
            this.selectedExamTypeName = value.name;
            this.getExamDates();
        };
        AbsentLateComingInfo.prototype.changeAbsPreStatus = function (value) {
            this.selectedAbsPreStatusId = value.id;
            this.selectedAbsPreStatusName = value.name;
            this.arrivalTime = this.assignArrivalTime();
            this.isArrivalTimeEligible = this.selectedAbsPreStatusId == this.absent ? false : true;
        };
        AbsentLateComingInfo.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.semesterName = _this.semester.name;
                _this.hideInsertMode = _this.activeSemesterId == _this.stateParams.semesterId ? true : false;
                _this.showDeleteColumn = _this.activeSemesterId == _this.stateParams.semesterId ? true : false;
            }).then(function (data) {
                _this.getExamDates();
            });
        };
        AbsentLateComingInfo.prototype.ExamDateChange = function (value) {
            this.selectedExamDate = value;
        };
        AbsentLateComingInfo.prototype.save = function () {
            var _this = this;
            var json = this.convertToJson();
            this.absLateComingService.addAbsLateComingInfo(json).then(function (data) {
                _this.getData();
            });
        };
        AbsentLateComingInfo.prototype.isEligibleForSubmitData = function () {
            if (this.selectedDepartmentId == "" || this.selectedDepartmentId == null) {
                this.isSubmitEligible = false;
                this.notify.warn("Select Department");
            }
            else if (this.selectedEmployeeId == "" || this.selectedDepartmentId == null) {
                this.isSubmitEligible = false;
                this.notify.warn("Select Employee Id");
            }
            else if (this.remarks == "" || this.remarks == null || this.remarks.length > 100) {
                this.isSubmitEligible = false;
                this.notify.warn("Remarks can not be empty to max 100 characters");
            }
            else if (this.selectedClassRoomId == 0 || this.selectedClassRoomId == null) {
                this.isSubmitEligible = false;
                this.notify.warn("Select Class Room");
            }
            else if (this.selectedExamDate == "" || this.selectedExamDate == null) {
                this.isSubmitEligible = false;
                this.notify.warn("Select Exam Date");
            }
            else {
                this.isSubmitEligible = true;
            }
            console.log("Submit Eligible: " + this.isSubmitEligible);
        };
        AbsentLateComingInfo.prototype.getData = function () {
            var _this = this;
            var reg = [];
            this.absLateComingService.getAbsLateComeInfo(this.stateParams.semesterId, this.stateParams.examType).then(function (data) {
                reg = data;
                _this.absLateComeInfo = reg;
                console.log("Data");
                console.log(data);
            });
        };
        AbsentLateComingInfo.prototype.checkMoreThanOneSelectionSubmit = function (result) {
            if (result.apply) {
                this.checkBoxCounter++;
                this.enableOrDisableSubmitButton();
            }
            else {
                this.checkBoxCounter--;
                this.enableOrDisableSubmitButton();
            }
        };
        AbsentLateComingInfo.prototype.enableOrDisableSubmitButton = function () {
            if (this.checkBoxCounter > 0) {
                this.submit_Button_Disable = false;
            }
            else {
                this.submit_Button_Disable = true;
            }
        };
        AbsentLateComingInfo.prototype.deleteExpelInfo = function () {
            var _this = this;
            var json = this.convertToJsonForDelete(this.absLateComeInfo);
            this.absLateComingService.deleteAbsLateComeInfo(json).then(function (data) {
                _this.getData();
            });
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
        };
        AbsentLateComingInfo.prototype.convertToJsonForDelete = function (result) {
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < result.length; i++) {
                var item = {};
                if (result[i].apply == true) {
                    item["semesterId"] = result[i].semesterId;
                    item["examType"] = result[i].examType;
                    item["employeeId"] = result[i].employeeId;
                    item["examDate"] = result[i].examDate;
                    jsonObj.push(item);
                }
            }
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        AbsentLateComingInfo.prototype.convertToJson = function () {
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["employeeId"] = this.selectedEmployeeId;
            item["examType"] = this.selectedExamTypeId;
            item["presentType"] = this.selectedAbsPreStatusId;
            item["remarks"] = this.remarks;
            item["invigilatorRoomId"] = this.selectedClassRoomId == null ? "0" : this.selectedClassRoomId.toString();
            item["examDate"] = this.selectedExamDate;
            item["arrivalTime"] = (this.arrivalTime == undefined || this.arrivalTime == null) ? 'null' : this.arrivalTime;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        AbsentLateComingInfo.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService',
            'programService', 'DailyExamAttendanceReportService', 'examRoutineService',
            'classRoomService', 'employeeService', 'absLateComingService', '$stateParams'];
        return AbsentLateComingInfo;
    }());
    ums.UMS.controller("AbsentLateComingInfo", AbsentLateComingInfo);
})(ums || (ums = {}));
var EmployeeType;
(function (EmployeeType) {
    EmployeeType["TEACHER"] = "TEACHER";
    EmployeeType["OFFICER"] = "OFFICER";
    EmployeeType["STAFF"] = "STAFF";
    EmployeeType["MANAGEMENT"] = "MANAGEMENT";
})(EmployeeType || (EmployeeType = {}));
var ums;
(function (ums) {
    var AbsLateComingService = (function () {
        function AbsLateComingService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        AbsLateComingService.prototype.addAbsLateComingInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Inside-Service");
            console.log(json);
            this.httpClient.post("academic/absLateComing/addRecords", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        AbsLateComingService.prototype.getAbsLateComeInfo = function (semesterId, examType) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/absLateComing/getAbsLateComeInfoList/semesterId/' + semesterId + '/examType/' + examType, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        AbsLateComingService.prototype.deleteAbsLateComeInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            console.log("Delete");
            console.log(json);
            this.httpClient.put("academic/absLateComing/deleteRecords", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        AbsLateComingService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return AbsLateComingService;
    }());
    ums.AbsLateComingService = AbsLateComingService;
    ums.UMS.service("absLateComingService", AbsLateComingService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DailyExamReport = (function () {
        function DailyExamReport(appConstants, httpClient, $q, notify, $sce, $window, semesterService, $state, $stateParams, examRoutineService, dailyExamAttendanceReportService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.$state = $state;
            this.$stateParams = $stateParams;
            this.examRoutineService = examRoutineService;
            this.dailyExamAttendanceReportService = dailyExamAttendanceReportService;
            this.state = $state;
            this.stateParams = $stateParams;
            this.isRightDivAvailable = false;
            this.examTypeList = [];
            this.examTypeList = this.appConstants.examType;
            this.examType = this.examTypeList[0];
            this.selectedExamTypeId = this.examType.id;
            this.stateParams.examType = this.selectedExamTypeId;
            this.selectedExamTypeName = this.examType.name;
            this.selectedExamDate = "";
            this.isExamDateSelected = false;
            this.getSemesters();
        }
        DailyExamReport.prototype.search = function () {
            if (this.selectedExamDate != "") {
                this.isRightDivAvailable = true;
                ums.Utils.expandRightDiv();
                this.state.current.url === '/dailyExamReport';
                this.state.go('dailyExamReport' + '.' + 'dailyExamAttendanceReport', {
                    semesterId: this.selectedSemesterId,
                    examType: this.selectedExamTypeId,
                    examDate: this.selectedExamDate
                });
            }
            else {
                this.notify.warn("Select an exam date!!!!");
            }
        };
        DailyExamReport.prototype.redirectTo = function (tab) {
            this.state.go('dailyExamReport' + '.' + tab, { semesterId: this.selectedSemesterId, examType: this.selectedExamTypeId, examDate: this.selectedExamDate });
        };
        DailyExamReport.prototype.getExamDates = function () {
            var _this = this;
            var examTypeId = this.selectedExamTypeId == ExamType.REGULAR ? ExamType.REGULAR : ExamType.CARRY_CLEARANCE_IMPROVEMENT;
            this.selectedExamDate = "";
            this.examRoutineArr = {};
            this.examRoutineService.getExamRoutineDates(this.selectedSemesterId, examTypeId).then(function (examDateArr) {
                _this.examRoutineArr = {};
                if (examDateArr.length > 0) {
                    _this.examRoutineArr = examDateArr;
                    _this.selectedExamDate = _this.examRoutineArr[0].examDate;
                }
                else {
                    /* this.notify.warn("No class Routine Found");*/
                    _this.notify.warn("No Exam Routine Found");
                }
            });
        };
        DailyExamReport.prototype.ExamDateChange = function (value) {
            this.selectedExamDate = value;
            this.isExamDateSelected = true;
            this.isRightDivAvailable = false;
        };
        DailyExamReport.prototype.changeExamType = function (value) {
            this.selectedExamTypeId = value.id;
            this.selectedExamTypeName = value.name;
            this.isRightDivAvailable = false;
            this.getExamDates();
        };
        DailyExamReport.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.stateParams.semesterId = _this.selectedSemesterId;
                _this.semesterName = _this.semester.name;
            }).then(function (data) {
                _this.getExamDates();
            });
        };
        DailyExamReport.prototype.semesterChanged = function (val) {
            this.selectedSemesterId = val.id;
            this.semesterName = val.name;
            this.isRightDivAvailable = false;
            this.getExamDates();
        };
        DailyExamReport.prototype.getPdfVersionReport = function () {
            if (this.selectedExamDate != "") {
                this.dailyExamAttendanceReportService.getExamAttendantReport(this.selectedSemesterId, this.selectedExamTypeId, this.selectedExamDate);
            }
            else {
                this.notify.warn("Select an exam date");
            }
        };
        DailyExamReport.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', '$state',
            '$stateParams', 'examRoutineService', 'DailyExamAttendanceReportService'];
        return DailyExamReport;
    }());
    ums.UMS.controller("DailyExamReport", DailyExamReport);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var QuestionCorrectionInfo = (function () {
        function QuestionCorrectionInfo(appConstants, httpClient, $q, notify, $sce, $window, semesterService, facultyService, programService, dailyExamAttendanceReportService, examRoutineService, classRoomService, employeeService, questionCorrectionInfoService, courseService, $stateParams) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.facultyService = facultyService;
            this.programService = programService;
            this.dailyExamAttendanceReportService = dailyExamAttendanceReportService;
            this.examRoutineService = examRoutineService;
            this.classRoomService = classRoomService;
            this.employeeService = employeeService;
            this.questionCorrectionInfoService = questionCorrectionInfoService;
            this.courseService = courseService;
            this.$stateParams = $stateParams;
            this.stateParams = $stateParams;
            this.isInsertAvailable = false;
            this.deptList = [];
            this.deptList = this.appConstants.programs;
            this.deptName = this.deptList[0];
            this.yearList = [];
            this.yearList = this.appConstants.academicYear;
            this.yearName = this.yearList[0];
            this.selectedYear = this.yearName.id;
            this.year = this.yearName.name;
            this.academicSemesterList = [];
            this.academicSemesterList = this.appConstants.academicSemester;
            this.academicSemesterName = this.academicSemesterList[0];
            this.selectedSemester = this.academicSemesterName.id;
            this.acaSemester = this.academicSemesterName.name;
            this.examTypeList = [];
            this.examTypeList = this.appConstants.examType;
            this.examType = this.examTypeList[0];
            this.selectedExamTypeId = this.examType.id;
            this.selectedExamTypeName = this.examType.name;
            this.selectedExamDate = "";
            this.incorrectQuestionNo = "";
            this.mistakeType = "";
            this.selectedCourseId = "";
            this.courseNo = "";
            this.courseTitle = "";
            this.submit_Button_Disable = true;
            this.checkBoxCounter = 0;
            this.programList = [];
            this.programList = this.appConstants.programs;
            this.programs = this.deptList[0];
            this.checkProgramId = false;
            this.checkYear = false;
            this.checkSemester = false;
            this.checkCourseSelection = false;
            this.isSubmitEligible = true;
            this.showDeleteColumn = true;
            this.initialization();
        }
        QuestionCorrectionInfo.prototype.initialization = function () {
            this.getSemesters();
            this.getQcInfo();
        };
        QuestionCorrectionInfo.prototype.changeDateForFilter = function (value) {
            this.examDateForFilter = value;
        };
        QuestionCorrectionInfo.prototype.getExamDatesForFilter = function () {
            var _this = this;
            var examTypeId = this.selectedExamTypeId == ExamType.REGULAR ? ExamType.REGULAR : ExamType.CARRY_CLEARANCE_IMPROVEMENT;
            this.examRoutineForFilter = null;
            this.examRoutineService.getExamRoutineDates(this.stateParams.semesterId, this.stateParams.examType).then(function (examDateArr) {
                _this.examRoutineForFilter = {};
                _this.examRoutineForFilter = examDateArr;
            });
        };
        QuestionCorrectionInfo.prototype.programChanged = function (programs) {
            try {
                this.programIdForFilter = programs.id;
            }
            catch (e) {
                this.programIdForFilter = null;
            }
        };
        QuestionCorrectionInfo.prototype.getQcInfo = function () {
            var _this = this;
            var app = [];
            this.questionCorrectionInfoService.getQuestionCorrectionInfo(this.stateParams.semesterId, this.stateParams.examType).then(function (data) {
                app = data;
                _this.questionCorrectionInfo = app;
            });
        };
        QuestionCorrectionInfo.prototype.changeCourse = function (value) {
            try {
                this.selectedCourseId = value.courseId;
                this.courseNo = value.courseNo;
                this.courseTitle = value.courseTitle;
                this.checkCourseSelection = true;
            }
            catch (e) {
                this.selectedCourseId = null;
            }
            this.getExamDate();
        };
        QuestionCorrectionInfo.prototype.getExamDate = function () {
            var _this = this;
            if (this.selectedCourseId != null && this.selectedCourseId != "" && this.checkCourseSelection != false) {
                this.questionCorrectionInfoService.getExamDate(this.stateParams.semesterId, this.selectedExamTypeId, this.selectedCourseId).then(function (data) {
                    _this.selectedExamDate = data;
                });
            }
        };
        QuestionCorrectionInfo.prototype.getCourse = function () {
            var _this = this;
            if (this.checkProgramId != false &&
                this.checkYear != false &&
                this.checkSemester != false &&
                this.selectedProgramId != null &&
                this.selectedYear != null &&
                this.selectedSemester != null) {
                this.courseList = [];
                var course = [];
                this.questionCorrectionInfoService.getCourses(this.selectedProgramId, this.selectedYear, this.selectedSemester).then(function (data) {
                    course = data;
                    _this.courseList = course;
                    for (var i = 0; i < _this.courseList.length; i++) {
                        _this.courseList[i].courseNo = _this.courseList[i].courseTitle + "(" + _this.courseList[i].courseNo + ")";
                    }
                });
            }
        };
        QuestionCorrectionInfo.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(11, 5).then(function (semesters) {
                _this.semesters = semesters;
                for (var i = 0; i < semesters.length; i++) {
                    if (semesters[i].status == 1) {
                        _this.semester = semesters[i];
                        _this.activeSemesterId = semesters[i].id;
                        break;
                    }
                }
                _this.selectedSemesterId = _this.semester.id;
                _this.hideInsertMode = _this.activeSemesterId == _this.stateParams.semesterId ? true : false;
            }).then(function (data) {
                _this.getExamDatesForFilter();
            });
        };
        QuestionCorrectionInfo.prototype.changeExamType = function (value) {
            this.selectedExamTypeId = value.id;
            this.selectedExamTypeName = value.name;
            this.getExamDate();
        };
        QuestionCorrectionInfo.prototype.deptChanged = function (programs) {
            try {
                this.checkProgramId = true;
                this.selectedProgramId = programs.id;
                this.programName = programs.name;
                this.getCourse();
            }
            catch (e) {
                this.selectedProgramId = null;
                this.getCourse();
            }
        };
        QuestionCorrectionInfo.prototype.yearChanged = function (value) {
            try {
                this.checkYear = true;
                this.year = value.name;
                this.selectedYear = value.id;
                this.getCourse();
            }
            catch (e) {
                this.selectedYear = null;
                this.getCourse();
            }
        };
        QuestionCorrectionInfo.prototype.academicSemester = function (value) {
            try {
                this.checkSemester = true;
                this.acaSemester = value.name;
                this.selectedSemester = value.id;
                this.getCourse();
            }
            catch (e) {
                this.selectedSemester = null;
                this.getCourse();
            }
        };
        QuestionCorrectionInfo.prototype.enableInsert = function () {
            this.isInsertAvailable = true;
        };
        QuestionCorrectionInfo.prototype.hideInsert = function () {
            this.isInsertAvailable = false;
        };
        QuestionCorrectionInfo.prototype.save = function () {
            var _this = this;
            var json = this.convertToJson();
            this.questionCorrectionInfoService.addQuestionCorrectionInfo(json).then(function (data) {
                _this.getQcInfo();
            });
        };
        QuestionCorrectionInfo.prototype.isEligibleForSubmitData = function () {
            if (this.checkProgramId == false || this.selectedProgramId == null) {
                this.isSubmitEligible = false;
                this.notify.warn("Select Program");
            }
            else if (this.checkYear == false || this.selectedYear == null) {
                this.isSubmitEligible = false;
                this.notify.warn("Select Year");
            }
            else if (this.checkSemester == false || this.selectedSemester == null) {
                this.isSubmitEligible = false;
                this.notify.warn("Select Semester");
            }
            else if (this.selectedCourseId == "" || this.selectedCourseId == null) {
                this.isSubmitEligible = false;
                this.notify.warn("Select Course");
            }
            else if (this.incorrectQuestionNo == "" || this.incorrectQuestionNo == null || this.incorrectQuestionNo.length > 100) {
                this.isSubmitEligible = false;
                this.notify.warn("Incorrect Question can not be empty to max 100 characters");
            }
            else if (this.mistakeType == "" || this.mistakeType == null || this.mistakeType.length > 100) {
                this.isSubmitEligible = false;
                this.notify.warn("Type of Mistake can not be empty to max 100 characters");
            }
            else if (this.selectedExamDate == "" || this.selectedExamDate == null) {
                this.isSubmitEligible = false;
                this.notify.warn("Select Exam Date");
            }
            else {
                this.isSubmitEligible = true;
            }
        };
        QuestionCorrectionInfo.prototype.checkMoreThanOneSelectionSubmit = function (result) {
            if (result.apply) {
                this.checkBoxCounter++;
                this.enableOrDisableSubmitButton();
            }
            else {
                this.checkBoxCounter--;
                this.enableOrDisableSubmitButton();
            }
        };
        QuestionCorrectionInfo.prototype.enableOrDisableSubmitButton = function () {
            if (this.checkBoxCounter > 0) {
                this.submit_Button_Disable = false;
            }
            else {
                this.submit_Button_Disable = true;
            }
        };
        QuestionCorrectionInfo.prototype.deleteExpelInfo = function () {
            var _this = this;
            var json = this.convertToJsonToDelete(this.questionCorrectionInfo);
            this.questionCorrectionInfoService.deleteQuestionCorrectionInfo(json).then(function (data) {
                _this.getQcInfo();
            });
            this.checkBoxCounter = 0;
            this.submit_Button_Disable = true;
        };
        QuestionCorrectionInfo.prototype.convertToJsonToDelete = function (result) {
            var completeJson = {};
            var jsonObj = [];
            for (var i = 0; i < result.length; i++) {
                var item = {};
                if (result[i].apply == true) {
                    item["examType"] = result[i].examType;
                    item["courseId"] = result[i].courseId;
                    item["programId"] = result[i].programId;
                    item["examDate"] = result[i].examDate;
                    jsonObj.push(item);
                }
            }
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        QuestionCorrectionInfo.prototype.convertToJson = function () {
            var completeJson = {};
            var jsonObj = [];
            var item = {};
            item["programId"] = this.selectedProgramId;
            item["examType"] = this.selectedExamTypeId;
            item["year"] = +this.selectedYear;
            item["semester"] = +this.selectedSemester;
            item["courseId"] = this.selectedCourseId;
            item["incorrectQuestionNo"] = this.incorrectQuestionNo;
            item["mistakeType"] = this.mistakeType;
            item["examDate"] = this.selectedExamDate;
            jsonObj.push(item);
            completeJson["entries"] = jsonObj;
            return completeJson;
        };
        QuestionCorrectionInfo.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'facultyService',
            'programService', 'DailyExamAttendanceReportService', 'examRoutineService', 'classRoomService', 'employeeService',
            'questionCorrectionInfoService', 'courseService', '$stateParams'];
        return QuestionCorrectionInfo;
    }());
    ums.UMS.controller("QuestionCorrectionInfo", QuestionCorrectionInfo);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var QuestionCorrectionInfoService = (function () {
        function QuestionCorrectionInfoService(appConstants, httpClient, $q, notify, $sce, $window) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
        }
        QuestionCorrectionInfoService.prototype.addQuestionCorrectionInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            console.log("Inside-Service");
            console.log(json);
            this.httpClient.post("academic/questionCorrectionInfo/addRecords", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        QuestionCorrectionInfoService.prototype.getQuestionCorrectionInfo = function (semesterId, examType) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/questionCorrectionInfo/getQuestionCorrectionInfoList/semesterId/' + semesterId + '/examType/' + examType, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        QuestionCorrectionInfoService.prototype.getCourses = function (programId, year, semester) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/questionCorrectionInfo/getCourses/programId/' + programId + '/year/' + year + '/semester/' + semester, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        QuestionCorrectionInfoService.prototype.getTeachers = function (courseId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/questionCorrectionInfo/getTeachers/ courseId/' + courseId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        QuestionCorrectionInfoService.prototype.getExamDate = function (semesterId, examType, courseId) {
            var defer = this.$q.defer();
            this.httpClient.get('academic/questionCorrectionInfo/getExamDate/semesterId/' + semesterId + '/examType/' + examType + '/courseId/' + courseId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        QuestionCorrectionInfoService.prototype.deleteQuestionCorrectionInfo = function (json) {
            var _this = this;
            var defer = this.$q.defer();
            var that = this;
            console.log("Delete");
            console.log(json);
            this.httpClient.put("academic/questionCorrectionInfo/deleteRecords", json, 'application/json')
                .success(function () {
                _this.notify.success("Successfully Saved");
                defer.resolve('success');
            })
                .error(function (data) {
                console.log(data);
                _this.notify.error("Problem in saving data");
                defer.resolve('failure');
            });
            return defer.promise;
        };
        QuestionCorrectionInfoService.$inject = ['appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window'];
        return QuestionCorrectionInfoService;
    }());
    ums.QuestionCorrectionInfoService = QuestionCorrectionInfoService;
    ums.UMS.service("questionCorrectionInfoService", QuestionCorrectionInfoService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DummyController = (function () {
        function DummyController($scope, $stateParams, $timeout, httpClient, $window, $sce) {
            var _this = this;
            this.httpClient = httpClient;
            this.$window = $window;
            this.$sce = $sce;
            $scope.amChartOptions = {
                data: [{
                        year: 2005,
                        income: 23.5,
                        expenses: 18.1
                    }, {
                        year: 2006,
                        income: 26.2,
                        expenses: 22.8
                    }, {
                        year: 2007,
                        income: 30.1,
                        expenses: 23.9
                    }, {
                        year: 2008,
                        income: 29.5,
                        expenses: 25.1
                    }, {
                        year: 2009,
                        income: 24.6,
                        expenses: 25
                    }],
                type: "serial",
                categoryField: "year",
                rotate: true,
                pathToImages: 'http://www.amcharts.com/lib/3/images/',
                legend: {
                    enabled: true
                },
                chartScrollbar: {
                    enabled: false
                },
                categoryAxis: {
                    gridPosition: "start",
                    parseDates: false
                },
                valueAxes: [{
                        position: "top",
                        title: "Million USD"
                    }],
                graphs: [{
                        type: "column",
                        title: "Expense",
                        valueField: "expenses",
                        fillAlphas: 1
                    }]
            };
            $timeout(function () {
                var updatedData = [{
                        year: 2010,
                        income: 23.5,
                        expenses: 18.1
                    }, {
                        year: 2011,
                        income: 26.2,
                        expenses: 22.8
                    }, {
                        year: 2012,
                        income: 30.1,
                        expenses: 23.9
                    }, {
                        year: 2013,
                        income: 29.5,
                        expenses: 25.1
                    }, {
                        year: 2014,
                        income: 24.6,
                        expenses: 25
                    }];
                $scope.$broadcast("amCharts.updateData", updatedData);
            }, 5000);
            $scope.modalSettings = {};
            $scope.modalSettings.title = "Some title";
            $scope.modalSettings.body = "Some body";
            $scope.modalSettings.footer = "Some footer";
            $scope.modalSettings.header = "Some header";
            $scope.modalSettings.handler = "modal1";
            $scope.modalSettings.rightButton = function () {
                console.debug("Do something......");
                _this.generateXls();
            };
            $scope.generateXls = this.generateXls.bind(this);
        }
        DummyController.prototype.generateXls = function () {
            this.httpClient.get('dummyXls', 'application/vnd.ms-excel', function (data, etag) {
                var file = new Blob([data], { type: 'application/vnd.ms-excel' });
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = function (e) {
                    window.open(reader.result, 'Excel', 'width=20,height=10,toolbar=0,menubar=0,scrollbars=no', false);
                };
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        DummyController.$inject = ['$scope', '$stateParams', '$timeout', 'HttpClient', '$window'];
        return DummyController;
    }());
    ums.DummyController = DummyController;
    ums.UMS.controller("DummyController", DummyController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TwoFATestController = (function () {
        function TwoFATestController(httpClient, $window, $q) {
            this.httpClient = httpClient;
            this.$window = $window;
            this.$q = $q;
        }
        TwoFATestController.prototype.generateRequest = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("two-fa-test", json ? json : { "one": "1", "two": "2", "three": "3" }, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return console.log("Success response in controller: ", response); })
                .error(function (errorResponse) { return console.log("Error response in controller: ", errorResponse); });
        };
        TwoFATestController.$inject = ['HttpClient', '$window', '$q'];
        return TwoFATestController;
    }());
    ums.TwoFATestController = TwoFATestController;
    ums.UMS.controller("TwoFATestController", TwoFATestController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    function TwoFAInterceptor($q, $log, $injector) {
        return {
            response: function (response) {
                return $q.resolve(response);
            },
            responseError: function (response) {
                if (response.status == 428) {
                    if (response.headers('state')) {
                        $log.info("Got 2FA request with state: ", response.headers('state'));
                        var state = response.headers('state');
                        var lifeTime = Number(response.headers('lifeTime'));
                        var remainingTime = Number(response.headers('remainingTime'));
                        var emailAddress = response.headers('emailAddress');
                        var twoFaService = $injector.get('TwoFAService');
                        return twoFaService.showTwoFAForm(state, lifeTime, remainingTime, emailAddress).then(function (success) {
                            response.data = success;
                            return $q.resolve(response);
                        }, function (error) {
                            $log.info("Got 2FA error: ", error);
                            response.data = error;
                            return $q.reject(response);
                        });
                    }
                    else {
                        return $q.resolve(response);
                    }
                }
                else {
                    return $q.reject(response);
                }
            }
        };
    }
    TwoFAInterceptor.$inject = ['$q', '$log', '$injector'];
    ums.UMS.factory('TwoFAInterceptor', TwoFAInterceptor);
    ums.UMS.config(['$httpProvider', function ($httpProvider) {
            $httpProvider.interceptors.push('TwoFAInterceptor');
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TwoFAService = (function () {
        function TwoFAService($q, $modal) {
            this.$q = $q;
            this.$modal = $modal;
        }
        TwoFAService.prototype.showTwoFAForm = function (state, lifeTime, remainingTime, emailAddress) {
            this.currentDefer = this.$q.defer();
            this.currentState = state;
            this.showModal(state, lifeTime, remainingTime, emailAddress);
            return this.currentDefer.promise;
        };
        TwoFAService.prototype.showModal = function (state, lifeTime, remainingTime, emailAddress) {
            var _this = this;
            this.$modal.open({
                templateUrl: 'views/two-fa/two.fa.modal.html',
                controller: ums.TwoFaModalController,
                resolve: {
                    state: function () { return state; },
                    lifeTime: function () { return lifeTime; },
                    remainingTime: function () { return remainingTime; },
                    emailAddress: function () { return emailAddress; },
                    currentDefer: function () { return _this.currentDefer; }
                },
                backdrop: 'static'
            });
        };
        TwoFAService.$inject = ['$q', '$modal'];
        return TwoFAService;
    }());
    ums.TwoFAService = TwoFAService;
    ums.UMS.service('TwoFAService', TwoFAService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TwoFaModalController = (function () {
        function TwoFaModalController($scope, $modalInstance, httpClient, state, lifeTime, remainingTime, emailAddress, $http, currentDefer, notify) {
            this.$scope = $scope;
            this.$modalInstance = $modalInstance;
            this.httpClient = httpClient;
            this.state = state;
            this.lifeTime = lifeTime;
            this.remainingTime = remainingTime;
            this.emailAddress = emailAddress;
            this.$http = $http;
            this.currentDefer = currentDefer;
            this.notify = notify;
            this.$scope.ok = this.ok.bind(this);
            this.$scope.testTwoFa = this.testTwoFa.bind(this);
            this.$scope.resend = this.resend.bind(this);
            this.$scope.tokenRef = {
                message: '',
                twofatoken: '',
                emailAddress: this.emailAddress
            };
            this.manageTimer(this.lifeTime, this.remainingTime);
        }
        TwoFaModalController.prototype.manageTimer = function (otpLifeTime, remainingTime) {
            var remainingSeconds = 1 * remainingTime;
            var clockTimer = +localStorage.getItem("clockTimer");
            clearInterval(clockTimer);
            var minutes = parseInt((remainingSeconds / 60) + '');
            var seconds = remainingSeconds % 60;
            $("#countDownDiv").html("00" + " : " + ("0" + minutes).slice(-2) + " : " + ("0" + seconds).slice(-2));
            var cTimer = setInterval(function () {
                var minutes = parseInt((remainingSeconds / 60) + '');
                var seconds = remainingSeconds % 60;
                if (remainingSeconds < 0) {
                    clearInterval(cTimer);
                    $("#twoFaInputDiv").hide();
                    $("#twoFaExpireDiv").show();
                }
                else {
                    remainingSeconds = remainingSeconds - 1;
                    $("#countDownDiv").html("00" + " : " + ("0" + minutes).slice(-2) + " : " + ("0" + seconds).slice(-2));
                }
            }, 1000);
            localStorage["clockTimer"] = cTimer;
            var progressTimer = +localStorage.getItem("progressTimer");
            clearInterval(progressTimer);
            var percentage = (100 / otpLifeTime) * (remainingTime);
            var index = remainingTime;
            var pTimer = setInterval(function () {
                percentage = percentage - (100 / otpLifeTime);
                console.log(percentage);
                index--;
                if (index > 0) {
                    $('.progress-bar').css('width', percentage + '%');
                    $('.progress-bar').attr('aria-valuenow', Math.round(percentage));
                    $('.progress-bar').html($('.progress-bar').attr('aria-valuenow') + '%');
                }
                else {
                    clearInterval(pTimer);
                }
            }, 1000);
            localStorage["progressTimer"] = pTimer;
        };
        TwoFaModalController.prototype.ok = function () {
            var clockTimer = +localStorage.getItem("clockTimer");
            var progressTimer = +localStorage.getItem("progressTimer");
            clearInterval(clockTimer);
            clearInterval(progressTimer);
            this.$modalInstance.dismiss('cancel');
        };
        TwoFaModalController.prototype.resend = function () {
            var _this = this;
            this.httpClient.post('match-two-fa/resend', { "state": this.state }, 'application/json').then(function (response) {
                console.log(response);
                var responseBody = response.data;
                _this.state = responseBody.state;
                console.log(_this.state);
                $("#twoFaInputDiv").show();
                $("#twoFaExpireDiv").hide();
                _this.manageTimer(responseBody.lifeTime, responseBody.remainingTime);
            }, function (response) {
                console.log(response);
            });
        };
        TwoFaModalController.prototype.testTwoFa = function () {
            var _this = this;
            console.log('validating token...', this.$scope.tokenRef.twofatoken);
            this.$scope.tokenRef.message = '';
            return this.httpClient.post("match-two-fa", { "state": this.state, "token": this.$scope.tokenRef.twofatoken }, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                _this.currentDefer.resolve(response);
                _this.ok();
            })
                .error(function (error, status) {
                console.log(error);
                console.log(status);
                if (status == 412)
                    _this.notify.error("Wrong OTP(One time password)");
                else {
                    _this.currentDefer.reject("");
                    _this.ok();
                }
            });
        };
        TwoFaModalController.$inject = ['$scope', '$modalInstance', 'HttpClient', 'state', 'lifeTime', 'remainingTime', 'emailAddress', '$http', 'currentDefer', 'notify'];
        return TwoFaModalController;
    }());
    ums.TwoFaModalController = TwoFaModalController;
    ums.UMS.controller('TwoFaModalController', TwoFaModalController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CertificateService = (function () {
        function CertificateService($q, httpClient) {
            this.$q = $q;
            this.httpClient = httpClient;
        }
        CertificateService.prototype.getCertificateReport = function (feeCategoryId, studentId, semesterId) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = studentId + feeCategoryId;
            console.log("Fee category");
            console.log(feeCategoryId);
            this.httpClient.get("certificate/report?feeCategory=" + feeCategoryId + "&studentId=" + studentId + "&semesterId=" + semesterId, contentType, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        CertificateService.$inject = ['$q', 'HttpClient'];
        return CertificateService;
    }());
    ums.CertificateService = CertificateService;
    ums.UMS.service("CertificateService", CertificateService);
})(ums || (ums = {}));
///<reference path="ProgramSelectorModel.ts"/>
var ums;
(function (ums) {
    var TeacherAssignmentSearchParamModel = (function () {
        function TeacherAssignmentSearchParamModel(appConstants, httpClient, enableSemester, pEnableAllDepartment, pEnableAllProgram) {
            this.programSelector = new ums.ProgramSelectorModel(appConstants, httpClient, enableSemester, pEnableAllDepartment, pEnableAllProgram);
            this.semesterId = '';
            this.academicYearId = '';
            this.academicSemesterId = '';
            this.courseCategoryId = '';
            this.courseId = '';
        }
        return TeacherAssignmentSearchParamModel;
    }());
    ums.TeacherAssignmentSearchParamModel = TeacherAssignmentSearchParamModel;
})(ums || (ums = {}));
///<reference path="ProgramSelectorModel.ts"/>
var ums;
(function (ums) {
    var CourseTeacherSearchParamModel = (function () {
        function CourseTeacherSearchParamModel(appConstants, httpClient) {
            this.programSelector = new ums.ProgramSelectorModel(appConstants, httpClient);
            this.semesterId = '';
            this.academicYearId = '';
            this.academicSemesterId = '';
            this.courseCategoryId = '';
            this.courseId = '';
        }
        return CourseTeacherSearchParamModel;
    }());
    ums.CourseTeacherSearchParamModel = CourseTeacherSearchParamModel;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CourseTeacherModel = (function () {
        function CourseTeacherModel() {
        }
        return CourseTeacherModel;
    }());
    ums.CourseTeacherModel = CourseTeacherModel;
})(ums || (ums = {}));
/**
 * Created by My Pc on 04-Jan-17.
 */
/**
 * Created by Monjur-E-Morshed on 08-Dec-16.
 */
/**
 * Created by My Pc on 04-Jan-17.
 */
var ums;
(function (ums) {
    var ContextMenuDirective = (function () {
        function ContextMenuDirective() {
            var _this = this;
            this.restrict = 'EA';
            this.scope = {
                mergeInitialization: '&mergeInitialization',
                splitCourseStudent: '&splitCourseStudent',
                revertSplitAction: '&revertSplitAction',
                mergeGroups: '&mergeGroups'
            };
            //public templateUrl:string="./views/directive/context-menu.html";
            this.link = function (scope, element, attributes) {
                var currentScope = _this;
                var color = element.css("color");
                element.addClass('mouse-effect').on("contextmenu", function (event) {
                    // Avoid the real one
                    event.preventDefault();
                    // Show contextmenu
                    $(".custom-menu").finish().toggle(100).
                        // In the right position (the mouse)
                        css({
                        top: event.pageY - $("#topbar").height() + "px",
                        left: event.pageX - $("#sidebar").width() + "px"
                    });
                });
                // If the document is clicked somewhere
                element.addClass('mouse-effect').bind("mousedown", function (e) {
                    // If the clicked element is not the menu
                    if (!($(e.target).parents(".custom-menu").length > 0)) {
                        // Hide it
                        $(".custom-menu").hide(100);
                    }
                });
                /*with the mouse down jquery function, we are getting the event only of right button,
                 * that's why the case is 3.
                 * with the line: $(this).attr('id') , we are getting the id when the right mouse button click event is triggered.*/
                var classScope = _this;
                /* element.mousedown(function(event){
                 switch(event.which){
                 case 1:
                 currentScope.scope.mergeInitialization();
                 break;
                 case 3:
        
                 break;
                 }
                 });*/
                element.addClass('context-menu li').click(function () {
                    $(".custom-menu").hide(100);
                    // This is the triggered action name
                    switch ($(this).attr("data-action")) {
                        case "split":
                            console.log("split");
                            currentScope.scope.splitCourseStudent();
                            break;
                        case "revertSplit":
                            currentScope.scope.revertSplitAction();
                            break;
                        case "merge":
                            currentScope.scope.mergeGroups();
                            break;
                    }
                    $(".custom-menu").hide(100);
                });
            };
        }
        return ContextMenuDirective;
    }());
    ums.UMS.directive("contextMenu", function () { return new ContextMenuDirective(); });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CourseRegTypeLegend = (function () {
        function CourseRegTypeLegend() {
            this.restrict = "E";
            this.scope = {
                data: '='
            };
            this.link = function (scope, element, attributes) {
                scope.examType = attributes.examtype;
            };
            this.templateUrl = "./views/directive/course-reg-type-legend.html";
        }
        return CourseRegTypeLegend;
    }());
    ums.CourseRegTypeLegend = CourseRegTypeLegend;
    ums.UMS.directive("courseRegTypeLegend", function () { return new CourseRegTypeLegend(); });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var EmitLastRepeaterElement = (function () {
        function EmitLastRepeaterElement() {
            this.restrict = 'A';
            this.link = function (scope, element, attrs) {
                if (scope.$last) {
                    scope.$emit('LastRepeaterElement');
                }
            };
        }
        return EmitLastRepeaterElement;
    }());
    ums.EmitLastRepeaterElement = EmitLastRepeaterElement;
    ums.UMS.directive("emitLastRepeaterElement", [function () { return new EmitLastRepeaterElement(); }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SubGroupSortable = (function () {
        function SubGroupSortable() {
            this.restrict = "A";
            this.scope = {
                tempGroupList: "="
            };
            this.link = function (scope, element, attributes) {
                element.find('ul').sortable();
            };
            this.templateUrl = "./views/directive/sub-group-sortable.html";
        }
        return SubGroupSortable;
    }());
    ums.SubGroupSortable = SubGroupSortable;
    ums.UMS.directive("subGroupSortable", function () { return new SubGroupSortable(); });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var TimeLogging = (function () {
        function TimeLogging($compile, $timeout, $log, timeTracker) {
            var _this = this;
            this.$compile = $compile;
            this.$timeout = $timeout;
            this.$log = $log;
            this.timeTracker = timeTracker;
            this.link = function (scope, element, attrs) {
                if (scope.$last) {
                    _this.$timeout(function () {
                        var timeFinishedLoadingList = _this.timeTracker.reviewListLoaded();
                        var ref = new Date(timeFinishedLoadingList);
                        var end = new Date();
                        _this.$log.debug("## DOM rendering list took: " + (end - ref) + " ms");
                    });
                }
            };
        }
        TimeLogging.$inject = ['$compile', '$timeout', '$log', 'timeTracker'];
        return TimeLogging;
    }());
    ums.TimeLogging = TimeLogging;
    ums.UMS.directive("timeLogging", [function ($compile, $timeout, $log, timeTracker) { return new TimeLogging($compile, $timeout, $log, timeTracker); }]);
})(ums || (ums = {}));
/*
How to use.
* <tr ng-repeat="item in items" post-repeat-directive>…</tr>*/ 
var ums;
(function (ums) {
    var StudentPaymentInformation = (function () {
        function StudentPaymentInformation($scope, $rootScope, $window, $http, $templateCache, httpClient, $transition, studentService, paymentService, detailStudentPaymentService, feeTypeService, appConstants, notify, semesterService, $q, paymentStatusService, detailedStudentPaymentService, userService, feeReportService) {
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$window = $window;
            this.$http = $http;
            this.$templateCache = $templateCache;
            this.httpClient = httpClient;
            this.$transition = $transition;
            this.studentService = studentService;
            this.paymentService = paymentService;
            this.detailStudentPaymentService = detailStudentPaymentService;
            this.feeTypeService = feeTypeService;
            this.appConstants = appConstants;
            this.notify = notify;
            this.semesterService = semesterService;
            this.$q = $q;
            this.paymentStatusService = paymentStatusService;
            this.detailedStudentPaymentService = detailedStudentPaymentService;
            this.userService = userService;
            this.feeReportService = feeReportService;
            this.transactionId = '';
            this.lateFee = 0;
            this.lastPaymentDate = '';
            this.initialize();
        }
        StudentPaymentInformation.prototype.initialize = function () {
            this.showExtension = true;
            this.studentId = '';
            this.fetchFeeTypes();
            this.feeGroups = [];
            this.feeGroups = this.appConstants.feeGroup;
            this.selectedFeeGroup = this.feeGroups[1];
            this.fetchAllSemesters();
            this.createFeeGroupMap();
            this.createPaymentMethodMap();
        };
        StudentPaymentInformation.prototype.fetchAllSemesters = function () {
            var _this = this;
            this.semesterIdMapSemester = {};
            this.semesterService.fetchSemesters(ums.Utils.UG, 40).then(function (semesters) {
                _this.semesters = [];
                _this.semesters = semesters;
                _this.semesters.forEach(function (s) {
                    _this.semesterIdMapSemester[s.id] = s;
                });
            });
        };
        StudentPaymentInformation.prototype.search = function () {
            this.showExpired = true;
            if (!this.studentId)
                this.notify.warn("Please enter a student id");
            else {
                ums.Utils.expandRightDiv();
                this.getStudentInformation();
                this.getStudentPaymentInformation(this.studentId);
            }
        };
        StudentPaymentInformation.prototype.extend = function (studentPayment) {
            this.extendablePayment = studentPayment;
            this.transactionId = studentPayment.transactionId;
            this.lateFee = 0;
            this.lastPaymentDate = "";
        };
        StudentPaymentInformation.prototype.updateExtension = function () {
            var _this = this;
            this.paymentService.saveTransactionDeadlineExtension(this.transactionId, this.lateFee, this.lastPaymentDate).then(function (res) {
                _this.notify.success("Deadline Extension Success");
                _this.search();
            });
        };
        StudentPaymentInformation.prototype.expireStatusChanged = function () {
            this.semesterPaymentMap = {};
            this.getStudentInformation();
            this.getStudentPaymentInformation(this.studentId);
        };
        StudentPaymentInformation.prototype.resetCommonCollapsibleDivs = function () {
            $("#arrowDiv").hide(10);
            $("#leftDiv").show(200);
        };
        StudentPaymentInformation.prototype.createFeeGroupMap = function () {
            this.feeGroupMap = {};
            this.feeGroupMap[1] = "UG New Admission";
            this.feeGroupMap[2] = "UG Semester Fee";
            this.feeGroupMap[3] = "UG Semester Fee (1st Installment)";
            this.feeGroupMap[4] = "UG Semester Fee (2nd Installment)";
            this.feeGroupMap[5] = "UG Re-admission Fee";
            this.feeGroupMap[6] = "UG Re-admission Fee (1st Installment)";
            this.feeGroupMap[7] = "UG Re-admission Fee (2nd Installment)";
            this.feeGroupMap[8] = "UG Carry Registration";
            this.feeGroupMap[9] = "Dues";
            this.feeGroupMap[10] = "Grade Sheet";
            this.feeGroupMap[11] = "Carry Application";
        };
        StudentPaymentInformation.prototype.createPaymentMethodMap = function () {
            this.paymentMethodMap = {};
            this.paymentMethodMap[1] = 'Cash';
            this.paymentMethodMap[2] = 'Pay Order';
            this.paymentMethodMap[3] = 'Cheque';
            this.paymentMethodMap[5] = 'Demand Draft';
        };
        StudentPaymentInformation.prototype.captureStudentId = function (studentId) {
            this.studentId = studentId;
        };
        StudentPaymentInformation.prototype.fetchFeeTypes = function () {
            var _this = this;
            this.feeTypeService.getFeeTypes().then(function (feeTypes) {
                _this.feeTypes = [];
                _this.feeTypes = feeTypes;
                _this.selectedFeeType = _this.feeTypes[0];
            });
        };
        StudentPaymentInformation.prototype.getStudentInformation = function () {
            var _this = this;
            this.studentService.getStudentById(this.studentId).then(function (student) {
                _this.student = student;
                _this.getStudentPaymentInformation(_this.student.id);
                _this.createPaymentStatusMapWithTransactionId();
            });
        };
        StudentPaymentInformation.prototype.getStudentPaymentInformation = function (studentId) {
            var _this = this;
            this.paymentService.getPaymentsByStudentId(studentId).then(function (payments) {
                _this.payments = [];
                _this.paymentsTmp = [];
                _this.payments = payments.entries;
                _this.paymentsTmp = angular.copy(payments.entries);
                _this.configurePaymentSemesters(_this.payments);
            });
        };
        StudentPaymentInformation.prototype.getSemesterPaymentReport = function (semesterId) {
            console.log('In semester payment report');
            this.paymentService.getStudentSemesterPaymentReport(this.studentId, semesterId, this.showExpired, this.semesterIdMapSemester[semesterId].name).then(function (res) {
            });
        };
        StudentPaymentInformation.prototype.getStudentPaymentDetail = function (transactionId) {
            var _this = this;
            this.transactionIdForDetail = transactionId;
            this.paymentStatusForDetail = this.paymentStatusMapTransactionId[transactionId];
            this.totalAmount = 0;
            this.detailedStudentPaymentService.getDetailedStudentPaymentByTransactionId(transactionId).then(function (detailedStudentPayments) {
                _this.detailedStudentPayments = [];
                _this.detailedStudentPayments = detailedStudentPayments;
                detailedStudentPayments.forEach(function (d) {
                    _this.totalAmount += d.amount;
                });
            });
        };
        StudentPaymentInformation.prototype.createPaymentStatusMapWithTransactionId = function () {
            var _this = this;
            this.paymentStatusService.getPaymentStatusByStudent(this.studentId).then(function (paymentStatus) {
                _this.paymentStatusMapTransactionId = {};
                paymentStatus.forEach(function (s) {
                    _this.paymentStatusMapTransactionId[s.transactionId] = s;
                });
            });
        };
        StudentPaymentInformation.prototype.configurePaymentSemesters = function (payments) {
            var _this = this;
            this.createSemesterPaymentMap(payments).then(function (semesterPaymentMap) {
                _this.paymentRelatedSemesters = [];
                _this.semesters.forEach(function (s) {
                    if (_this.semesterPaymentMap[s.id] != undefined) {
                        _this.paymentRelatedSemesters.push(s);
                    }
                });
            });
        };
        StudentPaymentInformation.prototype.createSemesterPaymentMap = function (payments) {
            var _this = this;
            var defer = this.$q.defer();
            this.semesterPaymentMap = {};
            this.semesterIdMapTotalAmount = {};
            this.transactionIdMapPayment = {};
            this.totalPaidAmount = 0;
            payments.forEach(function (p) {
                _this.totalPaidAmount += p.status == 'VERIFIED' ? p.amount : 0;
                _this.transactionIdMapPayment[p.transactionId] = p;
                if (_this.semesterPaymentMap[p.semesterId] != undefined) {
                    if (_this.showExpired == true) {
                        var payments_1 = _this.semesterPaymentMap[+p.semesterId];
                        payments_1.push(p);
                        _this.semesterPaymentMap[p.semesterId] = payments_1;
                    }
                    else if (_this.showExpired == false && p.status !== 'EXPIRED') {
                        var payments_2 = _this.semesterPaymentMap[+p.semesterId];
                        payments_2.push(p);
                        _this.semesterPaymentMap[p.semesterId] = payments_2;
                    }
                    if (p.status == "VERIFIED") {
                        var amount = _this.semesterIdMapTotalAmount[p.semesterId] == undefined ? 0 : _this.semesterIdMapTotalAmount[p.semesterId];
                        _this.semesterIdMapTotalAmount[p.semesterId] = amount + p.amount;
                    }
                }
                else {
                    if (_this.showExpired == true) {
                        var payments_3 = [];
                        payments_3.push(p);
                        _this.semesterPaymentMap[p.semesterId] = payments_3;
                    }
                    else if (_this.showExpired == false && p.status !== 'EXPIRED') {
                        var payments_4 = [];
                        payments_4.push(p);
                        _this.semesterPaymentMap[p.semesterId] = payments_4;
                    }
                    if (p.status == "VERIFIED") {
                        _this.semesterIdMapTotalAmount[p.semesterId] = p.amount;
                    }
                }
            });
            defer.resolve(this.semesterPaymentMap);
            return defer.promise;
        };
        StudentPaymentInformation.prototype.downloadDepositSlip = function (transactionId) {
            this.feeReportService.receipt(transactionId);
        };
        StudentPaymentInformation.$inject = ['$scope', '$rootScope', '$window', '$http', '$templateCache', 'HttpClient', '$transitions', 'studentService', 'PaymentService', 'DetailedStudentPaymentService', 'FeeTypeService', 'appConstants', 'notify', 'semesterService', '$q', 'PaymentStatusService', 'DetailedStudentPaymentService', 'userService', 'FeeReportService'];
        return StudentPaymentInformation;
    }());
    ums.StudentPaymentInformation = StudentPaymentInformation;
    ums.UMS.controller('StudentPaymentInformation', StudentPaymentInformation);
})(ums || (ums = {}));
///<reference path="../../../../../ums-web-core/src/main/ts/controller/StudentPaymentInformation.ts"/>
var ums;
(function (ums) {
    var StudentProfilePaymentInformation = (function (_super) {
        __extends(StudentProfilePaymentInformation, _super);
        function StudentProfilePaymentInformation($scope, $rootScope, $window, $http, $templateCache, httpClient, $transition, studentService, paymentService, detailStudentPaymentService, feeTypeService, appConstants, notify, semesterService, $q, paymentStatusService, detailedStudentPaymentService, userService, $timeout, feeReportService) {
            var _this = _super.call(this, $scope, $rootScope, $window, $http, $templateCache, httpClient, $transition, studentService, paymentService, detailedStudentPaymentService, feeTypeService, appConstants, notify, semesterService, $q, paymentStatusService, detailedStudentPaymentService, userService, feeReportService) || this;
            _this.$scope = $scope;
            _this.$rootScope = $rootScope;
            _this.$window = $window;
            _this.$http = $http;
            _this.$templateCache = $templateCache;
            _this.httpClient = httpClient;
            _this.$transition = $transition;
            _this.studentService = studentService;
            _this.paymentService = paymentService;
            _this.detailStudentPaymentService = detailStudentPaymentService;
            _this.feeTypeService = feeTypeService;
            _this.appConstants = appConstants;
            _this.notify = notify;
            _this.semesterService = semesterService;
            _this.$q = $q;
            _this.paymentStatusService = paymentStatusService;
            _this.detailedStudentPaymentService = detailedStudentPaymentService;
            _this.userService = userService;
            _this.$timeout = $timeout;
            _this.feeReportService = feeReportService;
            console.log('in the student payment information directive');
            _this.showStudentInformation = _this.$scope.showStudentInformation;
            setTimeout(function () {
                $('.make-switch').bootstrapSwitch();
            }, 50);
            return _this;
        }
        StudentProfilePaymentInformation.prototype.initialize = function () {
            var _this = this;
            console.log('provided student id');
            console.log(this.$scope.providedStudentId);
            this.showExtension = false;
            this.userService.fetchCurrentUserInfo().then(function (user) {
                console.log("Fetched current user");
                if (_this.$scope.providedStudentId) {
                    _this.studentId = _this.$scope.providedStudentId;
                }
                else {
                    _this.studentId = user.id;
                }
                _this.fetchFeeTypes();
                _this.feeGroups = [];
                _this.feeGroups = _this.appConstants.feeGroup;
                _this.selectedFeeGroup = _this.feeGroups[1];
                _this.fetchAllSemesters();
                _this.createFeeGroupMap();
                _this.createPaymentMethodMap();
                _this.search();
            });
        };
        StudentProfilePaymentInformation.$inject = ['$scope', '$rootScope', '$window', '$http', '$templateCache', 'HttpClient', '$transitions', 'studentService', 'PaymentService', 'DetailedStudentPaymentService', 'FeeTypeService', 'appConstants', 'notify', 'semesterService', '$q', 'PaymentStatusService', 'DetailedStudentPaymentService', 'userService', '$timeout', 'FeeReportService'];
        return StudentProfilePaymentInformation;
    }(ums.StudentPaymentInformation));
    ums.StudentProfilePaymentInformation = StudentProfilePaymentInformation;
    var StudentPaymentInformationDir = (function () {
        function StudentPaymentInformationDir() {
            this.restrict = 'EA';
            this.scope = {
                showStudentInformation: '=showStudentInformation',
                providedStudentId: '=providedStudentId'
            };
            this.controller = StudentProfilePaymentInformation;
            this.controllerAs = 'vm';
            this.link = function (scope, element, attributes) {
            };
            this.templateUrl = "./views/student-payment-information/student-profile-payment-information.html";
        }
        return StudentPaymentInformationDir;
    }());
    ums.UMS.directive("studentPaymentInformationDir", [function () {
            return new StudentPaymentInformationDir();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var IRoutineStore = (function () {
        function IRoutineStore() {
        }
        return IRoutineStore;
    }());
    var ClassRoutineDirController = (function () {
        function ClassRoutineDirController($scope, classRoomService, courseService, appConstants, $timeout, semesterService, $q) {
            this.$scope = $scope;
            this.classRoomService = classRoomService;
            this.courseService = courseService;
            this.appConstants = appConstants;
            this.$timeout = $timeout;
            this.semesterService = semesterService;
            this.$q = $q;
            this.anchorPrefix = ".btn.btn-xs.btn-default.";
            $scope.days = appConstants.weekDays;
            $scope.checker = appConstants.timeChecker;
            var times = ['08:00 am'];
            $scope.routineTime = appConstants.routineTime;
            $scope.routineStore = [];
            $scope.weekday = appConstants.weekday;
            $scope.showByDay = false;
            $scope.routineMapWithDayAndTime = {};
            $scope.updateDate = this.updateDate.bind(this);
            $scope.viewByDay = this.viewByDay.bind(this);
            $scope.viewByCompleteTable = this.viewByCompleteTable.bind(this);
            $scope.times = ["08:00 AM", "08:50 AM", "09:40 AM", "10:30 AM", "11:20 AM", "12:10 PM", "01:00 PM", "01:50 PM", "02:40 PM", "03:30 PM", "04:20 PM", "05:10 PM"];
            $scope.timeChecker = "08.00 AM";
            $scope.colspan = 1;
            this.getCurrentDate();
            this.getCurrentSemester();
        }
        ClassRoutineDirController.prototype.getCurrentSemester = function () {
            var _this = this;
            var underGraduateProgramType = 11;
            var active = 1;
            this.semesterService.fetchSemesters(underGraduateProgramType).then(function (semester) {
                _this.$scope.currentSemester = semester.filter(function (s) { return s.status == active; })[0];
            });
        };
        ClassRoutineDirController.prototype.viewByDay = function () {
            this.resetSelection();
            $(this.anchorPrefix + "listView").css({ "background-color": "black" });
            $(".fa.fa-bars").css({ "color": "white" });
            this.$scope.showByDay = true;
        };
        ClassRoutineDirController.prototype.viewByCompleteTable = function () {
            this.resetSelection();
            $(this.anchorPrefix + "detailView").css({ "background-color": "black" });
            $(".fa.fa-table").css({ "color": "white" });
            this.$scope.showByDay = false;
            this.createRoutine();
        };
        ClassRoutineDirController.prototype.resetSelection = function () {
            $(this.anchorPrefix + "detailView").css({ "background-color": "white" });
            $(this.anchorPrefix + "listView").css({ "background-color": "white" });
            $(".fa.fa-table").css({ "color": "black" });
            $(".fa.fa-bars").css({ "color": "black" });
        };
        ClassRoutineDirController.prototype.createRoutineMap = function () {
            var _this = this;
            this.$scope.routineMapWithDayAndTime = {};
            var defer = this.$q.defer();
            var routineList = this.$scope.routines;
            routineList.forEach(function (r) {
                if (_this.$scope.routineMapWithDayAndTime[r.day + r.startTime] == null) {
                    _this.$scope.routineMapWithDayAndTime[r.day + r.startTime] = r.section;
                }
                else {
                    _this.$scope.routineMapWithDayAndTime[r.day + r.startTime] = _this.$scope.routineMapWithDayAndTime[r.day + r.startTime] + "+" + r.section;
                }
            });
            defer.resolve(this.$scope.routineMapWithDayAndTime);
            return defer.promise;
        };
        ClassRoutineDirController.prototype.createRoutine = function () {
            var _this = this;
            this.createRoutineMap().then(function (routineSectionMapWIthDateAndTime) {
                var routine = _this.$scope.routines;
                console.log("All routines");
                console.log(routine);
                var routineStoreArr = [];
                for (var d = 0; d < _this.$scope.days.length; d++) {
                    for (var i = 0; i < 12; i++) {
                        var found = false;
                        var tmpRoutineStore = new IRoutineStore();
                        for (var routines = 0; routines < routine.length; routines++) {
                            if (routine[routines].startTime == _this.$scope.times[i] && routine[routines].day == Number(_this.$scope.days[d].id)) {
                                var routineStore = new IRoutineStore();
                                routineStore.day = "0" + routine[routines].day.toString();
                                routineStore.colspan = routine[routines].duration.toString(); //routine[routines].courseId;
                                routineStore.courseId = _this.$scope.courseMap[routine[routines].courseId].no;
                                routineStore.roomNo = _this.$scope.roomMap[routine[routines].roomId].roomNo;
                                var tmpRoutine = routine[routines];
                                routineStore.section = "(" + routineSectionMapWIthDateAndTime[tmpRoutine.day + tmpRoutine.startTime] + ")";
                                //routineStore.roomNo=this.$scope.roomMap[routine[routines].id].roomNo;
                                routineStoreArr.push(routineStore);
                                i = i + (routine[routines].duration - 1);
                                found = true;
                                break;
                            }
                        }
                        if (found == false) {
                            var routineStore = new IRoutineStore();
                            routineStore.day = "0" + (d + 1).toString();
                            routineStore.colspan = "1";
                            routineStore.courseId = "";
                            routineStore.roomNo = "";
                            routineStoreArr.push(routineStore);
                        }
                    }
                }
                _this.$scope.routineStore = routineStoreArr;
            });
        };
        ClassRoutineDirController.prototype.getCurrentDate = function () {
            var d = new Date();
            var date = d.getDay();
            if ((date + 2) == 8) {
                date = 1;
            }
            else if ((date + 2) == 9) {
                date = 2;
            }
            else {
                date = date + 2;
            }
            this.$scope.currentDate = String(date);
        };
        ClassRoutineDirController.prototype.updateDate = function (day) {
            this.$scope.currentDate = String(day);
        };
        ClassRoutineDirController.$inject = ['$scope', 'classRoomService', 'courseService', 'appConstants', '$timeout', 'semesterService', '$q'];
        return ClassRoutineDirController;
    }());
    var ClassRoutineDir = (function () {
        function ClassRoutineDir() {
            this.restrict = "A";
            this.scope = {
                routines: '=routines',
                courseMap: '=courseMap',
                roomMap: '=roomMap'
            };
            this.controller = ClassRoutineDirController;
            this.link = function (scope, element, attributes) {
                for (var i = 0; i < scope.routines.length; i++) {
                    scope.routines[i].day = String(scope.routines[i].day);
                }
                scope.$watch('routines', function (newVal, oldVal) {
                    if (newVal) {
                        scope.viewByCompleteTable();
                    }
                });
            };
            this.templateUrl = "./views/directive/class-routine-dir.html";
        }
        return ClassRoutineDir;
    }());
    ums.UMS.directive("classRoutineDir", [function () {
            return new ClassRoutineDir();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var RoutineSlotDirController = (function () {
        function RoutineSlotDirController($scope, classRoomService, courseService, appConstants, $timeout, semesterService, $q, routineConfigService, classRoutineService) {
            this.$scope = $scope;
            this.classRoomService = classRoomService;
            this.courseService = courseService;
            this.appConstants = appConstants;
            this.$timeout = $timeout;
            this.semesterService = semesterService;
            this.$q = $q;
            this.routineConfigService = routineConfigService;
            this.classRoutineService = classRoutineService;
            this.initialize();
        }
        RoutineSlotDirController.prototype.initialize = function () {
            if (this.$scope.routineSlot != undefined) {
                this.routineList = angular.copy(this.$scope.routineSlot.routineList);
                this.routineSlot = angular.copy(this.$scope.routineSlot);
            }
            this.createSlot();
        };
        RoutineSlotDirController.prototype.getColSpan = function (routine) {
            var slotStartTime = moment(routine.startTime, 'hh:mm A');
            var slotEndTime = moment(routine.endTime, 'hh:mm A');
            var diff = slotEndTime.diff(slotStartTime, 'minutes');
            var colSpan = diff / this.routineConfigService.routineConfig.duration;
            return colSpan.toString();
        };
        RoutineSlotDirController.prototype.createSlot = function () {
            if (this.routineList == undefined || this.routineList.length == 0)
                this.template = '';
            else {
                this.template = "<table class='table table-bordered' style=\"width: 100%;\">";
                this.template = this.template + "<tr>";
                var groupStartTime = moment(this.routineSlot.startTime, 'hh:mm A');
                var groupEndTime = moment(this.routineSlot.endTime, 'hh:mm A');
                var iterationLength = (groupEndTime.diff(groupStartTime, 'minutes')) / this.routineConfigService.routineConfig.duration;
                var iterationStartTime = angular.copy(this.routineSlot.startTime);
                this.routineRows = [];
                while (this.routineList.length > 0) {
                    var routineRow = {};
                    routineRow.routineList = [];
                    var iterationStartTime_1 = angular.copy(this.routineSlot.startTime);
                    for (var i = 0; i < iterationLength; i++) {
                        if (this.routineList.length == 0 && i == (iterationLength))
                            break;
                        if (this.routineList.length == 0) {
                            var iterationStartTimeObj = moment(iterationStartTime_1, 'hh:mm A');
                            var emptyRoutine = {};
                            emptyRoutine.startTime = iterationStartTime_1;
                            this.template = this.template + "<td></td>";
                            iterationStartTimeObj = moment(iterationStartTimeObj).add(this.routineConfigService.routineConfig.duration, 'm').toDate();
                            iterationStartTime_1 = moment(iterationStartTimeObj).format("hh:mm A");
                            emptyRoutine.endTime = iterationStartTime_1;
                            routineRow.routineList.push(emptyRoutine);
                        }
                        else {
                            this.routine = angular.copy(this.routineList.shift());
                            var slotStartTime = moment(this.routine.startTime, 'hh:mm A');
                            var breakCondition = false;
                            if (iterationStartTime_1 == this.routine.startTime) {
                                routineRow.routineList.push(angular.copy(this.routine));
                                var slotEndTime = moment(this.routine.endTime, 'hh:mm A');
                                var diff = slotEndTime.diff(slotStartTime, 'minutes');
                                this.colSpan = diff / this.routineConfigService.routineConfig.duration;
                                /*this.template = this.template+'<td align="center" colspan="'+this.colSpan.toString()+'">';
                                this.template = this.template+this.routine.course.no+" ("+this.routine.section+")<br>"+this.routine.room.roomNo;*/
                                this.template = this.template + "</td>";
                                if (this.routine.endTime == this.routineSlot.endTime) {
                                    iterationStartTime_1 = angular.copy(this.routineSlot.startTime);
                                    this.template = this.template + '</tr>';
                                    breakCondition = true;
                                    if (iterationStartTime_1 == this.routineSlot.endTime)
                                        break;
                                }
                                else {
                                    /*let iterationStartTimeObj:any = moment(iterationStartTime, 'hh:mm A');
                                    iterationStartTimeObj = moment(iterationStartTimeObj).add(this.routineConfigService.routineConfig.duration,'m').toDate();
                                    iterationStartTime = moment(iterationStartTimeObj).format("hh:mm A");*/
                                    iterationStartTime_1 = this.routine.endTime;
                                    if (iterationStartTime_1 == this.routineSlot.endTime)
                                        break;
                                }
                                if (breakCondition)
                                    break;
                            }
                            else {
                                this.routineList.unshift(this.routine);
                                var iterationStartTimeObj = moment(iterationStartTime_1, 'hh:mm A');
                                var emptyRoutine = {};
                                emptyRoutine.startTime = iterationStartTime_1;
                                this.template = this.template + "<td></td>";
                                iterationStartTimeObj = moment(iterationStartTimeObj).add(this.routineConfigService.routineConfig.duration, 'm').toDate();
                                iterationStartTime_1 = moment(iterationStartTimeObj).format("hh:mm A");
                                emptyRoutine.endTime = iterationStartTime_1;
                                routineRow.routineList.push(emptyRoutine);
                                if (iterationStartTime_1 == this.routineSlot.endTime)
                                    break;
                            }
                            if (iterationStartTime_1 == this.routineSlot.endTime)
                                break;
                        }
                        if (iterationStartTime_1 == this.routineSlot.endTime)
                            break;
                    }
                    this.routineRows.push(routineRow);
                    // this.template = this.template+"</tr>";
                }
                /*this.template=
                    `
                <table class="table table-bordered">
                     <tr ng-repeat="routine in vm.routineList">
                        <td align="center">
                            {{routine.course.no}}({{routine.section}})<br>
                            {{routine.room.roomNo}}<br>
                            {{vm.getCourseTeacherByCourseAndSection(routine.courseId, routine.section)}}
                        </td>
                    </tr>
                </table>
                `;*/
            }
        };
        RoutineSlotDirController.prototype.getCourseTeacher = function (courseId, section) {
            var courseTeacherStr = "(";
            if (this.classRoutineService.courseTeacherMapWithCourseIdAndSection[courseId + section] == undefined)
                courseTeacherStr = courseTeacherStr + "TBA";
            else {
                var courseTeacherList = this.classRoutineService.courseTeacherMapWithCourseIdAndSection[courseId + section];
                var courseTeacherInitials_3 = [];
                courseTeacherList.forEach(function (c) {
                    courseTeacherInitials_3.push(c.shortName);
                });
                courseTeacherStr = courseTeacherStr + courseTeacherInitials_3.join(",");
            }
            courseTeacherStr = courseTeacherStr + ")";
            return courseTeacherStr;
        };
        RoutineSlotDirController.prototype.getLoadedCourseTeacher = function (courseId, startTime, endTime, section, day) {
            var courseTeacherStr = "(";
            if (this.classRoutineService.routineTeacherLoadMap[day + courseId + startTime + endTime + section] == undefined) {
                courseTeacherStr = courseTeacherStr + "TBA";
            }
            else {
                var courseTeacherList = this.classRoutineService.routineTeacherLoadMap[day + courseId + startTime + endTime + section];
                var courseTeacherInitials_4 = [];
                courseTeacherList.forEach(function (c) {
                    courseTeacherInitials_4.push(c.teacherInitial);
                });
                courseTeacherStr = courseTeacherStr + courseTeacherInitials_4.join(",");
            }
            courseTeacherStr = courseTeacherStr + ")";
            return courseTeacherStr;
        };
        RoutineSlotDirController.$inject = ['$scope', 'classRoomService', 'courseService', 'appConstants', '$timeout', 'semesterService', '$q', 'routineConfigService', 'classRoutineService'];
        return RoutineSlotDirController;
    }());
    var RoutineSlotDir = (function () {
        function RoutineSlotDir() {
            this.restrict = 'EA';
            this.scope = {
                routineSlot: '=routineSlot'
            };
            this.controller = RoutineSlotDirController;
            this.controllerAs = "vm";
            this.link = function (scope, element, attributes) {
            };
            this.templateUrl = "./views/directive/routine-slot-dir.html";
        }
        return RoutineSlotDir;
    }());
    ums.UMS.directive("routineSlotDir", [function () {
            return new RoutineSlotDir();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ClassRoutineChartController = (function () {
        function ClassRoutineChartController($scope, appConstants, httpClient, $q, notify, $sce, $window, semesterService, courseService, classRoomService, classRoutineService, $timeout, userService, routineConfigService, $state, employeeService, courseTeacherService, employeeSearchService, routineTeacherLoadService, dummyNewEmployeeService) {
            this.$scope = $scope;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.courseService = courseService;
            this.classRoomService = classRoomService;
            this.classRoutineService = classRoutineService;
            this.$timeout = $timeout;
            this.userService = userService;
            this.routineConfigService = routineConfigService;
            this.$state = $state;
            this.employeeService = employeeService;
            this.courseTeacherService = courseTeacherService;
            this.employeeSearchService = employeeSearchService;
            this.routineTeacherLoadService = routineTeacherLoadService;
            this.dummyNewEmployeeService = dummyNewEmployeeService;
            this.counter = 0;
            this.showProgressBar = false;
            this.progress = 0;
            this.courseTeacherList = [];
            this.showSlotEditForm = false;
            this.showRoutineChart = false;
            $scope.init = this.init.bind(this);
        }
        ClassRoutineChartController.prototype.init = function () {
            this.classRoutineService.showChartLoader = true;
            this.classRoutineService.enableSaveButton = true;
            if (this.classRoutineService.enableEdit) {
                this.getCourseList();
                this.getClassRoomList();
                this.getTeacherList();
            }
            this.showProgressBar = false;
            this.showSlotEditForm = false;
            this.showRoutineChart = false;
            this.progress = 0;
            this.createRoutineBody();
            this.getRoutineTeacherLoad();
        };
        ClassRoutineChartController.prototype.getRoutineTeacherLoad = function () {
            var _this = this;
            if (this.classRoutineService.routineData.length == 0)
                return;
            var courseIdList = [];
            this.classRoutineService.routineData.forEach(function (r) {
                courseIdList.push(r.courseId);
            });
            this.routineTeacherLoadService.getBySemesterAndCourseIdList(this.classRoutineService.selectedSemester.id, courseIdList).then(function (routineTeacherLoad) {
                if (routineTeacherLoad == undefined)
                    _this.notify.error("Error in fetching routine-teacher-load");
                else {
                    _this.classRoutineService.routineTeacherLoadList = [];
                    _this.classRoutineService.routineTeacherLoadList = routineTeacherLoad;
                    _this.createRoutineTeacherLoadMap();
                }
            });
        };
        ClassRoutineChartController.prototype.createRoutineTeacherLoadMap = function () {
            var _this = this;
            this.classRoutineService.routineTeacherLoadMap = {};
            this.classRoutineService.routineTeacherLoadList.forEach(function (r) {
                var key = r.day + r.courseId + r.startTime + r.endTime + r.section;
                if (_this.classRoutineService.routineTeacherLoadMap[key] == undefined) {
                    var routineTeacherLoadList = [];
                    routineTeacherLoadList.push(r);
                    _this.classRoutineService.routineTeacherLoadMap[key] = routineTeacherLoadList;
                }
                else {
                    var routineTeacherLoadList = _this.classRoutineService.routineTeacherLoadMap[key];
                    routineTeacherLoadList.push(r);
                    _this.classRoutineService.routineTeacherLoadMap[key] = routineTeacherLoadList;
                }
            });
        };
        ClassRoutineChartController.prototype.createRoutineBody = function () {
            this.showSlotEditForm = false;
            this.showProgressBar = false;
            this.showRoutineChart = false;
            this.progress = 0;
            this.generateHeader();
            this.generateBody();
            this.classRoutineService.dayAndTimeMapWithRoutine = {};
            this.classRoutineService.dayAndTimeMapWithRoutineSlot = {};
            this.createDayAndTimeMapWithGroup();
            this.getCourseTeacher();
        };
        ClassRoutineChartController.prototype.createDayAndTimeMapWithGroup = function () {
            var _this = this;
            this.classRoutineService.dayAndTimeMapWithGroup = {};
            this.classRoutineService.dayAndTimeMapWithRoutine = {};
            this.createGroupMapWithRoutineSlot().then(function (groupMap) {
                _this.classRoutineService.groupList.forEach(function (g) {
                    var routineSlot = _this.classRoutineService.groupMapWithRoutineSlot[g];
                    _this.classRoutineService.dayAndTimeMapWithGroup[routineSlot.day + routineSlot.startTime] = g;
                    //this.classRoutineService.dayAndTimeMapWithRoutine[routineSlot.day+routineSlot.startTime] = routineSlot.routineList;
                });
                _this.createDayAndTimeMapWithRoutine();
            });
        };
        ClassRoutineChartController.prototype.createGroupMapWithRoutineSlot = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.classRoutineService.groupList = [];
            this.classRoutineService.groupMapWithRoutineSlot = {};
            this.classRoutineService.routineData.forEach(function (routine) {
                if (_this.classRoutineService.groupMapWithRoutineSlot[routine.slotGroup] == undefined || _this.classRoutineService.groupMapWithRoutineSlot[routine.slotGroup] == null) {
                    var routineSlot = {};
                    routineSlot.startTime = routine.startTime;
                    routineSlot.endTime = routine.endTime;
                    routineSlot.groupNo = routine.slotGroup;
                    routineSlot.day = routine.day;
                    routineSlot.routineList = [];
                    routineSlot.routineList.push(routine);
                    _this.classRoutineService.groupList.push(routine.slotGroup);
                    _this.classRoutineService.groupMapWithRoutineSlot[routine.slotGroup] = routineSlot;
                }
                else {
                    var routineSlot = angular.copy(_this.classRoutineService.groupMapWithRoutineSlot[routine.slotGroup]);
                    var routineStartTime = moment(routine.startTime, 'hh:mm A');
                    var routineEndTime = moment(routine.endTime, 'hh:mm A');
                    var slotStartTime = moment(routineSlot.startTime, 'hh:mm A');
                    var slotEndTime = moment(routineSlot.endTime, 'hh:mm A');
                    routineSlot.startTime = routineStartTime < slotStartTime ? routine.startTime : routineSlot.startTime;
                    routineSlot.endTime = routineEndTime > slotEndTime ? routine.endTime : routineSlot.endTime;
                    routineSlot.routineList.push(routine);
                    _this.classRoutineService.groupMapWithRoutineSlot[routine.slotGroup] = routineSlot;
                }
            });
            defer.resolve(this.classRoutineService.groupMapWithRoutineSlot);
            return defer.promise;
        };
        ClassRoutineChartController.prototype.createDayAndTimeMapWithRoutineSlot = function () {
            var _this = this;
            this.colSpanWithRoutine = {};
            this.classRoutineService.groupList.forEach(function (group) {
                var routineSlot = _this.classRoutineService.groupMapWithRoutineSlot[group];
                _this.colSpanWithRoutine[routineSlot.day + routineSlot.startTime] = moment(routineSlot.endTime, 'hh:mm A').unix() - moment(routineSlot.startTime, 'hh:mm A').unix();
                _this.classRoutineService.dayAndTimeMapWithRoutineSlot[routineSlot.day + routineSlot.startTime] = routineSlot;
            });
        };
        ClassRoutineChartController.prototype.updateSlotBody = function () {
            var _this = this;
            this.classRoutineService.groupList.forEach(function (group) {
                var routineSlot = _this.classRoutineService.groupMapWithRoutineSlot[group];
                var routineList = angular.copy(routineSlot.routineList);
            });
        };
        ClassRoutineChartController.prototype.deleteRoutine = function (routineList, routine) {
            for (var i = 0; i < routineList.length; i++) {
                if (routineList[i] == routine) {
                    routineList.splice(i, 1);
                    break;
                }
            }
            return routineList;
        };
        ClassRoutineChartController.prototype.createDayAndTimeMapWithRoutine = function () {
            var _this = this;
            this.colSpanWithRoutine = {};
            this.classRoutineService.routineData.forEach(function (routine) {
                var routineTmp = angular.copy(routine); //modified routine (only duration is going to be modified)
                routineTmp.duration = routineTmp.duration; //(routineTmp.duration / this.routineConfigService.routineConfig.duration);  //this simplified duration will help in determining the col-span.
                _this.colSpanWithRoutine[routine.day.toString() + routine.startTime] = routineTmp.duration;
                if (_this.classRoutineService.dayAndTimeMapWithRoutineSlot[routine.day + routine.startTime] == null) {
                    var routineList = [];
                    routineList.push(routineTmp);
                    _this.classRoutineService.dayAndTimeMapWithRoutine[routine.day + routine.startTime] = routineList;
                }
                else {
                    var routineList = _this.classRoutineService.dayAndTimeMapWithRoutine[routine.day.toString() + routine.startTime];
                    routineList.push(routineTmp);
                    _this.classRoutineService.dayAndTimeMapWithRoutine[routine.day + routine.startTime] = routineList;
                }
            });
        };
        ClassRoutineChartController.prototype.getDayAndTimeMapWithRoutine = function (day, startTime) {
            if (this.classRoutineService.dayAndTimeMapWithGroup[day + startTime] == undefined) {
                return undefined;
            }
            else {
                var groupNumber = this.classRoutineService.dayAndTimeMapWithGroup[day + startTime];
                return this.classRoutineService.groupMapWithRoutineSlot[groupNumber];
            }
        };
        ClassRoutineChartController.prototype.getColSpan = function (day, startTime) {
            if (this.classRoutineService.dayAndTimeMapWithGroup[day + startTime] != undefined) {
                var groupNo = this.classRoutineService.dayAndTimeMapWithGroup[day + startTime];
                var routineSlot = this.classRoutineService.groupMapWithRoutineSlot[groupNo];
                var slotStartTime = moment(routineSlot.startTime, 'hh:mm A');
                var slotEndTime = moment(routineSlot.endTime, 'hh:mm A');
                return slotEndTime.diff(slotStartTime, 'minutes');
            }
            else {
                return this.routineConfigService.routineConfig.duration;
            }
        };
        ClassRoutineChartController.prototype.getNextStartTime = function (day, startTime, endTime) {
            var nextStartTime = "";
            if (this.classRoutineService.dayAndTimeMapWithGroup[day + startTime]) {
                var group = this.classRoutineService.dayAndTimeMapWithGroup[day + startTime];
                var routineSlot = this.classRoutineService.groupMapWithRoutineSlot[group];
                nextStartTime = routineSlot.endTime;
            }
            else if (startTime == this.routineConfigService.routineConfig.startTime) {
                nextStartTime = endTime;
            }
            else {
                nextStartTime = endTime;
            }
            return nextStartTime;
        };
        ClassRoutineChartController.prototype.showEditIcon = function (id, day, time) {
            if (this.classRoutineService.enableEdit)
                document.getElementById(id + '-' + day + '-' + time).style.display = "block";
        };
        ClassRoutineChartController.prototype.hideEditIcon = function (id, day, time) {
            if (this.classRoutineService.enableEdit)
                document.getElementById(id + '-' + day + '-' + time).style.display = "none";
        };
        ClassRoutineChartController.prototype.getDayWiseTableHeader = function (day) {
            var modifiedTableHeader = [];
            var nextStartTime = '';
            for (var i = 0; i < this.tableHeader.length; i++) {
                if (i == 0) {
                    nextStartTime = this.getNextStartTime(day, this.tableHeader[i].startTime, this.tableHeader[i].endTime);
                    modifiedTableHeader.push(this.tableHeader[i]);
                }
                else if (nextStartTime == this.tableHeader[i].startTime) {
                    modifiedTableHeader.push(this.tableHeader[i]);
                    nextStartTime = this.getNextStartTime(day, this.tableHeader[i].startTime, this.tableHeader[i].endTime);
                }
                else {
                    //do nothing
                }
            }
            return modifiedTableHeader;
        };
        ClassRoutineChartController.prototype.close = function () {
            var _this = this;
            this.classRoutineService.getClassRoutineForEmployee(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id, +this.classRoutineService.studentsYear, +this.classRoutineService.studentsSemester, this.classRoutineService.selectedTheorySection.id).then(function (routineData) {
                _this.classRoutineService.routineData = [];
                _this.classRoutineService.routineData = routineData;
                _this.init();
            });
        };
        ClassRoutineChartController.prototype.getCourseList = function () {
            var _this = this;
            this.courseService.getCourse(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id, +this.classRoutineService.studentsYear, +this.classRoutineService.studentsSemester).then(function (courseList) {
                _this.classRoutineService.courseList = [];
                _this.classRoutineService.courseList = courseList;
            });
        };
        ClassRoutineChartController.prototype.getTeacherList = function () {
            var _this = this;
            this.employeeService.getActiveTeachers().then(function (teacherList) {
                _this.classRoutineService.teacherList = [];
                _this.classRoutineService.teacherList = teacherList;
            });
        };
        ClassRoutineChartController.prototype.getCourseTeacher = function () {
            var _this = this;
            if (this.classRoutineService.showSectionWiseRoutine) {
                this.courseTeacherService.getCourseTeacherByProgramAndSemesterAndYearAndAcademicSemester(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id, this.classRoutineService.selectedTheorySection.id, +this.classRoutineService.studentsYear, +this.classRoutineService.studentsSemester).then(function (courseTeacherList) {
                    _this.courseTeacherList = courseTeacherList;
                    console.log("Course teacher list");
                    console.log(_this.courseTeacherList);
                    _this.createCourseTeacherMap();
                    _this.createCourseTeacherWithSectionMap();
                    _this.showRoutineChart = true;
                    _this.classRoutineService.showChartLoader = false;
                });
            }
            else if (this.classRoutineService.showRoomWiseRoutine || this.classRoutineService.showTeacherWiseRoutine) {
                var courseIdList_1 = [];
                this.classRoutineService.showChartLoader = false;
                this.classRoutineService.routineData.forEach(function (r) {
                    if (r.course != undefined)
                        courseIdList_1.push(r.course.id);
                });
                this.courseTeacherService.getCourseTeacherBySemesterAndCourseList(this.classRoutineService.selectedSemester.id, courseIdList_1).then(function (courseTeacherList) {
                    _this.courseTeacherList = courseTeacherList;
                    _this.createCourseTeacherMap();
                    _this.createCourseTeacherWithSectionMap();
                    _this.showRoutineChart = true;
                    _this.classRoutineService.showChartLoader = false;
                });
            }
        };
        ClassRoutineChartController.prototype.getClassRoomList = function () {
            var _this = this;
            //todo fetch dept wise room list
            this.classRoomService.getClassRooms().then(function (roomList) {
                _this.classRoutineService.roomList = [];
                _this.classRoutineService.roomList = roomList;
            });
        };
        ClassRoutineChartController.prototype.edit = function (day, header) {
            this.classRoutineService.selectedDay = day;
            this.classRoutineService.selectedHeader = header;
            if (this.classRoutineService.dayAndTimeMapWithGroup[day.id + header.startTime]) {
                var routineList = this.getDayAndTimeMapWithRoutine(day.id, header.startTime).routineList;
                this.classRoutineService.slotRoutineList = this.getDayAndTimeMapWithRoutine(day.id, header.startTime).routineList;
                this.assignCourseTeachersToSlotRoutineList();
                this.showSlotEditForm = true;
            }
            else {
                this.classRoutineService.slotRoutineList = [];
                this.showSlotEditForm = true;
            }
            $("#routineConfigModal").modal('show');
            this.counter += 2;
            // this.$state.go('classRoutine.classRoutineChart.classRoutineSlotEditForm', {}, {reload: 'classRoutine.classRoutineChart.classRoutineSlotEditForm'}
            // );
        };
        ClassRoutineChartController.prototype.assignCourseTeachersToSlotRoutineList = function () {
            var _this = this;
            this.classRoutineService.slotRoutineList.forEach(function (r) {
                if (_this.classRoutineService.courseTeacherWithSectionMap[r.courseId + r.section] != undefined) {
                    r.courseTeacher = _this.classRoutineService.courseTeacherWithSectionMap[r.courseId + r.section];
                }
                else {
                    if (_this.classRoutineService.courseTeacherMapWithCourseIdAndSection[r.courseId + r.section]) {
                        var courseTeacherList = angular.copy(_this.classRoutineService.courseTeacherMapWithCourseIdAndSection[r.courseId + r.section]);
                        courseTeacherList.forEach(function (c) { return c.id = undefined; });
                        r.courseTeacher = courseTeacherList;
                    }
                    else
                        r.courseTeacher = [];
                }
            });
        };
        /*
          * public save():void
          *
          * Three process -->
          * 1. Assign sections for sessional section. The sessional section is assigned to 'section' field of the class routine
          * 2. Save routine and update routine data.
          * 3. Extract course teacher from class routine data
          * 4. Save and update course teacher information.
          * */
        ClassRoutineChartController.prototype.extractLoadedTeacher = function () {
            var defer = this.$q.defer();
            var loadedTeacherList = [];
            this.classRoutineService.slotRoutineList.forEach(function (r) {
                if (r.loadedTeacher != undefined && r.loadedTeacher.length > 0)
                    loadedTeacherList = loadedTeacherList.concat(r.loadedTeacher);
            });
            defer.resolve(loadedTeacherList);
            return defer.promise;
        };
        ClassRoutineChartController.prototype.saveSlotData = function () {
            var _this = this;
            this.showProgressBar = true;
            this.progress = 0;
            this.assignSectionsForSessionalCourseAndConvertTime().then(function (routine) {
                _this.progress = 10;
                _this.saveRoutineData().then(function (updatedRoutineList) {
                    _this.progress = 30;
                    _this.classRoutineService.getClassRoutineForEmployee(_this.classRoutineService.selectedSemester.id, _this.classRoutineService.selectedProgram.id, +_this.classRoutineService.studentsYear, +_this.classRoutineService.studentsSemester, _this.classRoutineService.selectedTheorySection.id).then(function (routineData) {
                        _this.classRoutineService.routineData = [];
                        _this.classRoutineService.routineData = routineData;
                    });
                    _this.extractLoadedTeacher().then(function (loadedTeacherList) {
                        _this.routineTeacherLoadService.saveOrUpdate(loadedTeacherList).then(function (response) {
                            _this.progress = 65;
                            if (response == undefined) {
                                _this.notify.error("Error in saving loaded teacher data");
                                return;
                            }
                            _this.extractCourseTeacher().then(function (courseTeacherlist) {
                                _this.progress = 80;
                                if (courseTeacherlist.length > 0) {
                                    _this.courseTeacherService.saveOrUpdateCourseTeacher(courseTeacherlist).then(function (updatedCourseTeacherList) {
                                        _this.progress = 100;
                                        _this.showSlotEditForm = false;
                                        _this.$timeout(function () {
                                            _this.showProgressBar = false;
                                            $("#routineConfigModal").modal('toggle');
                                            _this.init();
                                        }, 100);
                                    });
                                }
                                else {
                                    _this.progress = 100;
                                    _this.courseTeacherList = [];
                                    _this.showSlotEditForm = false;
                                    _this.$timeout(function () {
                                        _this.showProgressBar = false;
                                        $("#routineConfigModal").modal('toggle');
                                        _this.init();
                                        _this.init();
                                    }, 100);
                                }
                            });
                        });
                    });
                });
            });
        };
        ClassRoutineChartController.prototype.save = function () {
            var _this = this;
            if (this.classRoutineService.slotRoutineList.length == 0) {
                this.classRoutineService.getClassRoutineForEmployee(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id, +this.classRoutineService.studentsYear, +this.classRoutineService.studentsSemester, this.classRoutineService.selectedTheorySection.id).then(function (routineData) {
                    _this.classRoutineService.routineData = [];
                    _this.classRoutineService.routineData = routineData;
                    _this.init();
                });
            }
            else {
                this.checkRequiredFieldsInSlotRoutineList().then(function (foundIssue) {
                    if (foundIssue == false)
                        _this.saveSlotData();
                });
            }
        };
        ClassRoutineChartController.prototype.checkRequiredFieldsInSlotRoutineList = function () {
            var defer = this.$q.defer();
            var foundIssue = false;
            for (var i = 0; i < this.classRoutineService.slotRoutineList.length; i++) {
                var routine = this.classRoutineService.slotRoutineList[i];
                if (routine.course == undefined || routine.course == null) {
                    this.notify.error("Please select course");
                    foundIssue = true;
                    break;
                }
                else if (routine.room == null || routine.room == undefined) {
                    this.notify.error("Please select roomNo" + " for course " + routine.course.courseTitle + " at " + routine.startTime);
                    foundIssue = true;
                    break;
                }
                else if (moment(routine.startTimeObj).isAfter(moment(routine.endTimeObj))) {
                    this.notify.error("Start time is lower than end time" + " for course " + routine.course.courseTitle + " at " + routine.startTime);
                    foundIssue = true;
                    break;
                }
                else if (moment(routine.startTimeObj).diff(moment(routine.endTimeObj), 'minutes') % this.routineConfigService.routineConfig.duration != 0) {
                    this.notify.error("The time duration is not multiple of  " + this.routineConfigService.routineConfig.duration + " for course " + routine.course.courseTitle + " at " + routine.startTime);
                    foundIssue = true;
                    break;
                }
                else if (moment(routine.endTimeObj).diff(moment(routine.startTimeObj), 'minutes') > (this.routineConfigService.routineConfig.duration * 3)) {
                    this.notify.error("Time range more than three periods is not allowed. [" + routine.course.courseTitle + ", section(" + routine.section + ")]");
                    foundIssue = true;
                    break;
                }
                else if (routine.semesterId == undefined) {
                    this.classRoutineService.slotRoutineList.splice(i, 1);
                    i = i - 1;
                }
            }
            defer.resolve(foundIssue);
            return defer.promise;
        };
        ClassRoutineChartController.prototype.createCourseTeacherMap = function () {
            var _this = this;
            this.classRoutineService.courseTeacherMapWithCourseIdAndSection = {};
            this.courseTeacherList.forEach(function (courseTeacher) {
                var courseTeacherList = [];
                if (_this.classRoutineService.courseTeacherMapWithCourseIdAndSection[courseTeacher.courseId + courseTeacher.section] == undefined) {
                    courseTeacherList.push(courseTeacher);
                    _this.classRoutineService.courseTeacherMapWithCourseIdAndSection[courseTeacher.courseId + courseTeacher.section] = courseTeacherList;
                }
                else {
                    courseTeacherList = _this.classRoutineService.courseTeacherMapWithCourseIdAndSection[courseTeacher.courseId + courseTeacher.section];
                    courseTeacherList.push(courseTeacher);
                    _this.classRoutineService.courseTeacherMapWithCourseIdAndSection[courseTeacher.courseId + courseTeacher.section] = courseTeacherList;
                }
            });
        };
        ClassRoutineChartController.prototype.createCourseTeacherWithSectionMap = function () {
            var _this = this;
            this.classRoutineService.courseTeacherWithSectionMap = {};
            this.courseTeacherList.forEach(function (courseTeacher) {
                var courseTeacherList = [];
                if (_this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section] == undefined) {
                    courseTeacherList.push(courseTeacher);
                    _this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section] = courseTeacherList;
                }
                else {
                    courseTeacherList = _this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section];
                    courseTeacherList.push(courseTeacher);
                    _this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section] = courseTeacherList;
                }
            });
        };
        ClassRoutineChartController.prototype.extractCourseTeacher = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.courseTeacherList = [];
            this.classRoutineService.slotRoutineList.forEach(function (routine) {
                if (routine.courseTeacher != undefined && routine.courseTeacher.length != 0) {
                    routine.courseTeacher.forEach(function (c) { return c.section = routine.section; });
                    _this.courseTeacherList = _this.courseTeacherList.concat(routine.courseTeacher);
                }
            });
            this.courseTeacherList.forEach(function (c) { return c.semesterId = _this.classRoutineService.selectedSemester.id.toString(); });
            defer.resolve(this.courseTeacherList);
            return defer.promise;
        };
        ClassRoutineChartController.prototype.saveRoutineData = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.classRoutineService.saveOrUpdateClassRoutine(this.classRoutineService.slotRoutineList).then(function (updatedRoutineList) {
                _this.classRoutineService.routineData = [];
                _this.classRoutineService.routineData = updatedRoutineList;
                defer.resolve(_this.classRoutineService.routineData);
            });
            return defer.promise;
        };
        ClassRoutineChartController.prototype.assignSectionsForSessionalCourseAndConvertTime = function () {
            var defer = this.$q.defer();
            this.classRoutineService.slotRoutineList.forEach(function (r) {
                if (r.course.type_value == ums.CourseType.sessional) {
                    r.section = r.sessionalSection.id;
                }
                if (r.startTimeObj)
                    r.startTime = moment(r.startTimeObj).format("hh:mm A");
                if (r.endTimeObj)
                    r.endTime = moment(r.endTimeObj).format("hh:mm A");
            });
            defer.resolve(this.classRoutineService.slotRoutineList);
            return defer.promise;
        };
        ClassRoutineChartController.prototype.generateBody = function () {
            var _this = this;
            var weekDays = [];
            weekDays = this.appConstants.weekday;
            this.classRoutineService.weekDayMapWithId = {};
            weekDays.forEach(function (w) { return _this.classRoutineService.weekDayMapWithId[w.id] = w.name; });
            this.weekDay = [];
            for (var i = 0; i < weekDays.length; i++) {
                if (+weekDays[i].id >= this.routineConfigService.routineConfig.dayFrom && +weekDays[i].id <= this.routineConfigService.routineConfig.dayTo)
                    this.weekDay.push(weekDays[i]);
            }
        };
        ClassRoutineChartController.prototype.getCourseTeacherByCourseAndSection = function (courseId, section) {
            var courseTeacherList = [];
            if (this.classRoutineService.courseTeacherWithSectionMap[courseId + section] != undefined)
                courseTeacherList = this.classRoutineService.courseTeacherWithSectionMap[courseId + section];
            var teacherListStr = '';
            if (courseTeacherList.length > 0) {
                for (var i = 0; i < courseTeacherList.length; i++) {
                    if (i == 0 && courseTeacherList.length == 1)
                        teacherListStr = '(' + courseTeacherList[i].shortName;
                    else if (i == 0)
                        teacherListStr = '(' + teacherListStr + courseTeacherList[i].shortName;
                    else if (i == 0 && courseTeacherList.length == 1)
                        teacherListStr = teacherListStr + courseTeacherList[i].shortName;
                    else
                        teacherListStr = teacherListStr + ", " + courseTeacherList[i].shortName;
                }
                teacherListStr = teacherListStr + ")";
            }
            else {
                teacherListStr = '(TBA)';
            }
            return teacherListStr;
        };
        ClassRoutineChartController.prototype.generateHeader = function () {
            var startTime = {};
            startTime = moment(this.routineConfigService.routineConfig.startTime, 'hh:mm A');
            var endTime = moment(this.routineConfigService.routineConfig.endTime, 'hh:mm A');
            this.tableHeader = [];
            while (startTime < endTime) {
                var tableHeaderTmp = {};
                tableHeaderTmp.startTime = moment(startTime).format('hh:mm A');
                startTime = moment(startTime).add(this.routineConfigService.routineConfig.duration, 'm').toDate();
                tableHeaderTmp.endTime = moment(startTime).format('hh:mm A');
                this.tableHeader.push(tableHeaderTmp);
            }
        };
        ClassRoutineChartController.$inject = ['$scope', 'appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'courseService', 'classRoomService', 'classRoutineService', '$timeout', 'userService', 'routineConfigService', '$state', 'employeeService', 'courseTeacherService', 'employeeSearchService', 'RoutineTeacherLoadService', 'DummyNewEmployeeService'];
        return ClassRoutineChartController;
    }());
    ums.ClassRoutineChartController = ClassRoutineChartController;
    var RoutineChartDir = (function () {
        function RoutineChartDir() {
            this.restrict = 'EA';
            this.scope = {};
            this.controller = ClassRoutineChartController;
            this.controllerAs = "vm";
            this.link = function (scope, element, attributes) {
                scope.init();
            };
            this.templateUrl = "./views/directive/class-routine/routine-chart-dir.html";
        }
        return RoutineChartDir;
    }());
    ums.UMS.directive("routineChartDir", [function () {
            return new RoutineChartDir();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ClassRoutineSlotEditController = (function () {
        function ClassRoutineSlotEditController($scope, appConstants, httpClient, $q, notify, $sce, $window, semesterService, courseService, classRoomService, classRoutineService, $timeout, userService, routineConfigService, $state, courseTeacherService, employeeService, optSectionService, routineTeacherLoadService, $location, $anchorScroll) {
            this.$scope = $scope;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.semesterService = semesterService;
            this.courseService = courseService;
            this.classRoomService = classRoomService;
            this.classRoutineService = classRoutineService;
            this.$timeout = $timeout;
            this.userService = userService;
            this.routineConfigService = routineConfigService;
            this.$state = $state;
            this.courseTeacherService = courseTeacherService;
            this.employeeService = employeeService;
            this.optSectionService = optSectionService;
            this.routineTeacherLoadService = routineTeacherLoadService;
            this.$location = $location;
            this.$anchorScroll = $anchorScroll;
            this.THEORY_TYPE = 1;
            this.SESSIONAL_TYPE = 2;
            this.courseTeacher = {};
            this.sectionList = [];
            this.sessionalSectionMap = {};
            $scope.init = this.init.bind(this);
        }
        ClassRoutineSlotEditController.prototype.init = function () {
            var _this = this;
            this.roomListTmp = this.classRoutineService.roomList;
            this.teacherListTmp = this.classRoutineService.teacherList;
            this.creditHourTaken = "";
            this.showCourseInfo = false;
            this.showRoomInfo = false;
            this.classRoutineService.enableSaveButton = true;
            this.courseTeacherTypeList = [
                {
                    id: 0,
                    name: 'Shared'
                },
                {
                    id: 1,
                    name: 'Single'
                }
            ];
            if (this.classRoutineService.slotRoutineList.length == 0) {
                this.slotGroupNo = Math.floor((Math.random() * 10000) + 1);
                var slotRoutine = {};
                slotRoutine.slotGroup = this.slotGroupNo;
                slotRoutine = this.initialzeRoutine(slotRoutine);
                this.classRoutineService.slotRoutineList.push(slotRoutine);
                this.updateColor();
            }
            else {
                this.classRoutineService.slotRoutineList.forEach(function (c) {
                    c.startTimeObj = moment(c.startTime, "hh:mm A").toDate();
                    c.endTimeObj = moment(c.endTime, 'hh:mm A').toDate();
                    _this.slotGroupNo = c.slotGroup;
                    var key = c.day + c.courseId + c.startTime + c.endTime + c.section;
                    if (_this.classRoutineService.routineTeacherLoadMap[key] != undefined)
                        c.loadedTeacher = _this.classRoutineService.routineTeacherLoadMap[key];
                });
                this.updateColor();
            }
            this.setOptionalSections().then(function (response) {
                _this.setSessionalSection().then(function (sectionList) {
                    _this.assignSectionsToSessionalCourses();
                });
            });
        };
        ClassRoutineSlotEditController.prototype.add = function () {
            var _this = this;
            var slotRoutine = {};
            var randomNumber = new Uint8Array(2048 / 8);
            slotRoutine.idTmp = window.crypto.getRandomValues(randomNumber).toString();
            slotRoutine.slotGroup = this.slotGroupNo;
            slotRoutine = this.initialzeRoutine(slotRoutine);
            this.creditHourTaken = "";
            this.classRoutineService.slotRoutineList.unshift(slotRoutine);
            slotRoutine.color = 'yellow';
            this.$location.hash(slotRoutine.idTmp);
            this.$anchorScroll();
            this.$timeout(function () {
                _this.updateColor();
            }, 500);
            //$("#courseNo").focus();
        };
        ClassRoutineSlotEditController.prototype.courseSearched = function () {
            this.fetchCourseInfo();
        };
        ClassRoutineSlotEditController.prototype.courseSelected = function (slotRoutine) {
            var _this = this;
            this.selectedCourse = slotRoutine.course;
            var startTime = {};
            startTime = moment(this.classRoutineService.selectedHeader.startTime, "hh:mm A");
            this.fetchCourseInfo().then(function (courseTeacherList) {
                slotRoutine.startTimeObj = moment(startTime).toDate();
                if (slotRoutine.course.type_value == _this.SESSIONAL_TYPE) {
                    var endTime = moment(startTime).add(_this.routineConfigService.routineConfig.duration * 3, 'm').toDate();
                    slotRoutine.endTimeObj = moment(endTime).toDate();
                    slotRoutine.sessionalSection = slotRoutine.sessionalSection ? slotRoutine.sessionalSection : _this.sectionList[1];
                    slotRoutine.duration = (_this.routineConfigService.routineConfig.duration * 3).toString();
                    _this.assignExistingTeacher(slotRoutine, slotRoutine.sessionalSection.id);
                }
                else {
                    slotRoutine.sessionalSection = slotRoutine.sessionalSection ? slotRoutine.sessionalSection : _this.sectionList[0];
                    slotRoutine.section = slotRoutine.sessionalSection.id;
                    var endTime = moment(startTime).add(_this.routineConfigService.routineConfig.duration, 'm').toDate();
                    slotRoutine.endTimeObj = moment(endTime).toDate();
                    slotRoutine.duration = _this.routineConfigService.routineConfig.duration.toString();
                    _this.assignExistingTeacher(slotRoutine, slotRoutine.section);
                }
                slotRoutine.courseId = slotRoutine.course.id;
                _this.validateRoutineSlot(slotRoutine);
            });
        };
        ClassRoutineSlotEditController.prototype.courseTeacherSearched = function () {
            var _this = this;
            this.courseTeacherService.getTotalCreditHourTakenByTeacher(this.classRoutineService.selectedSemester.id, this.selectedCourseTeacher.id).then(function (creditHour) {
                _this.creditHourTaken = creditHour;
            });
            this.fetchCourseTeacherInfo();
        };
        ClassRoutineSlotEditController.prototype.courseTeacherSelected = function (courseTeacher, slotRoutine) {
            var _this = this;
            this.selectedCourseTeacher = courseTeacher;
            console.log("Course teacher selected");
            this.fetchCourseTeacherInfo().then(function (teacherRoutine) {
                _this.courseTeacherService.getTotalCreditHourTakenByTeacher(_this.classRoutineService.selectedSemester.id, _this.selectedCourseTeacher.id).then(function (creditHour) {
                    _this.creditHourTaken = creditHour;
                });
                if (slotRoutine.type == ums.RoutineType.DISTRIBUTED)
                    _this.validateCourseTeacher(slotRoutine);
            });
        };
        ClassRoutineSlotEditController.prototype.loadedTeacherSelected = function (loadedTeacher, slotRoutine) {
            var _this = this;
            console.log('loaded teacher');
            console.log(loadedTeacher);
            this.employeeService.getEmployee(loadedTeacher.teacherId).then(function (employee) {
                _this.selectedCourseTeacher = employee;
                _this.fetchCourseTeacherInfo().then(function (teacherRoutine) {
                    _this.courseTeacherService.getTotalCreditHourTakenByTeacher(_this.classRoutineService.selectedSemester.id, _this.selectedCourseTeacher.id).then(function (creditHour) {
                        _this.creditHourTaken = creditHour;
                    });
                    _this.validateCourseTeacher(slotRoutine);
                });
            });
        };
        ClassRoutineSlotEditController.prototype.fetchCourseTeacherInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.showCourseInfo = false;
            this.showRoomInfo = false;
            this.showTeachersInfo = true;
            if (this.selectedCourseTeacher)
                this.classRoutineService.getRoutineForTeacher(this.selectedCourseTeacher.id, this.classRoutineService.selectedSemester.id).then(function (routine) {
                    _this.routineBasedOnCourseTeacher = [];
                    _this.routineBasedOnCourseTeacherTmp = [];
                    _this.routineBasedOnCourseTeacher = routine;
                    _this.routineBasedOnCourseTeacherTmp = routine;
                    defer.resolve(_this.routineBasedOnCourseTeacher);
                });
            return defer.promise;
        };
        ClassRoutineSlotEditController.prototype.removeCourseTeacher = function (routine, courseTeacher) {
            for (var i = 0; i < routine.courseTeacher.length; i++) {
                if (routine.courseTeacher[i] == courseTeacher) {
                    routine.courseTeacher.splice(i, 1);
                    if (courseTeacher.id != null) {
                        this.courseTeacherService.delete(courseTeacher.id);
                    }
                    break;
                }
            }
        };
        ClassRoutineSlotEditController.prototype.removeLoadedTeacher = function (routine, loadedTeacher) {
            var _this = this;
            for (var i = 0; i < routine.loadedTeacher.length; i++) {
                if (routine.loadedTeacher[i] == loadedTeacher) {
                    routine.loadedTeacher.splice(i, 1);
                    if (loadedTeacher.id != null) {
                        this.routineTeacherLoadService.delete(loadedTeacher.id).then(function (response) {
                            if (response == undefined)
                                _this.notify.error("Error in deleting load teacher data");
                        });
                        break;
                    }
                }
            }
        };
        ClassRoutineSlotEditController.prototype.setSessionalSection = function () {
            var defer = this.$q.defer();
            if (this.classRoutineService.selectedTheorySection.id == 'A')
                this.sectionList = this.appConstants.sessionalSectionsA.concat(this.sectionList);
            else if (this.classRoutineService.selectedTheorySection.id == 'B')
                this.sectionList = this.appConstants.sessionalSectionsB.concat(this.sectionList);
            else if (this.classRoutineService.selectedTheorySection.id == 'C')
                this.sectionList = this.appConstants.sessionalSectionsC.concat(this.sectionList);
            else
                this.sectionList = this.appConstants.sessionalSectionsD.concat(this.sectionList);
            defer.resolve(this.sectionList);
            return defer.promise;
        };
        ClassRoutineSlotEditController.prototype.setOptionalSections = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.sectionList = [];
            /*  if (this.classRoutineService.selectedProgram.id == 110500) {
                  this.optSectionService.getSectionNamesWithSection(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id, +this.classRoutineService.studentsYear, +this.classRoutineService.studentsSemester, this.classRoutineService.selectedTheorySection.id).then((response: string[]) => {
                      console.log("In optional sections");
                      console.log(response);
                      for (var i = 0; i < response.length; i++) {
                          let constants: IConstant = <IConstant>{};
                          constants.id = response[i];
                          constants.name = response[i];
                          this.sectionList.push(constants);
                      }
                      defer.resolve(this.sectionList);
                  })*/
            this.optSectionService.getSectionNames(this.classRoutineService.selectedSemester.id, this.classRoutineService.selectedProgram.id, +this.classRoutineService.studentsYear, +this.classRoutineService.studentsSemester).then(function (response) {
                for (var i = 0; i < response.length; i++) {
                    var constants = {};
                    constants.id = response[i];
                    constants.name = response[i];
                    _this.sectionList.push(constants);
                }
                defer.resolve(_this.sectionList);
            });
            return defer.promise;
        };
        ClassRoutineSlotEditController.prototype.assignSectionsToSessionalCourses = function () {
            var _this = this;
            this.sessionalSectionMap = {};
            this.sectionList.forEach(function (s) {
                _this.sessionalSectionMap[s.id] = s;
            });
            this.classRoutineService.slotRoutineList.forEach(function (routine) {
                routine.sessionalSection = _this.sessionalSectionMap[routine.section];
            });
        };
        ClassRoutineSlotEditController.prototype.addSelectedCourseTeacherTeacher = function (slotRoutine) {
            var _this = this;
            this.initializeSelectedCourseTeacher(slotRoutine).then(function (courseTeacher) {
                slotRoutine.courseTeacher.push(courseTeacher);
                _this.createCourseTeacherMapForSlot(courseTeacher);
            });
        };
        ClassRoutineSlotEditController.prototype.addSelectedLoadTeacher = function (slotRoutine) {
            var routineTeacherLoad = {};
            routineTeacherLoad.semesterId = this.classRoutineService.selectedSemester.id;
            routineTeacherLoad.courseId = slotRoutine.courseId;
            routineTeacherLoad.startTime = moment(slotRoutine.startTimeObj).format("hh:mm A");
            routineTeacherLoad.endTime = moment(slotRoutine.endTimeObj).format("hh:mm A");
            routineTeacherLoad.section = slotRoutine.section;
            routineTeacherLoad.teacherId = slotRoutine.loadedEmployee.teacherId;
            routineTeacherLoad.teacherName = slotRoutine.loadedEmployee.teacher.name;
            routineTeacherLoad.day = +slotRoutine.day;
            if (slotRoutine.loadedTeacher == undefined)
                slotRoutine.loadedTeacher = [];
            slotRoutine.loadedTeacher.push(routineTeacherLoad);
            this.fetchCourseTeacherInfo();
        };
        ClassRoutineSlotEditController.prototype.fetchCourseInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.showCourseInfo = true;
            this.showRoomInfo = false;
            this.showTeachersInfo = false;
            this.classRoutineService.getRoutineBySemesterAndCourse(this.classRoutineService.selectedSemester.id, this.selectedCourse.id).then(function (classRoutineList) {
                _this.routineBasedOnCourse = [];
                _this.routineBasedOnCourseTmp = [];
                _this.routineBasedOnCourse = classRoutineList;
                _this.routineBasedOnCourseTmp = classRoutineList;
                defer.resolve(_this.routineBasedOnCourse);
            });
            return defer.promise;
        };
        ClassRoutineSlotEditController.prototype.fetchRoomInfo = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.showCourseInfo = false;
            this.showRoomInfo = true;
            this.showTeachersInfo = false;
            this.classRoutineService.getRoomBasedClassRoutine(this.classRoutineService.selectedSemester.id, +this.selectedRoom.id).then(function (classRoutineList) {
                _this.routineBasedOnRoom = [];
                _this.routineBasedOnRoomTmp = [];
                _this.routineBasedOnRoom = classRoutineList;
                defer.resolve(_this.routineBasedOnRoom);
                _this.routineBasedOnRoomTmp = classRoutineList;
            });
            return defer.promise;
        };
        ClassRoutineSlotEditController.prototype.roomSearched = function () {
            this.fetchRoomInfo();
        };
        ClassRoutineSlotEditController.prototype.roomSelected = function (slotRoutine) {
            var _this = this;
            this.selectedRoom = slotRoutine.room;
            this.fetchRoomInfo().then(function (roomList) {
                slotRoutine.roomId = slotRoutine.room.id;
                _this.validateRoutineSlot(slotRoutine);
            });
        };
        ClassRoutineSlotEditController.prototype.save = function () {
            var _this = this;
            this.classRoutineService.saveOrUpdateClassRoutine(this.classRoutineService.slotRoutineList).then(function (updatedRoutineList) {
                _this.classRoutineService.routineData = [];
                _this.classRoutineService.routineData = updatedRoutineList;
            });
        };
        ClassRoutineSlotEditController.prototype.remove = function (routine) {
            /* if (routine.courseTeacher != undefined && routine.courseTeacher.length > 0) {
               console.log("in first condition");
               routine.courseTeacher.forEach((t: CourseTeacherInterface) => {
                 t.semesterId = this.classRoutineService.selectedSemester.id.toString();
                 t.section = this.classRoutineService.selectedTheorySection.id;
               })
               /!*this.courseTeacherService.deleteTeacherList(routine.courseTeacher).then((response) => {
                 if (response != undefined)
                   this.removeSlotRoutine(routine);
               })*!/
             }*/
            this.removeSlotRoutine(routine);
        };
        ClassRoutineSlotEditController.prototype.assignEndTime = function (classRoutine) {
            var duration = angular.copy(this.routineConfigService.routineConfig.duration);
            if (classRoutine.course.type_value == ums.Utils.COURSE_TYPE_SESSIONAL)
                duration = duration * 3;
            var startTime = {};
            startTime = moment(classRoutine.startTimeObj);
            var endTime = moment(startTime).add(duration, 'm').toDate();
            classRoutine.endTimeObj = moment(endTime).toDate();
        };
        ClassRoutineSlotEditController.prototype.initialzeRoutine = function (slotRoutine) {
            slotRoutine.startTime = this.classRoutineService.selectedHeader.startTime;
            slotRoutine.endTime = this.classRoutineService.selectedHeader.endTime;
            slotRoutine.startTimeObj = moment(slotRoutine.startTime, "hh:mm A").toDate();
            slotRoutine.endTimeObj = moment(slotRoutine.endTime, 'hh:mm A').toDate();
            slotRoutine.semesterId = this.classRoutineService.selectedSemester.id;
            slotRoutine.semester = this.classRoutineService.selectedSemester;
            slotRoutine.programId = this.classRoutineService.selectedProgram.id.toString();
            slotRoutine.program = this.classRoutineService.selectedProgram;
            slotRoutine.type = ums.RoutineType.DISTRIBUTED;
            this.selectedCourseTeacherType = this.courseTeacherTypeList[0];
            if (slotRoutine.duration == null)
                slotRoutine.duration = this.routineConfigService.routineConfig.duration.toString();
            else
                slotRoutine.duration = slotRoutine.duration.toString();
            slotRoutine.academicYear = +this.classRoutineService.studentsYear;
            slotRoutine.academicSemester = +this.classRoutineService.studentsSemester;
            slotRoutine.section = this.classRoutineService.selectedTheorySection.id;
            slotRoutine.day = this.classRoutineService.selectedDay.id;
            return slotRoutine;
        };
        ClassRoutineSlotEditController.prototype.updateColor = function () {
            for (var i = 0; i < this.classRoutineService.slotRoutineList.length; i++) {
                if (i % 2 == 0)
                    this.classRoutineService.slotRoutineList[i].color = '#FFEFD5';
                else
                    this.classRoutineService.slotRoutineList[i].color = '#FFDAB9';
            }
        };
        ClassRoutineSlotEditController.prototype.validateRoom = function (slotROutine) {
        };
        ClassRoutineSlotEditController.prototype.validateRoutineSlot = function (slotRoutine) {
            for (var i = 0; i < this.routineBasedOnCourse.length; i++) {
                if (this.routineBasedOnCourse[i].course.type_value == 1) {
                    var routine = this.routineBasedOnCourse[i];
                    if (routine.id != slotRoutine.id && routine.courseId == slotRoutine.courseId && routine.section == slotRoutine.section && routine.roomId == slotRoutine.roomId
                        && routine.startTime == slotRoutine.startTime && routine.endTime == slotRoutine.endTime && routine.day == slotRoutine.day) {
                        this.notify.error("Course : " + slotRoutine.course.no + " of section :" + slotRoutine.section + " (" + slotRoutine.startTime + "-" + slotRoutine.endTime + ") is overlapping with existing courses, see right section.", false);
                        this.classRoutineService.enableSaveButton = false;
                        break;
                    }
                    else {
                        this.classRoutineService.enableSaveButton = true;
                    }
                }
                else {
                    var routine = this.routineBasedOnCourse[i];
                    if (routine.courseId == slotRoutine.courseId && routine.sessionalSection == slotRoutine.sessionalSection && routine.roomId == slotRoutine.roomId
                        && routine.startTime == slotRoutine.startTime && routine.endTime == slotRoutine.endTime && routine.day == slotRoutine.day) {
                        this.notify.error("Course --> " + slotRoutine.course.courseTitle + " of section -->" + slotRoutine.section + " (" + slotRoutine.startTime + "-" + slotRoutine.endTime + ") is overlapping with existing courses", false);
                        this.classRoutineService.enableSaveButton = false;
                        break;
                    }
                    else {
                        this.classRoutineService.enableSaveButton = true;
                    }
                }
            }
        };
        ClassRoutineSlotEditController.prototype.validateCourseTeacher = function (slotRoutine) {
            console.log("Validating course teacher");
            for (var i = 0; i < this.routineBasedOnCourseTeacher.length; i++) {
                var routine = this.routineBasedOnCourseTeacher[i];
                var slotStartTime = moment(slotRoutine.startTime, 'hh:mm');
                var slotEndTime = moment(slotRoutine.endTime, 'hh:mm');
                var routineStartTime = moment(routine.startTime, 'hh:mm');
                var routineEndTime = moment(routine.endTime, 'hh:mm');
                if (routine.id == slotRoutine.id && routine.day == slotRoutine.day && (slotStartTime.isSame(routineStartTime) || (slotStartTime.isAfter(routineStartTime) && slotStartTime.isBefore(routineEndTime)) || (slotEndTime.isSame(routineEndTime)))) {
                    console.log('routine');
                    console.log(routine);
                    this.notify.error("Course : " + routine.course.no + " of section :" + slotRoutine.section + " (" + slotRoutine.startTime + "-" + slotRoutine.endTime + ") is overlapping for the selected course teacher. See right for more information", false);
                    this.classRoutineService.enableSaveButton = false;
                    break;
                }
                else {
                    this.classRoutineService.enableSaveButton = true;
                }
            }
            if (this.routineBasedOnCourseTeacher.length == 0)
                this.classRoutineService.enableSaveButton = true;
            console.log("Enable Save buttonin teacher validation status--->" + this.classRoutineService.enableSaveButton);
        };
        ClassRoutineSlotEditController.prototype.assignExistingTeacher = function (slotRoutine, section) {
            console.log("In existing teacher");
            console.log(this.classRoutineService.courseTeacherMapWithCourseIdAndSection);
            console.log("Key--->" + slotRoutine.course.id + section);
            if (this.classRoutineService.courseTeacherMapWithCourseIdAndSection[slotRoutine.course.id + section] != undefined) {
                var courseTeacherList = this.classRoutineService.courseTeacherMapWithCourseIdAndSection[slotRoutine.course.id + section];
                //courseTeacherList.forEach((c: CourseTeacherInterface) => c.id = undefined);
                slotRoutine.courseTeacher = courseTeacherList;
                console.log("Slot routine");
                console.log(slotRoutine);
            }
            else {
                slotRoutine.courseTeacher = [];
            }
        };
        ClassRoutineSlotEditController.prototype.configureSessionalSections = function (sections) {
        };
        ClassRoutineSlotEditController.prototype.initializeSelectedCourseTeacher = function (slotRoutine) {
            var defer = this.$q.defer();
            var courseTeacher = {};
            courseTeacher.course = slotRoutine.course;
            courseTeacher.courseId = slotRoutine.courseId;
            courseTeacher.courseType = slotRoutine.course.type_value;
            courseTeacher.section = slotRoutine.section;
            courseTeacher.semesterId = this.classRoutineService.selectedSemester.id.toString();
            courseTeacher.teacher = {};
            courseTeacher.teacher.id = slotRoutine.employee.id;
            courseTeacher.teacherId = slotRoutine.employee.id;
            courseTeacher.teacher.name = slotRoutine.employee.employeeName;
            courseTeacher.teacher.departmentId = slotRoutine.employee.department.id;
            courseTeacher.teacher.departmentName = slotRoutine.employee.department.longName;
            courseTeacher.teacher.designationName = slotRoutine.employee.designation.name;
            courseTeacher.teacher.status = slotRoutine.employee.status;
            courseTeacher.creditHour = slotRoutine.course.creditHour + "";
            console.log("New course teacher");
            console.log(courseTeacher);
            defer.resolve(courseTeacher);
            return defer.promise;
        };
        ClassRoutineSlotEditController.prototype.createCourseTeacherMapForSlot = function (courseTeacher) {
            var courseTeacherList = [];
            if (this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section] == undefined || this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section] == null) {
                courseTeacherList.push(courseTeacher);
                this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section] = courseTeacherList;
                this.classRoutineService.courseTeacherMapWithCourseIdAndSection[courseTeacher.courseId + courseTeacher.section] = courseTeacherList;
            }
            else {
                courseTeacherList = angular.copy(this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section]);
                courseTeacherList.push(courseTeacher);
                this.classRoutineService.courseTeacherWithSectionMap[courseTeacher.courseId + courseTeacher.section] = courseTeacherList;
            }
        };
        ClassRoutineSlotEditController.prototype.removeFromMainRoutineData = function (routine) {
            for (var i = 0; i < this.classRoutineService.routineData.length; i++) {
                if (this.classRoutineService.routineData[i] = routine) {
                    this.classRoutineService.routineData.splice(i, 1);
                    break;
                }
            }
        };
        ClassRoutineSlotEditController.prototype.removeSlotRoutine = function (routine) {
            for (var i = 0; i < this.classRoutineService.slotRoutineList.length; i++) {
                if (routine == this.classRoutineService.slotRoutineList[i]) {
                    if (routine.id != null) {
                        this.classRoutineService.deleteRoutineById(routine.id);
                        this.removeFromMainRoutineData(routine);
                        this.classRoutineService.slotRoutineList.splice(i, 1);
                    }
                    else
                        this.classRoutineService.slotRoutineList.splice(i, 1);
                    break;
                }
            }
        };
        ClassRoutineSlotEditController.prototype.routineTypeChanged = function (slotRoutine) {
            slotRoutine.loadedTeacher = [];
            var key = slotRoutine.day + slotRoutine.courseId + slotRoutine.startTime + slotRoutine.endTime + slotRoutine.section;
            if (this.classRoutineService.routineTeacherLoadMap[key] != undefined)
                slotRoutine.loadedTeacher = this.classRoutineService.routineTeacherLoadMap[key];
        };
        ClassRoutineSlotEditController.$inject = ['$scope', 'appConstants', 'HttpClient', '$q', 'notify', '$sce', '$window', 'semesterService', 'courseService', 'classRoomService', 'classRoutineService', '$timeout', 'userService', 'routineConfigService', '$state', 'courseTeacherService', 'employeeService', 'optSectionService', 'RoutineTeacherLoadService', '$location', '$anchorScroll'];
        return ClassRoutineSlotEditController;
    }());
    ums.ClassRoutineSlotEditController = ClassRoutineSlotEditController;
    var RoutineSlotEditDir = (function () {
        function RoutineSlotEditDir() {
            this.restrict = 'EA';
            this.scope = {};
            this.controller = ClassRoutineSlotEditController;
            this.controllerAs = 'vm';
            this.templateUrl = './views/directive/class-routine/slot-edit-dir/routine-slot-edit-dir.html';
            this.link = function (scope, element, attributes) {
                scope.init();
            };
        }
        return RoutineSlotEditDir;
    }());
    ums.UMS.directive("routineSlotEditDir", [function () {
            return new RoutineSlotEditDir();
        }]);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DateRangePickerDirective = (function () {
        function DateRangePickerDirective() {
            this.bindToController = true;
            this.controller = DateRangePickerController;
            this.controllerAs = 'vm';
            this.scope = {
                from: '=',
                to: '=',
                required: '@?',
                format: '@?',
                disabled: '=?'
            };
            this.templateUrl = 'views/directive/date.range.picker.html';
        }
        return DateRangePickerDirective;
    }());
    ums.DateRangePickerDirective = DateRangePickerDirective;
    var DateRangePickerController = (function () {
        function DateRangePickerController($element) {
            this.defaultFormat = 'dd/mm/yyyy';
            this.id = Math.abs(Math.random() * 1000);
            if (!this.format) {
                this.format = this.defaultFormat;
            }
            $($element.children()).datepicker({
                format: this.format
            });
        }
        DateRangePickerController.$inject = ['$element'];
        return DateRangePickerController;
    }());
    ums.UMS.directive('dateRangePicker', function () { return new DateRangePickerDirective(); });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentInfoService = (function () {
        function StudentInfoService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        StudentInfoService.prototype.getStudent = function () {
            var defer = this.$q.defer();
            this.httpClient.get('academic/student', ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        StudentInfoService.prototype.checkEnrollmentEligibility = function () {
            var defer = this.$q.defer();
            this.httpClient.get("academic/studentrecord/checkEligibility", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        StudentInfoService.prototype.checkEnrollmentEligibilityBySemester = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("academic/studentrecord/checkEligibility/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        StudentInfoService.$inject = ['$q', 'HttpClient', 'notify'];
        return StudentInfoService;
    }());
    ums.StudentInfoService = StudentInfoService;
    ums.UMS.service('StudentInfoService', StudentInfoService);
})(ums || (ums = {}));
///<reference path="../../../../../ums-web-core/src/main/ts/controller/StudentPaymentInformation.ts"/>
var ums;
(function (ums) {
    var StudentPaymentHistory = (function (_super) {
        __extends(StudentPaymentHistory, _super);
        function StudentPaymentHistory($scope, $rootScope, $window, $http, $templateCache, httpClient, $transition, studentService, paymentService, detailStudentPaymentService, feeTypeService, appConstants, notify, semesterService, $q, paymentStatusService, detailedStudentPaymentService, userService, $timeout, feeReportService) {
            var _this = _super.call(this, $scope, $rootScope, $window, $http, $templateCache, httpClient, $transition, studentService, paymentService, detailedStudentPaymentService, feeTypeService, appConstants, notify, semesterService, $q, paymentStatusService, detailedStudentPaymentService, userService, feeReportService) || this;
            _this.$scope = $scope;
            _this.$rootScope = $rootScope;
            _this.$window = $window;
            _this.$http = $http;
            _this.$templateCache = $templateCache;
            _this.httpClient = httpClient;
            _this.$transition = $transition;
            _this.studentService = studentService;
            _this.paymentService = paymentService;
            _this.detailStudentPaymentService = detailStudentPaymentService;
            _this.feeTypeService = feeTypeService;
            _this.appConstants = appConstants;
            _this.notify = notify;
            _this.semesterService = semesterService;
            _this.$q = $q;
            _this.paymentStatusService = paymentStatusService;
            _this.detailedStudentPaymentService = detailedStudentPaymentService;
            _this.userService = userService;
            _this.$timeout = $timeout;
            _this.feeReportService = feeReportService;
            console.log('in the student payment information directive');
            _this.showLoader = true;
            return _this;
        }
        StudentPaymentHistory.prototype.initialize = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (user) {
                console.log("Fetched current user");
                _this.studentId = user.id;
                _this.fetchFeeTypes();
                _this.feeGroups = [];
                _this.feeGroups = _this.appConstants.feeGroup;
                _this.selectedFeeGroup = _this.feeGroups[1];
                _this.fetchAllSemesters();
                _this.createFeeGroupMap();
                _this.createPaymentMethodMap();
                _this.$timeout(function () {
                    _this.search();
                    _this.showLoader = false;
                }, 500);
            });
        };
        StudentPaymentHistory.$inject = ['$scope', '$rootScope', '$window', '$http', '$templateCache', 'HttpClient', '$transitions', 'studentService', 'PaymentService', 'DetailedStudentPaymentService', 'FeeTypeService', 'appConstants', 'notify', 'semesterService', '$q', 'PaymentStatusService', 'DetailedStudentPaymentService', 'userService', '$timeout', 'FeeReportService'];
        return StudentPaymentHistory;
    }(ums.StudentPaymentInformation));
    ums.StudentPaymentHistory = StudentPaymentHistory;
    ums.UMS.controller("StudentPaymentHistory", StudentPaymentHistory);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ReadmissionController = (function () {
        function ReadmissionController($scope, readmissionService, notify, parameterSettingService, $q) {
            var _this = this;
            this.$scope = $scope;
            this.readmissionService = readmissionService;
            this.notify = notify;
            this.parameterSettingService = parameterSettingService;
            this.$q = $q;
            this.alreadyApplied = false;
            this.passedSelected = false;
            this.fetchReadmissionApplicationDeadline();
            readmissionService.getReadmissionStatus().then(function (status) {
                switch (status) {
                    case readmissionService.responseMap.READMITTED:
                        _this.readmissionService.getAppliedCourses().then(function (courses) {
                            _this.courses = courses;
                            _this.alreadyApplied = !_this.alreadyApplied;
                        });
                        break;
                    case readmissionService.responseMap.ALLOWED:
                        _this.readmissionService.getApplicableCourse().then(function (courses) {
                            _this.courses = courses;
                            if (courses.length == 0)
                                _this.messageText = "Something is wrong here. Please contact IUMS Office.";
                        });
                        break;
                    case readmissionService.responseMap.APPLIED:
                        _this.readmissionService.getAppliedCourses().then(function (courses) {
                            _this.courses = courses;
                            _this.alreadyApplied = !_this.alreadyApplied;
                        });
                        break;
                    case readmissionService.responseMap.NOT_ALLOWED:
                        _this.messageText = 'You are not allowed for Readmission.';
                        break;
                    case readmissionService.responseMap.NOT_IN_READMISSION_SLOT:
                        _this.messageText = 'Not within Readmission time slot';
                        break;
                }
            });
            $scope.$watch(function () { return _this.courses; }, function (newVal) {
                if (newVal && newVal.length > 0) {
                    for (var i = 0; i < newVal.length; i++) {
                        if (newVal[i].applied) {
                            _this.applyEnabled = true;
                            return;
                        }
                    }
                }
                _this.applyEnabled = false;
            }, true);
        }
        ReadmissionController.prototype.fetchReadmissionApplicationDeadline = function () {
            var _this = this;
            this.parameterSettingService.getParameterSettingsByActiveSemester(ums.UmsUtil.APPLICATION_READMISSION_PARAMETER)
                .then(function (res) {
                _this.readmissionApplicationParameter = res[0];
                _this.fromDate = new Date(_this.readmissionApplicationParameter.startDate);
                _this.toDate = new Date(_this.readmissionApplicationParameter.endDate);
            });
        };
        ReadmissionController.prototype.setCellStyle = function (course) {
            if (course.carryGradeLetter != "")
                return "carryClass";
            else if (course.semesterFinalGradeLetter == "F" && course.clearanceGradeLetter == "F")
                return "failedClass";
            else if (course.semesterFinalGradeLetter == "F" && course.clearanceGradeLetter == "")
                return "failedClass";
            else
                return "";
        };
        ReadmissionController.prototype.warningChecker = function () {
            this.passedSelected = false;
            this.selectedCourses = this.courses;
            for (var i = 0; i < this.selectedCourses.length; i++) {
                if (this.selectedCourses[i].applied && this.selectedCourses[i].semesterFinalGradeLetter != "F") {
                    this.passedSelected = true;
                    break;
                }
            }
        };
        ReadmissionController.prototype.apply = function () {
            var _this = this;
            $('#readWarning').modal('hide');
            this.messageText = '';
            this.applyEnabled = false;
            this.readmissionService.apply(this.courses).then(function (response) {
                switch (response) {
                    case _this.readmissionService.responseMap.READMITTED:
                        _this.readmissionService.getAppliedCourses().then(function (courses) {
                            _this.courses = courses;
                            _this.alreadyApplied = !_this.alreadyApplied;
                        });
                        break;
                    case _this.readmissionService.responseMap.APPLIED:
                        _this.readmissionService.getAppliedCourses().then(function (courses) {
                            _this.courses = courses;
                            _this.alreadyApplied = !_this.alreadyApplied;
                            _this.notify.success("Successfully Applied");
                        });
                        break;
                    case _this.readmissionService.responseMap.NOT_ALLOWED:
                        _this.messageText = 'You are not allowed for Readmission.';
                        break;
                    case _this.readmissionService.responseMap.NOT_IN_READMISSION_SLOT:
                        _this.messageText = 'Not within Readmission time slot';
                        break;
                    case _this.readmissionService.responseMap.CONTAINS_INVALID_COURSE:
                        _this.messageText = 'Application contains invalid course/s';
                        break;
                    case _this.readmissionService.responseMap.NOT_TAKEN_MINIMUM_NO_OF_COURSE:
                        _this.messageText = 'You haven\'t taken minimum number of course/s';
                        break;
                    case _this.readmissionService.responseMap.NOT_TAKEN_MINIMUM_NO_OF_LAST_SEMESTER_FAILED_COURSE:
                        _this.messageText = 'You must take all the failed courses from your last attended semester.';
                        break;
                    case _this.readmissionService.responseMap.REQUIRES_SESSIONAL:
                        _this.messageText = 'You must take failed sessional course/s';
                        break;
                    default:
                        _this.messageText = '';
                        break;
                }
                if (_this.messageText != "") {
                    _this.applyEnabled = true;
                    _this.notify.error("Submission Failed.");
                }
            });
        };
        ReadmissionController.$inject = ['$scope', 'ReadmissionService', 'notify', 'parameterSettingService', '$q'];
        return ReadmissionController;
    }());
    ums.ReadmissionController = ReadmissionController;
    ums.UMS.controller('ReadmissionController', ReadmissionController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ReadmissionService = (function () {
        function ReadmissionService(httpClient, notify, $q) {
            this.httpClient = httpClient;
            this.notify = notify;
            this.$q = $q;
            this.responseMap = {
                READMITTED: 'READMITTED',
                APPLIED: 'APPLIED',
                ALLOWED: 'ALLOWED',
                NOT_ALLOWED: 'NOT_ALLOWED',
                NOT_IN_READMISSION_SLOT: 'NOT_IN_READMISSION_SLOT',
                REQUIRES_SESSIONAL: 'REQUIRES_SESSIONAL',
                NOT_TAKEN_MINIMUM_NO_OF_LAST_SEMESTER_FAILED_COURSE: 'NOT_TAKEN_MINIMUM_NO_OF_LAST_SEMESTER_FAILED_COURSE',
                NOT_TAKEN_MINIMUM_NO_OF_COURSE: 'NOT_TAKEN_MINIMUM_NO_OF_COURSE',
                CONTAINS_INVALID_COURSE: 'CONTAINS_INVALID_COURSE'
            };
        }
        ReadmissionService.prototype.getReadmissionStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get('readmission/status', ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        ReadmissionService.prototype.getAppliedCourses = function () {
            var defer = this.$q.defer();
            this.httpClient.get('readmission/application', ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        ReadmissionService.prototype.getApplicableCourse = function () {
            var defer = this.$q.defer();
            this.httpClient.get('readmission/applicable-courses', ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        ReadmissionService.prototype.apply = function (courses) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post('readmission/apply', { 'entries': this.getSelectedCourses(courses) }, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (data) {
                _this.notify.error(data);
                defer.resolve(null);
            });
            return defer.promise;
        };
        ReadmissionService.prototype.getSelectedCourses = function (courses) {
            var selectedCourses = [];
            for (var i = 0; i < courses.length; i++) {
                if (courses[i].applied) {
                    selectedCourses.push(courses[i]);
                }
            }
            return selectedCourses;
        };
        ReadmissionService.$inject = ['HttpClient', 'notify', '$q'];
        return ReadmissionService;
    }());
    ums.ReadmissionService = ReadmissionService;
    ums.UMS.service('ReadmissionService', ReadmissionService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SemesterFeeResponse = (function () {
        function SemesterFeeResponse() {
        }
        SemesterFeeResponse.responseType = {
            ADMITTED: "ADMITTED",
            APPLIED: "APPLIED",
            ALLOWED: "ALLOWED",
            NOT_ALLOWED: "NOT_ALLOWED",
            NOT_WITHIN_SLOT: "NOT_WITHIN_SLOT",
            INSTALLMENT_AVAILABLE: "INSTALLMENT_AVAILABLE",
            INSTALLMENT_NOT_AVAILABLE: "INSTALLMENT_NOT_AVAILABLE",
            FIRST_INSTALLMENT_PAID: "FIRST_INSTALLMENT_PAID",
            INSTALLMENT_NOT_TAKEN: "INSTALLMENT_NOT_TAKEN",
            READMISSION_APPLIED: "READMISSION_APPLIED",
            READMISSION_NOT_APPLIED: "READMISSION_NOT_APPLIED",
            REGULAR_ADMISSION: "REGULAR_ADMISSION",
            CARRY_REGISTRATION: "CARRY_REGISTRATION",
            SEMESTER_EXTENSION_NEEDED: "SEMESTER_EXTENSION_NEEDED"
        };
        return SemesterFeeResponse;
    }());
    ums.SemesterFeeResponse = SemesterFeeResponse;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SemesterFeeService = (function () {
        function SemesterFeeService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        SemesterFeeService.prototype.getSemesterFeeStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/status", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.getSemesterFeeStatusBySemesterId = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/status/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.getSemesterFee = function (facultyId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/fee/" + facultyId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.getSemesterFeeBySemesterId = function (semesterId, facultyId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/fee/" + semesterId + "/" + facultyId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        // Added by Susmoy
        SemesterFeeService.prototype.getSemesterFeeBySemesterId1 = function (semesterId, facultyId) {
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/semester-fee/fee/" + semesterId + "/" + facultyId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.getSemesterInstallmentStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/semester-installment-status", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.getSemesterInstallmentStatusBySemesterId = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/semester-installment-status/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.installmentAvailable = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/installment-available", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.installmentAvailableBySemesterId = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/installment-available/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.getInstallmentStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/installment-status", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.getInstallmentStatusBySemesterId = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/installment-status/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.getAdmissionStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/admission-status", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.getAdmissionStatusBySemesterId = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/admission-status/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.withInAdmissionSlot = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/within-admission-slot", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.withInAdmissionSlotBySemesterId = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/within-admission-slot/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.withInFirstInstallmentSlot = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/within-first-installment-slot", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.withInFirstInstallmentSlotBySemesterId = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/within-first-installment-slot/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.withInSecondInstallmentSlot = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/within-second-installment-slot", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.withInSecondInstallmentSlotBySemesterId = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/within-second-installment-slot/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        SemesterFeeService.prototype.fee = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/fee", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve({
                fee: response.entries,
                waiveFeedback: response.waiveFeedback
            }); });
            return defer.promise;
        };
        SemesterFeeService.prototype.feeBySemesterId = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/fee/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve({
                fee: response.entries,
                waiveFeedback: response.waiveFeedback
            }); });
            return defer.promise;
        };
        SemesterFeeService.prototype.firstInstallment = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/first-installment", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        SemesterFeeService.prototype.secondInstallment = function () {
            var defer = this.$q.defer();
            this.httpClient.get("semester-fee/second-installment", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        SemesterFeeService.prototype.payFee = function (data) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("semester-fee/pay", data, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (data) {
                _this.notify.error(data);
                defer.resolve(null);
            });
            return defer.promise;
        };
        SemesterFeeService.prototype.payFeeBySemesterId = function (semesterId, data) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("semester-fee/pay/semester-id/" + semesterId, data, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (data) {
                _this.notify.error(data);
                defer.resolve(null);
            });
            return defer.promise;
        };
        SemesterFeeService.prototype.payFirstInstallment = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("semester-fee/pay/first-installment", {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (data) {
                _this.notify.error(data);
                defer.resolve(null);
            });
            return defer.promise;
        };
        SemesterFeeService.prototype.paySecondInstallment = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("semester-fee/pay/second-installment", {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (data) {
                _this.notify.error(data);
                defer.resolve(null);
            });
            return defer.promise;
        };
        SemesterFeeService.$inject = ['$q', 'HttpClient', 'notify'];
        return SemesterFeeService;
    }());
    ums.SemesterFeeService = SemesterFeeService;
    ums.UMS.service("SemesterFeeService", SemesterFeeService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SemesterFeeController = (function () {
        function SemesterFeeController(semesterFeeService, paymentService, studentService, notify, feeReportService, detailedStudentPaymentService, semesterService, commonBankService, districtService, defaulterStudentService, certificateFeeService, parameterSettingService, httpClient, $q, studentRecordService) {
            this.semesterFeeService = semesterFeeService;
            this.paymentService = paymentService;
            this.studentService = studentService;
            this.notify = notify;
            this.feeReportService = feeReportService;
            this.detailedStudentPaymentService = detailedStudentPaymentService;
            this.semesterService = semesterService;
            this.commonBankService = commonBankService;
            this.districtService = districtService;
            this.defaulterStudentService = defaulterStudentService;
            this.certificateFeeService = certificateFeeService;
            this.parameterSettingService = parameterSettingService;
            this.httpClient = httpClient;
            this.$q = $q;
            this.studentRecordService = studentRecordService;
            //protected NOT_WITHIN_SLOT: string = 'Not within admission slot';
            this.NOT_WITHIN_SLOT = 'Your application deadline is over. For further advice and information contact <b>Treasurer office</b> for Regular Admission/Readmission fee, and for Carry Registration fee contact <b>Controller of Exam Section</b>.';
            // todo change the static string
            this.ADMITTED = 'You have been enrolled in Fall 2019 Semester';
            this.READMISSION_NOT_APPLIED = 'Please apply for the readmission application at first.';
            this.SEMESTER_EXTENSION_NEEDED = 'Please apply for semester extension. If you have already applied, contact "<b>Controller of Exam Section</b>". ';
            this.installmentEnabled = false;
            this.payType = SemesterFeeController.SEMESTER_FEE;
            this.semesterFeeDeadline = false;
            this.registrationFeeDeadline = false;
            this.carryRegistrationFeeDeadline = false;
            this.date_over = true;
            this.carry_date_over = true;
            this.semesterfee_date_over = true;
            this.semesterfee_extedended_date_over = false;
            this.CarryApplication_extedended_date_over = false;
            this.Readmission_extedended_date_over = false;
            this.ReadmissionExtendedEndDateval = '0';
            this.initialize();
            /*
            this.ReadmissionExtendedDeadline();
            this.fetchReadmissionApplicationDeadline();
            this.carryLastDateFinder();
            this.SemesterFeeLastDateFinder();
            this.fetchStudentRecord();
            *
             */
        }
        SemesterFeeController.prototype.fetchStudentRecord = function () {
            var _this = this;
            this.studentRecordService.getCurrentSemesterStudentRecord()
                .then(function (res) {
                _this.studentRecord = res[0];
                _this.mtype = _this.studentRecord.type;
                if (_this.mtype == "R" || _this.mtype == "RR") {
                    _this.semesterFeeDeadline = true;
                    _this.registrationFeeDeadline = false;
                    _this.carryRegistrationFeeDeadline = false;
                }
                else if (_this.mtype == "RA" || _this.mtype == "RAR") {
                    _this.semesterFeeDeadline = false;
                    _this.registrationFeeDeadline = true;
                    _this.carryRegistrationFeeDeadline = false;
                }
                else if (_this.mtype == "CR" || _this.mtype == "CRR") {
                    _this.semesterFeeDeadline = false;
                    _this.registrationFeeDeadline = false;
                    _this.carryRegistrationFeeDeadline = true;
                }
            });
        };
        SemesterFeeController.prototype.fetchReadmissionApplicationDeadline = function () {
            var _this = this;
            this.parameterSettingService.getParameterSettingsByActiveSemester(ums.UmsUtil.APPLICATION_READMISSION_PARAMETER)
                .then(function (res) {
                _this.readmissionApplicationParameter = res[0];
                _this.fromDate = new Date(_this.readmissionApplicationParameter.startDate);
                _this.toDate = new Date(_this.readmissionApplicationParameter.endDate);
                _this.ReadmissionStartDate = _this.fromDate;
                _this.ReadmissionEndDate = _this.toDate;
                if (_this.ReadmissionExtendedEndDateval != '0') {
                    _this.ReadmissionExtendedEndDate = new Date(_this.ReadmissionExtendedEndDateval);
                    if (_this.ReadmissionExtendedEndDate.getTime() > _this.ReadmissionEndDate.getTime()) {
                        _this.ReadmissionEndDate = new Date(_this.ReadmissionExtendedEndDateval);
                        _this.Readmission_extedended_date_over = true;
                    }
                }
                var monthNames = ["January", "February", "March",
                    "April", "May", "June", "July", "August", "September", "October", "November", "December"
                ];
                var today = new Date();
                var dd = today.getDate();
                var mm = today.getMonth(); //January is 0!
                var yyyy = today.getFullYear();
                _this.Readmissionstartday = _this.ReadmissionStartDate.getDate();
                _this.Readmissionstartmonth = monthNames[_this.ReadmissionStartDate.getMonth()];
                _this.Readmissionstartyear = _this.ReadmissionStartDate.getFullYear();
                _this.Readmissionendday = _this.ReadmissionEndDate.getDate();
                _this.Readmissionendmonth = monthNames[_this.ReadmissionEndDate.getMonth()];
                _this.Readmissionendyear = _this.ReadmissionEndDate.getFullYear();
                if (today.getTime() >= _this.ReadmissionStartDate.getTime() && today.getTime() <= _this.ReadmissionEndDate.getTime()) {
                    _this.date_over = false;
                }
            });
        };
        SemesterFeeController.prototype.carryLastDateFinder = function () {
            var _this = this;
            this.carrylastDate = "";
            var defer = this.$q.defer();
            var carryLastDate_check = [];
            this.httpClient.get('academic/applicationCarry/CarryRegistrationDeadLine', ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                _this.carryStartDate = new Date(json.startDate);
                _this.carrylastDate = new Date(json.endDate);
                _this.carryfee_semester_name = json.semesterName;
                _this.CarryApplicationStartDate = _this.carryStartDate;
                _this.CarryApplicationEndDate = _this.carrylastDate;
                if (json.end_date_extended != '0') {
                    _this.CarryApplicationExtendedEndDate = new Date(json.end_date_extended);
                    if (_this.CarryApplicationExtendedEndDate.getTime() > _this.CarryApplicationEndDate.getTime()) {
                        _this.CarryApplicationEndDate = new Date(_this.CarryApplicationExtendedEndDate);
                        _this.CarryApplication_extedended_date_over = true;
                    }
                }
                _this.isApplicationOpen = json.isApplicationOpen;
                _this.isBeforeStartDate = json.isBeforeStartDate;
                defer.resolve(json.date);
                var monthNames = ["January", "February", "March",
                    "April", "May", "June", "July", "August", "September", "October", "November", "December"
                ];
                _this.CarryApplicationstartday = _this.CarryApplicationStartDate.getDate();
                _this.CarryApplicationstartmonth = monthNames[_this.CarryApplicationStartDate.getMonth()];
                _this.CarryApplicationstartyear = _this.CarryApplicationStartDate.getFullYear();
                _this.CarryApplicationendday = _this.CarryApplicationEndDate.getDate();
                _this.CarryApplicationendmonth = monthNames[_this.CarryApplicationEndDate.getMonth()];
                _this.CarryApplicationendyear = _this.CarryApplicationEndDate.getFullYear();
                var today = new Date();
                var dd = today.getDate();
                var mm = today.getMonth(); //January is 0!
                var yyyy = today.getFullYear();
                if (today.getTime() >= _this.CarryApplicationStartDate.getTime() && today.getTime() <= _this.CarryApplicationEndDate.getTime()) {
                    _this.carry_date_over = false;
                }
            }, function (response) {
            });
            return defer.promise;
        };
        SemesterFeeController.prototype.SemesterFeeLastDateFinder = function () {
            var _this = this;
            this.SemesterFeelastDate = "";
            var defer = this.$q.defer();
            var carryLastDate_check = [];
            this.httpClient.get('semester-fee/SemesterFeeDeadLine', ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                _this.SemesterFeeStartDate = new Date(json.startDate);
                _this.SemesterFeelastDate = new Date(json.endDate);
                _this.semesterfee_semester_name = json.semesterName;
                _this.RegularAdmissionStartDate = _this.SemesterFeeStartDate;
                _this.RegularAdmissionEndDate = _this.SemesterFeelastDate;
                if (json.end_date_extended != '0') {
                    _this.RegularAdmissionExtendedEndDate = new Date(json.end_date_extended);
                    if (_this.RegularAdmissionExtendedEndDate.getTime() > _this.RegularAdmissionEndDate.getTime()) {
                        _this.RegularAdmissionEndDate = new Date(_this.RegularAdmissionExtendedEndDate);
                        _this.semesterfee_extedended_date_over = true;
                    }
                }
                defer.resolve(json.date);
                var monthNames = ["January", "February", "March",
                    "April", "May", "June", "July", "August", "September", "October", "November", "December"
                ];
                _this.RegularAdmissionstartday = _this.RegularAdmissionStartDate.getDate();
                _this.RegularAdmissionstartmonth = monthNames[_this.RegularAdmissionStartDate.getMonth()];
                _this.RegularAdmissionstartyear = _this.RegularAdmissionStartDate.getFullYear();
                _this.RegularAadmissionendday = _this.RegularAdmissionEndDate.getDate();
                _this.RegularAadmissionendmonth = monthNames[_this.RegularAdmissionEndDate.getMonth()];
                _this.RegularAadmissionendyear = _this.RegularAdmissionEndDate.getFullYear();
                var today = new Date();
                var dd = today.getDate();
                var mm = today.getMonth(); //January is 0!
                var yyyy = today.getFullYear();
                console.log("today", today);
                console.log("enddate", _this.RegularAdmissionEndDate);
                if (today.getTime() >= _this.RegularAdmissionStartDate.getTime() && today.getTime() <= _this.RegularAdmissionEndDate.getTime()) {
                    _this.semesterfee_date_over = false;
                }
            }, function (response) {
            });
            return defer.promise;
        };
        SemesterFeeController.prototype.ReadmissionExtendedDeadline = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('semester-fee/ReadmissionExtendedDeadLine', ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                _this.ReadmissionExtendedEndDateval = json.end_date_extended;
                defer.resolve(json.date);
            }, function (response) {
            });
            return defer.promise;
        };
        SemesterFeeController.prototype.initialize = function () {
            var _this = this;
            this.detailStudentPaymentMap = {};
            this.panelHeading = "Semester Fees";
            this.postData = { "paymentMethod": 1, "instrument": null };
            this.isAdmitted = false;
            this.studentService.checkEnrollmentEligibility().then(function (result) {
                console.log('Semester enrollment eligibility');
                console.log(result);
                switch (result.checkStudentSemesterEnrollmentEligibility) {
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.PROCTORIAL_EXPELLED:
                        _this.messageText = "You have been expelled by the proctor office for the semester. <br/>You are not eligible for semester admission. <br /> Please contact Proctor Office for further communication.";
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.DROP:
                        _this.messageText = "We have found one or more dropped semester(s) for you. <br /> Please contact Registrar Office for further communication.";
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.DUES_EXISTS:
                        _this.messageText = "You have dues. Please pay the dues first.";
                        _this.payType = SemesterFeeController.DEFAULTER_FEE;
                        _this.defaulterFee();
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.WAITING_FOR_PAYMENT:
                        _this.messageText = "Waiting for payment to complete.";
                        _this.showDefaulterPaymentStatus();
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.CONTACT_IUMS:
                        _this.messageText = "Sorry, you cannot proceed now. Contact IUMS Office for further advice and information.";
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.RESULT_NOT_PROCESSED:
                        _this.messageText = "Result is not processed yet by the controller of exam.";
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.WITHHELD:
                        _this.messageText = "Result is kept Withheld for the semester " + result.semesterName;
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.ELIGIBLE:
                        _this.payType = SemesterFeeController.SEMESTER_FEE;
                        _this.semesterFeeService.getSemesterFeeStatus().then(function (response) {
                            console.log('Semester fee status');
                            console.log(response);
                            switch (response) {
                                case ums.SemesterFeeResponse.responseType.SEMESTER_EXTENSION_NEEDED:
                                    _this.messageText = _this.SEMESTER_EXTENSION_NEEDED;
                                    break;
                                case ums.SemesterFeeResponse.responseType.ADMITTED:
                                    _this.messageText = 'You have been enrolled in ' + result.semesterName.replace(',', '') + ' semester.';
                                    _this.isAdmitted = true;
                                    _this.showPaymentStatus();
                                    break;
                                case ums.SemesterFeeResponse.responseType.ALLOWED:
                                    _this.admissionFee();
                                    break;
                                case ums.SemesterFeeResponse.responseType.APPLIED:
                                    _this.showPaymentStatus();
                                    break;
                                case ums.SemesterFeeResponse.responseType.NOT_WITHIN_SLOT:
                                    _this.messageText = _this.NOT_WITHIN_SLOT;
                                    _this.showPaymentStatus();
                                    break;
                            }
                        });
                }
            });
            this.bankList = [];
            this.districtList = [];
            this.commonBankService.getBankList().then(function (bankList) {
                _this.bankList = bankList;
            });
            this.districtService.getAll().then(function (districtList) {
                _this.districtList = districtList;
            });
        };
        SemesterFeeController.prototype.defaulterFee = function () {
            var _this = this;
            this.defaulterStudentService.getDefaulterPay().then(function (response) {
                _this.fee = response;
                _this.regularPayment = true;
                _this.secondInstallment = false;
                _this.firstInstallment = false;
            });
        };
        SemesterFeeController.prototype.pay = function () {
            var _this = this;
            if (this.instrument && this.instrument.branch)
                this.selectedBranch = this.instrument.branch.id;
            var validate = this.validateInputs();
            if (!validate) {
                this.notify.info("Provide all the information.");
                return;
            }
            ums.Utils.disableButton("gdsButton");
            if (this.postData.paymentMethod != 1) {
                this.postData.instrument = this.instrument;
                this.postData.instrument.date = $("#date_day").val() + "-" + $("#date_month").val() + "-" + $("#date_year").val();
            }
            if (validate) {
                ums.Utils.disableButton("submitBtn");
            }
            if (this.payType == SemesterFeeController.SEMESTER_FEE) {
                this.semesterFeeService.payFee(this.postData).then(function (response) {
                    if (response !== ums.SemesterFeeResponse.responseType.APPLIED) {
                        _this.notify.error(response);
                        ums.Utils.enableButton("gdsButton");
                        ums.Utils.enableButton("submitBtn");
                    }
                    else {
                        $('#modal-paymentMethod').modal('hide');
                        _this.showPaymentStatus();
                    }
                });
            }
            else {
                this.defaulterStudentService.payFee(this.postData).then(function (response) {
                    if (response !== ums.SemesterEnrollmentEligibilityResponse.responseType.WAITING_FOR_PAYMENT) {
                        _this.notify.error(response);
                        ums.Utils.enableButton("gdsButton");
                        ums.Utils.enableButton("submitBtn");
                    }
                    else {
                        $('#modal-paymentMethod').modal('hide');
                        _this.showDefaulterPaymentStatus();
                        _this.messageText = "Waiting for payment to complete.";
                    }
                });
            }
        };
        SemesterFeeController.prototype.payFirstInstallment = function () {
            var _this = this;
            this.studentService.getStudent().then(function (student) {
                if (student && student.currentEnrolledSemesterId) {
                    _this.semesterFeeService.payFirstInstallment().then(function (response) {
                        if (response !== ums.SemesterFeeResponse.responseType.APPLIED) {
                            _this.notify.error(response);
                        }
                        else {
                            _this.showPaymentStatus();
                        }
                    });
                }
            });
        };
        SemesterFeeController.prototype.paySecondInstallment = function () {
            var _this = this;
            this.studentService.getStudent().then(function (student) {
                if (student && student.currentEnrolledSemesterId) {
                    _this.semesterFeeService.paySecondInstallment().then(function (response) {
                        if (response !== ums.SemesterFeeResponse.responseType.APPLIED) {
                            _this.notify.error(response);
                        }
                        else {
                            _this.showPaymentStatus();
                        }
                    });
                }
            });
        };
        SemesterFeeController.prototype.selectPaymentOption = function (option) {
            var _this = this;
            this.messageText = '';
            if (option === 0) {
                this.admissionNoInstallment("");
            }
            else if (option === 1) {
                this.semesterFeeService.withInFirstInstallmentSlot().then(function (withinSlot) {
                    if (withinSlot) {
                        _this.semesterFeeService.firstInstallment().then(function (fee) {
                            _this.fee = fee;
                            _this.firstInstallment = true;
                            _this.regularPayment = false;
                        });
                    }
                    else {
                        _this.messageText = _this.NOT_WITHIN_SLOT;
                    }
                });
            }
        };
        SemesterFeeController.prototype.total = function (fees) {
            var total = 0;
            for (var i = 0; i < fees.length; i++) {
                total += parseInt(fees[i].amount);
            }
            return total;
        };
        SemesterFeeController.prototype.totalPayment = function (fees) {
            var total = 0;
            for (var i = 0; i < fees.length; i++) {
                total += fees[i].amount;
            }
            return total;
        };
        SemesterFeeController.prototype.admissionFee = function () {
            var _this = this;
            this.semesterFeeService.getSemesterInstallmentStatus().then(function (semesterInstallmentStatus) {
                if (semesterInstallmentStatus === ums.SemesterFeeResponse.responseType.INSTALLMENT_AVAILABLE) {
                    _this.semesterFeeService.getInstallmentStatus().then(function (installmentStatus) {
                        switch (installmentStatus) {
                            case ums.SemesterFeeResponse.responseType.ADMITTED:
                                _this.messageText = _this.ADMITTED;
                                break;
                            case ums.SemesterFeeResponse.responseType.FIRST_INSTALLMENT_PAID:
                                _this.secondInstallmentInfo();
                                break;
                            case ums.SemesterFeeResponse.responseType.INSTALLMENT_NOT_TAKEN:
                                _this.semesterFeeService.getAdmissionStatus().then(function (admissionStatus) {
                                    switch (admissionStatus) {
                                        case ums.SemesterFeeResponse.responseType.REGULAR_ADMISSION:
                                            _this.admissionWithInstallmentOption();
                                            break;
                                        case ums.SemesterFeeResponse.responseType.READMISSION_APPLIED:
                                            _this.admissionWithInstallmentOption();
                                            break;
                                        case ums.SemesterFeeResponse.responseType.READMISSION_NOT_APPLIED:
                                            _this.messageText = _this.READMISSION_NOT_APPLIED;
                                            break;
                                    }
                                });
                                break;
                        }
                    });
                }
                else {
                    _this.semesterFeeService.getAdmissionStatus().then(function (admissionStatus) {
                        switch (admissionStatus) {
                            case ums.SemesterFeeResponse.responseType.REGULAR_ADMISSION:
                                _this.admissionNoInstallment("Semester Fees - ");
                                break;
                            case ums.SemesterFeeResponse.responseType.READMISSION_APPLIED:
                                _this.admissionNoInstallment("Readmission Fees - ");
                                break;
                            case ums.SemesterFeeResponse.responseType.READMISSION_NOT_APPLIED:
                                _this.messageText = _this.READMISSION_NOT_APPLIED;
                                break;
                            case ums.SemesterFeeResponse.responseType.CARRY_REGISTRATION:
                                _this.admissionNoInstallment("Carry Registration Fees - ");
                                break;
                        }
                    });
                }
            });
        };
        SemesterFeeController.prototype.admissionWithInstallmentOption = function () {
            var _this = this;
            this.semesterFeeService.installmentAvailable().then(function (available) {
                if (available) {
                    _this.semesterFeeService.withInAdmissionSlot().then(function (withinSlot) {
                        if (withinSlot) {
                            _this.installmentEnabled = true;
                        }
                        else {
                            _this.messageText = _this.NOT_WITHIN_SLOT;
                        }
                    });
                }
                else {
                    _this.admissionNoInstallment("");
                }
            });
        };
        SemesterFeeController.prototype.admissionNoInstallment = function (header) {
            var _this = this;
            var that = this;
            this.semesterFeeService.withInAdmissionSlot().then(function (withinSlot) {
                if (withinSlot) {
                    _this.semesterFeeService.fee().then(function (feeWithWaive) {
                        _this.fee = feeWithWaive.fee;
                        _this.waiveInfo = feeWithWaive.waiveFeedback;
                        _this.regularPayment = true;
                        _this.secondInstallment = false;
                        _this.firstInstallment = false;
                    });
                    _this.semesterService.getActiveSemester(11).then(function (semester) {
                        if (header != "")
                            that.panelHeading = header + semester.name;
                    });
                }
                else {
                    _this.messageText = _this.NOT_WITHIN_SLOT;
                }
            });
        };
        SemesterFeeController.prototype.secondInstallmentInfo = function () {
            var _this = this;
            this.semesterFeeService.withInSecondInstallmentSlot().then(function (withInSlot) {
                if (withInSlot) {
                    _this.semesterFeeService.secondInstallment().then(function (fee) {
                        _this.fee = fee;
                        _this.regularPayment = false;
                        _this.secondInstallment = true;
                    });
                }
                else {
                    _this.messageText = 'Your first installment for semester fee is paid. Second installment payment slot has not started yet or already over.';
                    _this.studentService.getStudent().then(function (student) {
                        if (student && student.currentEnrolledSemesterId) {
                            _this.showPaymentStatus();
                        }
                    });
                }
            });
        };
        SemesterFeeController.prototype.showPaymentStatus = function () {
            var _this = this;
            this.paymentService.getSemesterFeePaymentStatus().then(function (payments) {
                payments.forEach(function (p) {
                    _this.detailStudentPaymentMap = {};
                    _this.getDetailedStudentPayments(p.transactionId);
                    var paymentGroup = {};
                    _this.payments = payments.reduce(function (group, payment) {
                        if (!group[payment.transactionId]) {
                            group[payment.transactionId] = [];
                        }
                        group[payment.transactionId].push(payment);
                        return group;
                    }, paymentGroup);
                });
            });
            this.semesterFeeService.fee().then(function (feeWithWaive) {
                _this.waiveInfo = feeWithWaive.waiveFeedback;
            });
        };
        SemesterFeeController.prototype.showDefaulterPaymentStatus = function () {
            var _this = this;
            this.paymentService.getDefaulterPaymentStatus().then(function (payments) {
                _this.getDetailedStudentPayments(payments[0].transactionId);
                var paymentGroup = {};
                _this.payments = payments.reduce(function (group, payment) {
                    if (!group[payment.transactionId]) {
                        group[payment.transactionId] = [];
                    }
                    group[payment.transactionId].push(payment);
                    return group;
                }, paymentGroup);
            });
        };
        SemesterFeeController.prototype.getDetailedStudentPayments = function (transactionid) {
            var _this = this;
            this.detailedStudentPaymentService.getDetailedStudentPaymentByTransactionId(transactionid).then(function (detailedStudentPaymentList) {
                console.group('Detail student payments by transaction id');
                _this.detailedStudentPaymentList = [];
                _this.detailedStudentPaymentList = detailedStudentPaymentList;
                _this.detailStudentPaymentMap[transactionid] = detailedStudentPaymentList;
                console.groupEnd();
            });
        };
        SemesterFeeController.prototype.receipt = function (transactionId) {
            this.feeReportService.receipt(transactionId);
        };
        SemesterFeeController.prototype.getBranches = function () {
            this.setSelected();
            if (this.selectedBank + "" != "" && this.selectedBank + "" != "undefined") {
                if (this.selectedDistrict + "" != "" && this.selectedDistrict + "" != "undefined") {
                    this.getBranchesByBankAndDistrictId(this.selectedBank, this.selectedDistrict);
                }
                else {
                    this.getBranchesByBankId(this.selectedBank);
                }
            }
            this.selectedBranch = null;
            this.instrument.branch = null;
        };
        SemesterFeeController.prototype.setSelected = function () {
            //console.log("----"+this.instrument.bank.id);
            if (this.instrument.bank != null) {
                this.selectedBank = this.instrument.bank.id;
            }
            if (this.instrument.district != null) {
                this.selectedDistrict = this.instrument.district.id;
            }
            //Select Branch
        };
        SemesterFeeController.prototype.getBranchesByBankId = function (bankId) {
            var _this = this;
            this.commonBankService.getBranchList(bankId).then(function (branchList) {
                _this.branchList = branchList;
            });
        };
        SemesterFeeController.prototype.getBranchesByBankAndDistrictId = function (bankId, districtId) {
            var _this = this;
            this.commonBankService.getBranchListByDistrict(bankId, districtId).then(function (branchList) {
                _this.branchList = branchList;
            });
        };
        SemesterFeeController.prototype.validateInputs = function () {
            var validate = true;
            if (this.postData.paymentMethod == 0) {
                ums.Utils.changeColor("paymentMethod", "S"); //Set red color
                validate = false;
            }
            else {
                ums.Utils.changeColor("paymentMethod", "R"); //Reset to default color
            }
            if (this.postData.paymentMethod != 0 && this.postData.paymentMethod != 1) {
                if (!this.selectedBank) {
                    ums.Utils.changeColor("instrumentBank > div > span", "S"); //Set red color
                    validate = false;
                }
                else {
                    ums.Utils.changeColor("instrumentBank > div > span", "R"); //Reset to default color
                }
                if (!this.selectedBranch) {
                    ums.Utils.changeColor("instrumentBranch > div > span", "S"); //Set red color
                    validate = false;
                }
                else {
                    ums.Utils.changeColor("instrumentBranch > div > span", "R"); //Reset to default color
                }
                if ($("#instrumentNo").val() == "") {
                    ums.Utils.changeColor("instrumentNo", "S"); //Set red color
                    validate = false;
                }
                else {
                    ums.Utils.changeColor("instrumentNo", "R"); //Reset to default color
                }
                if (Number($("#date_day").val()) == 0) {
                    ums.Utils.changeColor("date_day", "S"); //Set red color
                    validate = false;
                }
                else {
                    ums.Utils.changeColor("date_day", "R"); //Reset to default color
                }
                if (Number($("#date_month").val()) == 0) {
                    ums.Utils.changeColor("date_month", "S"); //Set red color
                    validate = false;
                }
                else {
                    ums.Utils.changeColor("date_month", "R"); //Reset to default color
                }
                if (Number($("#date_year").val()) == 0) {
                    ums.Utils.changeColor("date_year", "S"); //Set red color
                    validate = false;
                }
                else {
                    ums.Utils.changeColor("date_year", "R"); //Reset to default color
                }
                if (validate) {
                    var insDate = $("#date_day").val() + "-" + $("#date_month").val() + "-" + $("#date_year").val();
                    validate = moment(insDate, "DD-MM-YYYY").isValid();
                    if (validate) {
                        ums.Utils.changeColor("date_day", "R");
                        ums.Utils.changeColor("date_month", "R");
                        ums.Utils.changeColor("date_year", "R");
                    }
                    else {
                        ums.Utils.changeColor("date_day", "S");
                        ums.Utils.changeColor("date_month", "S");
                        ums.Utils.changeColor("date_year", "S");
                    }
                }
            }
            return validate;
        };
        SemesterFeeController.$inject = ['SemesterFeeService', 'PaymentService', 'StudentInfoService', 'notify', 'FeeReportService', 'DetailedStudentPaymentService',
            'semesterService', 'commonBankService', 'districtService',
            'defaulterStudentService', 'CertificateFeeService', 'parameterSettingService',
            'HttpClient', '$q', 'studentRecordService'];
        SemesterFeeController.SEMESTER_FEE = 1;
        SemesterFeeController.DEFAULTER_FEE = 2;
        return SemesterFeeController;
    }());
    ums.SemesterFeeController = SemesterFeeController;
    ums.UMS.controller('SemesterFeeController', SemesterFeeController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var SemesterfeePreviousController = (function (_super) {
        __extends(SemesterfeePreviousController, _super);
        function SemesterfeePreviousController(semesterFeeService, paymentService, studentService, notify, feeReportService, detailedStudentPaymentService, semesterService, commonBankService, districtService, defaulterStudentService, certificateFeeService, parameterSettingService, httpClient, $q, studentRecordService) {
            var _this = _super.call(this, semesterFeeService, paymentService, studentService, notify, feeReportService, detailedStudentPaymentService, semesterService, commonBankService, districtService, defaulterStudentService, certificateFeeService, parameterSettingService, httpClient, $q, studentRecordService) || this;
            _this.semesterFeeService = semesterFeeService;
            _this.paymentService = paymentService;
            _this.studentService = studentService;
            _this.notify = notify;
            _this.feeReportService = feeReportService;
            _this.detailedStudentPaymentService = detailedStudentPaymentService;
            _this.semesterService = semesterService;
            _this.commonBankService = commonBankService;
            _this.districtService = districtService;
            _this.defaulterStudentService = defaulterStudentService;
            _this.certificateFeeService = certificateFeeService;
            _this.parameterSettingService = parameterSettingService;
            _this.httpClient = httpClient;
            _this.$q = $q;
            _this.studentRecordService = studentRecordService;
            console.log('in the initialization');
            return _this;
        }
        SemesterfeePreviousController.prototype.initialize = function () {
            this.detailStudentPaymentMap = {};
            this.panelHeading = "Previous Semester Fees";
            this.postData = { "paymentMethod": 1, "instrument": null };
            this.fetchPreviousSemesters();
            //super.initialize();
        };
        SemesterfeePreviousController.prototype.semesterSelected = function () {
            this.messageText = null;
            this.payments = null;
            this.fee = null;
            this.fetchPaymentStatus();
        };
        SemesterfeePreviousController.prototype.fetchPaymentStatus = function () {
            var _this = this;
            this.isAdmitted = false;
            this.studentService.checkEnrollmentEligibilityBySemester(this.selectedSemester.id).then(function (result) {
                console.log('Semester enrollment eligibility');
                console.log(result);
                switch (result.checkStudentSemesterEnrollmentEligibility) {
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.PROCTORIAL_EXPELLED:
                        _this.messageText = "You have been expelled by the proctor office for the semester. <br/>You are not eligible for semester admission. <br /> Please contact Proctor Office for further communication.";
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.DROP:
                        _this.messageText = "We have found one or more dropped semester(s) for you. <br /> Please contact Registrar Office for further communication.";
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.DUES_EXISTS:
                        //this.messageText = "You have dues from previous semester. Please pay the dues first. After that you will be eligible for semester fees payment";
                        _this.messageText = "You have dues. Please pay the dues first.";
                        _this.payType = ums.SemesterFeeController.DEFAULTER_FEE;
                        _this.defaulterFee();
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.WAITING_FOR_PAYMENT:
                        _this.messageText = "Waiting for payment to complete.";
                        _this.showDefaulterPaymentStatus();
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.CONTACT_IUMS:
                        _this.messageText = "Sorry, you cannot proceed now. Contact IUMS Office for further advice and information.";
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.RESULT_NOT_PROCESSED:
                        _this.messageText = "Result is not processed yet by the controller of exam";
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.WITHHELD:
                        _this.messageText = "Result is kept Withheld for the semester " + result.semesterName;
                        break;
                    case ums.SemesterEnrollmentEligibilityResponse.responseType.ELIGIBLE:
                        _this.payType = ums.SemesterFeeController.SEMESTER_FEE;
                        _this.semesterFeeService.getSemesterFeeStatusBySemesterId(_this.selectedSemester.id).then(function (response) {
                            console.log('Semester fee status');
                            console.log(response);
                            switch (response) {
                                case ums.SemesterFeeResponse.responseType.SEMESTER_EXTENSION_NEEDED:
                                    _this.messageText = _this.SEMESTER_EXTENSION_NEEDED;
                                    break;
                                case ums.SemesterFeeResponse.responseType.ADMITTED:
                                    _this.messageText = 'You have been enrolled in ' + result.semesterName.replace(',', '') + ' semester.';
                                    _this.isAdmitted = true;
                                    _this.showPaymentStatus();
                                    break;
                                case ums.SemesterFeeResponse.responseType.ALLOWED:
                                    _this.admissionFee();
                                    break;
                                case ums.SemesterFeeResponse.responseType.APPLIED:
                                    _this.showPaymentStatus();
                                    break;
                                case ums.SemesterFeeResponse.responseType.NOT_WITHIN_SLOT:
                                    _this.messageText = _this.NOT_WITHIN_SLOT;
                                    _this.showPaymentStatus();
                                    break;
                            }
                        });
                }
            });
            this.bankList = [];
            this.districtList = [];
            this.commonBankService.getBankList().then(function (bankList) {
                _this.bankList = bankList;
            });
            this.districtService.getAll().then(function (districtList) {
                _this.districtList = districtList;
            });
        };
        SemesterfeePreviousController.prototype.showPaymentStatus = function () {
            var _this = this;
            this.paymentService.getSemesterFeePaymentStatusBySemester(this.selectedSemester.id).then(function (payments) {
                console.log('Semester fee payment');
                console.log(payments);
                payments.forEach(function (p) {
                    _this.detailStudentPaymentMap = {};
                    _this.getDetailedStudentPayments(p.transactionId);
                    var paymentGroup = {};
                    _this.payments = payments.reduce(function (group, payment) {
                        if (!group[payment.transactionId]) {
                            group[payment.transactionId] = [];
                        }
                        group[payment.transactionId].push(payment);
                        return group;
                    }, paymentGroup);
                });
            });
            this.semesterFeeService.feeBySemesterId(this.selectedSemester.id).then(function (feeWithWaive) {
                _this.waiveInfo = feeWithWaive.waiveFeedback;
            });
        };
        SemesterfeePreviousController.prototype.defaulterFee = function () {
            var _this = this;
            this.defaulterStudentService.getDefaulterPayBySemesterId(this.selectedSemester.id).then(function (response) {
                _this.fee = response;
                _this.regularPayment = true;
                _this.secondInstallment = false;
                _this.firstInstallment = false;
            });
        };
        SemesterfeePreviousController.prototype.showDefaulterPaymentStatus = function () {
            var _this = this;
            this.paymentService.getDefaulterPaymentStatusBySemester(this.selectedSemester.id).then(function (payments) {
                _this.getDetailedStudentPayments(payments[0].transactionId);
                var paymentGroup = {};
                _this.payments = payments.reduce(function (group, payment) {
                    if (!group[payment.transactionId]) {
                        group[payment.transactionId] = [];
                    }
                    group[payment.transactionId].push(payment);
                    return group;
                }, paymentGroup);
            });
        };
        SemesterfeePreviousController.prototype.fetchPreviousSemesters = function () {
            var _this = this;
            this.semesters = [];
            this.semesterService.fetchAttendedSemesters().then(function (res) {
                res.forEach(function (s) {
                    if (s.status !== 1)
                        _this.semesters.push(s);
                });
            });
        };
        SemesterfeePreviousController.prototype.back = function () {
            window.history.back();
        };
        SemesterfeePreviousController.prototype.admissionFee = function () {
            var _this = this;
            this.semesterFeeService.getSemesterInstallmentStatusBySemesterId(this.selectedSemester.id).then(function (semesterInstallmentStatus) {
                if (semesterInstallmentStatus === ums.SemesterFeeResponse.responseType.INSTALLMENT_AVAILABLE) {
                    _this.semesterFeeService.getInstallmentStatusBySemesterId(_this.selectedSemester.id).then(function (installmentStatus) {
                        switch (installmentStatus) {
                            case ums.SemesterFeeResponse.responseType.ADMITTED:
                                _this.messageText = _this.ADMITTED;
                                break;
                            case ums.SemesterFeeResponse.responseType.FIRST_INSTALLMENT_PAID:
                                _this.secondInstallmentInfo();
                                break;
                            case ums.SemesterFeeResponse.responseType.INSTALLMENT_NOT_TAKEN:
                                _this.semesterFeeService.getAdmissionStatusBySemesterId(_this.selectedSemester.id).then(function (admissionStatus) {
                                    console.log("Admission status");
                                    console.log(admissionStatus);
                                    switch (admissionStatus) {
                                        case ums.SemesterFeeResponse.responseType.REGULAR_ADMISSION:
                                            _this.admissionWithInstallmentOption();
                                            break;
                                        case ums.SemesterFeeResponse.responseType.READMISSION_APPLIED:
                                            _this.admissionWithInstallmentOption();
                                            break;
                                        case ums.SemesterFeeResponse.responseType.READMISSION_NOT_APPLIED:
                                            _this.messageText = _this.READMISSION_NOT_APPLIED;
                                            break;
                                    }
                                });
                                break;
                        }
                    });
                }
                else {
                    _this.semesterFeeService.getAdmissionStatusBySemesterId(_this.selectedSemester.id).then(function (admissionStatus) {
                        console.log("###admission status-->" + admissionStatus);
                        switch (admissionStatus) {
                            case ums.SemesterFeeResponse.responseType.REGULAR_ADMISSION:
                                _this.admissionNoInstallment("Semester Fees - ");
                                break;
                            case ums.SemesterFeeResponse.responseType.READMISSION_APPLIED:
                                _this.admissionNoInstallment("Readmission Fees - ");
                                break;
                            case ums.SemesterFeeResponse.responseType.READMISSION_NOT_APPLIED:
                                _this.messageText = _this.READMISSION_NOT_APPLIED;
                                break;
                            case ums.SemesterFeeResponse.responseType.CARRY_REGISTRATION:
                                _this.admissionNoInstallment("Carry Registration Fees - ");
                                break;
                        }
                    });
                }
            });
        };
        SemesterfeePreviousController.prototype.admissionWithInstallmentOption = function () {
            var _this = this;
            this.semesterFeeService.installmentAvailableBySemesterId(this.selectedSemester.id).then(function (available) {
                if (available) {
                    _this.semesterFeeService.withInAdmissionSlot().then(function (withinSlot) {
                        if (withinSlot) {
                            _this.installmentEnabled = true;
                        }
                        else {
                            _this.messageText = _this.NOT_WITHIN_SLOT;
                        }
                    });
                }
                else {
                    _this.admissionNoInstallment("");
                }
            });
        };
        SemesterfeePreviousController.prototype.admissionNoInstallment = function (header) {
            var _this = this;
            var that = this;
            this.semesterFeeService.withInAdmissionSlotBySemesterId(this.selectedSemester.id).then(function (withinSlot) {
                if (withinSlot) {
                    _this.semesterFeeService.feeBySemesterId(_this.selectedSemester.id).then(function (feeWithWaive) {
                        console.log('fee with waive--->');
                        console.log(feeWithWaive);
                        _this.fee = feeWithWaive.fee;
                        _this.waiveInfo = feeWithWaive.waiveFeedback;
                        _this.regularPayment = true;
                        _this.secondInstallment = false;
                        _this.firstInstallment = false;
                    });
                    _this.panelHeading = header + _this.selectedSemester.name;
                }
                else {
                    _this.messageText = _this.NOT_WITHIN_SLOT;
                }
            });
        };
        SemesterfeePreviousController.prototype.pay = function () {
            var _this = this;
            if (this.instrument && this.instrument.branch)
                this.selectedBranch = this.instrument.branch.id;
            var validate = this.validateInputs();
            if (!validate) {
                this.notify.info("Provide all the information.");
                return;
            }
            ums.Utils.disableButton("gdsButton");
            if (this.postData.paymentMethod != 1) {
                this.postData.instrument = this.instrument;
                this.postData.instrument.date = $("#date_day").val() + "-" + $("#date_month").val() + "-" + $("#date_year").val();
            }
            if (validate) {
                ums.Utils.disableButton("submitBtn");
            }
            if (this.payType == ums.SemesterFeeController.SEMESTER_FEE) {
                this.semesterFeeService.payFeeBySemesterId(this.selectedSemester.id, this.postData).then(function (response) {
                    if (response !== ums.SemesterFeeResponse.responseType.APPLIED) {
                        _this.notify.error(response);
                        ums.Utils.enableButton("gdsButton");
                        ums.Utils.enableButton("submitBtn");
                    }
                    else {
                        $('#modal-paymentMethod').modal('hide');
                        _this.showPaymentStatus();
                    }
                });
            }
            else {
                this.defaulterStudentService.payFeeBySemester(this.selectedSemester.id, this.postData).then(function (response) {
                    if (response !== ums.SemesterEnrollmentEligibilityResponse.responseType.WAITING_FOR_PAYMENT) {
                        _this.notify.error(response);
                        ums.Utils.enableButton("gdsButton");
                        ums.Utils.enableButton("submitBtn");
                    }
                    else {
                        $('#modal-paymentMethod').modal('hide');
                        _this.showDefaulterPaymentStatus();
                        _this.messageText = "Waiting for payment to complete.";
                    }
                });
            }
        };
        SemesterfeePreviousController.$inject = ['SemesterFeeService', 'PaymentService', 'StudentInfoService', 'notify', 'FeeReportService', 'DetailedStudentPaymentService',
            'semesterService', 'commonBankService', 'districtService',
            'defaulterStudentService', 'CertificateFeeService', 'parameterSettingService',
            'HttpClient', '$q', 'studentRecordService'];
        return SemesterfeePreviousController;
    }(ums.SemesterFeeController));
    ums.SemesterfeePreviousController = SemesterfeePreviousController;
    ums.UMS.controller('SemesterFeePreviousController', SemesterfeePreviousController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var InstallmentSettingService = (function () {
        function InstallmentSettingService($q, httpClient) {
            this.$q = $q;
            this.httpClient = httpClient;
        }
        InstallmentSettingService.prototype.getInstallmentSetting = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("installment-setting/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                if (!response.semesterId) {
                    response.semesterId = semesterId;
                    response.enabled = false;
                }
                defer.resolve(response);
            });
            return defer.promise;
        };
        InstallmentSettingService.prototype.getDateSetting = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("installment-setting/" + semesterId + "/date-setting", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        InstallmentSettingService.prototype.updateInstallmentSetting = function (instalmentSetting) {
            var defer = this.$q.defer();
            if (instalmentSetting.id) {
                this.httpClient.put("installment-setting/" + instalmentSetting.id, instalmentSetting, ums.HttpClient.MIME_TYPE_JSON)
                    .success(function () {
                    defer.resolve(true);
                })
                    .error(function () { return defer.resolve(false); });
            }
            else {
                this.httpClient.post("installment-setting", instalmentSetting, ums.HttpClient.MIME_TYPE_JSON)
                    .success(function () {
                    defer.resolve(true);
                })
                    .error(function () { return defer.resolve(false); });
            }
            return defer.promise;
        };
        InstallmentSettingService.prototype.updateDateSetting = function (semesterId, dateSetting) {
            var defer = this.$q.defer();
            this.httpClient.post("installment-setting/" + semesterId + "/date-setting", dateSetting, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(true);
            })
                .error(function () { return defer.resolve(false); });
            return defer.promise;
        };
        InstallmentSettingService.$inject = ['$q', 'HttpClient'];
        return InstallmentSettingService;
    }());
    ums.InstallmentSettingService = InstallmentSettingService;
    ums.UMS.service('InstallmentSettingService', InstallmentSettingService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var InstallmentSettingController = (function () {
        function InstallmentSettingController($scope, appConstants, httpClient, installmentSettingService, notify) {
            this.$scope = $scope;
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.installmentSettingService = installmentSettingService;
            this.notify = notify;
            this.semesterSelector = new ums.ProgramSelectorModel(this.appConstants, this.httpClient, true);
            this.semesterSelector.setProgramType(this.appConstants.programTypeEnum.UG, ums.FieldViewTypes.selected);
            this.semesterSelector.setDepartment(null, ums.FieldViewTypes.hidden);
            this.semesterSelector.setProgram(null, ums.FieldViewTypes.hidden);
            this.$scope.updateSetting = this.updateSetting.bind(this);
        }
        InstallmentSettingController.prototype.findSetting = function () {
            var _this = this;
            this.installmentSettingService.getInstallmentSetting(this.semesterSelector.semesterId).then(function (installmentSetting) {
                _this.installmentSetting = installmentSetting;
                _this.findDateSetting();
                _this.enableSaveButton = true;
            });
        };
        InstallmentSettingController.prototype.findDateSetting = function () {
            var _this = this;
            this.installmentSettingService.getDateSetting(this.semesterSelector.semesterId).then(function (dateSetting) {
                _this.dateSettings = dateSetting;
            });
        };
        InstallmentSettingController.prototype.addLateFee = function (setting) {
            if (!setting.lateFee) {
                setting.lateFee = [];
            }
            setting.lateFee.push({
                start: undefined,
                end: undefined,
                fee: undefined
            });
        };
        InstallmentSettingController.prototype.removeLateFee = function (setting, index) {
            setting.lateFee.splice(index, 1);
            if (setting.lateFee.length === 0) {
                delete setting.lateFee;
            }
        };
        InstallmentSettingController.prototype.updateSetting = function () {
            var _this = this;
            this.installmentSettingService.updateInstallmentSetting(this.installmentSetting)
                .then(function (response) {
                if (response) {
                    _this.installmentSettingService.updateDateSetting(_this.semesterSelector.semesterId, _this.dateSettings)
                        .then(function (result) {
                        if (!result) {
                            _this.notify.error('Failed to save');
                        }
                        else {
                            _this.findSetting();
                        }
                    });
                }
                else {
                    _this.notify.error('Failed to save');
                }
            });
        };
        InstallmentSettingController.$inject = ['$scope', 'appConstants', 'HttpClient', 'InstallmentSettingService', 'notify'];
        return InstallmentSettingController;
    }());
    ums.InstallmentSettingController = InstallmentSettingController;
    ums.UMS.controller('InstallmentSettingController', InstallmentSettingController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PaymentService = (function () {
        function PaymentService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        PaymentService.prototype.getSemesterFeePaymentStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get("student-payment/semester-fee", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        PaymentService.prototype.getSemesterFeePaymentStatusBySemester = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("student-payment/semester-fee/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        PaymentService.prototype.getDefaulterPaymentStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get("student-payment/defaulter-fee", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        PaymentService.prototype.getDefaulterPaymentStatusBySemester = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("student-payment/defaulter-fee/semester-id/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        PaymentService.prototype.getCertificateFeePaymentStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get("student-payment/certificate-fee", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        /*
        * @author:evana
        * @desc: Student Payment for Name correction
        * */
        PaymentService.prototype.getCorrectionFeePaymentStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get("student-payment/name-correction-fee", ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        PaymentService.prototype.getPaymentHistory = function () {
            var defer = this.$q.defer();
            this.httpClient.get("student-payment/all", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                var paymentGroup = {};
                defer.resolve(response.entries.reduce(function (group, payment) {
                    if (!group[payment.transactionId]) {
                        group[payment.transactionId] = [];
                    }
                    group[payment.transactionId].push(payment);
                    return group;
                }, paymentGroup));
            });
            return defer.promise;
        };
        PaymentService.prototype.saveTransactionDeadlineExtension = function (transactionId, lateFee, lastDate) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put("student-payment/update-payment/transaction-id/" + transactionId + "/late-fee/" + lateFee + "/last-date/" + lastDate, {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                defer.resolve('success');
            })
                .error(function (response) {
                _this.notify.error("Error in updating the payment date. Please contact with IUMS.");
                defer.resolve(response);
            });
            return defer.promise;
        };
        PaymentService.prototype.markInstallmentAsComplete = function (transactionId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.put("student-payment/mark-payment-as-complete/" + transactionId, {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (rsponse) {
                defer.resolve('success');
            })
                .error(function (response) {
                _this.notify.error('Error in marking payment as completed.');
                defer.resolve(response);
            });
            return defer.promise;
        };
        PaymentService.prototype.getPaymentsByTransactionIdList = function (transactionidList) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post('student-payment/transactionIdList', transactionidList, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (response) {
                _this.notify.error("Error in retrieving payment data, please contact with iums");
                defer.resolve(response);
            });
            return defer.promise;
        };
        PaymentService.prototype.getPaymentByTransactionId = function (transactionId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get('student-payment/transaction-id/' + transactionId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            }, function (response) {
                _this.notify.error("Error in retrieving payment data, please contact with iums");
            });
            return defer.promise;
        };
        PaymentService.prototype.getPaymentsByStudentId = function (studentId) {
            var defer = this.$q.defer();
            this.httpClient.get('student-payment/allPayments/student-id/' + studentId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        PaymentService.prototype.getPaymentsByStudentIdAndSemesterId = function (studentId, semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get('student-payment/allPayments/student-id/' + studentId + '/semester-id/' + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        PaymentService.prototype.getPendingPaymentsForAmendment = function (studentId, semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get('student-payment/amendment-candidates/semester-id/' + semesterId + '/student-id/' + studentId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        PaymentService.prototype.getCombinedPaymentReport = function (semesterId, feeGroupId, status, from, to, channel) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get('student-payment/report/combined/' + semesterId + "/" + feeGroupId + "/" + status + "/" + from + "/" + to + "/" + channel, undefined, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, 'Combined-payment-report.pdf');
            }, function (response) {
                defer.resolve("success");
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        PaymentService.prototype.getFacultyPaymentReport = function (semesterId, feeGroupId, status, from, to, channel) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get('student-payment/report/faculty-wise/' + semesterId + "/" + feeGroupId + "/" + status + "/" + from + "/" + to + "/" + channel, undefined, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, 'Combined-faculty-wise-payment-report.pdf');
            }, function (response) {
                defer.resolve("success");
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        PaymentService.prototype.getSummarizedPaymentReport = function (semesterId, feeGroupId, status, from, to, channel) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get('student-payment/report/summarized/' + semesterId + "/" + feeGroupId + "/" + status + "/" + from + "/" + to + "/" + channel, undefined, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, 'Summarized-payment-report.pdf');
            }, function (response) {
                defer.resolve("success");
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        PaymentService.prototype.getDetailedPaymentReport = function (semesterId, feeGroupId, status, from, to, channel) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get('student-payment/report/detailed/' + semesterId + "/" + feeGroupId + "/" + status + "/" + from + "/" + to + "/" + channel, undefined, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, 'Detailed-payment-report.pdf');
            }, function (response) {
                defer.resolve("success");
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        PaymentService.prototype.getDepartmentWisePaymentReport = function (semesterId, feeGroupId, status, from, to, channel) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get('student-payment/report/dept-wise/' + semesterId + "/" + feeGroupId + "/" + status + "/" + from + "/" + to + "/" + channel, undefined, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, 'Detailed-payment-report.pdf');
            }, function (response) {
                defer.resolve("success");
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        PaymentService.prototype.getNonFilteredPaymentReport = function (status, from, to, channel, faculty) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get('student-payment/report/not-filtered/' + status + "/" + from + "/" + to + "/" + channel + "/" + faculty, undefined, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, 'non-filtered-payment-report.pdf');
            }, function (response) {
                defer.resolve("success");
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        PaymentService.prototype.getNonFilteredSummarizedPaymentReport = function (status, from, to, channel, faculty) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get('student-payment/report/not-filtered/summarized/' + status + "/" + from + "/" + to + "/" + channel + "/" + faculty, undefined, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, 'non-filtered-fee-category-payment-report.pdf');
            }, function (response) {
                defer.resolve("success");
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        PaymentService.prototype.getStudentSemesterPaymentReport = function (studentId, semesterId, showExpired, semesterName) {
            var defer = this.$q.defer();
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            this.httpClient.get('student-payment/report/semester-payment/student-id/' + studentId + "/semester-id/" + semesterId + "/show-expired/" + showExpired, undefined, function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, 'semester-payment' + semesterName + '-' + studentId + '.pdf');
            }, function (response) {
                defer.resolve("success");
                console.error(response);
            }, 'arraybuffer');
            return defer.promise;
        };
        PaymentService.$inject = ['$q', 'HttpClient', 'notify'];
        return PaymentService;
    }());
    ums.PaymentService = PaymentService;
    ums.UMS.service("PaymentService", PaymentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CertificateFeeController = (function () {
        function CertificateFeeController(certificateFeeService, paymentService, certificateStatusService, feeReportService, feeCategoryService, $q, $interval, detailedStudentPaymentService, notify) {
            var _this = this;
            this.certificateFeeService = certificateFeeService;
            this.paymentService = paymentService;
            this.certificateStatusService = certificateStatusService;
            this.feeReportService = feeReportService;
            this.feeCategoryService = feeCategoryService;
            this.$q = $q;
            this.$interval = $interval;
            this.detailedStudentPaymentService = detailedStudentPaymentService;
            this.notify = notify;
            this.certificatesStatus = {};
            this.enableSemester = true;
            this.loader = false;
            this.disableApply = false;
            this.getCertificateFeeCategories().then(function (feeCategories) {
                _this.certificateTypes = feeCategories;
                var convertedMap = {};
                _this.certificateTypeMap = feeCategories.reduce(function (map, obj) {
                    map[obj.id] = obj;
                    return map;
                }, convertedMap);
                certificateFeeService.getAttendedSemesters().then(function (semesters) {
                    _this.attendedSemesters = semesters;
                });
            });
            this.getCertificateFeePaymentStatus();
            this.getCertificateStatus();
            //this.statusRefresher();
        }
        CertificateFeeController.prototype.statusRefresher = function () {
            var _this = this;
            this.$interval(function () {
                _this.getCertificateFeePaymentStatus();
                _this.getCertificateStatus();
            }, 100000);
        };
        CertificateFeeController.prototype.getCertificateStatus = function () {
            var _this = this;
            this.certificateStatusService.getCertificateStatus().then(function (certificates) {
                var convertedMap = {};
                _this.certificatesStatus = certificates.reduce(function (map, obj) {
                    map[obj.transactionId] = obj;
                    return map;
                }, convertedMap);
            });
        };
        CertificateFeeController.prototype.getCertificateFeeCategories = function () {
            var defer = this.$q.defer();
            this.feeCategoryService.getAllFeeCategories().then(function (feeCategories) {
                var filteredFeeCategories = [];
                for (var i = 0; i < feeCategories.length; i++) {
                    if (feeCategories[i].feeTypeId === ums.FeeCategoryService.CERTIFICATE_FEE
                        || feeCategories[i].feeTypeId === ums.FeeCategoryService.DEPT_CERTIFICATE_FEE
                        || feeCategories[i].feeTypeId === ums.FeeCategoryService.REG_CERTIFICATE_FEE
                        || feeCategories[i].feeTypeId === ums.FeeCategoryService.PROC_CERTIFICATE_FEE) {
                        filteredFeeCategories.push(feeCategories[i]);
                    }
                }
                defer.resolve(filteredFeeCategories);
            });
            return defer.promise;
        };
        CertificateFeeController.prototype.apply = function () {
            var _this = this;
            if (this.semesterId && this.feeId) {
                this.loader = true;
                this.disableApply = true;
                this.certificateFeeService.apply(this.feeId, this.semesterId).then(function (success) {
                    _this.disableApply = false;
                    if (success) {
                        _this.getCertificateFeePaymentStatus();
                        _this.getCertificateStatus();
                    }
                    _this.loader = false;
                });
            }
            else {
                this.notify.error("Please select required fields");
            }
        };
        CertificateFeeController.prototype.setSemesterVisibility = function () {
            this.enableSemester = this.certificateTypeMap[this.feeId].feeId === "GRADESHEET_PROVISIONAL"
                || this.certificateTypeMap[this.feeId].feeId === "GRADESHEET_DUPLICATE";
            if (!this.enableSemester) {
                this.semesterId = undefined;
            }
        };
        CertificateFeeController.prototype.getCertificateFeePaymentStatus = function () {
            var _this = this;
            this.paymentService.getCertificateFeePaymentStatus().then(function (payments) {
                if (payments && payments.length > 0) {
                    _this.payments = payments;
                    _this.fetchDetailedStudentPayment();
                }
            });
        };
        CertificateFeeController.prototype.fetchDetailedStudentPayment = function () {
            var _this = this;
            this.transactionIdMapWithDetailedStudentPayment = {};
            var transactionIdList = [];
            this.payments.forEach(function (p) { return transactionIdList.push(p.transactionId); });
            this.detailedStudentPaymentService.getDetailedStudentPaymentByTransactionIdList(transactionIdList).then(function (detailedStudentPaymentList) {
                detailedStudentPaymentList.forEach(function (d) {
                    _this.transactionIdMapWithDetailedStudentPayment[d.transactionId] = d;
                });
            });
        };
        CertificateFeeController.prototype.receipt = function (transactionId) {
            this.feeReportService.receipt(transactionId);
        };
        CertificateFeeController.prototype.printTestimonial = function () {
            this.certificateFeeService.getTestimonial('130105001');
        };
        CertificateFeeController.$inject = ['CertificateFeeService', 'PaymentService', 'CertificateStatusService', 'FeeReportService', 'FeeCategoryService', '$q', '$interval', 'DetailedStudentPaymentService', 'notify'];
        return CertificateFeeController;
    }());
    ums.CertificateFeeController = CertificateFeeController;
    ums.UMS.controller('CertificateFeeController', CertificateFeeController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CertificateApprovalController = (function () {
        function CertificateApprovalController(certificateFeeService, certificateStatusService, certificateService, feeCategoryService, userService, appConstants, $q, $scope, notify, additionalRolePermissionsService) {
            var _this = this;
            this.certificateFeeService = certificateFeeService;
            this.certificateStatusService = certificateStatusService;
            this.certificateService = certificateService;
            this.feeCategoryService = feeCategoryService;
            this.userService = userService;
            this.appConstants = appConstants;
            this.$q = $q;
            this.$scope = $scope;
            this.notify = notify;
            this.additionalRolePermissionsService = additionalRolePermissionsService;
            this.selectedFilters = [];
            this.enableStatusChangeOption = false;
            this.reloadReference = { reloadList: false };
            this.currentPage = 1;
            this.totalItems = 0;
            this.itemsPerPage = 10;
            this.enableButton = false;
            this.userDeptHead = false;
            this.certificateOptions = appConstants.certificateStatus;
            this.certificateOption = appConstants.certificateStatus[0];
            this.certificateOptionsCopy = angular.copy(this.certificateOptions);
            this.changedCertificateStatusList = [];
            this.certificateStatusList = [];
            this.getLoggedUserAndFeeCategories();
            this.certificateStatusService.getFilters().then(function (filters) {
                _this.filters = filters;
                console.log('filters');
                console.log(_this.filters);
                $scope.$watch(function () { return _this.selectedFilters; }, function () {
                    _this.navigate();
                }, true);
            });
        }
        CertificateApprovalController.prototype.getLoggedUserAndFeeCategories = function () {
            var _this = this;
            this.userService.fetchCurrentUserInfo().then(function (user) {
                _this.user = user;
                console.log("UUUssserrr");
                console.log(user);
                _this.getFeeCategories();
            });
        };
        CertificateApprovalController.prototype.navigate = function () {
            if (this.selectedFilters.length > 0) {
                this.fetchTotalItemsAndCertificateList();
            }
        };
        CertificateApprovalController.prototype.pageChanged = function (pagenumber) {
            this.currentPage = pagenumber;
            this.fetchTotalItemsAndCertificateList();
        };
        CertificateApprovalController.prototype.fetchTotalItemsAndCertificateList = function () {
            var _this = this;
            if (this.userDeptHead == false) {
                this.certificateStatusService.listCertificateStatus(this.selectedFilters, 'certificate-status/total-items', this.feeType).then(function (response) {
                    _this.totalItems = response;
                });
                this.certificateStatusService.listCertificateStatus(this.selectedFilters, 'certificate-status/paginated', this.feeType, this.currentPage, this.itemsPerPage).then(function (response) {
                    _this.certificateStatusList = [];
                    for (var i = 0; i < response.entries.length; i++) {
                        _this.checkWhetherTheStatusShouldBeDisabledOrEnabled(response.entries[i]);
                    }
                });
            }
            else {
                this.certificateStatusService.listCertificateStatus(this.selectedFilters, 'certificate-status/total-items', this.feeType, 0, 0, this.user.departmentId).then(function (response) {
                    _this.totalItems = response;
                });
                this.certificateStatusService.listCertificateStatus(this.selectedFilters, 'certificate-status/paginated', this.feeType, this.currentPage, this.itemsPerPage, this.user.departmentId).then(function (response) {
                    _this.certificateStatusList = [];
                    for (var i = 0; i < response.entries.length; i++) {
                        _this.checkWhetherTheStatusShouldBeDisabledOrEnabled(response.entries[i]);
                    }
                });
            }
        };
        CertificateApprovalController.prototype.checkWhetherTheStatusShouldBeDisabledOrEnabled = function (certificateStatus) {
            console.log("********HHH*****");
            var enable = false;
            console.log(this.user.departmentId);
            for (var i = 0; i < this.certificateOptionsCopy.length; i++) {
                if (this.user.departmentId == ums.Utils.DEPT_COE) {
                    enable = this.enableOrDisableForCommonTasks(certificateStatus, enable);
                    break;
                }
                else if (this.user.departmentId == ums.Utils.DEPT_RO) {
                    if (certificateStatus.statusId === CertificateApprovalController.forwarded_by_head || certificateStatus.statusId === CertificateApprovalController.processed) {
                        enable = true;
                        break;
                    }
                }
                else if (this.user.departmentId == ums.Utils.DEPT_PO) {
                    enable = this.enableOrDisableForCommonTasks(certificateStatus, enable);
                    break;
                }
                else {
                    var found = false;
                    this.getAdditionalRolePermissions().then(function (result) {
                        if (result == true && (certificateStatus.statusId === CertificateApprovalController.waiting_for_head_approval)) {
                            enable = true;
                            found = true;
                            certificateStatus.enable = true;
                        }
                        console.log("Found value");
                        console.log(found);
                    });
                    if (found) {
                        console.log("Breaking.........");
                        break;
                    }
                }
            }
            certificateStatus.enable = enable;
            this.certificateStatusList.push(certificateStatus);
        };
        CertificateApprovalController.prototype.enableOrDisableForCommonTasks = function (certificateStatus, enable) {
            if (certificateStatus.statusId === CertificateApprovalController.applied
                || certificateStatus.statusId === CertificateApprovalController.processed)
                enable = true;
            return enable;
        };
        CertificateApprovalController.prototype.setPage = function (pageNo) {
            this.currentPage = pageNo;
        };
        CertificateApprovalController.prototype.getFeeCategories = function () {
            var _this = this;
            var feeType = 0;
            var defer = this.$q.defer();
            if (this.user.departmentId == ums.Utils.DEPT_COE) {
                feeType = ums.Utils.CERTIFICATE_FEE;
                this.selectedFilter = ums.ListFilterDirective.STATUS;
                this.selectedFilterValue = ums.CertificateStatusService.APPLIED;
                this.certificateOptionsCopy.splice(0, 1);
                this.certificateOptionsCopy.splice(2, 2);
            }
            else if (this.user.departmentId == ums.Utils.DEPT_RO) {
                feeType = ums.Utils.REG_CERTIFICATE_FEE;
                this.selectedFilter = ums.ListFilterDirective.STATUS;
                this.selectedFilterValue = ums.CertificateStatusService.FORWARDED_BY_HEAD;
                this.certificateOptionsCopy.splice(0, 1);
                this.certificateOptionsCopy.splice(2, 2);
            }
            else if (this.user.departmentId == ums.Utils.DEPT_PO) {
                feeType = ums.Utils.PROC_CERTIFICATE_FEE;
                this.selectedFilter = ums.ListFilterDirective.STATUS;
                this.selectedFilterValue = ums.CertificateStatusService.APPLIED;
                this.certificateOptionsCopy.splice(0, 1);
                this.certificateOptionsCopy.splice(2, 2);
            }
            else {
                console.log("In the additional role section");
                this.getAdditionalRolePermissions().then(function (result) {
                    if (result) {
                        feeType = ums.Utils.REG_CERTIFICATE_FEE;
                        _this.selectedFilter = ums.ListFilterDirective.STATUS;
                        _this.selectedFilterValue = ums.CertificateStatusService.WAITING_FOR_HEAD_FORWARDING;
                        _this.certificateOptionsCopy.splice(0, 3);
                    }
                    else {
                        feeType = ums.Utils.DEPT_CERTIFICATE_FEE;
                        _this.selectedFilter = ums.ListFilterDirective.STATUS;
                        _this.selectedFilterValue = ums.CertificateStatusService.APPLIED;
                        _this.certificateOptionsCopy.splice(0, 1);
                        _this.certificateOptionsCopy.splice(2, 2);
                    }
                    defer.resolve(feeType);
                    _this.feeType = feeType;
                    return defer.promise;
                });
            }
            defer.resolve(feeType);
            this.feeType = feeType;
            console.log("fee type");
            console.log(feeType);
            return defer.promise;
        };
        CertificateApprovalController.prototype.getAdditionalRolePermissions = function () {
            var _this = this;
            var defer = this.$q.defer();
            var result = false;
            this.additionalRolePermissionsService.fetchLoggedUserAdditionalRolePermissions().then(function (additionalRolePermissions) {
                if (additionalRolePermissions.length >= 1)
                    result = true;
                defer.resolve(result);
                _this.userDeptHead = result;
            });
            return defer.promise;
        };
        CertificateApprovalController.prototype.createCertificateReport = function (certificateStatus) {
            this.certificateService.getCertificateReport(certificateStatus.feeCategory, certificateStatus.studentId, certificateStatus.semesterId);
        };
        CertificateApprovalController.prototype.statusChanged = function (certificateStatus) {
            this.enableButton = true;
            this.changedCertificateStatusList.push(certificateStatus);
        };
        CertificateApprovalController.prototype.save = function () {
            var _this = this;
            this.certificateStatusService.processCertificates(this.changedCertificateStatusList).then(function (processed) {
                if (processed) {
                    _this.changedCertificateStatusList = [];
                    _this.notify.success("Successfully Saved");
                    _this.navigate();
                }
                else {
                    _this.notify.error("Error in updating data");
                }
            });
        };
        CertificateApprovalController.prototype.getCertificateStatus = function () {
            this.certificateStatusService.getFilters().then(function (filters) {
            });
        };
        CertificateApprovalController.$inject = ['CertificateFeeService', 'CertificateStatusService', 'CertificateService', 'FeeCategoryService', 'userService', 'appConstants', '$q', '$scope', 'notify', 'additionalRolePermissionsService'];
        CertificateApprovalController.applied = 1;
        CertificateApprovalController.processed = 2;
        CertificateApprovalController.delivered = 3;
        CertificateApprovalController.waiting_for_head_approval = 4;
        CertificateApprovalController.forwarded_by_head = 5;
        return CertificateApprovalController;
    }());
    ums.CertificateApprovalController = CertificateApprovalController;
    ums.UMS.controller("CertificateApprovalController", CertificateApprovalController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CertificateFeeService = (function () {
        function CertificateFeeService($q, httpClient, feeTypeService, feeCategoryService, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.feeTypeService = feeTypeService;
            this.feeCategoryService = feeCategoryService;
            this.notify = notify;
        }
        CertificateFeeService.prototype.getFeeCategories = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.feeTypeService.getFeeTypes().then(function (feeTypes) {
                for (var i = 0; i < feeTypes.length; i++) {
                    if (feeTypes[i].name === CertificateFeeService.CERTIFICATE_FEE) {
                        _this.feeCategoryService.getFeeCategories(feeTypes[i].id).then(function (feeCategories) { return defer.resolve(feeCategories); });
                    }
                }
            });
            return defer.promise;
        };
        CertificateFeeService.prototype.getAttendedSemesters = function () {
            var defer = this.$q.defer();
            this.httpClient.get('certificate-fee/attended-semesters', ums.HttpClient.MIME_TYPE_JSON, function (response) {
                console.log(response.entries);
                defer.resolve(response.entries);
            });
            return defer.promise;
        };
        CertificateFeeService.prototype.apply = function (categoryId, semesterId) {
            var _this = this;
            var resourceUrl = semesterId ? "certificate-fee/apply/semester/" + semesterId + "/category/" + categoryId
                : "certificate-fee/apply/category/" + categoryId;
            var defer = this.$q.defer();
            this.httpClient.post(resourceUrl, {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                _this.notify.success("Successfully Applied");
                defer.resolve(true);
            })
                .error(function () {
                _this.notify.error("Error in applying");
                defer.resolve(false);
            });
            return defer.promise;
        };
        CertificateFeeService.prototype.getTestimonial = function (studentId) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Testimonial";
            this.httpClient.get("certificate-fee/testimonial/" + studentId, 'application/pdf', function (data, etag) {
                // var file = new Blob([data], {type: 'application/pdf'});
                // var fileURL = this.$sce.trustAsResourceUrl(URL.createObjectURL(file));
                // this.$window.open(fileURL);
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        CertificateFeeService.$inject = ['$q', 'HttpClient', 'FeeTypeService', 'FeeCategoryService', 'notify'];
        CertificateFeeService.CERTIFICATE_FEE = 'CERTIFICATE_FEE';
        return CertificateFeeService;
    }());
    ums.CertificateFeeService = CertificateFeeService;
    ums.UMS.service('CertificateFeeService', CertificateFeeService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CertificateStatusService = (function () {
        function CertificateStatusService($q, httpClient) {
            this.$q = $q;
            this.httpClient = httpClient;
        }
        CertificateStatusService.prototype.getCertificateStatus = function () {
            var defer = this.$q.defer();
            this.httpClient.get('certificate-status', ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        CertificateStatusService.prototype.getTotalItems = function (filters, url, feeType, deptId) {
            var defer = this.$q.defer();
            var completeUrl = "";
            if (feeType >= 0 && deptId != null)
                completeUrl = url + '?feeType=' + feeType + '&deptId=' + deptId;
            else if (feeType >= 0)
                completeUrl = url + '?feeType=' + feeType;
            else
                completeUrl = 'certificate-status/total-items';
            this.httpClient.post(completeUrl, filters ? { "entries": filters } : {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                defer.resolve(response);
            })
                .error(function (error) {
                console.error(error);
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        CertificateStatusService.prototype.listCertificateStatus = function (filters, url, feeType, pageNumber, itemsPerPage, deptId) {
            var defer = this.$q.defer();
            var completeUrl = "";
            if (pageNumber == 0 && itemsPerPage == 0 && feeType >= 0 && deptId != null)
                completeUrl = url + '?feeType=' + feeType + '&deptId=' + deptId;
            else if (pageNumber > 0 && feeType >= 0)
                completeUrl = url + '?pageNumber=' + pageNumber + '&itemsPerPage=' + itemsPerPage + '&feeType=' + feeType;
            else if (pageNumber > 0)
                completeUrl = url + '?pageNumber=' + pageNumber + '&itemsPerPage=' + itemsPerPage;
            else if (feeType >= 0)
                completeUrl = url + '?feeType=' + feeType;
            else
                completeUrl = 'certificate-status/paginated';
            console.log("Complete URL");
            console.log(completeUrl);
            this.httpClient.post(completeUrl, filters ? { "entries": filters } : {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                defer.resolve(response);
            })
                .error(function (error) {
                console.error(error);
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        CertificateStatusService.prototype.getFilters = function () {
            var defer = this.$q.defer();
            this.httpClient.get('certificate-status/filters', ums.HttpClient.MIME_TYPE_JSON, function (filters) {
                defer.resolve(filters);
            });
            return defer.promise;
        };
        CertificateStatusService.prototype.processCertificates = function (certificates) {
            var defer = this.$q.defer();
            console.log("In the process certificates");
            console.log(certificates);
            this.httpClient.put("certificate-status", {
                "entries": certificates
            }, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () { return defer.resolve(true); })
                .error(function () { return defer.resolve(false); });
            return defer.promise;
        };
        CertificateStatusService.$inject = ['$q', 'HttpClient'];
        CertificateStatusService.APPLIED = 1;
        CertificateStatusService.PROCESSED = 2;
        CertificateStatusService.DELIVERED = 3;
        CertificateStatusService.WAITING_FOR_HEAD_FORWARDING = 4;
        CertificateStatusService.FORWARDED_BY_HEAD = 5;
        return CertificateStatusService;
    }());
    ums.CertificateStatusService = CertificateStatusService;
    ums.UMS.service('CertificateStatusService', CertificateStatusService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentDuesService = (function () {
        function StudentDuesService($q, httpClient, feeTypeService, feeCategoryService) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.feeTypeService = feeTypeService;
            this.feeCategoryService = feeCategoryService;
        }
        StudentDuesService.prototype.getDues = function () {
            var defer = this.$q.defer();
            this.httpClient.get('student-dues', ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response.entries); });
            return defer.promise;
        };
        StudentDuesService.prototype.payDues = function (dues) {
            var defer = this.$q.defer();
            this.httpClient.put('student-dues/payDues', { "entries": dues }, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () { return defer.resolve(true); })
                .error(function () { return defer.resolve(false); });
            return defer.promise;
        };
        StudentDuesService.prototype.getFeeCategories = function () {
            var _this = this;
            var defer = this.$q.defer();
            var promises = [];
            this.feeTypeService.getFeeTypes().then(function (feeTypes) {
                for (var i = 0; i < feeTypes.length; i++) {
                    if (feeTypes[i].name === StudentDuesService.PENALTY
                        || feeTypes[i].name === StudentDuesService.DUES) {
                        promises.push(_this.feeCategoryService.getFeeCategories(feeTypes[i].id));
                    }
                }
                _this.$q.all(promises).then(function (data) {
                    defer.resolve(data[0].concat(data[1]));
                });
            });
            return defer.promise;
        };
        StudentDuesService.prototype.getFilters = function () {
            var defer = this.$q.defer();
            this.httpClient.get('student-dues/filters', ums.HttpClient.MIME_TYPE_JSON, function (filters) {
                defer.resolve(filters);
            });
            return defer.promise;
        };
        StudentDuesService.prototype.listDues = function (filters, url) {
            var defer = this.$q.defer();
            this.httpClient.post(url ? url : 'student-dues/paginated', filters ? { "entries": filters } : {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                defer.resolve(response);
            })
                .error(function (error) {
                console.error(error);
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        StudentDuesService.prototype.addDues = function (due) {
            var defer = this.$q.defer();
            due.amount = due.amount + '';
            this.httpClient.post('student-dues', { "entries": [due] }, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(true);
            })
                .error(function () { return defer.resolve(false); });
            return defer.promise;
        };
        StudentDuesService.prototype.updateDues = function (due) {
            var defer = this.$q.defer();
            due.amount = due.amount + '';
            this.httpClient.put("student-dues/updateDues/" + due.studentId, { "entries": [due] }, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(true);
            })
                .error(function () { return defer.resolve(false); });
            return defer.promise;
        };
        StudentDuesService.$inject = ['$q', 'HttpClient', 'FeeTypeService', 'FeeCategoryService'];
        StudentDuesService.DUES = "DUES";
        StudentDuesService.PENALTY = "PENALTY";
        return StudentDuesService;
    }());
    ums.StudentDuesService = StudentDuesService;
    ums.UMS.service('StudentDuesService', StudentDuesService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentDuesController = (function () {
        function StudentDuesController($scope, studentDuesService, feeReportService) {
            var _this = this;
            this.$scope = $scope;
            this.studentDuesService = studentDuesService;
            this.feeReportService = feeReportService;
            this.listDues();
            this.$scope.$watch(function () {
                return _this.selectedDues;
            }, function () {
                if (_this.selectedDues) {
                    _this.selected = Object.keys(_this.selectedDues)
                        .map(function (key) {
                        return _this.selectedDues[key] ? key : undefined;
                    })
                        .filter(function (el) { return !!el; });
                }
            }, true);
        }
        StudentDuesController.prototype.pay = function () {
            var _this = this;
            this.studentDuesService.payDues(this.selected).then(function (success) {
                if (success) {
                    _this.listDues();
                    _this.selected = [];
                }
            });
        };
        StudentDuesController.prototype.receipt = function (transactionId) {
            this.feeReportService.receipt(transactionId);
        };
        StudentDuesController.prototype.listDues = function () {
            var _this = this;
            this.studentDuesService.getDues().then(function (dues) {
                _this.dues = dues;
            });
        };
        StudentDuesController.$inject = ['$scope', 'StudentDuesService', 'FeeReportService'];
        return StudentDuesController;
    }());
    ums.StudentDuesController = StudentDuesController;
    ums.UMS.controller('StudentDuesController', StudentDuesController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ListDues = (function () {
        function ListDues($scope, studentDuesService, $modal) {
            var _this = this;
            this.studentDuesService = studentDuesService;
            this.$modal = $modal;
            this.selectedFilters = [];
            this.reloadReference = { reloadList: false };
            this.navigate();
            this.studentDuesService.getFilters().then(function (filters) {
                _this.filters = filters;
                $scope.$watch(function () { return _this.selectedFilters; }, function () {
                    _this.navigate();
                }, true);
            });
            $scope.$watch(function () { return _this.reloadReference; }, function (newVal) {
                if (newVal.reloadList) {
                    _this.navigate();
                }
            }, true);
        }
        ListDues.prototype.navigate = function (url) {
            var _this = this;
            this.studentDuesService.listDues(this.selectedFilters, url).then(function (dues) {
                if (url && _this.dues && _this.dues.length > 0) {
                    _this.dues.push.apply(dues.entries);
                }
                else {
                    _this.dues = dues.entries;
                }
                _this.nextLink = dues.next;
                _this.reloadReference.reloadList = false;
            });
        };
        ListDues.prototype.addDues = function (due) {
            var _this = this;
            this.$modal.open({
                templateUrl: 'views/fee/dues/add.dues.html',
                controller: ums.AddDues,
                resolve: {
                    studentDue: function () { return due; },
                    reload: function () { return _this.reloadReference; },
                    loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                files: [
                                    'vendors/bootstrap-datepicker/css/datepicker.css',
                                    'vendors/bootstrap-datepicker/js/bootstrap-datepicker.js'
                                ]
                            });
                        }]
                }
            });
        };
        ListDues.$inject = ['$scope', 'StudentDuesService', '$modal'];
        return ListDues;
    }());
    ums.ListDues = ListDues;
    ums.UMS.controller('ListDues', ListDues);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AddDues = (function () {
        function AddDues($scope, studentDuesService, $modalInstance, studentDue, notify, reload) {
            var _this = this;
            this.$scope = $scope;
            this.studentDuesService = studentDuesService;
            this.$modalInstance = $modalInstance;
            this.studentDue = studentDue;
            this.notify = notify;
            this.reload = reload;
            if (!studentDue) {
                this.initialize();
            }
            else {
                this.$scope.studentDue = studentDue;
                this.$scope.editMode = true;
            }
            studentDuesService.getFeeCategories().then(function (feeCategories) {
                _this.$scope.duesCategories = feeCategories;
            });
            this.$scope.ok = this.ok.bind(this);
            this.$scope.addDues = this.addDues.bind(this);
        }
        AddDues.prototype.addDues = function () {
            var _this = this;
            if (this.$scope.editMode) {
                this.updateDues();
                return;
            }
            this.studentDuesService.addDues(this.$scope.studentDue).then(function (success) {
                if (success) {
                    _this.initialize();
                }
            });
        };
        AddDues.prototype.updateDues = function () {
            var _this = this;
            this.studentDuesService.updateDues(this.$scope.studentDue).then(function (success) {
                if (success) {
                    _this.initialize();
                    _this.$scope.editMode = false;
                }
                else {
                    _this.notify.error('Failed to update');
                }
            });
        };
        AddDues.prototype.ok = function () {
            this.$modalInstance.dismiss('cancel');
        };
        AddDues.prototype.initialize = function () {
            this.$scope.studentDue = {
                studentId: undefined,
                feeCategoryId: undefined,
                payBefore: undefined,
                amount: undefined,
                description: undefined
            };
            this.reload.reloadList = true;
        };
        AddDues.$inject = ['$scope', 'StudentDuesService', '$modalInstance', 'studentDue', 'notify', 'reload'];
        return AddDues;
    }());
    ums.AddDues = AddDues;
})(ums || (ums = {}));
var ums;
(function (ums) {
    var CertificateStatusController = (function () {
        function CertificateStatusController($scope, certificateStatusService, $modal, notify) {
            var _this = this;
            this.certificateStatusService = certificateStatusService;
            this.$modal = $modal;
            this.notify = notify;
            this.selectedFilters = [];
            this.reloadReference = { reloadList: false };
            this.selectedCertificates = {};
            this.navigate();
            this.certificateStatusService.getFilters().then(function (filters) {
                _this.filters = filters;
                $scope.$watch(function () { return _this.selectedFilters; }, function () {
                    _this.navigate();
                }, true);
            });
            $scope.$watch(function () {
                return _this.selectedCertificates;
            }, function () {
                if (_this.selectedCertificates) {
                    _this.selectedCertificateIds = Object.keys(_this.selectedCertificates)
                        .map(function (key) {
                        return _this.selectedCertificates[key] ? key : undefined;
                    })
                        .filter(function (el) { return !!el; });
                }
            }, true);
            $scope.$watch(function () { return _this.reloadReference; }, function (newVal) {
                if (newVal.reloadList) {
                    _this.navigate();
                }
            }, true);
        }
        CertificateStatusController.prototype.navigate = function (url) {
            var _this = this;
            this.certificateStatusService.listCertificateStatus(this.selectedFilters, url)
                .then(function (response) {
                if (url && _this.certificateStatusList && _this.certificateStatusList.length > 0) {
                    _this.certificateStatusList.push.apply(response.entries);
                }
                else {
                    _this.certificateStatusList = response.entries;
                }
                _this.nextLink = response.next;
                _this.reloadReference.reloadList = false;
            });
        };
        CertificateStatusController.prototype.process = function () {
            var _this = this;
            this.selected
                = this.certificateStatusList.filter(function (certificate) {
                    return _this.selectedCertificateIds.indexOf(certificate.id) >= 0;
                });
            this.certificateStatusService.processCertificates(this.selected)
                .then(function (response) {
                if (response) {
                    _this.navigate();
                }
                else {
                    _this.notify.error('Failed to process');
                }
            });
        };
        CertificateStatusController.$inject = ['$scope', 'CertificateStatusService', '$modal', 'notify'];
        return CertificateStatusController;
    }());
    ums.CertificateStatusController = CertificateStatusController;
    ums.UMS.controller('CertificateStatusController', CertificateStatusController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var FeeCategoryService = (function () {
        function FeeCategoryService($q, httpClient) {
            this.$q = $q;
            this.httpClient = httpClient;
        }
        FeeCategoryService.prototype.getFeeCategories = function (feeType) {
            var defer = this.$q.defer();
            this.httpClient.get("fee-category/type/" + feeType, ums.HttpClient.MIME_TYPE_JSON, function (feeCategories) { return defer.resolve(feeCategories); });
            return defer.promise;
        };
        FeeCategoryService.prototype.getAllFeeCategories = function () {
            var defer = this.$q.defer();
            this.httpClient.get("fee-category/all", ums.HttpClient.MIME_TYPE_JSON, function (feeCategories) { return defer.resolve(feeCategories); });
            return defer.promise;
        };
        FeeCategoryService.prototype.getFeeCategoryById = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("/ums-webservice-academic/fee-category/id/" + id, ums.HttpClient.MIME_TYPE_JSON, function (feeCategory) { return defer.resolve(feeCategory); });
            return defer.promise;
        };
        FeeCategoryService.$inject = ['$q', 'HttpClient'];
        FeeCategoryService.CERTIFICATE_FEE = 2;
        FeeCategoryService.SEMESTER_FEE = 1;
        FeeCategoryService.DUES = 3;
        FeeCategoryService.PENALTY = 4;
        FeeCategoryService.OTHERS = 0;
        FeeCategoryService.DEPT_CERTIFICATE_FEE = 5;
        FeeCategoryService.REG_CERTIFICATE_FEE = 6;
        FeeCategoryService.PROC_CERTIFICATE_FEE = 7;
        FeeCategoryService.ADMISSION_FEE_CATEGORY = 1;
        FeeCategoryService.REGISTRATION_FEE_CATEGORY = 2;
        FeeCategoryService.ESTABLISHMENT_FEE_CATEGORY = 3;
        FeeCategoryService.TUITION_FEE_CATEGORY = 4;
        FeeCategoryService.LABORATORY_FEE_CATEGORY = 5;
        FeeCategoryService.MIGRATION_FEE_CATEGORY = 36;
        return FeeCategoryService;
    }());
    ums.FeeCategoryService = FeeCategoryService;
    ums.UMS.service('FeeCategoryService', FeeCategoryService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var FeeTypeService = (function () {
        function FeeTypeService($q, httpClient) {
            this.$q = $q;
            this.httpClient = httpClient;
        }
        FeeTypeService.prototype.getFeeTypes = function () {
            var defer = this.$q.defer();
            this.httpClient.get('fee-type/all', ums.HttpClient.MIME_TYPE_JSON, function (feeTypes) { return defer.resolve(feeTypes); });
            return defer.promise;
        };
        FeeTypeService.$inject = ['$q', 'HttpClient'];
        return FeeTypeService;
    }());
    ums.FeeTypeService = FeeTypeService;
    ums.UMS.service('FeeTypeService', FeeTypeService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionfeeService = (function () {
        function AdmissionfeeService() {
        }
        return AdmissionfeeService;
    }());
    ums.AdmissionfeeService = AdmissionfeeService;
    ums.UMS.service("admissionFeeService", AdmissionfeeService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var FeeReportService = (function () {
        function FeeReportService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        FeeReportService.prototype.receipt = function (transactionId) {
            var _this = this;
            this.httpClient.get("fee-receipt/" + transactionId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = function (e) {
                    _this.saveAsFile(reader.result, "deposit-slip-" + transactionId);
                };
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        FeeReportService.prototype.admissionFeeReceipt = function (transactionId) {
            var _this = this;
            this.httpClient.get("fee-receipt/admission/" + transactionId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = function (e) {
                    _this.saveAsFile(reader.result, "admission-deposit-slip-" + transactionId);
                };
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        FeeReportService.prototype.saveAsFile = function (url, fileName) {
            var a = document.createElement("a");
            document.body.appendChild(a);
            a.style = "display: none";
            a.href = url;
            a.download = fileName;
            a.click();
            window.URL.revokeObjectURL(url);
            $(a).remove();
        };
        FeeReportService.$inject = ['$q', 'HttpClient', 'notify'];
        return FeeReportService;
    }());
    ums.FeeReportService = FeeReportService;
    ums.UMS.service('FeeReportService', FeeReportService);
})(ums || (ums = {}));
/*
module ums {
  export class StudentPaymentHistory {
    public static $inject = ['PaymentService', 'FeeReportService'];
    public paymentHistory: PaymentGroup;

    constructor(private paymentService: PaymentService,
                private feeReportService: FeeReportService) {
      this.paymentService.getPaymentHistory().then((paymentGroup: PaymentGroup) => {
        this.paymentHistory = paymentGroup;
      });
    }

    public receipt(transactionId: string): void {
      this.feeReportService.receipt(transactionId);
    }
  }
  UMS.controller('StudentPaymentHistory', StudentPaymentHistory);
}*/
/*
module ums {
  export class PaymentStatusList {
    public static $inject = ['$scope', 'PaymentStatusService'];
    public nextLink: string;
    public filters: Filter[];
    public selectedFilters: SelectedFilter[] = [];
    public paymentStatusList: PaymentStatus[];

    constructor(private $scope: ng.IScope,
                private paymentStatusService: PaymentStatusService) {
      this.navigate();
      this.paymentStatusService.getFilters().then((filters: Filter[]) => {
        this.filters = filters;

        $scope.$watch(() => this.selectedFilters, ()=> {
          this.navigate();
        }, true);
      });
    }

    public navigate(url?: string): void {
      this.paymentStatusService.getPaymentStatus(this.selectedFilters, url).then((status: PaymentStatusResponse) => {
        if (url && this.paymentStatusList && this.paymentStatusList.length > 0) {
          this.paymentStatusList.push.apply(status.entries);
        }
        else {
          this.paymentStatusList = status.entries;
        }
        this.nextLink = status.next;
      });
    }
  }

  UMS.controller('PaymentStatusList', PaymentStatusList);
}
*/
var ums;
(function (ums) {
    var StudentGradesheetController = (function () {
        function StudentGradesheetController(studentGradeSheetService, httpClient, notify) {
            var _this = this;
            this.studentGradeSheetService = studentGradeSheetService;
            this.httpClient = httpClient;
            this.notify = notify;
            this.httpClient.get("academic/studentrecord/attended-semesters", ums.HttpClient.MIME_TYPE_JSON, function (records) {
                _this.semesterList = records.entries;
                if (_this.semesterList.length > 0) {
                    _this.semesterId = _this.semesterList[_this.semesterList.length - 1].semesterId;
                }
            });
        }
        StudentGradesheetController.prototype.getGradesheet = function () {
            var _this = this;
            $("#leftDiv").hide();
            $("#arrowDiv").show();
            this.loadingVisibility = true;
            this.studentGradeSheetService.getGradeSheet(this.semesterId)
                .then(function (gradesheetModel) {
                _this.loadingVisibility = false;
                _this.gradesheetModel = gradesheetModel;
            });
        };
        StudentGradesheetController.prototype.resultStatus = function () {
            if (this.gradesheetModel) {
                return this.gradesheetModel.resultPublished ? '' : (this.gradesheetModel.resultProcessed ? 'Not published' : 'Unprocessed');
            }
        };
        StudentGradesheetController.$inject = ['StudentGradesheetService', 'HttpClient', 'notify'];
        return StudentGradesheetController;
    }());
    ums.StudentGradesheetController = StudentGradesheetController;
    ums.UMS.controller('StudentGradesheetController', StudentGradesheetController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentGradesheetService = (function () {
        function StudentGradesheetService(httpClient, appConstants, notify, $q) {
            this.httpClient = httpClient;
            this.appConstants = appConstants;
            this.notify = notify;
            this.$q = $q;
        }
        StudentGradesheetService.prototype.getProgramSelectorModel = function () {
            var _this = this;
            var defer = this.$q.defer();
            this.getLoggedInStudent().then(function (response) {
                var programSelectorModel = new ums.ProgramSelectorModel(_this.appConstants, _this.httpClient, true);
                programSelectorModel.setProgramType(response.programTypeId, ums.FieldViewTypes.hidden);
                programSelectorModel.setDepartment(response.departmentId, ums.FieldViewTypes.hidden);
                programSelectorModel.setProgram(response.programId, ums.FieldViewTypes.hidden);
                defer.resolve(programSelectorModel);
            });
            return defer.promise;
        };
        StudentGradesheetService.prototype.getLoggedInStudent = function () {
            var defer = this.$q.defer();
            this.httpClient.get("academic/student", ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        StudentGradesheetService.prototype.getGradeSheet = function (semesterId) {
            var _this = this;
            var defer = this.$q.defer();
            if (semesterId + "" == "undefined") {
                this.notify.info("Please select a semester");
                return;
            }
            this.httpClient.get("academic/gradesheet/semester/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            }, function (errorResponse) {
                _this.notify.error("No gradesheet found for desired semester");
                defer.resolve(null);
                $("#arrowDiv").hide();
                $("#leftDiv").show();
            });
            return defer.promise;
        };
        StudentGradesheetService.prototype.getGradesheets = function (studentId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get("academic/gradesheet/" + studentId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response.map(function (gradesheet) {
                    gradesheet.semesterId = _this.sanitizeId(gradesheet.semesterName);
                    return gradesheet;
                }));
            }, function (errorResponse) {
                defer.resolve(null);
            });
            return defer.promise;
        };
        StudentGradesheetService.prototype.sanitizeId = function (idString) {
            return idString.replace(' ', '-').replace(',', '');
        };
        StudentGradesheetService.$inject = ['HttpClient', 'appConstants', 'notify', '$q'];
        return StudentGradesheetService;
    }());
    ums.StudentGradesheetService = StudentGradesheetService;
    ums.UMS.service('StudentGradesheetService', StudentGradesheetService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var Gradesheets = (function () {
        function Gradesheets() {
            this.restrict = 'E';
            this.scope = {
                studentId: '@'
            };
            this.templateUrl = "./views/student/grade-sheets.html";
            this.bindToController = true;
            this.controller = GradesheetsController;
            this.controllerAs = 'vm';
        }
        return Gradesheets;
    }());
    ums.Gradesheets = Gradesheets;
    var GradesheetsController = (function () {
        function GradesheetsController($scope, gradesheetService) {
            var _this = this;
            this.gradesheetService = gradesheetService;
            this.showLoader = false;
            console.log("Hello...");
            $scope.$watch(function () { return _this.studentId; }, function (newStudentId) {
                console.log("in gradesheet - " + newStudentId);
                if (newStudentId) {
                    _this.loadGradesheets(newStudentId);
                }
                else {
                    _this.gradesheets = [];
                    return;
                }
            });
        }
        GradesheetsController.prototype.loadGradesheets = function (studentId) {
            var _this = this;
            if (studentId == "0") {
                this.gradesheets = [];
                return;
            }
            this.showLoader = true;
            this.gradesheetService
                .getGradesheets(studentId)
                .then(function (gradesheets) {
                _this.gradesheets = gradesheets;
            })
                .finally(function () {
                _this.showLoader = false;
            });
        };
        GradesheetsController.$inject = ['$scope', 'StudentGradesheetService'];
        return GradesheetsController;
    }());
    ums.UMS.directive("gradesheets", function () {
        return new Gradesheets();
    });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentPunishmentDirective = (function () {
        function StudentPunishmentDirective() {
            this.restrict = 'E';
            this.scope = {
                studentId: '@'
            };
            this.templateUrl = "./views/student/student-punishment.html";
            this.bindToController = true;
            this.controller = StudentPunishmentController;
            this.controllerAs = 'vm';
        }
        return StudentPunishmentDirective;
    }());
    ums.StudentPunishmentDirective = StudentPunishmentDirective;
    var StudentPunishmentController = (function () {
        function StudentPunishmentController($scope, punishmentService) {
            var _this = this;
            this.punishmentService = punishmentService;
            this.showLoader = false;
            this.detailView = false;
            this.semesterWiseDetailPunishment = false;
            this.moneyWiseDetailPunishment = false;
            console.log("punishment...");
            $scope.$watch(function () { return _this.studentId; }, function (newStudentId) {
                if (newStudentId) {
                    _this.loadPunishment(newStudentId);
                }
                else {
                    _this.punishments = [];
                    return;
                }
            });
        }
        StudentPunishmentController.prototype.loadPunishment = function (studentId) {
            var _this = this;
            if (studentId == "0") {
                this.punishments = [];
                return;
            }
            this.showLoader = true;
            this.punishmentService
                .fetchAllByStudentId(studentId)
                .then(function (punishments) {
                _this.punishments = punishments;
            })
                .finally(function () {
                _this.showLoader = false;
            });
        };
        StudentPunishmentController.prototype.details = function (val) {
            this.punishmentDetails = {};
            this.detailView = true;
            this.punishmentDetails = val;
            this.semesterOrMoneyPunishment();
        };
        StudentPunishmentController.prototype.semesterOrMoneyPunishment = function () {
            if (this.punishmentDetails.punishmentType.id == StudentPunishmentController.NO_PUNISHMENT) {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = false;
            }
            else if (this.punishmentDetails.punishmentType.id == StudentPunishmentController.SEMESTER_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = true;
                this.moneyWiseDetailPunishment = false;
            }
            else if (this.punishmentDetails.punishmentType.id == StudentPunishmentController.MONEY_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = true;
            }
            else if (this.punishmentDetails.punishmentType.id == StudentPunishmentController.BOTH_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = true;
                this.moneyWiseDetailPunishment = true;
            }
            else {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = false;
            }
        };
        StudentPunishmentController.$inject = ['$scope', 'punishmentService'];
        StudentPunishmentController.NO_PUNISHMENT = 0;
        StudentPunishmentController.SEMESTER_WISE_PUNISHMENT = 1;
        StudentPunishmentController.MONEY_WISE_PUNISHMENT = 2;
        StudentPunishmentController.BOTH_WISE_PUNISHMENT = 3;
        return StudentPunishmentController;
    }());
    ums.UMS.directive("studentPunishmentDirective", function () {
        return new StudentPunishmentDirective();
    });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentGeneralInfoDirective = (function () {
        function StudentGeneralInfoDirective() {
            this.restrict = 'E';
            this.scope = {
                studentId: '@',
                student: '='
            };
            this.templateUrl = "./views/student/student-general-info.html";
            this.bindToController = true;
            this.controller = StudentGeneralInfoController;
            this.controllerAs = 'vm';
        }
        return StudentGeneralInfoDirective;
    }());
    ums.StudentGeneralInfoDirective = StudentGeneralInfoDirective;
    var StudentGeneralInfoController = (function () {
        function StudentGeneralInfoController(httpClient, $scope) {
            var _this = this;
            this.httpClient = httpClient;
            this.showLoader = false;
            console.log("1111");
            $scope.$watch(function () { return _this.studentId; }, function (newStudentId) {
                console.log("2222" + newStudentId);
                if (newStudentId) {
                    console.log("here I'm");
                    _this.getGeneralInfo(newStudentId);
                }
            });
        }
        StudentGeneralInfoController.prototype.getGeneralInfo = function (studentId) {
            var _this = this;
            $("#studentProfilePicture").attr("src", '');
            this.httpClient.get('/ums-webservice-academic/academic/student/profile/' + studentId, ums.HttpClient.MIME_TYPE_JSON, function (response, etag) {
                _this.student = response;
            });
        };
        StudentGeneralInfoController.$inject = ['HttpClient', '$scope'];
        return StudentGeneralInfoController;
    }());
    ums.UMS.directive("studentGeneralInfoDirective", function () {
        return new StudentGeneralInfoDirective();
    });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var StudentProfileDirective = (function () {
        function StudentProfileDirective() {
            this.restrict = 'E';
            this.scope = {
                studentId: '@'
            };
            this.templateUrl = "./views/student/g-student-profile.html";
            this.bindToController = true;
            this.controller = StudentProfileController;
            this.controllerAs = 'vm';
        }
        return StudentProfileDirective;
    }());
    ums.StudentProfileDirective = StudentProfileDirective;
    var StudentProfileController = (function () {
        function StudentProfileController(httpClient, $scope) {
            var _this = this;
            this.httpClient = httpClient;
            this.showLoader = false;
            console.log("1111");
            $scope.$watch(function () { return _this.studentId; }, function (newStudentId) {
                console.log(".....++++");
                console.log(_this.studentId);
                if (newStudentId) {
                    console.log("hello abc");
                    _this.studentId = newStudentId;
                }
            });
        }
        StudentProfileController.$inject = ['HttpClient', '$scope'];
        return StudentProfileController;
    }());
    ums.UMS.directive("studentProfileDirective", function () {
        return new StudentProfileDirective();
    });
})(ums || (ums = {}));
var ums;
(function (ums) {
    var ViewSeatPlan = (function () {
        function ViewSeatPlan(appConstants, httpClient, $scope, $q, notify, $sce, $window, studentService) {
            this.appConstants = appConstants;
            this.httpClient = httpClient;
            this.$scope = $scope;
            this.$q = $q;
            this.notify = notify;
            this.$sce = $sce;
            this.$window = $window;
            this.studentService = studentService;
            $scope.semesterFinalView = true;
            $scope.cciView = false;
            $scope.seatPlan;
            $scope.init = this.init.bind(this);
            $scope.getClassRoomInfo = this.getClassRoomInfo.bind(this);
            $scope.showSemesterFinalSeatPlan = this.showSemesterFinalSeatPlan.bind(this);
            $scope.getApplicationCCIInfo = this.getApplicationCCIInfo.bind(this);
            $scope.showCCISeatPlan = this.showCCISeatPlan.bind(this);
            $scope.createRoomStructure = this.createRoomStructure.bind(this);
            $scope.viewCCISeatPlan = this.viewCCISeatPlan.bind(this);
            $scope.getSeatPlanInfoCCIExam = this.getSeatPlanInfoCCIExam.bind(this);
        }
        ViewSeatPlan.prototype.init = function () {
            this.$scope.semesterFinalView = false;
            this.showSemesterFinalSeatPlan();
        };
        ViewSeatPlan.prototype.createRoomStructure = function (roomId) {
            var _this = this;
            this.$scope.roomId = roomId;
            this.getClassRoomInfo(roomId).then(function (roomArr) {
                _this.$scope.classRoom = roomArr[0];
                console.log(_this.$scope.classRoom);
                _this.$scope.colIterationArr = [];
                _this.$scope.rowIterationArr = [];
                var abc = _this.$scope.classRoom.totalColumn + (Math.floor(_this.$scope.classRoom.totalColumn / 2) + _this.$scope.classRoom.totalColumn % 2) - 1;
                for (var i = 1; i <= abc; i++) {
                    _this.$scope.colIterationArr.push(i);
                }
                for (var i = 1; i <= _this.$scope.classRoom.totalRow + 1; i++) {
                    _this.$scope.rowIterationArr.push(i);
                }
            });
        };
        ViewSeatPlan.prototype.showSemesterFinalSeatPlan = function () {
            this.$scope.cciView = false;
            var that = this;
            setTimeout(function () {
                that.getSeatPlanInfoFinalExam().then(function (seatPlan) {
                    that.$scope.semesterFinalView = true;
                    that.setSeatPlanData(seatPlan);
                });
            }, 300);
        };
        ViewSeatPlan.prototype.setSeatPlanData = function (seatPlan) {
            this.$scope.extraColumns = [];
            this.$scope.extraColumns = seatPlan.extraColumns;
            for (var i = 0; i < this.$scope.extraColumns.length; i++) {
                if (this.$scope.extraColumns[i] > 2) {
                    this.$scope.extraColumns[i] = this.$scope.extraColumns[i] + (Math.floor(this.$scope.extraColumns[i] / 2) + this.$scope.extraColumns[i] % 2) - 1;
                }
            }
            if (seatPlan.seatPlan.colNo > 2) {
                seatPlan.seatPlan.colNo = seatPlan.seatPlan.colNo + (Math.floor(seatPlan.seatPlan.colNo / 2) + seatPlan.seatPlan.colNo % 2) - 1;
            }
            this.$scope.seatPlan = seatPlan.seatPlan;
            this.createRoomStructure(this.$scope.seatPlan.roomId);
        };
        ViewSeatPlan.prototype.showCCISeatPlan = function () {
            this.$scope.semesterFinalView = false;
            this.$scope.seatPlan = null;
            var that = this;
            setTimeout(function () {
                that.$scope.cciView = true;
                that.getApplicationCCIInfo().then(function (applicationCCI) {
                    that.$scope.applicationCCIArr = applicationCCI;
                    that.$scope.applicationCCILength = applicationCCI.length;
                });
            }, 500);
        };
        ViewSeatPlan.prototype.viewCCISeatPlan = function (cciCourse) {
            this.$scope.selectCCICourse = cciCourse;
            this.$scope.seatPlan = null;
            var that = this;
            this.getSeatPlanInfoCCIExam(cciCourse.examDate, cciCourse.courseId).then(function (seatPlan) {
                that.setSeatPlanData(seatPlan);
            });
        };
        ViewSeatPlan.prototype.getSeatPlanInfoFinalExam = function () {
            var defer = this.$q.defer();
            var seatPlan;
            this.httpClient.get("academic/seatplan/semesterFinal", 'application/json', function (json, etag) {
                seatPlan = json;
                defer.resolve(seatPlan);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ViewSeatPlan.prototype.getSeatPlanInfoCCIExam = function (examDate, courseId) {
            var defer = this.$q.defer();
            this.httpClient.get("academic/seatplan/CCI/examDate/" + examDate + "/courseId/" + courseId, 'application/json', function (json, etag) {
                defer.resolve(json);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ViewSeatPlan.prototype.getClassRoomInfo = function (roomId) {
            var defer = this.$q.defer();
            var classRoom = [];
            this.httpClient.get("/ums-webservice-academic/academic/classroom/roomId/" + roomId, 'application/json', function (json, etag) {
                classRoom = json.entries;
                defer.resolve(classRoom);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ViewSeatPlan.prototype.getApplicationCCIInfo = function () {
            var defer = this.$q.defer();
            var applicationCCI = [];
            this.httpClient.get("/ums-webservice-academic/academic/applicationCCI/seatPlanView", "application/json", function (json, etag) {
                applicationCCI = json.entries;
                console.log(applicationCCI);
                defer.resolve(applicationCCI);
            }, function (response) {
                console.error(response);
            });
            return defer.promise;
        };
        ViewSeatPlan.$inject = ['appConstants', 'HttpClient', '$scope', '$q', 'notify', '$sce', '$window', 'studentService'];
        return ViewSeatPlan;
    }());
    ums.UMS.controller("ViewSeatPlan", ViewSeatPlan);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PaymentStatusService = (function () {
        function PaymentStatusService($q, httpClient) {
            this.$q = $q;
            this.httpClient = httpClient;
        }
        PaymentStatusService.prototype.getPaymentStatus = function (filters, url) {
            var defer = this.$q.defer();
            this.httpClient.post(url ? "" + url : 'payment-status/paginated/filtered', filters ? { "entries": filters } : {}, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                defer.resolve(response);
            })
                .error(function (error) {
                console.error(error);
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        PaymentStatusService.prototype.getPaymentStatusByBranchAndStatus = function (branchId, status) {
            var defer = this.$q.defer();
            this.httpClient.get("payment-status/branchId/" + branchId + "/status/" + status, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        PaymentStatusService.prototype.getTransactionList = function (fromDate, toDate, receivedBy, bankId, branchId, choice) {
            var defer = this.$q.defer();
            this.httpClient.get("payment-status/transaction-list?from-date=" + fromDate + "&to-date=" + toDate + "&received-by=" + receivedBy + "&bank-id=" + bankId + "&branch-id=" + branchId + "&choice=" + choice, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        PaymentStatusService.prototype.getPaymentStatusByStatus = function (status) {
            var defer = this.$q.defer();
            this.httpClient.get("payment-status/status/" + status, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        PaymentStatusService.prototype.getPaymentStatusByStudent = function (studentId) {
            var defer = this.$q.defer();
            this.httpClient.get("payment-status/studentId/" + studentId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            });
            return defer.promise;
        };
        PaymentStatusService.prototype.getFilters = function () {
            var defer = this.$q.defer();
            this.httpClient.get('payment-status/filters', ums.HttpClient.MIME_TYPE_JSON, function (filters) {
                defer.resolve(filters);
            });
            return defer.promise;
        };
        PaymentStatusService.prototype.concludePayments = function (payments) {
            var defer = this.$q.defer();
            this.httpClient.put("update-payment-status/conclude-payment", {
                "entries": payments
            }, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () { return defer.resolve(true); })
                .error(function () { return defer.resolve(false); });
            return defer.promise;
        };
        PaymentStatusService.prototype.rejectPayments = function (payments) {
            var defer = this.$q.defer();
            this.httpClient.put("update-payment-status/reject-payment", {
                "entries": payments
            }, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () { return defer.resolve(true); })
                .error(function () { return defer.resolve(false); });
            return defer.promise;
        };
        PaymentStatusService.prototype.updatePaymentStatus = function (paymentStatus) {
            var defer = this.$q.defer();
            this.httpClient.put("/ums-webservice-bank/payment-status/verifyPayment", paymentStatus, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) {
                defer.resolve("success");
            });
            return defer.promise;
        };
        PaymentStatusService.$inject = ['$q', 'HttpClient'];
        return PaymentStatusService;
    }());
    ums.PaymentStatusService = PaymentStatusService;
    ums.UMS.service('PaymentStatusService', PaymentStatusService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PunishmentController = (function () {
        function PunishmentController(appConstants, registrarConstants, $q, notify, punishmentService, offencePenaltyMapService, studentService, semesterService, programService, FileUpload, attachmentSettingService) {
            this.appConstants = appConstants;
            this.registrarConstants = registrarConstants;
            this.$q = $q;
            this.notify = notify;
            this.punishmentService = punishmentService;
            this.offencePenaltyMapService = offencePenaltyMapService;
            this.studentService = studentService;
            this.semesterService = semesterService;
            this.programService = programService;
            this.FileUpload = FileUpload;
            this.attachmentSettingService = attachmentSettingService;
            this.loader = true;
            this.addOrEdit = false;
            this.semesterWisePunishment = false;
            this.moneyWisePunishment = false;
            this.semesterWiseDetailPunishment = false;
            this.moneyWiseDetailPunishment = false;
            this.isStudent = false;
            this.studentImageId = "";
            this.disableSubmitBtn = false;
            this.showPunishmentHistory = true;
            this.punishmentListDepartmentWise = false;
            this.punishmentListSemesterWise = false;
            this.punishmentListOverall = true;
            this.punishmentListPunishmentTypeWise = false;
            this.itemsPerPage = 10;
            this.currentPage = 1;
            this.filtered = [];
            this.attachments = [];
            this.attachmentsInfoInPunishmentDetailModal = [];
            this.init();
        }
        PunishmentController.prototype.init = function () {
            this.offenceCategories = this.appConstants.offenceCategory;
            this.punishmentTypes = this.appConstants.punishmentType;
            this.setSelectAllOverall = false;
            this.setSelectAllPunishment = false;
            this.setSelectAllProgram = false;
            this.setSelectAllSemester = false;
            this.getOffencePenaltyMap();
            this.getSemesters();
            this.getPrograms();
            this.getAttachmentSetting(ums.Utils.ATTACHMENT_TYPE_FOR_PROCTOR_MODULE);
            this.loader = false;
            this.initPunishmentHistory();
        };
        PunishmentController.prototype.getAttachmentSetting = function (id) {
            var _this = this;
            this.attachmentSettingService.get(id).then(function (response) {
                _this.attachmentSetting = response;
            });
        };
        PunishmentController.prototype.getSemesters = function () {
            var _this = this;
            this.semesterService.fetchSemesters(ums.Utils.UG, 100, 3).then(function (result) {
                _this.semesters = result;
            });
        };
        PunishmentController.prototype.getPrograms = function () {
            var _this = this;
            this.programService.fetchProgram(ums.Utils.UG).then(function (result) {
                _this.programs = result;
                _this.sortProgramSequence();
            });
        };
        PunishmentController.prototype.sortProgramSequence = function () {
            this.programs.sort(function (a, b) {
                return a.id - b.id;
            });
        };
        PunishmentController.prototype.getOffencePenaltyMap = function () {
            var _this = this;
            this.offencePenaltyMapService.fetchAll().then(function (response) {
                _this.offencePenaltyMaps = response;
            });
        };
        PunishmentController.prototype.search = function () {
            var _this = this;
            this.disableSubmitBtn = false;
            this.addOrEdit = false;
            if (this.studentId) {
                if ((this.studentId.length == PunishmentController.STUDENT_ID_LENGTH) || this.studentId.length == PunishmentController.STUDENT_ID_LENGTH_NEW) {
                    this.studentService.getStudentById(this.studentId).then(function (response) {
                        if (response.id) {
                            _this.currentStudent = response;
                            _this.studentImageId = _this.studentId;
                            _this.isStudent = true;
                            _this.punishmentService.fetchAllByStudentId(_this.studentId).then(function (result) {
                                _this.punishments = result;
                                if (_this.punishments.length > 0) {
                                    _this.message = "";
                                }
                                else {
                                    _this.message = "No records found";
                                    _this.punishments = [];
                                }
                            });
                        }
                        else {
                            _this.currentStudent = {};
                            _this.punishments = [];
                            _this.isStudent = false;
                            _this.notify.error("Not a valid student.");
                        }
                    });
                }
                else {
                    this.currentStudent = {};
                    this.punishments = [];
                    this.isStudent = false;
                    this.notify.error("Not a valid student.");
                }
            }
            else {
                this.currentStudent = {};
                this.punishments = [];
                this.isStudent = false;
                this.notify.error("Please write a student id");
            }
        };
        PunishmentController.prototype.addNew = function () {
            this.addOrEdit = true;
            this.disableSubmitBtn = false;
            this.initPunishmentModel();
            this.semesterOrMoneyPunishment();
        };
        PunishmentController.prototype.initPunishmentModel = function () {
            this.punishment = {};
            this.punishment.id = "";
            this.punishment.student = this.currentStudent;
            this.punishment.offenceDate = "";
            this.punishment.punishmentDate = "";
            this.punishment.offence = "";
            this.punishment.penalty = "";
            this.punishment.offenceCategory = this.offenceCategories[0];
            this.punishment.punishmentType = this.punishmentTypes[0];
            this.punishment.punishmentSemesters = [];
            this.punishment.punishmentMoney = {};
            this.punishment.remarks = "";
        };
        PunishmentController.prototype.edit = function (val) {
            this.initPunishmentModel();
            this.addOrEdit = true;
            this.punishment = val;
            this.semesterOrMoneyPunishment();
            this.fetchAttachments(val.id);
            this.addOrEdit = true;
        };
        PunishmentController.prototype.submit = function (form) {
            var _this = this;
            if (this.punishment.id) {
                this.convertToJson().then(function (json) {
                    _this.punishmentService.revise(json).then(function (response) {
                        if (response == ums.Utils.SUCCESS) {
                            if (_this.punishment.punishmentType.id == PunishmentController.WARNING) {
                                _this.FileUpload.uploadAttachment("files", _this.punishment.id, ums.Utils.ATTACHMENT_TYPE_FOR_PROCTOR_MODULE, _this.punishment.student.id);
                            }
                            _this.notifier(_this.punishment);
                            _this.notify.success("Successfully Updated");
                            _this.search();
                        }
                        else {
                            _this.disableSubmitBtn = false;
                            _this.notify.error("Error while updating");
                        }
                    });
                });
            }
            else {
                if (this.punishment.offenceDate && this.punishment.offenceCategory && this.punishment.punishmentDate && this.punishment.offence &&
                    this.punishment.penalty) {
                    this.convertToJson().then(function (json) {
                        _this.punishmentService.create(json).then(function (response) {
                            if (response == ums.Utils.SUCCESS) {
                                _this.notify.success("Successfully created");
                                _this.notifier(_this.punishment);
                                _this.initPunishmentModel();
                                _this.search();
                            }
                            else {
                                _this.disableSubmitBtn = false;
                                _this.notify.error("Error while creating");
                            }
                        });
                    });
                }
                else {
                    this.notify.error("Please fill up the form properly.");
                }
            }
        };
        PunishmentController.prototype.addNewPunishmentSemester = function () {
            var punishmentSemester;
            punishmentSemester = {
                id: "",
                punishment: null,
                student: this.currentStudent,
                semester: null,
                status: "",
                comments: ""
            };
            if (this.punishment.punishmentSemesters == undefined) {
                this.punishment.punishmentSemesters = [];
                this.punishment.punishmentSemesters.push(punishmentSemester);
            }
            else {
                this.punishment.punishmentSemesters.push(punishmentSemester);
            }
        };
        PunishmentController.prototype.fetchAttachments = function (punishmentId) {
            var _this = this;
            this.attachments = [];
            this.FileUpload.fetch(ums.Utils.ATTACHMENT_TYPE_FOR_PROCTOR_MODULE, punishmentId).then(function (result) {
                if (result == ums.Utils.ERROR) {
                    _this.attachments = [];
                }
                else {
                    _this.attachments = result;
                }
            });
        };
        PunishmentController.prototype.downloadAttachment = function (attachment) {
            this.FileUpload.downloadFile(attachment);
        };
        PunishmentController.prototype.select = function (val) {
            this.punishment.offence = val.offence.offence;
            this.punishment.penalty = val.penalty.penalty;
        };
        PunishmentController.prototype.semesterOrMoneyPunishment = function () {
            if (this.punishment.punishmentType.id == PunishmentController.SEMESTER_WISE_PUNISHMENT) {
                this.semesterWisePunishment = true;
                this.moneyWisePunishment = false;
            }
            else if (this.punishment.punishmentType.id == PunishmentController.MONEY_WISE_PUNISHMENT) {
                this.semesterWisePunishment = false;
                this.moneyWisePunishment = true;
            }
            else if (this.punishment.punishmentType.id == PunishmentController.BOTH_WISE_PUNISHMENT) {
                this.semesterWisePunishment = true;
                this.moneyWisePunishment = true;
            }
            else {
                this.semesterWisePunishment = false;
                this.moneyWisePunishment = false;
            }
        };
        PunishmentController.prototype.semesterOrMoneyForDetailPunishment = function () {
            if (this.punishmentDetails.punishmentType.id == PunishmentController.SEMESTER_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = true;
                this.moneyWiseDetailPunishment = false;
            }
            else if (this.punishmentDetails.punishmentType.id == PunishmentController.MONEY_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = true;
            }
            else if (this.punishmentDetails.punishmentType.id == PunishmentController.BOTH_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = true;
                this.moneyWiseDetailPunishment = true;
            }
            else {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = false;
            }
        };
        PunishmentController.prototype.details = function (val) {
            var _this = this;
            this.punishmentDetails = {};
            this.punishmentDetails = val;
            this.semesterOrMoneyForDetailPunishment();
            if (this.punishmentDetails.punishmentType.id == PunishmentController.WARNING) {
                this.attachmentsInfoInPunishmentDetailModal = [];
                this.FileUpload.fetch(ums.Utils.ATTACHMENT_TYPE_FOR_PROCTOR_MODULE, this.punishmentDetails.id).then(function (result) {
                    if (result == ums.Utils.ERROR) {
                        _this.attachmentsInfoInPunishmentDetailModal = [];
                    }
                    else {
                        _this.attachmentsInfoInPunishmentDetailModal = result;
                    }
                });
            }
        };
        PunishmentController.prototype.notifier = function (val, bId, index) {
            if (bId) {
                console.log('#' + bId + index);
                $('#' + bId + index).prop('disabled', true);
                setTimeout(function () {
                    $('#' + bId + index).prop('disabled', false);
                }, 3 * 1000);
            }
            this.punishmentService.sendNotification(val);
            $('#notifyModal').modal('hide');
        };
        PunishmentController.prototype.notifySelected = function (selectedPunishmentList, bId) {
            var selectionCheck = false;
            for (var i = 0; i < selectedPunishmentList.length; i++) {
                if (selectedPunishmentList[i].setSelect == true) {
                    this.punishmentService.sendNotification(selectedPunishmentList[i]);
                    selectionCheck = true;
                }
            }
            if (selectionCheck) {
                if (bId) {
                    $('#' + bId).prop('disabled', true);
                    setTimeout(function () {
                        $('#' + bId).prop('disabled', false);
                    }, 3 * 1000);
                }
            }
            if (!selectionCheck) {
                this.notify.warn("No data selected!!");
            }
        };
        PunishmentController.prototype.initPunishmentHistory = function () {
            this.showPunishmentHistory = true;
            this.initOverallPunishmentList();
        };
        PunishmentController.prototype.getPunishmentByProgram = function (program) {
            var _this = this;
            if (program && this.selectedSemesterForDepartmentWisePunishmentList) {
                this.selectedProgram = program;
                this.getPunishmentByProgramAndSemester(this.selectedSemesterForDepartmentWisePunishmentList);
            }
            else if (program) {
                this.selectedProgram = program;
                this.departmentWisePunishments = [];
                this.punishmentService.fetchAllByProgram(program.id).then(function (result) {
                    _this.departmentWisePunishments = result;
                });
                this.departmentWisePunishments.forEach(function (value) {
                    value.setSelect = false;
                });
            }
            else {
                this.notify.error("Select a program first");
            }
        };
        PunishmentController.prototype.getPunishmentByProgramAndSemester = function (semester) {
            var _this = this;
            if (this.selectedProgram && semester) {
                this.departmentWisePunishments = [];
                this.punishmentService.fetchAllByProgramAndSemester(this.selectedProgram.id, semester.id).then(function (result) {
                    _this.departmentWisePunishments = result;
                });
                this.departmentWisePunishments.forEach(function (value) {
                    value.setSelect = false;
                });
            }
            else {
                this.notify.error("Select a program first then select semester");
            }
        };
        PunishmentController.prototype.setAllProgram = function () {
            if (this.setSelectAllProgram) {
                this.departmentWisePunishments.forEach(function (value) {
                    value.setSelect = true;
                });
            }
            else {
                this.departmentWisePunishments.forEach(function (value) {
                    value.setSelect = false;
                });
            }
        };
        PunishmentController.prototype.getPunishmentBySemester = function (semester) {
            var _this = this;
            if (semester) {
                this.semesterWisePunishments = [];
                this.punishmentService.fetchAllBySemester(semester.id).then(function (result) {
                    _this.semesterWisePunishments = result;
                });
                this.semesterWisePunishments.forEach(function (value) {
                    value.setSelect = false;
                });
            }
        };
        PunishmentController.prototype.setAllSemester = function () {
            if (this.setSelectAllSemester) {
                this.semesterWisePunishments.forEach(function (value) {
                    value.setSelect = true;
                });
            }
            else {
                this.semesterWisePunishments.forEach(function (value) {
                    value.setSelect = false;
                });
            }
        };
        PunishmentController.prototype.getPunishmentByOverall = function () {
            var _this = this;
            this.paginatedOverallPunishment = [];
            this.filtered = [];
            this.punishmentService.fetchAll().then(function (result) {
                _this.paginatedOverallPunishment = result;
            });
            this.paginatedOverallPunishment.forEach(function (value) {
                value.setSelect = false;
            });
        };
        PunishmentController.prototype.setAllOverall = function () {
            if (this.setSelectAllOverall) {
                this.paginatedOverallPunishment.forEach(function (value) {
                    value.setSelect = true;
                });
            }
            else {
                this.paginatedOverallPunishment.forEach(function (value) {
                    value.setSelect = false;
                });
            }
        };
        PunishmentController.prototype.getPunishmentByPunishmentType = function (punishmentType) {
            var _this = this;
            this.punishmentTypePunishments = [];
            this.punishmentService.fetchAllByPunishmentType(punishmentType.id).then(function (result) {
                _this.punishmentTypePunishments = result;
            });
            this.punishmentTypePunishments.forEach(function (value) {
                value.setSelect = false;
            });
        };
        PunishmentController.prototype.setAllPunishment = function () {
            if (this.setSelectAllPunishment) {
                this.punishmentTypePunishments.forEach(function (value) {
                    value.setSelect = true;
                });
            }
            else {
                this.punishmentTypePunishments.forEach(function (value) {
                    value.setSelect = false;
                });
            }
        };
        PunishmentController.prototype.initDepartmentWisePunishmentList = function () {
            this.punishmentListSemesterWise = false;
            this.punishmentListOverall = false;
            this.punishmentListPunishmentTypeWise = false;
            this.punishmentListDepartmentWise = true;
            $('#deptButton').css('background-color', '#7b4491');
            $('#overallButton').css('background-color', '#9351AD');
            $('#semButton').css('background-color', '#9351AD');
            $('#typeButton').css('background-color', '#9351AD');
        };
        PunishmentController.prototype.initSemesterWisePunishmentList = function () {
            this.punishmentListDepartmentWise = false;
            this.punishmentListOverall = false;
            this.punishmentListPunishmentTypeWise = false;
            this.punishmentListSemesterWise = true;
            $('#semButton').css('background-color', '#7b4491');
            $('#deptButton').css('background-color', '#9351AD');
            $('#overallButton').css('background-color', '#9351AD');
            $('#typeButton').css('background-color', '#9351AD');
        };
        PunishmentController.prototype.initOverallPunishmentList = function () {
            this.punishmentListDepartmentWise = false;
            this.punishmentListSemesterWise = false;
            this.punishmentListPunishmentTypeWise = false;
            this.punishmentListOverall = true;
            $('#overallButton').css('background-color', '#7b4491');
            $('#deptButton').css('background-color', '#9351AD');
            $('#semButton').css('background-color', '#9351AD');
            $('#typeButton').css('background-color', '#9351AD');
            this.getPunishmentByOverall();
        };
        PunishmentController.prototype.initPunishmentTypeWisePunishmentList = function () {
            this.punishmentListDepartmentWise = false;
            this.punishmentListSemesterWise = false;
            this.punishmentListOverall = false;
            this.punishmentListPunishmentTypeWise = true;
            $('#typeButton').css('background-color', '#7b4491');
            $('#deptButton').css('background-color', '#9351AD');
            $('#semButton').css('background-color', '#9351AD');
            $('#overallButton').css('background-color', '#9351AD');
        };
        PunishmentController.prototype.pageChanged = function (page) {
            this.currentPage = page;
        };
        PunishmentController.prototype.downloadOverallPunishmentReport = function () {
            this.punishmentService.getOverallPunishmentReport();
        };
        PunishmentController.prototype.downloadDepartmentWisePunishmentReport = function () {
            if (this.selectedProgram && this.selectedSemesterForDepartmentWisePunishmentList) {
                this.downloadDepartmentWiseWithSemesterPunishmentReport();
            }
            else if (this.selectedProgram) {
                this.punishmentService.getDepartmentWisePunishmentReport(this.selectedProgram);
            }
            else {
                this.notify.error("Please select a department first");
            }
        };
        PunishmentController.prototype.downloadSemesterWisePunishmentReport = function () {
            if (this.selectedSemester) {
                this.punishmentService.getSemesterWisePunishmentReport(this.selectedSemester);
            }
            else {
                this.notify.error("Please select a semester first");
            }
        };
        PunishmentController.prototype.downloadDepartmentWiseWithSemesterPunishmentReport = function () {
            if (this.selectedProgram && this.selectedSemesterForDepartmentWisePunishmentList) {
                this.punishmentService.getDepartmentWiseWithSemesterPunishmentReport(this.selectedProgram, this.selectedSemesterForDepartmentWisePunishmentList);
            }
            else {
                this.notify.error("Please select a department & semester first");
            }
        };
        PunishmentController.prototype.downloadPunishmentTypeWisePunishmentReport = function () {
            if (this.selectedPunishmentType) {
                this.punishmentService.getPunishmentTypeWisePunishmentReport(this.selectedPunishmentType.id, this.selectedPunishmentType.name);
            }
            else {
                this.notify.error("Please select a punishment type first");
            }
        };
        PunishmentController.prototype.receipt = function (transactionId) {
            this.punishmentService.receipt(transactionId);
        };
        PunishmentController.prototype.convertToJson = function () {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = this.punishment;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        PunishmentController.$inject = [
            'appConstants',
            'registrarConstants',
            '$q',
            'notify',
            'punishmentService',
            'offencePenaltyMapService',
            'studentService',
            'semesterService',
            'programService',
            'FileUpload',
            'attachmentSettingService'
        ];
        PunishmentController.STUDENT_ID_LENGTH = 9;
        PunishmentController.STUDENT_ID_LENGTH_NEW = 11;
        PunishmentController.NO_PUNISHMENT = 0;
        PunishmentController.WARNING = 1;
        PunishmentController.SEMESTER_WISE_PUNISHMENT = 2;
        PunishmentController.MONEY_WISE_PUNISHMENT = 3;
        PunishmentController.BOTH_WISE_PUNISHMENT = 4;
        return PunishmentController;
    }());
    ums.UMS.controller("PunishmentController", PunishmentController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PunishmentViewController = (function () {
        function PunishmentViewController(notify, punishmentService, FileUpload) {
            this.notify = notify;
            this.punishmentService = punishmentService;
            this.FileUpload = FileUpload;
            this.loader = true;
            this.filtered = [];
            this.semesterWiseDetailPunishment = false;
            this.moneyWiseDetailPunishment = false;
            this.itemsPerPage = 10;
            this.currentPage = 1;
            this.searchKey = "";
            this.attachmentsInfoInPunishmentDetailModal = [];
            this.init();
        }
        PunishmentViewController.prototype.init = function () {
            var _this = this;
            this.punishmentService.fetchAll().then(function (response) {
                _this.punishments = response;
                _this.loader = false;
            });
        };
        PunishmentViewController.prototype.studentDetails = function (val) {
            this.currentStudent = {};
            this.currentStudent = val;
        };
        PunishmentViewController.prototype.details = function (val) {
            var _this = this;
            this.punishmentDetails = {};
            this.punishmentDetails = val;
            this.semesterOrMoneyPunishment();
            if (this.punishmentDetails.punishmentType.id == PunishmentViewController.WARNING) {
                this.attachmentsInfoInPunishmentDetailModal = [];
                this.FileUpload.fetch(ums.Utils.ATTACHMENT_TYPE_FOR_PROCTOR_MODULE, this.punishmentDetails.id).then(function (result) {
                    if (result == ums.Utils.ERROR) {
                        _this.attachmentsInfoInPunishmentDetailModal = [];
                    }
                    else {
                        _this.attachmentsInfoInPunishmentDetailModal = result;
                    }
                });
            }
        };
        PunishmentViewController.prototype.downloadAttachment = function (attachment) {
            this.FileUpload.downloadFile(attachment);
        };
        PunishmentViewController.prototype.semesterOrMoneyPunishment = function () {
            if (this.punishmentDetails.punishmentType.id == PunishmentViewController.NO_PUNISHMENT) {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = false;
            }
            else if (this.punishmentDetails.punishmentType.id == PunishmentViewController.SEMESTER_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = true;
                this.moneyWiseDetailPunishment = false;
            }
            else if (this.punishmentDetails.punishmentType.id == PunishmentViewController.MONEY_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = true;
            }
            else if (this.punishmentDetails.punishmentType.id == PunishmentViewController.BOTH_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = true;
                this.moneyWiseDetailPunishment = true;
            }
            else {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = false;
            }
        };
        PunishmentViewController.$inject = [
            'notify',
            'punishmentService',
            'FileUpload'
        ];
        PunishmentViewController.NO_PUNISHMENT = 0;
        PunishmentViewController.WARNING = 1;
        PunishmentViewController.SEMESTER_WISE_PUNISHMENT = 2;
        PunishmentViewController.MONEY_WISE_PUNISHMENT = 3;
        PunishmentViewController.BOTH_WISE_PUNISHMENT = 4;
        return PunishmentViewController;
    }());
    ums.PunishmentViewController = PunishmentViewController;
    ums.UMS.controller("PunishmentViewController", PunishmentViewController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PunishmentStudentViewController = (function () {
        function PunishmentStudentViewController(notify, punishmentService) {
            this.notify = notify;
            this.punishmentService = punishmentService;
            this.loader = true;
            this.semesterWiseDetailPunishment = false;
            this.moneyWiseDetailPunishment = false;
            this.detailView = false;
            this.init();
        }
        PunishmentStudentViewController.prototype.init = function () {
            var _this = this;
            this.punishmentService.fetchAllByLoggedInUser().then(function (response) {
                _this.punishments = response;
                _this.loader = false;
            });
        };
        PunishmentStudentViewController.prototype.details = function (val) {
            this.punishmentDetails = {};
            this.detailView = true;
            this.punishmentDetails = val;
            this.semesterOrMoneyPunishment();
        };
        PunishmentStudentViewController.prototype.semesterOrMoneyPunishment = function () {
            if (this.punishmentDetails.punishmentType.id == PunishmentStudentViewController.NO_PUNISHMENT) {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = false;
            }
            else if (this.punishmentDetails.punishmentType.id == PunishmentStudentViewController.SEMESTER_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = true;
                this.moneyWiseDetailPunishment = false;
            }
            else if (this.punishmentDetails.punishmentType.id == PunishmentStudentViewController.MONEY_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = true;
            }
            else if (this.punishmentDetails.punishmentType.id == PunishmentStudentViewController.BOTH_WISE_PUNISHMENT) {
                this.semesterWiseDetailPunishment = true;
                this.moneyWiseDetailPunishment = true;
            }
            else {
                this.semesterWiseDetailPunishment = false;
                this.moneyWiseDetailPunishment = false;
            }
        };
        PunishmentStudentViewController.$inject = [
            'notify',
            'punishmentService'
        ];
        PunishmentStudentViewController.NO_PUNISHMENT = 0;
        PunishmentStudentViewController.SEMESTER_WISE_PUNISHMENT = 1;
        PunishmentStudentViewController.MONEY_WISE_PUNISHMENT = 2;
        PunishmentStudentViewController.BOTH_WISE_PUNISHMENT = 3;
        return PunishmentStudentViewController;
    }());
    ums.UMS.controller("PunishmentStudentViewController", PunishmentStudentViewController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var PunishmentService = (function () {
        function PunishmentService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        PunishmentService.prototype.revise = function (json) {
            var defer = this.$q.defer();
            this.httpClient.put("punishment", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.create = function (json) {
            var defer = this.$q.defer();
            this.httpClient.post("punishment", json, ums.HttpClient.MIME_TYPE_JSON)
                .success(function () {
                defer.resolve(ums.Utils.SUCCESS);
            })
                .error(function (data) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("punishment/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.fetchAllByProgram = function (programId) {
            var defer = this.$q.defer();
            this.httpClient.get("punishment/programId/" + programId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.fetchAllByProgramAndSemester = function (programId, semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("punishment/programId/" + programId + "/semesterId/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.fetchAllBySemester = function (semesterId) {
            var defer = this.$q.defer();
            this.httpClient.get("punishment/semesterId/" + semesterId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.fetchAllByPunishmentType = function (punishmentTypeId) {
            var defer = this.$q.defer();
            this.httpClient.get("punishment/punishmentTypeId/" + punishmentTypeId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.fetchOverall = function (itemPerPage, currentPage) {
            var defer = this.$q.defer();
            this.httpClient.get("punishment/itemPerPage/" + itemPerPage + "/currentPage/" + currentPage, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.fetchAllByLoggedInUser = function () {
            var defer = this.$q.defer();
            this.httpClient.get("punishment/loggedInStudent/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.fetchAllByStudentId = function (studentId) {
            var defer = this.$q.defer();
            this.httpClient.get("punishment/studentId/" + studentId, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("punishment" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        PunishmentService.prototype.getOverallPunishmentReport = function () {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Punishment Report";
            this.httpClient.get("punishment/report/overall", 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        PunishmentService.prototype.getDepartmentWisePunishmentReport = function (program) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Punishment Report for " + program.longName;
            this.httpClient.get("punishment/report/departmentWise/" + program.id, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        PunishmentService.prototype.getDepartmentWiseWithSemesterPunishmentReport = function (program, semester) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Punishment Report for " + program.longName + " and " + semester.name;
            this.httpClient.get("punishment/report/programId/" + program.id + "/semesterId/" + semester.id, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        PunishmentService.prototype.getSemesterWisePunishmentReport = function (semester) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Punishment Report for " + semester.name;
            this.httpClient.get("punishment/report/semesterWise/" + semester.id, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        PunishmentService.prototype.getPunishmentTypeWisePunishmentReport = function (punishmentTypeId, punishmentTypeName) {
            var contentType = ums.UmsUtil.getFileContentType("pdf");
            var fileName = "Punishment Report for " + punishmentTypeName;
            this.httpClient.get("punishment/report/punishmentTypeId/" + punishmentTypeId, 'application/pdf', function (data, etag) {
                ums.UmsUtil.writeFileContent(data, contentType, fileName);
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        PunishmentService.prototype.sendNotification = function (val) {
            var _this = this;
            console.log(val);
            this.convertToJsonForVerify(val).then(function (json) {
                _this.httpClient.put("punishment/punishment-notify", json, 'application/json').success(function () {
                    _this.notify.success("An Email has been sent");
                }).error(function (data) {
                    _this.notify.error("Error in Verification!!");
                });
            });
        };
        PunishmentService.prototype.convertToJsonForVerify = function (object) {
            var defer = this.$q.defer();
            var JsonObject = {};
            JsonObject['entries'] = object;
            defer.resolve(JsonObject);
            return defer.promise;
        };
        PunishmentService.prototype.receipt = function (transactionId) {
            var _this = this;
            this.httpClient.get("fee-receipt/" + transactionId, 'application/pdf', function (data, etag) {
                var file = new Blob([data], { type: 'application/pdf' });
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = function (e) {
                    _this.saveAsFile(reader.result, "deposit-slip-" + transactionId);
                };
            }, function (response) {
                console.error(response);
            }, 'arraybuffer');
        };
        PunishmentService.prototype.saveAsFile = function (url, fileName) {
            var a = document.createElement("a");
            document.body.appendChild(a);
            a.style = "display: none";
            a.href = url;
            a.download = fileName;
            a.click();
            window.URL.revokeObjectURL(url);
            $(a).remove();
        };
        PunishmentService.$inject = ['HttpClient', '$q', 'notify'];
        return PunishmentService;
    }());
    ums.PunishmentService = PunishmentService;
    ums.UMS.service("punishmentService", PunishmentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var OffencePenaltyMapService = (function () {
        function OffencePenaltyMapService(httpClient, $q, notify) {
            this.httpClient = httpClient;
            this.$q = $q;
            this.notify = notify;
        }
        OffencePenaltyMapService.prototype.fetchAll = function () {
            var defer = this.$q.defer();
            this.httpClient.get("offencePenaltyMap/all", ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        OffencePenaltyMapService.prototype.fetch = function (id) {
            var defer = this.$q.defer();
            this.httpClient.get("offencePenaltyMap" + id, ums.HttpClient.MIME_TYPE_JSON, function (json, etag) {
                defer.resolve(json.entries);
            }, function (response) {
                defer.reject(ums.Utils.ERROR);
            });
            return defer.promise;
        };
        OffencePenaltyMapService.$inject = ['HttpClient', '$q', 'notify'];
        return OffencePenaltyMapService;
    }());
    ums.OffencePenaltyMapService = OffencePenaltyMapService;
    ums.UMS.service("offencePenaltyMapService", OffencePenaltyMapService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AmendmentController = (function () {
        function AmendmentController($scope, paymentAmendmentService, $q, notify, studentService, paymentService, bankService, districtService, appConstants, $location, detaledStudentPaymentService, $timeout, semesterService, admissionStudentService, admissionPaymentService, detailAdmissionPaymentService, admissionInstallmentService, feeReportService) {
            var _this = this;
            this.$scope = $scope;
            this.paymentAmendmentService = paymentAmendmentService;
            this.$q = $q;
            this.notify = notify;
            this.studentService = studentService;
            this.paymentService = paymentService;
            this.bankService = bankService;
            this.districtService = districtService;
            this.appConstants = appConstants;
            this.$location = $location;
            this.detaledStudentPaymentService = detaledStudentPaymentService;
            this.$timeout = $timeout;
            this.semesterService = semesterService;
            this.admissionStudentService = admissionStudentService;
            this.admissionPaymentService = admissionPaymentService;
            this.detailAdmissionPaymentService = detailAdmissionPaymentService;
            this.admissionInstallmentService = admissionInstallmentService;
            this.feeReportService = feeReportService;
            this.isReadOnly = true;
            this.isSplitPayment = true;
            this.confirmation = false;
            this.isAdmissionStudent = false;
            this.isReadOnly = true;
            this.instrument = {};
            this.paymentModes = appConstants.paymentMode;
            this.splitInfo = {};
            this.comment = '';
            if (this.$location.search().studentId == null) {
                //this.$location.path('paymentAmendment').search('studentId', );
            }
            else {
                this.studentId = this.$location.search().studentId;
                var semesterId = this.$location.search().semesterId;
                this.semesterService.getSemesterById(semesterId).then(function (res) {
                    _this.selectedSemester = res;
                    _this.initialize();
                    _this.getPaymentInformation(_this.$location.search().studentId);
                });
            }
            this.initialize();
        }
        AmendmentController.prototype.semesterChanged = function (semester) {
            if (this.selectedSemester.status === ums.UmsUtil.SEMESTER_NEWLY_CREATED) {
                this.isAdmissionStudent = true;
            }
        };
        AmendmentController.prototype.initialize = function () {
            var _this = this;
            this.semesterService.fetchSemesters(ums.UmsUtil.UNDERGRADUATE, 5, ums.UmsUtil.SEMESTER_FETCH_ALL_WITH_NEWLY_CREATED).then(function (semesters) {
                _this.semesters = semesters;
                if (!_this.selectedSemester) {
                    _this.semesters.forEach(function (s) {
                        if (s.status === 1)
                            _this.selectedSemester = s;
                    });
                }
                else {
                    _this.semesters.forEach(function (s) {
                        if (s.id == _this.selectedSemester.id) {
                            _this.selectedSemester = s;
                        }
                    });
                }
            });
        };
        AmendmentController.prototype.searchByStudent = function (studentId) {
            this.$location.path('paymentAmendment').search('studentId', studentId).search('semesterId', this.selectedSemester.id);
            this.studentId = studentId;
            this.getPaymentInformation(studentId);
        };
        AmendmentController.prototype.getAdmissionPaymentInformation = function (serialNo) {
            console.group("Admission student information");
            console.groupEnd();
        };
        AmendmentController.prototype.getPaymentInformation = function (studentId) {
            console.group("get payment information");
            console.log("Payment Information of StudentID : " + studentId);
            console.log("Is admission student? --> " + this.isAdmissionStudent);
            console.log('Selected semester');
            console.log(this.selectedSemester);
            console.groupEnd();
            this.confirmation = false;
            this.comment = '';
            if (this.selectedSemester.status === ums.UmsUtil.SEMESTER_NEWLY_CREATED) {
                var serialNo = studentId;
                this.getAdmissionStudentInformation(serialNo);
            }
            else {
                this.getStudentInformation(studentId);
                this.getPendingTransactions(studentId);
            }
        };
        AmendmentController.prototype.getStudentInformation = function (studentId) {
            var _this = this;
            this.studentService.getStudentById(studentId).then(function (student) {
                _this.student = student;
            });
        };
        AmendmentController.prototype.getAdmissionStudentInformation = function (serialNo) {
            var _this = this;
            this.admissionStudentService.fetchAdmissionStudentBySerialNo(serialNo).then(function (res) {
                _this.admissionStudent = res;
                console.group("Admission student information");
                console.log("Admission student: ");
                console.log(_this.admissionStudent);
                _this.getAdmissionPendingTransactions();
                console.groupEnd();
            });
        };
        AmendmentController.prototype.getPendingTransactions = function (studentId) {
            var _this = this;
            this.paymentService.getPendingPaymentsForAmendment(studentId, this.selectedSemester.id).then(function (payments) {
                _this.pendingPayments = payments;
                console.log("List of Pending Payments:");
                console.log(_this.pendingPayments);
            });
        };
        AmendmentController.prototype.getAdmissionPendingTransactions = function () {
            var _this = this;
            this.admissionPaymentService.getAdmissionPayment(this.admissionStudent.receiptId, this.admissionStudent.quota).then(function (res) {
                console.log("Admission payments");
                _this.pendingPayments = [];
                _this.pendingPayments.push(res);
                if (res.transactionType === ums.Utils.TRANSACTION_TYPE_SPLITTED)
                    _this.getAdmissionInstallments(res);
                console.log(_this.pendingPayments);
            });
        };
        AmendmentController.prototype.getAdmissionInstallments = function (admissionPayment) {
            var _this = this;
            this.admissionInstallmentService.getRelatedInstallments(admissionPayment.transactionId).then(function (res) {
                res.forEach(function (r) {
                    if (r.transactionId !== admissionPayment.transactionId) {
                        var installmentPayment = angular.copy(admissionPayment);
                        installmentPayment.transactionId = r.transactionId;
                        installmentPayment.amount = r.amount;
                        installmentPayment.transactionValidTill = r.transactionValidTill;
                        _this.pendingPayments.push(installmentPayment);
                    }
                });
            });
        };
        AmendmentController.prototype.edit = function () {
            this.isReadOnly = false;
            this.loadDistricts();
        };
        AmendmentController.prototype.loadDistricts = function () {
            var _this = this;
            this.districtService.getAll().then(function (districtList) {
                _this.districtList = districtList;
            });
        };
        // User clicked on  a pending transaction
        AmendmentController.prototype.showPayment = function (index) {
            var _this = this;
            console.log("User Clicked on a payment");
            this.selectedPayment = this.pendingPayments[index];
            console.log(this.selectedPayment);
            if (this.selectedSemester.status === 2)
                this.fetchDetailedAdmissionPayments(this.selectedPayment);
            else
                this.fetchDetailedPayments(this.selectedPayment);
            this.splittedPayments = [];
            this.splittedTotalAmount = 0;
            this.bankService.getBankList().then(function (bankList) {
                _this.bankList = bankList;
                // this.setBank('original');
            });
            this.instrument.no = this.selectedPayment.instrumentNo;
            $('#modal-split-paymentMethod').modal('show');
        };
        AmendmentController.prototype.fetchDetailedPayments = function (studentPayment) {
            var _this = this;
            this.detaledStudentPaymentService.getDetailedStudentPaymentByTransactionId(studentPayment.transactionId).then(function (detailedStudentPayment) {
                _this.detailedPaymentsOfSelectedPayment = detailedStudentPayment;
                _this.feeCategoryMapDetailedStudentPayment = {};
                _this.detailedPaymentsOfSelectedPayment.forEach(function (d) { return _this.feeCategoryMapDetailedStudentPayment[d.feeCategoryId] = d; });
            });
        };
        AmendmentController.prototype.fetchDetailedAdmissionPayments = function (studentPayment) {
            var _this = this;
            this.detailAdmissionPaymentService.getDetailedStudentPaymentByTransactionId(studentPayment.transactionId).then(function (detailedStudentPayment) {
                _this.detailedPaymentsOfSelectedPayment = detailedStudentPayment;
                _this.feeCategoryMapDetailedStudentPayment = {};
                _this.detailedPaymentsOfSelectedPayment.forEach(function (d) { return _this.feeCategoryMapDetailedStudentPayment[d.feeCategoryId] = d; });
            });
        };
        /* private setBankAndDistrict(type:string) {
           this.selectedBank = this.instrument.bank!=undefined? this.instrument.bank.id: undefined;
           this.selectedDistrict = this.instrument.district!=undefined? this.instrument.district.id: undefined;
           this.getBranches(type);
         }*/
        AmendmentController.prototype.removeSplitPayment = function (splitPayment) {
            for (var i = 0; i < this.splittedPayments.length; i++) {
                if (this.splittedPayments[i] == splitPayment) {
                    this.splittedPayments.splice(i, 1);
                    this.serializeSplittedPaymentsAndUpdateTotalAmount();
                    break;
                }
            }
        };
        AmendmentController.prototype.getBranches = function (splitPayment) {
            console.log('split payment data');
            console.log(splitPayment);
            if (splitPayment.payment.instrument.bank != undefined && splitPayment.payment.instrument.district != undefined) {
                console.log('in both');
                this.getBranchesByBankAndDistrictId(splitPayment.payment.instrument.bank.id, splitPayment.payment.instrument.district.id);
            }
            else {
                this.getBranchesByBankId(splitPayment.payment.instrument.bank.id);
            }
        };
        AmendmentController.prototype.getBranchesByBankId = function (bankId) {
            var _this = this;
            this.bankService.getBranchList(bankId).then(function (branches) {
                _this.branchList = branches;
                _this.setBranch();
            });
        };
        AmendmentController.prototype.setBranch = function () {
            var that = this;
            var result = this.branchList.filter(function (obj) {
                return obj.id === that.selectedPayment.instrumentBranch;
            });
            if (result.length > 0) {
                this.instrument.branch = result[0];
            }
        };
        AmendmentController.prototype.getBranchesByBankAndDistrictId = function (bankId, districtId) {
            var _this = this;
            this.bankService.getBranchListByDistrict(bankId, districtId).then(function (branchList) {
                _this.branchList = branchList;
            });
        };
        AmendmentController.prototype.setSelected = function (type) {
            if (type == "split")
                this.splitInfo.secondLeg.instrument.branch = null;
            else
                this.instrument.branch = null;
            if (type == "split") {
                if (this.instrument.bank != undefined) {
                    this.selectedBank = this.instrument.bank.id;
                }
                if (this.instrument.district != null) {
                    this.selectedDistrict = this.instrument.district.id;
                }
            }
            else {
                if (this.instrument.bank != null) {
                    this.selectedBank = this.instrument.bank.id;
                }
                if (this.instrument.district != null) {
                    this.selectedDistrict = this.instrument.district.id;
                }
            }
        };
        AmendmentController.prototype.saveChanges = function () {
            var _this = this;
            console.log("Updating payment information");
            this.postData = { "paymentMethod": 1, "instrument": null };
            if (this.instrument.paymentMethod != 1) {
                this.postData.instrument = this.instrument;
                this.postData.paymentMethod = this.instrument.paymentMethod;
                this.postData.instrument.date = $("#date_day").val() + "-" + $("#date_month").val() + "-" + $("#date_year").val();
            }
            console.log("Post Data -");
            console.log(console.log(this.postData));
            this.paymentAmendmentService.updatePaymentInformation(this.selectedPayment.id, this.postData).then(function (response) {
                _this.notify.success("Saved Successfully");
                _this.getPaymentInformation(_this.studentId);
            });
        };
        AmendmentController.prototype.back = function () {
            this.isReadOnly = true;
        };
        AmendmentController.prototype.splitPay = function () {
            console.log("User clicked on split payment button");
            this.isSplitPayment = true;
            $('#modal-split-paymentMethod').modal('hide');
            $('#modal-amendment-split').modal('show');
            this.adjustWith = {};
            var that = this;
            setTimeout(function () {
                that.loadDistricts();
                $('.selectpicker').selectpicker({
                    iconBase: 'fa',
                    tickIcon: 'fa-check'
                });
            }, 500);
        };
        AmendmentController.prototype.splitPayment = function () {
            console.group("Split payment information");
            console.log($("#breakdownMultipleValue").val());
            var newPayment = angular.copy(this.selectedPayment);
            newPayment.instrument = {};
            newPayment.id = null;
            var detailedStudentPayments = [];
            var totalAmount = 0;
            var selectedPayments = angular.copy(this.selectedPaymentOfDetailedPayments);
            selectedPayments.forEach(function (s) {
                totalAmount += s.amount;
                detailedStudentPayments.push(s);
            });
            console.group("Split Payment");
            console.log(detailedStudentPayments);
            console.groupEnd();
            this.selectedPaymentOfDetailedPayments = [];
            this.detailedPaymentsOfSelectedPayment.forEach(function (d) { return d.ticked = false; });
            console.group("Split Payment");
            var splittedPayment = {};
            splittedPayment.payment = newPayment;
            splittedPayment.detailedStudentPayments = detailedStudentPayments;
            splittedPayment.payment.amount = totalAmount;
            if (this.splittedPayments == undefined) {
                this.splittedPayments = [];
                newPayment.serial = 1;
                this.splittedPayments.push(splittedPayment);
            }
            else {
                this.splittedPayments.push(splittedPayment);
                this.serializeSplittedPaymentsAndUpdateTotalAmount();
            }
            console.log(this.splittedPayments);
            console.groupEnd();
        };
        AmendmentController.prototype.adjustExcessPayment = function () {
            var _this = this;
            console.group("Split payment information");
            console.log($("#breakdownExcessValue").val());
            var newPayment = angular.copy(this.selectedPayment);
            newPayment.instrument = {};
            newPayment.id = null;
            var detailedStudentPayments = [];
            var totalAmount = 0;
            $("#breakdownExcessValue").val().forEach(function (v) {
                var detailedStudentPayment = {}; // = this.feeCategoryMapDetailedStudentPayment[v];
                var detailed = angular.copy(_this.feeCategoryMapDetailedStudentPayment[v]);
                detailed.transactionId = null;
                detailed.id = null;
                totalAmount += detailed.amount;
                detailedStudentPayments.push(detailed);
            });
            $('#breakdownExcessValue').val('').trigger('change');
            var splittedPayment = {};
            splittedPayment.payment = newPayment;
            splittedPayment.detailedStudentPayments = detailedStudentPayments;
            splittedPayment.payment.amount = totalAmount;
            if (this.splittedPayments == undefined) {
                this.splittedPayments = [];
                newPayment.serial = 1;
                this.splittedPayments.push(splittedPayment);
            }
            else {
                this.splittedPayments.push(splittedPayment);
                this.serializeSplittedPaymentsAndUpdateTotalAmount();
            }
            console.groupEnd();
        };
        AmendmentController.prototype.splitPaymentMethodChanged = function (splitPayment) {
            console.log("##########");
            this.splitInfo = {};
            this.instrument = {};
            this.instrument.paymentMethod = splitPayment.payment.paymentMethod;
        };
        AmendmentController.prototype.serializeSplittedPaymentsAndUpdateTotalAmount = function () {
            var _this = this;
            var i = 0;
            this.splittedTotalAmount = 0;
            this.splittedPayments.forEach(function (p) {
                i += 1;
                p.payment.serial = i;
                _this.splittedTotalAmount += p.payment.amount;
            });
        };
        AmendmentController.prototype.onSplitAmountChange = function () {
            var totalAmount = 0;
            this.splittedPayments.forEach(function (s) {
                var detailedTotalAmount = 0;
                s.detailedStudentPayments.forEach(function (d) {
                    detailedTotalAmount += +d.amount;
                });
                s.payment.amount = detailedTotalAmount;
                totalAmount += +s.payment.amount;
            });
            this.splittedTotalAmount = totalAmount;
        };
        AmendmentController.prototype.preProcessData = function () {
            var defer = this.$q.defer();
            this.splittedPayments.forEach(function (s) {
                console.log("###########");
                console.log(s);
                if (s.payment.paymentMethod == 2 || s.payment.paymentMethod == 5) {
                    s.payment.instrumentBank = s.payment.instrument.bank.id;
                    s.payment.instrumentBranch = s.payment.instrument.branch.id;
                    s.payment.instrumentDate = s.payment.instrument.day.length == 0 ? ('0' + s.payment.instrument.day) : s.payment.instrument.day + '-' + s.payment.instrument.month + '-' + s.payment.instrument.year;
                }
                var totalAmount = 0;
                s.detailedStudentPayments.forEach(function (p) {
                    totalAmount += +p.amount;
                });
                s.payment.amount = totalAmount;
            });
            defer.resolve(this.splittedPayments);
            return defer.promise;
        };
        AmendmentController.prototype.saveSplitInfo = function () {
            var _this = this;
            console.log("Saving splitted information -");
            var amendmentResponse = {};
            amendmentResponse.comment = this.comment;
            amendmentResponse.splitPayments = this.splittedPayments;
            this.preProcessData().then(function (d) {
                _this.paymentAmendmentService.splitPaymentInformation(amendmentResponse).then(function (response) {
                    if (response != "error")
                        _this.notify.success("Successfully saved splitted information");
                    $('#modal-amendment-split').modal('hide');
                    _this.$location.path('paymentAmendment').search('studentId', _this.studentId);
                    _this.getPaymentInformation(_this.studentId);
                    _this.splittedPayments = [];
                });
            });
        };
        AmendmentController.prototype.saveExcessInfo = function () {
            var _this = this;
            console.log("Saving splitted information -");
            this.preProcessData().then(function (d) {
                _this.paymentAmendmentService.splitPaymentInformation(_this.splittedPayments).then(function (response) {
                    if (response != "error")
                        _this.notify.success("Successfully saved excess information");
                    $('#modal-amendment-excess').modal('hide');
                    _this.$location.path('paymentAmendment').search('studentId', _this.studentId);
                    _this.getPaymentInformation(_this.studentId);
                    _this.splittedPayments = [];
                });
            });
        };
        AmendmentController.prototype.excessPay = function () {
            console.log("User clicked on split payment button");
            this.isSplitPayment = true;
            $('#modal-split-paymentMethod').modal('hide');
            $('#modal-amendment-excess').modal('show');
            this.adjustWith = {};
            var that = this;
            setTimeout(function () {
                that.loadDistricts();
                $('.selectpicker').selectpicker({
                    iconBase: 'fa',
                    tickIcon: 'fa-check'
                });
            }, 500);
            /*      this.isSplitPayment = false;
                  $('#modal-split-paymentMethod').modal('hide');
                  $('#modal-amendment-excess').modal('show');
            
                  setTimeout(function(){
                    $('.selectpicker').selectpicker({
                      iconBase: 'fa',
                      tickIcon: 'fa-check'
                    });}, 500);*/
        };
        AmendmentController.prototype.breakdownAdjustment = function () {
            console.log("@@@ ...." + $("#breakdownMultipleValue").val());
            var that = this;
            this.adjustmentText = "";
            $("#breakdown option:selected").each(function () {
                that.adjustmentText += this.text + ", ";
            });
            if (this.adjustmentText.length > 0)
                this.adjustmentText = this.adjustmentText.substr(0, this.adjustmentText.length - 2);
            console.log(this.adjustmentText);
        };
        AmendmentController.prototype.downloadRegularDepositSlip = function (transactionId) {
            this.feeReportService.receipt(transactionId);
        };
        AmendmentController.prototype.downloadAdmissionDepositSlip = function (transactionId) {
            this.feeReportService.admissionFeeReceipt(transactionId);
        };
        AmendmentController.$inject = [
            '$scope',
            'paymentAmendmentService',
            '$q',
            'notify',
            'studentService',
            'PaymentService',
            'commonBankService',
            'districtService',
            'appConstants',
            '$location',
            'DetailedStudentPaymentService',
            '$timeout',
            'semesterService',
            'admissionStudentService',
            'AdmissionPaymentService',
            'DetailAdmissionPaymentService',
            'AdmissionInstallmentService',
            'FeeReportService'
        ];
        return AmendmentController;
    }());
    ums.UMS.controller("AmendmentController", AmendmentController);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var DetailAdmissionPaymentService = (function () {
        function DetailAdmissionPaymentService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
        }
        DetailAdmissionPaymentService.prototype.getDetailedStudentPaymentByTransactionId = function (transactionId) {
            var defer = this.$q.defer();
            this.httpClient.get("detail-admission-payment/transactionId/" + transactionId, ums.HttpClient.MIME_TYPE_JSON, function (response) { return defer.resolve(response); });
            return defer.promise;
        };
        DetailAdmissionPaymentService.prototype.getDetailedStudentPaymentByTransactionIdList = function (transactionIdList) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.post("detail-admission-payment/transactionIdList", transactionIdList, ums.HttpClient.MIME_TYPE_JSON)
                .success(function (response) { return defer.resolve(response); })
                .error(function (response) {
                _this.notify.error("Error in fetching admission payment details with transaction id list");
                defer.resolve(undefined);
            });
            return defer.promise;
        };
        DetailAdmissionPaymentService.$inject = ['$q', 'HttpClient', 'notify'];
        return DetailAdmissionPaymentService;
    }());
    ums.DetailAdmissionPaymentService = DetailAdmissionPaymentService;
    ums.UMS.service("DetailAdmissionPaymentService", DetailAdmissionPaymentService);
})(ums || (ums = {}));
var ums;
(function (ums) {
    var AdmissionInstallmentService = (function () {
        function AdmissionInstallmentService($q, httpClient, notify) {
            this.$q = $q;
            this.httpClient = httpClient;
            this.notify = notify;
            this.url = "academic/admission-installment";
        }
        AdmissionInstallmentService.prototype.getRelatedInstallments = function (transactionId) {
            var _this = this;
            var defer = this.$q.defer();
            this.httpClient.get(this.url + "/related-installments/transaction-id/" + transactionId, ums.HttpClient.MIME_TYPE_JSON, function (response) {
                defer.resolve(response);
            }, function (response) { return _this.notify.error("Error in fetching admission installment information"); });
            return defer.promise;
        };
        AdmissionInstallmentService.$inject = ['$q', 'HttpClient', 'notify'];
        return AdmissionInstallmentService;
    }());
    ums.AdmissionInstallmentService = AdmissionInstallmentService;
    ums.UMS.service("AdmissionInstallmentService", AdmissionInstallmentService);
})(ums || (ums = {}));
/// <reference path='../../../../ums-web-core/src/main/ts/lib/angular.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/angular-route.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/jquery.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/jquery.validate.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/jqueryui.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/jquery.slimScroll.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/jquery.notific8.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/jquery.notify.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/select2.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/bootstrap.selectpicker.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/zabuto_calendar.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/bootstrap-switch.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/uri.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/angular-cookies.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/jquery.jqGrid.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/angular-ui-sortable.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/moment.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/jquery.dragNdrop.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/jquery.tab.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/bootstrap.modal.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/handsontable.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/wysihtml5.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/bootstrap.datepicker.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/AccountingLib.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/angular-sanitize.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/root.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/constants.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/Utils.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/BaseUri.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/Notify.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/HttpClient.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/FileUpload.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/AdmissionStudentService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/AdditionalRolePermissionsService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/SemesterService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/RoleService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/UserService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/CookieService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/Settings.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/token.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/refresh.token.service.ts'/>
/// <reference path='./service/leaveManagementService/LeaveApplicationService.ts'/>
/// <reference path='./service/leaveManagementService/LeaveApplicationStatusService.ts'/>
/// <reference path='./service/leaveManagementService/LeaveTypeService.ts'/>
/// <reference path='./service/SadminAccessRuleService.ts'/>
/// <reference path='./service/holidayService/HolidayTypeService.ts'/>
/// <reference path='./service/holidayService/HolidaysService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/defaulter.student.service.ts'/>
/// <reference path='./service/DegreeAwardService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/EmployeeService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/CountryService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/DivisionService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/DistrictService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/ThanaService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/DesignationService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/DepartmentService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/AreaOfInterestService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/AcademicDegreeService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/CommonBankService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/department.designation.role.map.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/ams/AmsAttendanceInfo.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/ams/BiometricAttendanceReport.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/ams/DayWiseReport.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/ams/AmsAttendanceInfoService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/AppController.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/MainController.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/StudentNotice.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/Faq.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/ChangePassword.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/Logout.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/UserGuide.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/mailbox/MailInbox.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/mailbox/MailCompose.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/mailbox/MailView.ts'/>
/// <reference path='./controller/leaveManagement/LeaveApplicationManagement.ts'/>
/// <reference path='./controller/leaveManagement/LeaveApplicationController.ts'/>
/// <reference path='./controller/leaveManagement/EmployeeLeaveApplicationController.ts'/>
/// <reference path='./controller/leaveManagement/LeaveApplicationApproval.ts'/>
/// <reference path='./controller/degree-award/DegreeAward.ts'/>
/// <reference path='./controller/holidays/PublicHolidays.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/FlushCache.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/LeftMenu.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/DisableOperation.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/Validate.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/ProgramSelector.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/FileModel.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/Image.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/UITab.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/MainNavigation.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/BindHtml.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/TablePaginatorWrapper.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/AutoComplete.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/FileInput.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/EmployeeSearchDir.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/DatePicker.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/DateTimePicker.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/UiDatePicker.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/general.tab.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/admin/bank.http.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/admin/bank.resource.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/admin/bank.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/admin/bank.model.converters.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/ChangeRequestService.ts'/>
/// <reference path='controller/student/profileChangeRequest.ts'/>
/// <reference path='controller/student/ChangeRequestPanel.ts'/>
/// <reference path='controller/student/MultipleChangeRequest.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/Spinner.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/ProfilePicture.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/ProfilePictureOthers.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/Grid.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/SelectPicker.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/ConvertToNumber.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/Modal.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/Notification.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/directive/ConfirmationDIalog.ts'/>
/// <reference path='./directive/leaveManagement/LmsAppDir.ts'/>
/// <reference path='./directive/leaveManagement/LmsRemainingLeaveDir.ts'/>
/// <reference path='./directive/leaveManagement/LmsPendingLeaveDir.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/interceptor/Unauthorized.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/interceptor/ValidationExceptions.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/interceptor/ServerExceptions.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/filter/TrustAsHtml.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/ChangePasswordModel.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/User.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/AdditionalRolePermissions.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/Employee.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/Teacher.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/AdmissionStudent.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/bank.models.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/Semester.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/Role.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/LoggedInUser.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/AttachmentSettingModel.ts'/>
/// <reference path='./model/leaveManagement/LmsApplication.ts'/>
/// <reference path='./model/leaveManagement/LmsApplicationStatus.ts'/>
/// <reference path='./model/leaveManagement/LmsType.ts'/>
/// <reference path='./model/leaveManagement/RemainingLmsLeave.ts'/>
/// <reference path='./model/holidays/HolidayType.ts'/>
/// <reference path='./model/holidays/Holidays.ts'/>
/// <reference path='./model/semesterEnrollmentEligibility.response.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/grid/GridConfig.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/grid/GridDecorator.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/grid/GridOptions.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/grid/InlineNavigationOptions.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/grid/InlineNavigationOptionsImpl.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/grid/JqGridApi.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/grid/JqGridApiImpl.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/util/UmsUtil.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/util/UriUtil.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/filter/filter.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/detailed.student.payment.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/payment-status/payment.status.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/admission.payment.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/filter/list.filter.directive.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/lib/ckeditor.d.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/EmployeePublication.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/ApprovePublicationService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/EmployeeProfile.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/personal/personal.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/personal/personal.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/personal/personal.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/academic/academic.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/academic/academic.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/academic/academic.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/publication/publication.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/publication/publication.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/publication/publication.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/award/award.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/award/award.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/award/award.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/training/training.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/training/training.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/training/training.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/experience/experience.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/experience/experience.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/experience/experience.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/additional/additional.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/additional/additional.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/additional/additional.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/service/service.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/service/service.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/ems/profile-management/service/service.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/library/LibrarySearch.ts' />
/// <reference path='../../../../ums-library-web/src/main/ts/types/Interfaces.ts'/>
/// <reference path='../../../../ums-registrar-web/src/main/ts/ems/search/employee.search.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/employee.search.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/AttachmentSettingService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/resolution/resolution.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/resolution/agenda.resolution.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/resolution/resolution.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/schedule/schedule.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/schedule/schedule.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/schedule/schedule.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/invitation/invite.member.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/invitation/invite.member.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/invitation/invite.member.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/invitation/guest.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/minutes/minutes.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/minutes/minutes.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/committee/committees.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/committee/committees.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/committee/committees.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/member/members.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/member/members.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/member/members.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/referencebook/reference.book.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/referencebook/reference.book.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/referencebook/reference.book.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/membercreaterule/member.create.rule.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/membercreaterule/member.create.rule.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/membercreaterule/member.create.rule.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/duties/duties.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/duties/duties.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/duties/duties.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/employee.search.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/committee.organizer.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/committee.organizer.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/cms/committee.organizer.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/agenda/agenda.hold.history.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/agenda/agenda.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/mms/agenda/agenda.controller.ts'/>
/// <reference path='ums.ts'/>
/// <reference path='data.ts'/>
/// <reference path='service/ExamRoutineService.ts'/>
/// <reference path='service/SeatPlanService.ts'/>
/// <reference path='service/UgRegistrationResultService.ts'/>
/// <reference path='service/CommonService.ts'/>
/// <reference path='service/FacultyService.ts'/>
/// <reference path='controller/routine/ClassRoutineService.ts'/>
/// <reference path='controller/routine/RoutineTeacherLoadService.ts'/>
/// <reference path='controller/routine/ClassRoutineSlotEditController.ts'/>
/// <reference path='controller/routine/RoutineConfigController.ts'/>
/// <reference path='controller/routine/RoutineConfigService.ts'/>
/// <reference path='service/ExamGradeService.ts'/>
/// <reference path='service/ClassRoomService.ts'/>
/// <reference path='service/AttachmentService.ts'/>
/// <reference path='service/AdmissionCancellationInfoService.ts'/>
/// <reference path='service/MigratedStudentsInfoService.ts'/>
/// <reference path='service/AdmittedStudentsInfoService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/ProgramService.ts'/>
/// <reference path='service/ProgramTypeService.ts'/>
/// <reference path='service/AdmissionTotalSeatService.ts'/>
/// <reference path='service/DepartmentSelectionDeadlineService.ts'/>
/// <reference path='service/CourseServices.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/StudentService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/PaymentAmendmentService.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/service/StudentRecordService.ts'/>
/// <reference path='service/TimeTracker.ts'/>
/// <reference path='service/TeacherService.ts'/>
/// <reference path='service/StudentWaiverService.ts'/>
/// <reference path='service/AdmissionCertificateVerificationService.ts'/>
/// <reference path='service/CourseTeacherService.ts'/>
/// <reference path='controller/student/NewStudent.ts'/>
/// <reference path='controller/semester/NewSemester.ts'/>
/// <reference path='controller/semester/SemesterInfo.ts'/>
/// <reference path='controller/semester/SemesterSyllabusMap.ts'/>
/// <reference path='controller/semester/ExamSeatPlan.ts'/>
/// <reference path='controller/semester/ExamSeatPlanRoomWiseReport.ts'/>
/// <reference path='controller/semester/ExamStudents.ts'/>
/// <reference path='controller/semester/PublishSeatPlan.ts'/>
/// <reference path='controller/semester/ModifySeatPlan.ts'/>
/// <reference path='controller/semester/SeatPlanReports.ts'/>
/// <reference path='controller/semester/SemesterConfig.ts'/>
/// <reference path='controller/course/NewCourseUg.ts'/>
/// <reference path='controller/course/NewCoursePg.ts'/>
/// <reference path='controller/common/PasswordReport.ts'/>
/// <reference path='controller/common/AssignRole.ts'/>
/// <reference path='controller/dept/TeacherAssignment.ts'/>
/// <reference path='controller/dept/CourseTeacher.ts'/>
/// <reference path='controller/dept/Examiner.ts'/>
/// <reference path='controller/dept/TeachersRoutine.ts'/>
/// <reference path='controller/dept/RoomBasedRoutine.ts'/>
/// <reference path='controller/dept/StudentsRoutine.ts'/>
/// <reference path='controller/semester-extension/semesterExtension.ts'/>
/// <reference path='controller/student-payment-slip/studentPaymentSlip.ts'/>
/// <reference path='controller/loginAs/LoginAs.ts' />
/// <reference path='controller/optCourse/optCourseOffer/optCourseOffer.ts'/>
/// <reference path='controller/optCourse/optCourseOffer/optCourseOfferService.ts'/>
/// <reference path='controller/optCourse/optCourseSelectionByStudent/optStudentCourseSelection.ts'/>
/// <reference path='controller/optCourse/optCourseSelectionByStudent/optStudentCourseSelectionService.ts'/>
/// <reference path='controller/optCourse/optShiftStudent/optShiftStudent.ts'/>
/// <reference path='controller/optCourse/optShiftStudent/optShiftStudentService.ts'/>
/// <reference path='controller/optCourse/optSection/optSection.ts'/>
/// <reference path='controller/optCourse/optSection/optSectionService.ts'/>
/// <reference path='controller/parameterSetting/parameterSettingService.ts'/>
/// <reference path='controller/parameter/parameterService.ts'/>
/// <reference path='controller/common/academic/ClassRoomInfo.ts'/>
/// <reference path='controller/common/academic/ExamRoutine.ts'/>
/// <reference path='controller/common/academic/ExamRoutineReportInfoService.ts'/>
/// <reference path='controller/common/academic/ExamRoutineStudent.ts'/>
/// <reference path='controller/dept/StudentsRoutine.ts'/>
/// <reference path='controller/dept/StudentAdviser.ts'/>
/// <reference path='controller/dept/AdvisingStudents.ts'/>
/// <reference path='controller/dept/OptionalCoursesOffer.ts'/>
/// <reference path='controller/semester/SemesterSettingParameter.ts'/>
/// <reference path='controller/semester/OptionalCourseDatelineSet.ts'/>
/// <reference path='controller/semester/TeacherEvaluationDatelineSet.ts'/>
/// <reference path='controller/routine/ClassRoutine.ts'/>
/// <reference path='controller/dept/ClassAttendance.ts'/>
/// <reference path='controller/logger/LoggerGrid.ts'/>
/// <reference path='controller/course-material/CourseMaterial.ts'/>
/// <reference path='controller/course-material/StudentCourseMaterial.ts'/>
/// <reference path='controller/grade/MarksSubmission.ts'/>
/// <reference path='controller/grade/MarksSubmissionStat.ts'/>
/// <reference path='controller/grade/GradeSubmissionDeadLine.ts'/>
/// <reference path='controller/result/ResultProcessing.ts'/>
/// <reference path='controller/result/CourseStatusList.ts'/>
/// <reference path='controller/result/ResultProcessStatusMonitor.ts'/>
/// <reference path='controller/result/StudentWiseResultProcess.ts'/>
/// <reference path='controller/admission/AdmissionMeritList.ts'/>
/// <reference path='controller/admission/AdmissionStudentReceipt.ts'/>
/// <reference path='controller/admission/AdmissionTaletalkData.ts'/>
/// <reference path='controller/admission/AdmissionStudentId.ts'/>
/// <reference path='controller/admission/AdmissionStatistics.ts'/>
/// <reference path='controller/admission/AdmissionMigrationList.ts'/>
/// <reference path='controller/admission/AdmissionCancellation.ts'/>
/// <reference path='controller/admission/AdmissionCancellationList.ts'/>
/// <reference path='controller/admission/AdmissionDepartmentSelection.ts'/>
/// <reference path='controller/admission/DepartmentSelectionDeadlineAssignment.ts'/>
/// <reference path='controller/admission/AdmissionDeadline.ts'/>
/// <reference path='controller/admission/AdmissionCertificateVerification.ts'/>
/// <reference path='controller/admission/AdmissionTotalSeatAssignment.ts'/>
/// <reference path='controller/admission/AdmissionReport.ts'/>
/// <reference path='controller/sectionAssign/sectionAssignment.ts'/>
/// <reference path='controller/cciManagement/cciApproval.ts'/>
/// <reference path='controller/cciManagement/cciReports.ts'/>
/// <reference path='controller/cciManagement/cciReportServices.ts'/>
/// <reference path='controller/application/ApplicationCarry.ts'/>
/// <reference path='controller/application/ApplicationCarryService.ts'/>
/// <reference path='controller/application/ApplicationClearanceImprovement.ts'/>
/// <reference path='controller/application/ApplicationClearanceImprovementService.ts'/>
/// <reference path='controller/tesController/headTes.ts'/>
/// <reference path='controller/transcript/DownloadTranscript.ts'/>
/// <reference path='controller/deadlineExtension/deadlineExtension.ts'/>
/// <reference path='controller/deadlineExtension/DeadlineExtensionService.ts' />
/// <reference path='controller/tesController/studentTes.ts'/>
/// <reference path='controller/tesController/teachersEvaluationReport.ts'/>
/// <reference path='controller/tesController/adminVcTes.ts'/>
/// <reference path='controller/tesController/AdminVcTesComparison.ts'/>
/// <reference path='controller/tesController/questionsAdmin.ts'/>
/// <reference path='controller/tesController/individualQuestionTesReport.ts'/>
/// <reference path='controller/tesController/facultyEngineering/DeanEngineeringTes.ts'/>
/// <reference path='controller/tesController/facultyEngineering/DeanEngineeringComparison.ts'/>
/// <reference path='controller/tesController/facultyEngineering/DeanEngineeringIndividualQuestion.ts'/>
/// <reference path='controller/tesController/facultyBusinessAndSocialScience/DeanBusinessAndSocialTes.ts'/>
/// <reference path='controller/tesController/facultyBusinessAndSocialScience/DeanBusinessAndSocialComparison.ts'/>
/// <reference path='controller/tesController/facultyBusinessAndSocialScience/DeanBusinessAndSocialIndividualQuestion.ts'/>
/// <reference path='controller/tesController/facultyArchitecture/DeanArchitectureTes.ts'/>
/// <reference path='controller/tesController/facultyArchitecture/DeanArchitectureIndividualQuestion.ts'/>
/// <reference path='controller/employeeExamAttendance/employeeExamAttendance.ts'/>
/// <reference path='controller/employeeExamAttendance/employeeExamAttendanceService.ts'/>
/// <reference path='controller/employee/DummyNewEmployeeController.ts'/>
/// <reference path='controller/employee/DummyNewEmployeeService.ts'/>
/// <reference path='controller/syllabus/FullSyllabus.ts'/>
/// <reference path='controller/syllabus/NewSyllabus.ts'/>
/// <reference path='controller/syllabus/GridSyllabus.ts'/>
/// <reference path='controller/waiver/StudentWaiverApproval.ts'/>
/// <reference path='controller/DegreeAwardDate/DegreeAwardDate.ts'/>
/// <reference path='controller/nomenclature/DownloadNomenclature.ts'/>
/// <reference path='controller/nomenclature/DownloadNomenclatureService.ts'/>
/// <reference path='controller/sectionWiseStudentInfoReport/SectionWiseStudentInfoReport.ts'/>
/// <reference path='controller/sectionWiseStudentInfoReport/SectionWiseStudentInfoReportService.ts'/>
/// <reference path='controller/advisingStudentInfoReport/AdvisingStudentInfoReport.ts'/>
/// <reference path='controller/advisingStudentInfoReport/AdvisingStudentInfoReportService.ts'/>
/// <reference path='controller/admissionInfoReport/AdmissionInfoReport.ts'/>
/// <reference path='controller/student-details-report/StudentDetailsReport.ts'/>
/// <reference path='controller/student-details-report/StudentDetailsReportService.ts'/>
/// <reference path='controller/totalRegisteredStudentsCountReport/TotalRegisteredStudentsCountReport.ts'/>
/// <reference path='controller/totalRegisteredStudentsCountReport/TotalRegisteredStudentsCountReportService.ts'/>
/// <reference path='controller/semester/SemesterEnrollment.ts'/>
/// <reference path='controller/student/AdmitCard.ts'/>
/// <reference path='controller/student/StudentProfile.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/GStudentProfile.ts'/>
/// <reference path='controller/expelled-information/ExpelledInformation.ts'/>
/// <reference path='controller/expelled-information/ExpelledInformationService.ts'/>
/// <reference path='controller/daily-exam-attendance-report/dailyExamAttendanceReport.ts'/>
/// <reference path='controller/daily-exam-attendance-report/dailyExamAttendanceReportService.ts'/>
/// <reference path='controller/absent-late-coming-info/absentLateComingInfo.ts'/>
/// <reference path='controller/absent-late-coming-info/absLateComingService.ts'/>
/// <reference path='controller/dailyExamReport/dailyExamReport.ts'/>
/// <reference path='controller/question-correction-info/questionCorrectionInfo.ts'/>
/// <reference path='controller/question-correction-info/questionCorrectionInfoService.ts'/>
/// <reference path='dummy/DummyController.ts'/>
/// <reference path='twofatest/two.fa.test.controller.ts'/>
/// <reference path='twofa/two.fa.interceptor.ts'/>
/// <reference path='twofa/two.fa.service.ts'/>
/// <reference path='twofa/two.fa.modal.controller.ts'/>
/// <reference path='certificate/certificate.service.ts'/>
/// <reference path='model/TeacherAssignmentSearchParamModel.ts'/>
/// <reference path='model/CourseTeacherSearchParamModel.ts'/>
/// <reference path='model/CourseTeacherModel.ts'/>
/// <reference path='model/Attachment.ts'/>
/// <reference path='model/ExamRoutineModel.ts'/>
/// <reference path='model/GenericModel.ts'/>
/// <reference path='model/NewStudentModel.ts'/>
/// <reference path='model/NewSyllabusModel.ts'/>
/// <reference path='model/ParameterSetting.ts'/>
/// <reference path='model/master_data/ClassRoom.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/Program.ts'/>
/// <reference path='model/master_data/Faculty.ts'/>
/// <reference path='model/master_data/Course.ts'/>
/// <reference path='model/master_data/AdmissionTotalSeat.ts'/>
/// <reference path='model/master_data/DepartmentSelectionDeadline.ts'/>
/// <reference path='model/master_data/Parameter.ts'/>
/// <reference path='model/master_data/Routine.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/model/Student.ts'/>
/// <reference path='model/master_data/Syllabus.ts'/>
/// <reference path='model/StudentRecord.ts'/>
/// <reference path='directive/ContextMenuSeatplan.ts'/>
/// <reference path='directive/CourseRegTypeLegend.ts'/>
/// <reference path='directive/EmitLastRepeaterElement.ts'/>
/// <reference path='directive/SubGroupSortable.ts'/>
/// <reference path='directive/TimeLogging.ts'/>
/// <reference path='directive/StudentPaymentInformationDir.ts'/>
/// <reference path='directive/ClassRoutineDir.ts'/>
/// <reference path='directive/RoutineSlotDir.ts'/>
/// <reference path='directive/RoutineChartDir.ts'/>
/// <reference path='directive/RoutineSlotEditDir.ts'/>
/// <reference path='directive/date.range.picker.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/student.info.service.ts'/>
/// <reference path='student-payment-information/StudentPaymentHistory.ts'/>
/// <reference path='readmission/readmission.controller.ts'/>
/// <reference path='readmission/readmission.service.ts'/>
/// <reference path='fee/semesterfee/semesterfee.response.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/fee/semesterfee/semesterfee.service.ts'/>
/// <reference path='fee/semesterfee/semesterfee.controller.ts'/>
/// <reference path='fee/semesterfee/semesterfee-previous.controller.ts'/>
/// <reference path='fee/installment/installment.setting.service.ts'/>
/// <reference path='fee/installment/installment.setting.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/payment.service.ts'/>
/// <reference path='fee/certificate/certificate.fee.controller.ts'/>
/// <reference path='fee/certificate/certificate.approval.controller.ts'/>
/// <reference path='fee/certificate/certificate.fee.service.ts'/>
/// <reference path='fee/certificate/certificate.status.service.ts'/>
/// <reference path='fee/dues/student.dues.service.ts'/>
/// <reference path='fee/dues/student.dues.controller.ts'/>
/// <reference path='fee/dues/list.dues.controller.ts'/>
/// <reference path='fee/dues/add.dues.controller.ts'/>
/// <reference path='fee/certificate/certificate.status.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/fee.category.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/fee.type.service.ts'/>
/// <reference path='fee/admission/admissionfee.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/report/report.service.ts'/>
/// <reference path='fee/payment/student.payment.history.controller.ts'/>
/// <reference path='fee/payment/payment.status.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/gradesheet/student.gradesheet.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/gradesheet/student.gradesheet.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/gradesheet/student.grdesheets.directive.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/punishment/student.punishment.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/general-info/student.generalinfo.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/profile/student.profile.controller.ts'/>
/// <reference path='./controller/semester/ViewSeatPlan.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/payment-status/payment.status.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/payment-status/payment.status.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/punishment/punishment.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/punishment/punishment.view.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/punishment/punishment.student.view.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/punishment/punishment.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/punishment/offence.penalty.map.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student/punishment/punishment.model.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/controller/StudentPaymentInformation.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/student-payment-amendment/amendment.controller.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/detail.admission.payment.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/admission.payment.service.ts'/>
/// <reference path='../../../../ums-web-core/src/main/ts/fee/admission.installment.service.ts'/>
